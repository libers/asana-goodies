// Generated by CoffeeScript 1.3.3
(function() {
  var AsanaEventListener, SubTaskView, Task, TaskView, asana_event_listener, change_subtask_catcher, change_task_catcher, display_subtask_catcher, display_subtask_event_handler, display_task_catcher, display_task_event_handler, ensure_subtasks, ensure_task, get_current_project, get_task_from_server, get_tasks_from_mutations, get_tasks_from_nodes, hide_subtask_catcher, hide_task_catcher, initials, iterate_all_nodes, log_node_list, logger_with_event, mutation_logger, mutations_catcher, render_subtask, render_task, show_picture_mutation_handler, show_task_pictures, task_from_text_input_id, tasks,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  task_from_text_input_id = function(id) {
    var match;
    match = id.match(/.*StateObjectPlaceholder-(\d+)_(\d+)/);
    if ((match != null ? match.length : void 0) > 2) {
      return match[2];
    } else {
      throw "Can't extract task id from control!";
    }
  };

  get_tasks_from_nodes = function(element_name, node_list) {
    var input, node, result, _i, _len, _ref;
    result = [];
    _ref = node_list || [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      result = result.concat((function() {
        var _j, _len1, _ref1, _results;
        _ref1 = $(node).find("" + element_name + ".task-row-text-input");
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          input = _ref1[_j];
          _results.push(task_from_text_input_id($(input).attr("id")));
        }
        return _results;
      })());
    }
    return result;
  };

  get_tasks_from_mutations = function(element_name, mutation_property_name, mutations) {
    var mutation;
    return _.flatten((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = mutations.length; _i < _len; _i++) {
        mutation = mutations[_i];
        _results.push(get_tasks_from_nodes(element_name, mutation[mutation_property_name]));
      }
      return _results;
    })(), true);
  };

  display_task_catcher = function(mutations) {
    return get_tasks_from_mutations("input", "addedNodes", mutations);
  };

  hide_task_catcher = function(mutations) {
    return get_tasks_from_mutations('input', "removedNodes", mutations);
  };

  display_subtask_catcher = function(mutations) {
    return get_tasks_from_mutations('textarea', "addedNodes", mutations);
  };

  hide_subtask_catcher = function(mutations) {
    return get_tasks_from_mutations('textarea', "removedNodes", mutations);
  };

  change_task_catcher = function(mutations) {
    var display_tasks, hide_tasks;
    display_tasks = display_task_catcher(mutations);
    hide_tasks = hide_task_catcher(mutations);
    return _.intersection(display_tasks, hide_tasks);
  };

  change_subtask_catcher = function(mutations) {
    var display_subtasks, hide_subtasks;
    display_subtasks = display_subtask_catcher(mutations);
    hide_subtasks = hide_subtask_catcher(mutations);
    return _.intersection(display_subtasks, hide_subtasks);
  };

  mutations_catcher = function(mutations) {
    return [mutations];
  };

  AsanaEventListener = (function() {

    function AsanaEventListener() {
      this.observe_handler = __bind(this.observe_handler, this);
      this.mutation_observer = new WebKitMutationObserver(this.observe_handler);
      this.event_catchers = {
        display_task: display_task_catcher,
        hide_task: hide_task_catcher,
        change_task: change_task_catcher,
        display_subtask: display_subtask_catcher,
        hide_subtask: hide_subtask_catcher,
        change_subtask: change_subtask_catcher,
        mutations: mutations_catcher
      };
      this.event_listeners = {};
    }

    AsanaEventListener.prototype.start = function() {
      return this.mutation_observer.observe(document, {
        subtree: true,
        attributes: true,
        childList: true
      });
    };

    AsanaEventListener.prototype.stop = function() {
      return this.mutation_observer.disconnect();
    };

    AsanaEventListener.prototype.check_event = function(event_name) {
      if (!(event_name in this.event_catchers)) {
        throw "Unknown event: " + event_name;
      }
      if (!(event_name in this.event_listeners)) {
        return this.event_listeners[event_name] = [];
      }
    };

    AsanaEventListener.prototype.on = function(event_name, callback) {
      this.check_event(event_name);
      return this.event_listeners[event_name].push(callback);
    };

    AsanaEventListener.prototype.off = function(event_name, callback) {
      var listener;
      this.check_event(event_name);
      return this.event_listeners[event_name] = ((function() {
        var _i, _len, _ref, _results;
        if (listener !== callback) {
          _ref = this.event_listeners[event_name];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            listener = _ref[_i];
            _results.push(listener);
          }
          return _results;
        }
      }).call(this));
    };

    AsanaEventListener.prototype.event = function(event_name, data) {
      var listener, _i, _len, _ref, _results;
      if (!(event_name in this.event_listeners)) {
        return;
      }
      _ref = this.event_listeners[event_name];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listener = _ref[_i];
        _results.push(listener(event_name, data));
      }
      return _results;
    };

    AsanaEventListener.prototype.observe_handler = function(mutations, observer) {
      var catcher, data, event_name, _ref, _results;
      _ref = this.event_catchers;
      _results = [];
      for (event_name in _ref) {
        catcher = _ref[event_name];
        _results.push((function() {
          var _i, _len, _ref1, _results1;
          _ref1 = catcher(mutations) || [];
          _results1 = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            data = _ref1[_i];
            _results1.push(this.event(event_name, data));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    return AsanaEventListener;

  })();

  initials = function(str) {
    var word;
    return ((function() {
      var _i, _len, _ref, _results;
      _ref = str.split(' ');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        word = _ref[_i];
        _results.push(word.substr(0, 1));
      }
      return _results;
    })()).join('');
  };

  get_current_project = function() {
    var match;
    match = document.URL.match(/.*app.asana.com\/0\/(\d+)\/\d+/);
    if ((match != null ? match.length : void 0) > 1) {
      return match[1];
    } else {
      throw "Can't extract project id from URL!";
    }
  };

  Task = (function(_super) {

    __extends(Task, _super);

    function Task() {
      return Task.__super__.constructor.apply(this, arguments);
    }

    Task.prototype.defaults = {
      data: {},
      subtasks: {}
    };

    Task.prototype.get_trello_url = function() {
      var match;
      match = this.get('data').notes.match(/(https:\/\/trello.com\/c\/\S+)/);
      if ((match != null ? match.length : void 0) > 1) {
        return match[1];
      }
    };

    return Task;

  })(Backbone.Model);

  TaskView = (function(_super) {

    __extends(TaskView, _super);

    function TaskView() {
      return TaskView.__super__.constructor.apply(this, arguments);
    }

    TaskView.prototype.initialize = function() {
      _.bindAll(this);
      return this.model.bind("change", this.render);
    };

    TaskView.prototype.find_task_div = function() {
      var selector;
      selector = "#center_pane input[id$=" + (this.model.get("data").id) + "]";
      return $(selector).first();
    };

    TaskView.prototype.render = function() {
      var active_assignees, assignee, div, id, parent, st, subtask_ids, subtasks, task_row_overlay, uncompleted_unassigned_subtasks_num, url, _i, _len;
      console.log("Rendering task " + (this.model.get("data").name));
      div = this.find_task_div();
      if (!div) {
        return;
      }
      parent = div.parent();
      task_row_overlay = parent.find('.task-row-overlay');
      task_row_overlay.find(".subtask").remove();
      task_row_overlay.find(".trello-icon").remove();
      if (url = this.model.get_trello_url()) {
        task_row_overlay.prepend("<div class='trello-icon'><a href='" + url + "' target='_blank'>\n<img src='https://trello.com/favicon.ico'></div></a>");
      }
      subtask_ids = (function() {
        var _i, _len, _ref, _results;
        _ref = this.model.get("subtasks");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          st = _ref[_i];
          _results.push(st.id);
        }
        return _results;
      }).call(this);
      if (subtask_ids != null ? subtask_ids.length : void 0) {
        subtasks = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = subtask_ids.length; _i < _len; _i++) {
            id = subtask_ids[_i];
            if (id in tasks) {
              _results.push(tasks[id].get('data'));
            }
          }
          return _results;
        })();
        uncompleted_unassigned_subtasks_num = ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = subtasks.length; _i < _len; _i++) {
            st = subtasks[_i];
            if (!st.completed && !st.assignee) {
              _results.push(st);
            }
          }
          return _results;
        })()).length;
        if (uncompleted_unassigned_subtasks_num) {
          task_row_overlay.prepend("<span class='subtask subtask-counter unassigned' title='Uncompleted unassigned subtasks'>\n" + uncompleted_unassigned_subtasks_num + "</span>");
        }
        active_assignees = _.without(_.uniq(_.map(subtasks, function(st) {
          if (st.assignee && !st.completed) {
            return st.assignee.name;
          } else {
            return null;
          }
        })), null);
        for (_i = 0, _len = active_assignees.length; _i < _len; _i++) {
          assignee = active_assignees[_i];
          task_row_overlay.prepend("<span class='subtask user' title='" + assignee + "'>" + (initials(assignee)) + "</span>");
        }
        task_row_overlay.prepend("<i class='subtask icon-subtasks'></i>");
        task_row_overlay.find(".subtask").tooltip({
          delay: {
            show: 200,
            hide: 100
          }
        });
        return this;
      }
    };

    return TaskView;

  })(Backbone.View);

  SubTaskView = (function(_super) {

    __extends(SubTaskView, _super);

    function SubTaskView() {
      return SubTaskView.__super__.constructor.apply(this, arguments);
    }

    SubTaskView.prototype.initialize = function() {
      _.bindAll(this);
      return this.model.bind("change", this.render);
    };

    SubTaskView.prototype.find_task_div = function() {
      var selector;
      selector = "#right_pane textarea[id$=" + (this.model.get("data").id) + "]";
      return $(selector).first();
    };

    SubTaskView.prototype.render = function() {
      var div, parent, task_row_overlay, url;
      console.log("Rendering subtask " + (this.model.get("data").name));
      div = this.find_task_div();
      if (!div) {
        return;
      }
      parent = div.parent();
      task_row_overlay = parent.find('.task-row-overlay');
      if (url = this.model.get_trello_url()) {
        return task_row_overlay.prepend("<div class='trello-icon'><a href='" + url + "' target='_blank'>\n<img src='http://trello.com/favicon.ico'></div></a>");
      }
    };

    return SubTaskView;

  })(Backbone.View);

  asana_event_listener = new AsanaEventListener();

  logger_with_event = function(event, data) {
    console.log("Event fired: " + event);
    return console.log(data);
  };

  log_node_list = function(nodelist) {
    var node, _i, _len, _ref, _results;
    _ref = nodelist || [];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      node = _ref[_i];
      _results.push(console.log(node.outerHTML));
    }
    return _results;
  };

  mutation_logger = function(event, mutation) {
    console.log(mutation);
    if (mutation.addedNodes) {
      console.log("Added nodes");
      log_node_list(mutation.addedNodes);
    }
    if (mutation.removedNodes) {
      console.log("Removed nodes");
      return log_node_list(mutation.removedNodes);
    }
  };

  tasks = {};

  render_task = function(task) {
    var view;
    view = new TaskView({
      model: task
    });
    return view.render();
  };

  ensure_subtasks = function(task, callback) {
    var requests, subtask_rec, subtasks, _i, _len, _results;
    subtasks = task.get("subtasks");
    if (!(subtasks != null ? subtasks.length : void 0)) {
      callback();
    }
    requests = subtasks.length;
    _results = [];
    for (_i = 0, _len = subtasks.length; _i < _len; _i++) {
      subtask_rec = subtasks[_i];
      _results.push(ensure_task(subtask_rec.id, function(subtask) {
        if (!--requests) {
          return callback();
        }
      }));
    }
    return _results;
  };

  get_task_from_server = function(task_id, callback) {
    return Asana.task(task_id, function(task_obj, error) {
      var task;
      if (error) {
        console.log(error);
        return;
      }
      task = new Task({
        data: task_obj.data
      });
      return Asana.subtasks(task_id, function(subtasks_obj, error) {
        if (error) {
          console.log(error);
          return;
        }
        task.set("subtasks", subtasks_obj.data);
        return ensure_subtasks(task, function() {
          tasks[task_id] = task;
          return callback(task);
        });
      });
    });
  };

  ensure_task = function(task_id, callback) {
    var task;
    if (task_id in tasks) {
      task = tasks[task_id];
      return callback(task);
    } else {
      return get_task_from_server(task_id, callback);
    }
  };

  display_task_event_handler = function(event, task_id) {
    console.log("Display task event handler task_id=" + task_id);
    return ensure_task(task_id, render_task);
  };

  render_subtask = function(task) {
    var view;
    view = new SubTaskView({
      model: task
    });
    return view.render();
  };

  display_subtask_event_handler = function(event, task_id) {
    return ensure_task(task_id, render_subtask);
  };

  iterate_all_nodes = function(record, callback) {
    var node, _i, _j, _len, _len1, _ref, _ref1, _results;
    if (record != null ? record.addedNodes : void 0) {
      _ref = record.addedNodes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        node = _ref[_i];
        callback(node);
      }
    }
    if (record != null ? record.removedNodes : void 0) {
      _ref1 = record.removedNodes;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        node = _ref1[_j];
        _results.push(callback(node));
      }
      return _results;
    }
  };

  asana_event_listener.on("display_task", display_task_event_handler);

  show_task_pictures = function(root) {
    return jQuery(root).find(".comments .attachment-link-to-file").each(function() {
      var $this, URL, file_name, outerHtml, time, time_el;
      $this = $(this);
      URL = $this.attr("href");
      file_name = $this.text();
      if (!$this.data("image_expanded") && /(\.png|\.jpg|\.gif)$/.test(file_name)) {
        $this.data("image_expanded", "true");
        $this.html("<img style=\"max-width:100%;\" src=\"" + URL + "\">");
        outerHtml = $this.clone().wrap("<p>").parent().html();
        time_el = $this.parent().parent().parent().parent().find("div.feed-story-timestamp span");
        time = time_el.text();
        time_el.remove();
        return $this.parent().html("attached. " + time + outerHtml);
      }
    });
  };

  show_picture_mutation_handler = function(event, mutations) {
    var added_node, mutation_record, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = mutations.length; _i < _len; _i++) {
      mutation_record = mutations[_i];
      if (mutation_record.addedNodes && $(mutation_record.target).parents('#right_pane').length) {
        _results.push((function() {
          var _j, _len1, _ref, _results1;
          _ref = mutation_record.addedNodes;
          _results1 = [];
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            added_node = _ref[_j];
            _results1.push(show_task_pictures(added_node));
          }
          return _results1;
        })());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  asana_event_listener.on("mutations", show_picture_mutation_handler);

  asana_event_listener.start();

}).call(this);
