/**
 * Created with JetBrains WebStorm.
 * User: mturilin
 * Date: 10/23/12
 * Time: 12:00 AM
 * To change this template use File | Settings | File Templates.
 */
__FILE__ = "luna/browser/bundle_timing_prolog.js";
page_load_globals.times.code_load_started = (new Date).getTime();
__FILE__ = "luna/common/fiber.js";
if(!("Fiber" in globals)) {
    Fiber = function() {
        ufu("Fibers are not supported by this host.")
    }, Fiber.main = {}, Fiber.current = Fiber.main, Fiber.allRunningFibers = function() {
        return[Fiber.main]
    }
}
Fiber.addOnFiberCreatedFunc = function(a) {
    a();
    Fiber._onFiberCreatedFunc_array.push(a)
};
Fiber.onFiberCreated = function() {
    Fiber._onFiberCreatedFunc_array.forEach(function(a) {
        a()
    })
};
Fiber._onFiberCreatedFunc_array = [];
__FILE__ = "luna/common/lib/prelude.js";
MochiKit = {__export__:!1};
__FILE__ = "3rdparty/mochikit/MochiKit/Base.js";
typeof MochiKit == "undefined" && (MochiKit = {});
if(typeof MochiKit.__export__ == "undefined") {
    MochiKit.__export__ = !0
}
if(typeof MochiKit.Base == "undefined") {
    MochiKit.Base = {}
}
MochiKit.Base._module = function(a, b, c) {
    a in MochiKit || (MochiKit[a] = {});
    var d = MochiKit[a];
    d.NAME = "MochiKit." + a;
    d.VERSION = b;
    d.__repr__ = function() {
        return"[" + this.NAME + " " + this.VERSION + "]"
    };
    d.toString = function() {
        return this.__repr__()
    };
    for(b = 0;b < c.length;b++) {
        if(!(c[b] in MochiKit)) {
            throw"MochiKit." + a + " depends on MochiKit." + c[b] + "!";
        }
    }
};
MochiKit.Base._module("Base", "1.5", []);
MochiKit.Base.update = function(a) {
    if(a === null || a === void 0) {
        a = {}
    }
    for(var b = 1;b < arguments.length;b++) {
        var c = arguments[b];
        if(typeof c != "undefined" && c !== null) {
            for(var d in c) {
                a[d] = c[d]
            }
        }
    }
    return a
};
MochiKit.Base.update(MochiKit.Base, {camelize:function(a) {
    for(var a = a.split("-"), b = a[0], c = 1;c < a.length;c++) {
        b += a[c].charAt(0).toUpperCase() + a[c].substring(1)
    }
    return b
}, counter:function(a) {
    arguments.length === 0 && (a = 1);
    return function() {
        return a++
    }
}, clone:function(a) {
    var b = arguments.callee;
    if(arguments.length == 1) {
        return b.prototype = a, new b
    }
}, _flattenArray:function(a, b) {
    for(var c = 0;c < b.length;c++) {
        var d = b[c];
        d instanceof Array ? arguments.callee(a, d) : a.push(d)
    }
    return a
}, flattenArray:function(a) {
    return MochiKit.Base._flattenArray([], a)
}, flattenArguments:function() {
    for(var a = [], b = MochiKit.Base.extend(null, arguments);b.length;) {
        var c = b.shift();
        if(c && typeof c == "object" && typeof c.length == "number") {
            for(var d = c.length - 1;d >= 0;d--) {
                b.unshift(c[d])
            }
        }else {
            a.push(c)
        }
    }
    return a
}, extend:function(a, b, c) {
    c || (c = 0);
    if(b) {
        var d = b.length;
        if(typeof d != "number") {
            if(typeof MochiKit.Iter != "undefined") {
                b = MochiKit.Iter.list(b), d = b.length
            }else {
                throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
            }
        }
        for(a || (a = []);c < d;c++) {
            a.push(b[c])
        }
    }
    return a
}, updatetree:function(a) {
    if(a === null || a === void 0) {
        a = {}
    }
    for(var b = 1;b < arguments.length;b++) {
        var c = arguments[b];
        if(typeof c != "undefined" && c !== null) {
            for(var d in c) {
                var e = c[d];
                typeof a[d] == "object" && typeof e == "object" ? arguments.callee(a[d], e) : a[d] = e
            }
        }
    }
    return a
}, setdefault:function(a) {
    if(a === null || a === void 0) {
        a = {}
    }
    for(var b = 1;b < arguments.length;b++) {
        var c = arguments[b], d;
        for(d in c) {
            d in a || (a[d] = c[d])
        }
    }
    return a
}, keys:function(a) {
    var b = [], c;
    for(c in a) {
        b.push(c)
    }
    return b
}, values:function(a) {
    var b = [], c;
    for(c in a) {
        b.push(a[c])
    }
    return b
}, items:function(a) {
    var b = [], c;
    for(c in a) {
        var d;
        try {
            d = a[c]
        }catch(e) {
            continue
        }
        b.push([c, d])
    }
    return b
}, _newNamedError:function(a, b, c) {
    c.prototype = new MochiKit.Base.NamedError(a.NAME + "." + b);
    a[b] = c
}, operator:{truth:function(a) {
    return!!a
}, lognot:function(a) {
    return!a
}, identity:function(a) {
    return a
}, not:function(a) {
    return~a
}, neg:function(a) {
    return-a
}, add:function(a, b) {
    return a + b
}, sub:function(a, b) {
    return a - b
}, div:function(a, b) {
    return a / b
}, mod:function(a, b) {
    return a % b
}, mul:function(a, b) {
    return a * b
}, and:function(a, b) {
    return a & b
}, or:function(a, b) {
    return a | b
}, xor:function(a, b) {
    return a ^ b
}, lshift:function(a, b) {
    return a << b
}, rshift:function(a, b) {
    return a >> b
}, zrshift:function(a, b) {
    return a >>> b
}, eq:function(a, b) {
    return a == b
}, ne:function(a, b) {
    return a != b
}, gt:function(a, b) {
    return a > b
}, ge:function(a, b) {
    return a >= b
}, lt:function(a, b) {
    return a < b
}, le:function(a, b) {
    return a <= b
}, seq:function(a, b) {
    return a === b
}, sne:function(a, b) {
    return a !== b
}, ceq:function(a, b) {
    return MochiKit.Base.compare(a, b) === 0
}, cne:function(a, b) {
    return MochiKit.Base.compare(a, b) !== 0
}, cgt:function(a, b) {
    return MochiKit.Base.compare(a, b) == 1
}, cge:function(a, b) {
    return MochiKit.Base.compare(a, b) != -1
}, clt:function(a, b) {
    return MochiKit.Base.compare(a, b) == -1
}, cle:function(a, b) {
    return MochiKit.Base.compare(a, b) != 1
}, logand:function(a, b) {
    return a && b
}, logor:function(a, b) {
    return a || b
}, contains:function(a, b) {
    return b in a
}}, forwardCall:function(a) {
    return function() {
        return this[a].apply(this, arguments)
    }
}, itemgetter:function(a) {
    return function(b) {
        return b[a]
    }
}, bool:function(a) {
    return typeof a === "boolean" || a instanceof Boolean ? a.valueOf() : typeof a === "string" || a instanceof String ? a.length > 0 && a != "false" && a != "null" && a != "undefined" && a != "0" : typeof a === "number" || a instanceof Number ? !isNaN(a) && a != 0 : a != null && typeof a.length === "number" ? a.length !== 0 : a != null
}, typeMatcher:function() {
    for(var a = {}, b = 0;b < arguments.length;b++) {
        var c = arguments[b];
        a[c] = c
    }
    return function() {
        for(var b = 0;b < arguments.length;b++) {
            if(!(typeof arguments[b] in a)) {
                return!1
            }
        }
        return!0
    }
}, isNull:function() {
    for(var a = 0;a < arguments.length;a++) {
        if(arguments[a] !== null) {
            return!1
        }
    }
    return!0
}, isUndefinedOrNull:function() {
    for(var a = 0;a < arguments.length;a++) {
        var b = arguments[a];
        if(!(typeof b == "undefined" || b === null)) {
            return!1
        }
    }
    return!0
}, isEmpty:function() {
    return!MochiKit.Base.isNotEmpty.apply(this, arguments)
}, isNotEmpty:function() {
    for(var a = 0;a < arguments.length;a++) {
        var b = arguments[a];
        if(!b || !b.length) {
            return!1
        }
    }
    return!0
}, isArrayLike:function() {
    for(var a = 0;a < arguments.length;a++) {
        var b = arguments[a], c = typeof b;
        if(c != "object" && !(c == "function" && typeof b.item == "function") || b === null || typeof b.length != "number" || b.nodeType === 3 || b.nodeType === 4) {
            return!1
        }
    }
    return!0
}, isDateLike:function() {
    for(var a = 0;a < arguments.length;a++) {
        var b = arguments[a];
        if(typeof b != "object" || b === null || typeof b.getTime != "function") {
            return!1
        }
    }
    return!0
}, xmap:function(a) {
    if(a === null) {
        return MochiKit.Base.extend(null, arguments, 1)
    }
    for(var b = [], c = 1;c < arguments.length;c++) {
        b.push(a(arguments[c]))
    }
    return b
}, map:function(a, b) {
    var c = MochiKit.Base, d = MochiKit.Iter, e = c.isArrayLike;
    if(arguments.length <= 2) {
        if(!e(b)) {
            if(d) {
                if(b = d.list(b), a === null) {
                    return b
                }
            }else {
                throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
            }
        }
        if(a === null) {
            return c.extend(null, b)
        }
        d = [];
        for(c = 0;c < b.length;c++) {
            d.push(a(b[c]))
        }
    }else {
        a === null && (a = Array);
        for(var f = null, c = 1;c < arguments.length;c++) {
            if(!e(arguments[c])) {
                if(d) {
                    return d.list(d.imap.apply(null, arguments))
                }else {
                    throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
                }
            }
            var g = arguments[c].length;
            if(f === null || f > g) {
                f = g
            }
        }
        d = [];
        for(c = 0;c < f;c++) {
            e = [];
            for(g = 1;g < arguments.length;g++) {
                e.push(arguments[g][c])
            }
            d.push(a.apply(this, e))
        }
    }
    return d
}, xfilter:function(a) {
    var b = [];
    if(a === null) {
        a = MochiKit.Base.operator.truth
    }
    for(var c = 1;c < arguments.length;c++) {
        var d = arguments[c];
        a(d) && b.push(d)
    }
    return b
}, filter:function(a, b, c) {
    var d = [], e = MochiKit.Base;
    if(!e.isArrayLike(b)) {
        if(MochiKit.Iter) {
            b = MochiKit.Iter.list(b)
        }else {
            throw new TypeError("Argument not an array-like and MochiKit.Iter not present");
        }
    }
    if(a === null) {
        a = e.operator.truth
    }
    if(typeof Array.prototype.filter == "function") {
        return Array.prototype.filter.call(b, a, c)
    }else {
        if(typeof c == "undefined" || c === null) {
            for(e = 0;e < b.length;e++) {
                var f = b[e];
                a(f) && d.push(f)
            }
        }else {
            for(e = 0;e < b.length;e++) {
                f = b[e], a.call(c, f) && d.push(f)
            }
        }
    }
    return d
}, _wrapDumbFunction:function(a) {
    return function() {
        switch(arguments.length) {
            case 0:
                return a();
            case 1:
                return a(arguments[0]);
            case 2:
                return a(arguments[0], arguments[1]);
            case 3:
                return a(arguments[0], arguments[1], arguments[2])
        }
        for(var b = [], c = 0;c < arguments.length;c++) {
            b.push("arguments[" + c + "]")
        }
        return eval("(func(" + b.join(",") + "))")
    }
}, methodcaller:function(a) {
    var b = MochiKit.Base.extend(null, arguments, 1);
    return typeof a == "function" ? function(c) {
        return a.apply(c, b)
    } : function(c) {
        return c[a].apply(c, b)
    }
}, method:function(a, b) {
    var c = MochiKit.Base;
    return c.bind.apply(this, c.extend([b, a], arguments, 2))
}, compose:function() {
    var a = [], b = MochiKit.Base;
    if(arguments.length === 0) {
        throw new TypeError("compose() requires at least one argument");
    }
    for(var c = 0;c < arguments.length;c++) {
        var d = arguments[c];
        if(typeof d != "function") {
            throw new TypeError(b.repr(d) + " is not a function");
        }
        a.push(d)
    }
    return function() {
        for(var b = arguments, c = a.length - 1;c >= 0;c--) {
            b = [a[c].apply(this, b)]
        }
        return b[0]
    }
}, bind:function(a, b) {
    typeof a == "string" && (a = b[a]);
    var c = a.im_func, d = a.im_preargs, e = a.im_self, f = MochiKit.Base;
    typeof a == "function" && typeof a.apply == "undefined" && (a = f._wrapDumbFunction(a));
    typeof c != "function" && (c = a);
    typeof b != "undefined" && (e = b);
    d = typeof d == "undefined" ? [] : d.slice();
    f.extend(d, arguments, 2);
    var g = function() {
        var a = arguments, b = arguments.callee;
        b.im_preargs.length > 0 && (a = f.concat(b.im_preargs, a));
        var c = b.im_self;
        c || (c = this);
        return b.im_func.apply(c, a)
    };
    g.im_self = e;
    g.im_func = c;
    g.im_preargs = d;
    return g
}, bindLate:function(a) {
    var b = MochiKit.Base, c = arguments;
    typeof a === "string" && (c = b.extend([b.forwardCall(a)], arguments, 1));
    return b.bind.apply(this, c)
}, bindMethods:function(a) {
    var b = MochiKit.Base.bind, c;
    for(c in a) {
        var d = a[c];
        typeof d == "function" && (a[c] = b(d, a))
    }
}, registerComparator:function(a, b, c, d) {
    MochiKit.Base.comparatorRegistry.register(a, b, c, d)
}, _primitives:{"boolean":!0, string:!0, number:!0}, compare:function(a, b) {
    if(a == b) {
        return 0
    }
    var c = typeof a == "undefined" || a === null, d = typeof b == "undefined" || b === null;
    if(c && d) {
        return 0
    }else {
        if(c) {
            return-1
        }else {
            if(d) {
                return 1
            }
        }
    }
    c = MochiKit.Base;
    d = c._primitives;
    if(!(typeof a in d && typeof b in d)) {
        try {
            return c.comparatorRegistry.match(a, b)
        }catch(e) {
            if(e != c.NotFound) {
                throw e;
            }
        }
    }
    if(a < b) {
        return-1
    }else {
        if(a > b) {
            return 1
        }
    }
    c = c.repr;
    throw new TypeError(c(a) + " and " + c(b) + " can not be compared");
}, compareDateLike:function(a, b) {
    return MochiKit.Base.compare(a.getTime(), b.getTime())
}, compareArrayLike:function(a, b) {
    var c = MochiKit.Base.compare, d = a.length, e = 0;
    d > b.length ? (e = 1, d = b.length) : d < b.length && (e = -1);
    for(var f = 0;f < d;f++) {
        var g = c(a[f], b[f]);
        if(g) {
            return g
        }
    }
    return e
}, registerRepr:function(a, b, c, d) {
    MochiKit.Base.reprRegistry.register(a, b, c, d)
}, repr:function(a) {
    if(typeof a == "undefined") {
        return"undefined"
    }else {
        if(a === null) {
            return"null"
        }
    }
    try {
        if(typeof a.__repr__ == "function") {
            return a.__repr__()
        }else {
            if(typeof a.repr == "function" && a.repr != arguments.callee) {
                return a.repr()
            }
        }
        return MochiKit.Base.reprRegistry.match(a)
    }catch(b) {
        if(typeof a.NAME == "string" && (a.toString == Function.prototype.toString || a.toString == Object.prototype.toString)) {
            return a.NAME
        }
    }
    var c = a + "";
    if(typeof a == "function") {
        var c = c.replace(/^\s+/, "").replace(/\s+/g, " "), c = c.replace(/,(\S)/, ", $1"), d = c.indexOf("{");
        d != -1 && (c = c.substr(0, d) + "{...}")
    }
    return c
}, reprArrayLike:function(a) {
    var b = MochiKit.Base;
    return"[" + b.map(b.repr, a).join(", ") + "]"
}, reprString:function(a) {
    return('"' + a.replace(/(["\\])/g, "\\$1") + '"').replace(/[\f]/g, "\\f").replace(/[\b]/g, "\\b").replace(/[\n]/g, "\\n").replace(/[\t]/g, "\\t").replace(/[\v]/g, "\\v").replace(/[\r]/g, "\\r")
}, reprNumber:function(a) {
    return a + ""
}, registerJSON:function(a, b, c, d) {
    MochiKit.Base.jsonRegistry.register(a, b, c, d)
}, evalJSON:function(a) {
    return eval("(" + MochiKit.Base._filterJSON(a) + ")")
}, _filterJSON:function(a) {
    var b = a.match(/^\s*\/\*(.*)\*\/\s*$/);
    if(b) {
        return b[1]
    }
    return a
}, serializeJSON:function(a) {
    var b = typeof a;
    if(b == "number" || b == "boolean") {
        return a + ""
    }else {
        if(a === null) {
            return"null"
        }else {
            if(b == "string") {
                for(var b = "", c = 0;c < a.length;c++) {
                    var d = a.charAt(c);
                    d == '"' ? b += '\\"' : d == "\\" ? b += "\\\\" : d == "\u0008" ? b += "\\b" : d == "\u000c" ? b += "\\f" : d == "\n" ? b += "\\n" : d == "\r" ? b += "\\r" : d == "\t" ? b += "\\t" : a.charCodeAt(c) <= 31 ? (d = a.charCodeAt(c).toString(16), d.length < 2 && (d = "0" + d), b += "\\u00" + d.toUpperCase()) : b += d
                }
                return'"' + b + '"'
            }
        }
    }
    var d = arguments.callee, e;
    if(typeof a.__json__ == "function" && (e = a.__json__(), a !== e)) {
        return d(e)
    }
    if(typeof a.json == "function" && (e = a.json(), a !== e)) {
        return d(e)
    }
    if(b != "function" && typeof a.length == "number") {
        b = [];
        for(c = 0;c < a.length;c++) {
            e = d(a[c]), typeof e == "string" && b.push(e)
        }
        return"[" + b.join(", ") + "]"
    }
    var f = MochiKit.Base;
    try {
        if(e = f.jsonRegistry.match(a), a !== e) {
            return d(e)
        }
    }catch(g) {
        if(g != f.NotFound) {
            throw g;
        }
    }
    if(b == "undefined") {
        throw new TypeError("undefined can not be serialized as JSON");
    }
    if(b == "function") {
        return null
    }
    b = [];
    for(c in a) {
        if(typeof c == "number") {
            f = '"' + c + '"'
        }else {
            if(typeof c == "string") {
                f = d(c)
            }else {
                continue
            }
        }
        e = d(a[c]);
        typeof e == "string" && b.push(f + ":" + e)
    }
    return"{" + b.join(", ") + "}"
}, objEqual:function(a, b) {
    return MochiKit.Base.compare(a, b) === 0
}, arrayEqual:function(a, b) {
    if(a.length != b.length) {
        return!1
    }
    return MochiKit.Base.compare(a, b) === 0
}, concat:function() {
    for(var a = [], b = MochiKit.Base.extend, c = 0;c < arguments.length;c++) {
        b(a, arguments[c])
    }
    return a
}, keyComparator:function(a) {
    var b = MochiKit.Base, c = b.compare;
    if(arguments.length == 1) {
        return function(b, d) {
            return c(b[a], d[a])
        }
    }
    var d = b.extend(null, arguments);
    return function(a, b) {
        for(var g = 0, h = 0;g === 0 && h < d.length;h++) {
            g = d[h], g = c(a[g], b[g])
        }
        return g
    }
}, reverseKeyComparator:function() {
    var a = MochiKit.Base.keyComparator.apply(this, arguments);
    return function(b, c) {
        return a(c, b)
    }
}, partial:function(a) {
    var b = MochiKit.Base;
    return b.bind.apply(this, b.extend([a, void 0], arguments, 1))
}, listMinMax:function(a, b) {
    if(b.length === 0) {
        return null
    }
    for(var c = b[0], d = MochiKit.Base.compare, e = 1;e < b.length;e++) {
        var f = b[e];
        d(f, c) == a && (c = f)
    }
    return c
}, objMax:function() {
    return MochiKit.Base.listMinMax(1, arguments)
}, objMin:function() {
    return MochiKit.Base.listMinMax(-1, arguments)
}, findIdentical:function(a, b, c, d) {
    if(typeof d == "undefined" || d === null) {
        d = a.length
    }
    if(typeof c == "undefined" || c === null) {
        c = 0
    }
    for(;c < d;c++) {
        if(a[c] === b) {
            return c
        }
    }
    return-1
}, mean:function() {
    for(var a = 0, b = MochiKit.Base.extend(null, arguments), c = b.length;b.length;) {
        var d = b.shift();
        if(d && typeof d == "object" && typeof d.length == "number") {
            c += d.length - 1;
            for(var e = d.length - 1;e >= 0;e--) {
                a += d[e]
            }
        }else {
            a += d
        }
    }
    if(c <= 0) {
        throw new TypeError("mean() requires at least one argument");
    }
    return a / c
}, median:function() {
    var a = MochiKit.Base.flattenArguments(arguments);
    if(a.length === 0) {
        throw new TypeError("median() requires at least one argument");
    }
    a.sort(compare);
    if(a.length % 2 == 0) {
        var b = a.length / 2;
        return(a[b] + a[b - 1]) / 2
    }else {
        return a[(a.length - 1) / 2]
    }
}, findValue:function(a, b, c, d) {
    if(typeof d == "undefined" || d === null) {
        d = a.length
    }
    if(typeof c == "undefined" || c === null) {
        c = 0
    }
    for(var e = MochiKit.Base.compare;c < d;c++) {
        if(e(a[c], b) === 0) {
            return c
        }
    }
    return-1
}, nodeWalk:function(a, b) {
    for(var c = [a], d = MochiKit.Base.extend;c.length;) {
        var e = b(c.shift());
        e && d(c, e)
    }
}, nameFunctions:function(a) {
    var b = a.NAME;
    typeof b == "undefined" ? b = "" : b += ".";
    for(var c in a) {
        var d = a[c];
        if(typeof d == "function" && typeof d.NAME == "undefined") {
            try {
                d.NAME = b + c
            }catch(e) {
            }
        }
    }
}, queryString:function(a, b) {
    if(typeof MochiKit.DOM != "undefined" && arguments.length == 1 && (typeof a == "string" || typeof a.nodeType != "undefined" && a.nodeType > 0)) {
        var c = MochiKit.DOM.formContents(a), a = c[0], b = c[1]
    }else {
        if(arguments.length == 1) {
            if(typeof a.length == "number" && a.length == 2) {
                return arguments.callee(a[0], a[1])
            }
            var d = a, a = [], b = [], e;
            for(e in d) {
                if(c = d[e], typeof c != "function") {
                    if(MochiKit.Base.isArrayLike(c)) {
                        for(var f = 0;f < c.length;f++) {
                            a.push(e), b.push(c[f])
                        }
                    }else {
                        a.push(e), b.push(c)
                    }
                }
            }
        }
    }
    d = [];
    e = Math.min(a.length, b.length);
    for(var g = MochiKit.Base.urlEncode, f = 0;f < e;f++) {
        c = b[f], typeof c != "undefined" && c !== null && d.push(g(a[f]) + "=" + g(c))
    }
    return d.join("&")
}, parseQueryString:function(a, b) {
    var c = (a.charAt(0) == "?" ? a.substring(1) : a).replace(/\+/g, "%20").split(/\&amp\;|\&\#38\;|\&#x26;|\&/), d = {}, e;
    e = typeof decodeURIComponent != "undefined" ? decodeURIComponent : unescape;
    if(b) {
        for(var f = 0;f < c.length;f++) {
            var g = c[f].split("="), h = e(g.shift());
            if(h) {
                var i = d[h];
                i instanceof Array || (i = [], d[h] = i);
                i.push(e(g.join("=")))
            }
        }
    }else {
        for(f = 0;f < c.length;f++) {
            g = c[f].split("="), (h = g.shift()) && (d[e(h)] = e(g.join("=")))
        }
    }
    return d
}});
MochiKit.Base.AdapterRegistry = function() {
    this.pairs = []
};
MochiKit.Base.AdapterRegistry.prototype = {register:function(a, b, c, d) {
    d ? this.pairs.unshift([a, b, c]) : this.pairs.push([a, b, c])
}, match:function() {
    for(var a = 0;a < this.pairs.length;a++) {
        var b = this.pairs[a];
        if(b[1].apply(this, arguments)) {
            return b[2].apply(this, arguments)
        }
    }
    throw MochiKit.Base.NotFound;
}, unregister:function(a) {
    for(var b = 0;b < this.pairs.length;b++) {
        if(this.pairs[b][0] == a) {
            return this.pairs.splice(b, 1), !0
        }
    }
    return!1
}};
MochiKit.Base._exportSymbols = function(a, b) {
    if(!(MochiKit.__export__ === !1 || b.__export__ === !1)) {
        for(var c in b) {
            var d = b[c];
            if(d != null) {
                var e = c[0] !== "_" && c !== "toString";
                if(d.__export__ === !0 || d.__export__ !== !1 && e) {
                    a[c] = b[c]
                }
            }
        }
    }
};
MochiKit.Base._deprecated = function(a, b, c, d, e) {
    typeof a === "string" && (a.indexOf("MochiKit.") === 0 && (a = a.substring(9)), a = MochiKit[a]);
    var f = c.split(".")[1], g = c.split(".")[2], h = function() {
        var e = arguments.callee, h = a.NAME + "." + b + " is deprecated since version " + d + ". Use " + c + " instead.";
        if(e.logged !== !0) {
            e.logged = !0, MochiKit.Logging ? MochiKit.Logging.logDebug(h) : console && console.log && console.log(h)
        }
        if(!MochiKit[f]) {
            throw Error(h);
        }
        return MochiKit[f][g].apply(this, arguments)
    };
    h.__export__ = e === !0;
    a[b] = h
};
MochiKit.Base.__new__ = function() {
    var a = this;
    a.noop = a.operator.identity;
    a._deprecated(a, "forward", "MochiKit.Base.forwardCall", "1.3");
    a._deprecated(a, "find", "MochiKit.Base.findValue", "1.3");
    a.urlEncode = typeof encodeURIComponent != "undefined" ? function(a) {
        return encodeURIComponent(a).replace(/\'/g, "%27")
    } : function(a) {
        return escape(a).replace(/\+/g, "%2B").replace(/\"/g, "%22").rval.replace(/\'/g, "%27")
    };
    a.NamedError = function(a) {
        this.name = this.message = a
    };
    a.NamedError.prototype = Error();
    a.update(a.NamedError.prototype, {repr:function() {
        return this.message && this.message != this.name ? this.name + "(" + a.repr(this.message) + ")" : this.name + "()"
    }, toString:a.forwardCall("repr")});
    a.NotFound = new a.NamedError("MochiKit.Base.NotFound");
    a.listMax = a.partial(a.listMinMax, 1);
    a.listMin = a.partial(a.listMinMax, -1);
    a.isCallable = a.typeMatcher("function");
    a.isUndefined = a.typeMatcher("undefined");
    a.merge = a.partial(a.update, null);
    a.zip = a.partial(a.map, null);
    a.average = a.mean;
    a.comparatorRegistry = new a.AdapterRegistry;
    a.registerComparator("dateLike", a.isDateLike, a.compareDateLike);
    a.registerComparator("arrayLike", a.isArrayLike, a.compareArrayLike);
    a.reprRegistry = new a.AdapterRegistry;
    a.registerRepr("arrayLike", a.isArrayLike, a.reprArrayLike);
    a.registerRepr("string", a.typeMatcher("string"), a.reprString);
    a.registerRepr("numbers", a.typeMatcher("number", "boolean"), a.reprNumber);
    a.jsonRegistry = new a.AdapterRegistry;
    a.nameFunctions(this)
};
MochiKit.Base.__new__();
if(MochiKit.__export__) {
    compare = MochiKit.Base.compare, compose = MochiKit.Base.compose, serializeJSON = MochiKit.Base.serializeJSON, mean = MochiKit.Base.mean, median = MochiKit.Base.median
}
MochiKit.Base._exportSymbols(this, MochiKit.Base);
__FILE__ = "3rdparty/mochikit/MochiKit/Iter.js";
MochiKit.Base._module("Iter", "1.5", ["Base"]);
MochiKit.Base.update(MochiKit.Iter, {registerIteratorFactory:function(a, b, c, d) {
    MochiKit.Iter.iteratorRegistry.register(a, b, c, d)
}, isIterable:function(a) {
    return a != null && (typeof a.next == "function" || typeof a.iter == "function")
}, iter:function(a, b) {
    var c = MochiKit.Iter;
    if(arguments.length == 2) {
        return c.takewhile(function(a) {
            return a != b
        }, a)
    }
    if(typeof a.next == "function") {
        return a
    }else {
        if(typeof a.iter == "function") {
            return a.iter()
        }
    }
    try {
        return c.iteratorRegistry.match(a)
    }catch(d) {
        throw c = MochiKit.Base, d == c.NotFound && (d = new TypeError(typeof a + ": " + c.repr(a) + " is not iterable")), d;
    }
}, count:function(a) {
    a || (a = 0);
    var b = MochiKit.Base;
    return{repr:function() {
        return"count(" + a + ")"
    }, toString:b.forwardCall("repr"), next:b.counter(a)}
}, cycle:function(a) {
    var b = MochiKit.Iter, c = MochiKit.Base, d = [], e = b.iter(a);
    return{repr:function() {
        return"cycle(...)"
    }, toString:c.forwardCall("repr"), next:function() {
        try {
            var a = e.next();
            d.push(a);
            return a
        }catch(c) {
            if(c != b.StopIteration) {
                throw c;
            }
            if(d.length === 0) {
                this.next = function() {
                    throw b.StopIteration;
                }
            }else {
                var h = -1;
                this.next = function() {
                    h = (h + 1) % d.length;
                    return d[h]
                }
            }
            return this.next()
        }
    }}
}, repeat:function(a, b) {
    var c = MochiKit.Base;
    if(typeof b == "undefined") {
        return{repr:function() {
            return"repeat(" + c.repr(a) + ")"
        }, toString:c.forwardCall("repr"), next:function() {
            return a
        }}
    }
    return{repr:function() {
        return"repeat(" + c.repr(a) + ", " + b + ")"
    }, toString:c.forwardCall("repr"), next:function() {
        if(b <= 0) {
            throw MochiKit.Iter.StopIteration;
        }
        b -= 1;
        return a
    }}
}, next:function(a) {
    return a.next()
}, izip:function() {
    var a = MochiKit.Base, b = MochiKit.Iter, c = b.next, d = a.map(b.iter, arguments);
    return{repr:function() {
        return"izip(...)"
    }, toString:a.forwardCall("repr"), next:function() {
        return a.map(c, d)
    }}
}, ifilter:function(a, b) {
    var c = MochiKit.Base, b = MochiKit.Iter.iter(b);
    if(a === null) {
        a = c.operator.truth
    }
    return{repr:function() {
        return"ifilter(...)"
    }, toString:c.forwardCall("repr"), next:function() {
        for(;;) {
            var c = b.next();
            if(a(c)) {
                return c
            }
        }
    }}
}, ifilterfalse:function(a, b) {
    var c = MochiKit.Base, b = MochiKit.Iter.iter(b);
    if(a === null) {
        a = c.operator.truth
    }
    return{repr:function() {
        return"ifilterfalse(...)"
    }, toString:c.forwardCall("repr"), next:function() {
        for(;;) {
            var c = b.next();
            if(!a(c)) {
                return c
            }
        }
    }}
}, islice:function(a) {
    var b = MochiKit.Iter, c = MochiKit.Base, a = b.iter(a), d = 0, e = 0, f = 1, g = -1;
    arguments.length == 2 ? e = arguments[1] : arguments.length == 3 ? (d = arguments[1], e = arguments[2]) : (d = arguments[1], e = arguments[2], f = arguments[3]);
    return{repr:function() {
        return"islice(" + ["...", d, e, f].join(", ") + ")"
    }, toString:c.forwardCall("repr"), next:function() {
        for(var c;g < d;) {
            c = a.next(), g++
        }
        if(d >= e) {
            throw b.StopIteration;
        }
        d += f;
        return c
    }}
}, imap:function(a) {
    var b = MochiKit.Base, c = MochiKit.Iter, d = b.map(c.iter, b.extend(null, arguments, 1)), e = b.map, f = c.next;
    return{repr:function() {
        return"imap(...)"
    }, toString:b.forwardCall("repr"), next:function() {
        return a.apply(this, e(f, d))
    }}
}, applymap:function(a, b, c) {
    b = MochiKit.Iter.iter(b);
    return{repr:function() {
        return"applymap(...)"
    }, toString:MochiKit.Base.forwardCall("repr"), next:function() {
        return a.apply(c, b.next())
    }}
}, chain:function() {
    var a = MochiKit.Iter, b = MochiKit.Base;
    if(arguments.length == 1) {
        return a.iter(arguments[0])
    }
    var c = b.map(a.iter, arguments);
    return{repr:function() {
        return"chain(...)"
    }, toString:b.forwardCall("repr"), next:function() {
        for(;c.length > 1;) {
            try {
                var d = c[0].next();
                return d
            }catch(e) {
                if(e != a.StopIteration) {
                    throw e;
                }
                c.shift();
                return d = c[0].next()
            }
        }
        if(c.length == 1) {
            return d = c.shift(), this.next = b.bind("next", d), this.next()
        }
        throw a.StopIteration;
    }}
}, takewhile:function(a, b) {
    var c = MochiKit.Iter, b = c.iter(b);
    return{repr:function() {
        return"takewhile(...)"
    }, toString:MochiKit.Base.forwardCall("repr"), next:function() {
        var d = b.next();
        if(!a(d)) {
            this.next = function() {
                throw c.StopIteration;
            }, this.next()
        }
        return d
    }}
}, dropwhile:function(a, b) {
    var b = MochiKit.Iter.iter(b), c = MochiKit.Base, d = c.bind;
    return{repr:function() {
        return"dropwhile(...)"
    }, toString:c.forwardCall("repr"), next:function() {
        for(;;) {
            var c = b.next();
            if(!a(c)) {
                break
            }
        }
        this.next = d("next", b);
        return c
    }}
}, _tee:function(a, b, c) {
    b.pos[a] = -1;
    var d = MochiKit.Base, e = d.listMin;
    return{repr:function() {
        return"tee(" + a + ", ...)"
    }, toString:d.forwardCall("repr"), next:function() {
        var d, g = b.pos[a];
        g == b.max ? (d = c.next(), b.deque.push(d), b.max += 1, b.pos[a] += 1) : (d = b.deque[g - b.min], b.pos[a] += 1, g == b.min && e(b.pos) != b.min && (b.min += 1, b.deque.shift()));
        return d
    }}
}, tee:function(a, b) {
    var c = [], d = {pos:[], deque:[], max:-1, min:-1};
    if(arguments.length == 1 || typeof b == "undefined" || b === null) {
        b = 2
    }
    for(var e = MochiKit.Iter, a = e.iter(a), e = e._tee, f = 0;f < b;f++) {
        c.push(e(f, d, a))
    }
    return c
}, list:function(a) {
    var b;
    if(a instanceof Array) {
        return a.slice()
    }
    if(typeof a == "function" && !(a instanceof Function) && typeof a.length == "number") {
        b = [];
        for(var c = 0;c < a.length;c++) {
            b.push(a[c])
        }
        return b
    }
    c = MochiKit.Iter;
    a = c.iter(a);
    b = [];
    var d;
    try {
        for(;;) {
            d = a.next(), b.push(d)
        }
    }catch(e) {
        if(e != c.StopIteration) {
            throw e;
        }
        return b
    }
}, reduce:function(a, b, c) {
    var d = c, e = MochiKit.Iter, b = e.iter(b);
    if(arguments.length < 3) {
        try {
            d = b.next()
        }catch(f) {
            throw f == e.StopIteration && (f = new TypeError("reduce() of empty sequence with no initial value")), f;
        }
    }
    try {
        for(;;) {
            d = a(d, b.next())
        }
    }catch(g) {
        if(g != e.StopIteration) {
            throw g;
        }
    }
    return d
}, range:function() {
    var a = 0, b = 0, c = 1;
    if(arguments.length == 1) {
        b = arguments[0]
    }else {
        if(arguments.length == 2) {
            a = arguments[0], b = arguments[1]
        }else {
            if(arguments.length == 3) {
                a = arguments[0], b = arguments[1], c = arguments[2]
            }else {
                throw new TypeError("range() takes 1, 2, or 3 arguments!");
            }
        }
    }
    if(c === 0) {
        throw new TypeError("range() step must not be 0");
    }
    return{next:function() {
        if(c > 0 && a >= b || c < 0 && a <= b) {
            throw MochiKit.Iter.StopIteration;
        }
        var d = a;
        a += c;
        return d
    }, repr:function() {
        return"range(" + [a, b, c].join(", ") + ")"
    }, toString:MochiKit.Base.forwardCall("repr")}
}, sum:function(a, b) {
    if(typeof b == "undefined" || b === null) {
        b = 0
    }
    var c = b, d = MochiKit.Iter, a = d.iter(a);
    try {
        for(;;) {
            c += a.next()
        }
    }catch(e) {
        if(e != d.StopIteration) {
            throw e;
        }
    }
    return c
}, exhaust:function(a) {
    var b = MochiKit.Iter, a = b.iter(a);
    try {
        for(;;) {
            a.next()
        }
    }catch(c) {
        if(c != b.StopIteration) {
            throw c;
        }
    }
}, forEach:function(a, b, c) {
    var d = MochiKit.Base, e = MochiKit.Iter;
    arguments.length > 2 && (b = d.bind(b, c));
    if(d.isArrayLike(a) && !e.isIterable(a)) {
        try {
            for(d = 0;d < a.length;d++) {
                b(a[d])
            }
        }catch(f) {
            if(f != e.StopIteration) {
                throw f;
            }
        }
    }else {
        e.exhaust(e.imap(b, a))
    }
}, every:function(a, b) {
    var c = MochiKit.Iter;
    try {
        return c.ifilterfalse(b, a).next(), !1
    }catch(d) {
        if(d != c.StopIteration) {
            throw d;
        }
        return!0
    }
}, sorted:function(a, b) {
    var c = MochiKit.Iter.list(a);
    if(arguments.length == 1) {
        b = MochiKit.Base.compare
    }
    c.sort(b);
    return c
}, reversed:function(a) {
    a = MochiKit.Iter.list(a);
    a.reverse();
    return a
}, some:function(a, b) {
    var c = MochiKit.Iter;
    try {
        return c.ifilter(b, a).next(), !0
    }catch(d) {
        if(d != c.StopIteration) {
            throw d;
        }
        return!1
    }
}, iextend:function(a, b) {
    var c = MochiKit.Iter;
    if(MochiKit.Base.isArrayLike(b) && !c.isIterable(b)) {
        for(c = 0;c < b.length;c++) {
            a.push(b[c])
        }
    }else {
        b = c.iter(b);
        try {
            for(;;) {
                a.push(b.next())
            }
        }catch(d) {
            if(d != c.StopIteration) {
                throw d;
            }
        }
    }
    return a
}, groupby:function(a, b) {
    var c = MochiKit.Base, d = MochiKit.Iter;
    if(arguments.length < 2) {
        b = c.operator.identity
    }
    var a = d.iter(a), e = void 0, f = void 0, g, h = !0, i = c.compare;
    return{repr:function() {
        return"groupby(...)"
    }, next:function() {
        for(;i(f, e) === 0;) {
            if(g = a.next(), f = b(g), h) {
                h = !1;
                break
            }
        }
        e = f;
        return[f, {next:function() {
            g == void 0 && (g = a.next(), f = b(g));
            if(i(f, e) !== 0) {
                throw d.StopIteration;
            }
            var c = g;
            g = void 0;
            return c
        }}]
    }}
}, groupby_as_array:function(a, b) {
    var c = MochiKit.Base, d = MochiKit.Iter;
    if(arguments.length < 2) {
        b = c.operator.identity
    }
    for(var a = d.iter(a), e = [], f = !0, g, c = c.compare;;) {
        try {
            var h = a.next(), i = b(h)
        }catch(j) {
            if(j == d.StopIteration) {
                break
            }
            throw j;
        }
        if(f || c(i, g) !== 0) {
            var l = [];
            e.push([i, l])
        }
        l.push(h);
        f = !1;
        g = i
    }
    return e
}, arrayLikeIter:function(a) {
    var b = 0;
    return{repr:function() {
        return"arrayLikeIter(...)"
    }, toString:MochiKit.Base.forwardCall("repr"), next:function() {
        if(b >= a.length) {
            throw MochiKit.Iter.StopIteration;
        }
        return a[b++]
    }}
}, hasIterateNext:function(a) {
    return a && typeof a.iterateNext == "function"
}, iterateNextIter:function(a) {
    return{repr:function() {
        return"iterateNextIter(...)"
    }, toString:MochiKit.Base.forwardCall("repr"), next:function() {
        var b = a.iterateNext();
        if(b === null || b === void 0) {
            throw MochiKit.Iter.StopIteration;
        }
        return b
    }}
}});
MochiKit.Iter.__new__ = function() {
    var a = MochiKit.Base;
    this.StopIteration = typeof StopIteration != "undefined" ? StopIteration : new a.NamedError("StopIteration");
    this.iteratorRegistry = new a.AdapterRegistry;
    this.registerIteratorFactory("arrayLike", a.isArrayLike, this.arrayLikeIter);
    this.registerIteratorFactory("iterateNext", this.hasIterateNext, this.iterateNextIter);
    a.nameFunctions(this)
};
MochiKit.Iter.__new__();
if(MochiKit.__export__) {
    reduce = MochiKit.Iter.reduce
}
MochiKit.Base._exportSymbols(this, MochiKit.Iter);
__FILE__ = "3rdparty/mochikit/MochiKit/Async.js";
MochiKit.Base._module("Async", "1.5", ["Base"]);
MochiKit.Async.Deferred = function(a) {
    this.chain = [];
    this.id = this._nextId();
    this.fired = -1;
    this.paused = 0;
    this.results = [null, null];
    this.canceller = a;
    this.chained = this.silentlyCancelled = !1
};
MochiKit.Async.Deferred.prototype = {repr:function() {
    return"Deferred(" + this.id + ", " + (this.fired == -1 ? "unfired" : this.fired === 0 ? "success" : "error") + ")"
}, toString:MochiKit.Base.forwardCall("repr"), _nextId:MochiKit.Base.counter(), cancel:function() {
    var a = MochiKit.Async;
    this.fired == -1 ? (this.canceller ? this.canceller(this) : this.silentlyCancelled = !0, this.fired == -1 && this.errback(new a.CancelledError(this))) : this.fired === 0 && this.results[0] instanceof a.Deferred && this.results[0].cancel()
}, _resback:function(a) {
    this.fired = a instanceof Error ? 1 : 0;
    this.results[this.fired] = a;
    this._fire()
}, _check:function() {
    if(this.fired != -1) {
        if(!this.silentlyCancelled) {
            throw new MochiKit.Async.AlreadyCalledError(this);
        }
        this.silentlyCancelled = !1
    }
}, callback:function(a) {
    this._check();
    if(a instanceof MochiKit.Async.Deferred) {
        throw Error("Deferred instances can only be chained if they are the result of a callback");
    }
    this._resback(a)
}, errback:function(a) {
    this._check();
    var b = MochiKit.Async;
    if(a instanceof b.Deferred) {
        throw Error("Deferred instances can only be chained if they are the result of a callback");
    }
    a instanceof Error || (a = new b.GenericError(a));
    this._resback(a)
}, addBoth:function(a) {
    arguments.length > 1 && (a = MochiKit.Base.partial.apply(null, arguments));
    return this.addCallbacks(a, a)
}, addCallback:function(a) {
    arguments.length > 1 && (a = MochiKit.Base.partial.apply(null, arguments));
    return this.addCallbacks(a, null)
}, addErrback:function(a) {
    arguments.length > 1 && (a = MochiKit.Base.partial.apply(null, arguments));
    return this.addCallbacks(null, a)
}, addCallbacks:function(a, b) {
    if(this.chained) {
        throw Error("Chained Deferreds can not be re-used");
    }
    this.chain.push([a, b]);
    this.fired >= 0 && this._fire();
    return this
}, _fire:function() {
    for(var a = this.chain, b = this.fired, c = this.results[b], d = this, e = null;a.length > 0 && this.paused === 0;) {
        var f = a.shift()[b];
        f !== null && (c = f(c), b = c instanceof Error ? 1 : 0, c instanceof MochiKit.Async.Deferred && (e = function(a) {
            d._resback(a);
            d.paused--;
            d.paused === 0 && d.fired >= 0 && d._fire()
        }, this.paused++))
    }
    this.fired = b;
    this.results[b] = c;
    if(e && this.paused) {
        c.addBoth(e), c.chained = !0
    }
}};
MochiKit.Base.update(MochiKit.Async, {evalJSONRequest:function(a) {
    return MochiKit.Base.evalJSON(a.responseText)
}, succeed:function() {
    var a = new MochiKit.Async.Deferred;
    a.callback.apply(a, arguments);
    return a
}, fail:function() {
    var a = new MochiKit.Async.Deferred;
    a.errback.apply(a, arguments);
    return a
}, getXMLHttpRequest:function() {
    var a = arguments.callee;
    if(!a.XMLHttpRequest) {
        for(var b = [function() {
            return new XMLHttpRequest
        }, function() {
            return new ActiveXObject("Msxml2.XMLHTTP")
        }, function() {
            return new ActiveXObject("Microsoft.XMLHTTP")
        }, function() {
            return new ActiveXObject("Msxml2.XMLHTTP.4.0")
        }, function() {
            throw new MochiKit.Async.BrowserComplianceError("Browser does not support XMLHttpRequest");
        }], c = 0;c < b.length;c++) {
            var d = b[c];
            try {
                return a.XMLHttpRequest = d, d()
            }catch(e) {
            }
        }
    }
    return a.XMLHttpRequest()
}, _xhr_onreadystatechange:function(a) {
    var b = MochiKit.Base;
    if(this.readyState == 4) {
        try {
            this.onreadystatechange = null
        }catch(c) {
            try {
                this.onreadystatechange = b.noop
            }catch(d) {
            }
        }
        var e = null;
        try {
            e = this.status, !e && b.isNotEmpty(this.responseText) && (e = 304)
        }catch(f) {
        }
        e == 200 || e == 201 || e == 204 || e == 304 || e == 1223 ? a.callback(this) : (b = new MochiKit.Async.XMLHttpRequestError(this, "Request failed"), a.errback(b))
    }
}, _xhr_canceller:function(a) {
    try {
        a.onreadystatechange = null
    }catch(b) {
        try {
            a.onreadystatechange = MochiKit.Base.noop
        }catch(c) {
        }
    }
    a.abort()
}, sendXMLHttpRequest:function(a, b) {
    if(typeof b == "undefined" || b === null) {
        b = ""
    }
    var c = MochiKit.Base, d = MochiKit.Async, e = new d.Deferred(c.partial(d._xhr_canceller, a));
    try {
        a.onreadystatechange = c.bind(d._xhr_onreadystatechange, a, e), a.send(b)
    }catch(f) {
        try {
            a.onreadystatechange = null
        }catch(g) {
        }
        e.errback(f)
    }
    return e
}, doXHR:function(a, b) {
    return this._doXHR(a, b)
}, _doXHR:function(a, b) {
    var c = MochiKit.Base, b = c.update({method:"GET", sendContent:""}, b), d = MochiKit.Async, e = d.getXMLHttpRequest();
    if(b.queryString) {
        var f = c.queryString(b.queryString);
        f && (a += "?" + f)
    }
    "username" in b ? e.open(b.method, a, !0, b.username, b.password) : e.open(b.method, a, !0);
    if(b.withCredentials) {
        e.withCredentials = !0
    }
    e.overrideMimeType && b.mimeType && e.overrideMimeType(b.mimeType);
    e.setRequestHeader("X-Requested-With", "XMLHttpRequest");
    if(b.headers) {
        f = b.headers;
        c.isArrayLike(f) || (f = c.items(f));
        for(c = 0;c < f.length;c++) {
            var g = f[c];
            e.setRequestHeader(g[0], g[1])
        }
    }
    return d.sendXMLHttpRequest(e, b.sendContent)
}, _buildURL:function(a) {
    if(arguments.length > 1) {
        var b = MochiKit.Base;
        if(b = b.queryString.apply(null, b.extend(null, arguments, 1))) {
            return a + "?" + b
        }
    }
    return a
}, doSimpleXMLHttpRequest:function(a) {
    var b = MochiKit.Async, a = b._buildURL.apply(b, arguments);
    return b.doXHR(a)
}, loadJSONDoc:function(a) {
    var b = MochiKit.Async, a = b._buildURL.apply(b, arguments), c = b.doXHR(a, {mimeType:"text/plain", headers:[["Accept", "application/json"]]});
    return c = c.addCallback(b.evalJSONRequest)
}, wait:function(a, b) {
    var c = new MochiKit.Async.Deferred, d = MochiKit.Base;
    typeof b != "undefined" && c.addCallback(function() {
        return b
    });
    var e = safeTimeout(d.bind("callback", c), Math.floor(a * 1E3));
    c.canceller = function() {
        try {
            clearTimeout(e)
        }catch(a) {
        }
    };
    return c
}, callLater:function(a) {
    var b = MochiKit.Base, c = b.partial.apply(b, b.extend(null, arguments, 1));
    return MochiKit.Async.wait(a).addCallback(function() {
        return c()
    })
}});
MochiKit.Async.DeferredLock = function() {
    this.waiting = [];
    this.locked = !1;
    this.id = this._nextId()
};
MochiKit.Async.DeferredLock.prototype = {__class__:MochiKit.Async.DeferredLock, acquire:function() {
    var a = new MochiKit.Async.Deferred;
    this.locked ? this.waiting.push(a) : (this.locked = !0, a.callback(this));
    return a
}, release:function() {
    if(!this.locked) {
        throw TypeError("Tried to release an unlocked DeferredLock");
    }
    this.locked = !1;
    if(this.waiting.length > 0) {
        this.locked = !0, this.waiting.shift().callback(this)
    }
}, _nextId:MochiKit.Base.counter(), repr:function() {
    return"DeferredLock(" + this.id + ", " + (this.locked ? "locked, " + this.waiting.length + " waiting" : "unlocked") + ")"
}, toString:MochiKit.Base.forwardCall("repr")};
MochiKit.Async.DeferredList = function(a, b, c, d, e) {
    MochiKit.Async.Deferred.apply(this, [e]);
    this.list = a;
    this.resultList = e = [];
    this.finishedCount = 0;
    this.fireOnOneCallback = b;
    this.fireOnOneErrback = c;
    this.consumeErrors = d;
    c = MochiKit.Base.bind(this._cbDeferred, this);
    for(d = 0;d < a.length;d++) {
        var f = a[d];
        e.push(void 0);
        f.addCallback(c, d, !0);
        f.addErrback(c, d, !1)
    }
    a.length === 0 && !b && this.callback(this.resultList)
};
MochiKit.Async.DeferredList.prototype = new MochiKit.Async.Deferred;
MochiKit.Async.DeferredList.prototype._cbDeferred = function(a, b, c) {
    this.resultList[a] = [b, c];
    this.finishedCount += 1;
    this.fired == -1 && (b && this.fireOnOneCallback ? this.callback([a, c]) : !b && this.fireOnOneErrback ? this.errback(c) : this.finishedCount == this.list.length && this.callback(this.resultList));
    !b && this.consumeErrors && (c = null);
    return c
};
MochiKit.Async.gatherResults = function(a) {
    a = new MochiKit.Async.DeferredList(a, !1, !0, !1);
    a.addCallback(function(a) {
        for(var c = [], d = 0;d < a.length;d++) {
            c.push(a[d][1])
        }
        return c
    });
    return a
};
MochiKit.Async.maybeDeferred = function(a) {
    var b = MochiKit.Async, c;
    try {
        var d = a.apply(null, MochiKit.Base.extend([], arguments, 1));
        c = d instanceof b.Deferred ? d : d instanceof Error ? b.fail(d) : b.succeed(d)
    }catch(e) {
        c = b.fail(e)
    }
    return c
};
MochiKit.Async.__new__ = function() {
    var a = MochiKit.Base, b = a.partial(a._newNamedError, this);
    b("AlreadyCalledError", function(a) {
        this.deferred = a
    });
    b("CancelledError", function(a) {
        this.deferred = a
    });
    b("BrowserComplianceError", function(a) {
        this.message = a
    });
    b("GenericError", function(a) {
        this.message = a
    });
    b("XMLHttpRequestError", function(a, b) {
        this.req = a;
        this.message = b;
        try {
            this.number = a.status
        }catch(e) {
        }
    });
    a.nameFunctions(this)
};
MochiKit.Async.__new__();
MochiKit.Base._exportSymbols(this, MochiKit.Async);
__FILE__ = "3rdparty/mochikit/MochiKit/DOM.js";
MochiKit.Base._module("DOM", "1.5", ["Base"]);
MochiKit.Base.update(MochiKit.DOM, {currentWindow:function() {
    return MochiKit.DOM._window
}, currentDocument:function() {
    return MochiKit.DOM._document
}, withWindow:function(a, b) {
    var c = MochiKit.DOM, d = c._document, e = c._window, f;
    try {
        c._window = a, c._document = a.document, f = b()
    }catch(g) {
        throw c._window = e, c._document = d, g;
    }
    c._window = e;
    c._document = d;
    return f
}, formContents:function(a) {
    var b = [], c = [], d = MochiKit.Base, e = MochiKit.DOM, a = typeof a == "undefined" || a === null ? e._document.body : e.getElement(a);
    d.nodeWalk(a, function(a) {
        var e = a.name;
        if(d.isNotEmpty(e)) {
            var h = a.tagName.toUpperCase();
            if(h === "INPUT" && (a.type == "radio" || a.type == "checkbox") && !a.checked) {
                return null
            }
            if(h === "SELECT") {
                if(a.type == "select-one") {
                    if(a.selectedIndex >= 0) {
                        a = a.options[a.selectedIndex];
                        h = a.value;
                        if(!h) {
                            var i = a.outerHTML;
                            if(i && !i.match(/^[^>]+\svalue\s*=/i)) {
                                h = a.text
                            }
                        }
                        b.push(e);
                        c.push(h);
                        return null
                    }
                    b.push(e);
                    c.push("")
                }else {
                    var j = a.options;
                    if(!j.length) {
                        return b.push(e), c.push(""), null
                    }
                    for(var l = 0;l < j.length;l++) {
                        if(a = j[l], a.selected) {
                            h = a.value;
                            if(!h && (i = a.outerHTML) && !i.match(/^[^>]+\svalue\s*=/i)) {
                                h = a.text
                            }
                            b.push(e);
                            c.push(h)
                        }
                    }
                }
                return null
            }
            if(h === "FORM" || h === "P" || h === "SPAN" || h === "DIV") {
                return a.childNodes
            }
            b.push(e);
            c.push(a.value || "");
            return null
        }
        return a.childNodes
    });
    return[b, c]
}, withDocument:function(a, b) {
    var c = MochiKit.DOM, d = c._document, e;
    try {
        c._document = a, e = b()
    }catch(f) {
        throw c._document = d, f;
    }
    c._document = d;
    return e
}, registerDOMConverter:function(a, b, c, d) {
    MochiKit.DOM.domConverters.register(a, b, c, d)
}, coerceToDOM:function(a, b) {
    var c = MochiKit.Base, d = MochiKit.Iter, e = MochiKit.DOM;
    if(d) {
        var f = d.iter, g = d.repeat
    }
    for(var h = c.map, i = e.domConverters, j = arguments.callee, l = c.NotFound;;) {
        if(typeof a == "undefined" || a === null) {
            return null
        }
        typeof a == "function" && typeof a.length == "number" && !(a instanceof Function) && (a = d ? d.list(a) : c.extend(null, a));
        if(typeof a.nodeType != "undefined" && a.nodeType > 0) {
            return a
        }
        if(typeof a == "number" || typeof a == "boolean") {
            a = a.toString()
        }
        if(typeof a == "string") {
            return e._document.createTextNode(a)
        }
        if(typeof a.__dom__ == "function") {
            a = a.__dom__(b)
        }else {
            if(typeof a.dom == "function") {
                a = a.dom(b)
            }else {
                if(typeof a == "function") {
                    a = a.apply(b, [b])
                }else {
                    if(d) {
                        var m = null;
                        try {
                            m = f(a)
                        }catch(o) {
                        }
                        if(m) {
                            return h(j, m, g(b))
                        }
                    }else {
                        if(c.isArrayLike(a)) {
                            return h(function(a) {
                                return j(a, b)
                            }, a)
                        }
                    }
                    try {
                        a = i.match(a, b);
                        continue
                    }catch(n) {
                        if(n != l) {
                            throw n;
                        }
                    }
                    return e._document.createTextNode(a.toString())
                }
            }
        }
    }
}, isChildNode:function(a, b) {
    var c = MochiKit.DOM;
    typeof a == "string" && (a = c.getElement(a));
    typeof b == "string" && (b = c.getElement(b));
    if(typeof a == "undefined" || a === null) {
        return!1
    }
    for(;a != null && a !== c._document;) {
        if(a === b) {
            return!0
        }
        a = a.parentNode
    }
    return!1
}, setNodeAttribute:function(a, b, c) {
    var d = {};
    d[b] = c;
    try {
        return MochiKit.DOM.updateNodeAttributes(a, d)
    }catch(e) {
    }
    return null
}, getNodeAttribute:function(a, b) {
    var c = MochiKit.DOM, d = c.attributeArray.renames[b], e = c.attributeArray.ignoreAttr[b], a = c.getElement(a);
    try {
        if(d) {
            return a[d]
        }
        var f = a.getAttribute(b);
        if(f != e) {
            return f
        }
    }catch(g) {
    }
    return null
}, removeNodeAttribute:function(a, b) {
    var c = MochiKit.DOM, d = c.attributeArray.renames[b], a = c.getElement(a);
    try {
        if(d) {
            return a[d]
        }
        return a.removeAttribute(b)
    }catch(e) {
    }
    return null
}, updateNodeAttributes:function(a, b) {
    var c = a, d = MochiKit.DOM;
    typeof a == "string" && (c = d.getElement(a));
    if(b) {
        var e = MochiKit.Base.updatetree;
        if(d.attributeArray.compliant) {
            for(var f in b) {
                d = b[f], typeof d == "object" && typeof c[f] == "object" ? f == "style" && MochiKit.Style ? MochiKit.Style.setStyle(c, d) : e(c[f], d) : f.substring(0, 2) == "on" ? (typeof d == "string" && (d = new Function(d)), c[f] = d) : c.setAttribute(f, d), typeof c[f] == "string" && c[f] != d && (c[f] = d)
            }
        }else {
            var g = d.attributeArray.renames;
            for(f in b) {
                var d = b[f], h = g[f];
                f == "style" && typeof d == "string" ? c.style.cssText = d : typeof h == "string" ? c[h] = d : typeof c[f] == "object" && typeof d == "object" ? f == "style" && MochiKit.Style ? MochiKit.Style.setStyle(c, d) : e(c[f], d) : f.substring(0, 2) == "on" ? (typeof d == "string" && (d = new Function(d)), c[f] = d) : c.setAttribute(f, d);
                typeof c[f] == "string" && c[f] != d && (c[f] = d)
            }
        }
    }
    return c
}, appendChildNodes:function(a) {
    var b = a, c = MochiKit.DOM;
    typeof a == "string" && (b = c.getElement(a));
    for(var c = [c.coerceToDOM(MochiKit.Base.extend(null, arguments, 1), b)], d = MochiKit.Base.concat;c.length;) {
        var e = c.shift();
        typeof e == "undefined" || e === null || (typeof e.nodeType == "number" ? b.appendChild(e) : c = d(e, c))
    }
    return b
}, insertSiblingNodesBefore:function(a) {
    var b = a, c = MochiKit.DOM;
    typeof a == "string" && (b = c.getElement(a));
    for(var c = [c.coerceToDOM(MochiKit.Base.extend(null, arguments, 1), b)], d = b.parentNode, e = MochiKit.Base.concat;c.length;) {
        var f = c.shift();
        typeof f == "undefined" || f === null || (typeof f.nodeType == "number" ? d.insertBefore(f, b) : c = e(f, c))
    }
    return d
}, insertSiblingNodesAfter:function(a) {
    var b = a, c = MochiKit.DOM;
    typeof a == "string" && (b = c.getElement(a));
    var d = [c.coerceToDOM(MochiKit.Base.extend(null, arguments, 1), b)];
    return b.nextSibling ? c.insertSiblingNodesBefore(b.nextSibling, d) : c.appendChildNodes(b.parentNode, d)
}, replaceChildNodes:function(a) {
    var b = a, c = MochiKit.DOM;
    typeof a == "string" && (b = c.getElement(a), arguments[0] = b);
    for(var d;d = b.firstChild;) {
        b.removeChild(d)
    }
    return arguments.length < 2 ? b : c.appendChildNodes.apply(this, arguments)
}, createDOM:function(a, b) {
    var c, d = MochiKit.DOM, e = MochiKit.Base;
    if(typeof b == "string" || typeof b == "number") {
        return e = e.extend([a, null], arguments, 1), arguments.callee.apply(this, e)
    }
    if(typeof a == "string") {
        c = d._xhtml;
        if(b && !d.attributeArray.compliant) {
            var f = "";
            "name" in b && (f += ' name="' + d.escapeHTML(b.name) + '"');
            a == "input" && "type" in b && (f += ' type="' + d.escapeHTML(b.type) + '"');
            f && (a = "<" + a + f + ">", c = !1)
        }
        f = d._document;
        c = c && f === document ? f.createElementNS("http://www.w3.org/1999/xhtml", a) : f.createElement(a)
    }else {
        c = a
    }
    b && d.updateNodeAttributes(c, b);
    return arguments.length <= 2 ? c : (e = e.extend([c], arguments, 2), d.appendChildNodes.apply(this, e))
}, createDOMFunc:function() {
    var a = MochiKit.Base;
    return a.partial.apply(this, a.extend([MochiKit.DOM.createDOM], arguments))
}, removeElement:function(a) {
    var b = MochiKit.DOM;
    typeof a == "string" && (a = b.getElement(a));
    a = b.coerceToDOM(a);
    a.parentNode.removeChild(a);
    return a
}, swapDOM:function(a, b) {
    var c = MochiKit.DOM, a = c.getElement(a), d = a.parentNode;
    b ? (typeof b == "string" && (b = c.getElement(b)), b = c.coerceToDOM(b, d), d.replaceChild(b, a)) : d.removeChild(a);
    return b
}, getElement:function(a) {
    var b = MochiKit.DOM;
    return arguments.length == 1 ? typeof a == "string" ? b._document.getElementById(a) : a : MochiKit.Base.map(b.getElement, arguments)
}, getElementsByTagAndClassName:function(a, b, c) {
    var d = MochiKit.DOM;
    if(typeof a == "undefined" || a === null) {
        a = "*"
    }
    if(typeof c == "undefined" || c === null) {
        c = d._document
    }
    c = d.getElement(c);
    if(c == null) {
        return[]
    }
    a = c.getElementsByTagName(a) || d._document.all;
    if(typeof b == "undefined" || b === null) {
        return MochiKit.Base.extend(null, a)
    }
    c = [];
    for(d = 0;d < a.length;d++) {
        var e = a[d], f = e.className;
        typeof f != "string" && (f = e.getAttribute("class"));
        if(typeof f == "string") {
            for(var f = f.split(" "), g = 0;g < f.length;g++) {
                if(f[g] == b) {
                    c.push(e);
                    break
                }
            }
        }
    }
    return c
}, _newCallStack:function(a, b) {
    var c = function() {
        for(var c = arguments.callee.callStack, e = 0;e < c.length;e++) {
            if(c[e].apply(this, arguments) === !1) {
                break
            }
        }
        if(b) {
            try {
                this[a] = null
            }catch(f) {
            }
        }
    };
    c.callStack = [];
    return c
}, addToCallStack:function(a, b, c, d) {
    var e = MochiKit.DOM, f = a[b], g = f;
    typeof f == "function" && typeof f.callStack == "object" && f.callStack !== null || (g = e._newCallStack(b, d), typeof f == "function" && g.callStack.push(f), a[b] = g);
    g.callStack.push(c)
}, addLoadEvent:function(a) {
    var b = MochiKit.DOM;
    b.addToCallStack(b._window, "onload", a, !0)
}, focusOnLoad:function(a) {
    var b = MochiKit.DOM;
    b.addLoadEvent(function() {
        (a = b.getElement(a)) && a.focus()
    })
}, setElementClass:function(a, b) {
    var c = MochiKit.DOM, d = c.getElement(a);
    c.attributeArray.compliant ? d.setAttribute("class", b) : d.setAttribute("className", b)
}, toggleElementClass:function(a) {
    for(var b = MochiKit.DOM, c = 1;c < arguments.length;c++) {
        var d = b.getElement(arguments[c]);
        b.addElementClass(d, a) || b.removeElementClass(d, a)
    }
}, addElementClass:function(a, b) {
    var c = MochiKit.DOM, d = c.getElement(a), e = d.className;
    typeof e != "string" && (e = d.getAttribute("class"));
    if(typeof e != "string" || e.length === 0) {
        return c.setElementClass(d, b), !0
    }
    if(e == b) {
        return!1
    }
    for(var f = e.split(" "), g = 0;g < f.length;g++) {
        if(f[g] == b) {
            return!1
        }
    }
    c.setElementClass(d, e + " " + b);
    return!0
}, removeElementClass:function(a, b) {
    var c = MochiKit.DOM, d = c.getElement(a), e = d.className;
    typeof e != "string" && (e = d.getAttribute("class"));
    if(typeof e != "string" || e.length === 0) {
        return!1
    }
    if(e == b) {
        return c.setElementClass(d, ""), !0
    }
    for(var e = e.split(" "), f = 0;f < e.length;f++) {
        if(e[f] == b) {
            return e.splice(f, 1), c.setElementClass(d, e.join(" ")), !0
        }
    }
    return!1
}, swapElementClass:function(a, b, c) {
    a = MochiKit.DOM.getElement(a);
    (b = MochiKit.DOM.removeElementClass(a, b)) && MochiKit.DOM.addElementClass(a, c);
    return b
}, hasElementClass:function(a) {
    var b = MochiKit.DOM.getElement(a);
    if(b == null) {
        return!1
    }
    var c = b.className;
    typeof c != "string" && typeof b.getAttribute == "function" && (c = b.getAttribute("class"));
    if(typeof c != "string") {
        return!1
    }
    b = c.split(" ");
    for(c = 1;c < arguments.length;c++) {
        for(var d = !1, e = 0;e < b.length;e++) {
            if(b[e] == arguments[c]) {
                d = !0;
                break
            }
        }
        if(!d) {
            return!1
        }
    }
    return!0
}, escapeHTML:function(a) {
    return a.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;")
}, toHTML:function(a) {
    return MochiKit.DOM.emitHTML(a).join("")
}, emitHTML:function(a, b) {
    if(typeof b == "undefined" || b === null) {
        b = []
    }
    for(var c = [a], d = MochiKit.DOM, e = d.escapeHTML, d = d.attributeArray;c.length;) {
        if(a = c.pop(), typeof a == "string") {
            b.push(a)
        }else {
            if(a.nodeType == 1) {
                b.push("<" + a.tagName.toLowerCase());
                for(var f = [], g = d(a), h = 0;h < g.length;h++) {
                    var i = g[h];
                    f.push([" ", i.name, '="', e(i.value), '"'])
                }
                f.sort();
                for(h = 0;h < f.length;h++) {
                    g = f[h];
                    for(i = 0;i < g.length;i++) {
                        b.push(g[i])
                    }
                }
                if(a.hasChildNodes()) {
                    b.push(">");
                    c.push("</" + a.tagName.toLowerCase() + ">");
                    f = a.childNodes;
                    for(h = f.length - 1;h >= 0;h--) {
                        c.push(f[h])
                    }
                }else {
                    b.push("/>")
                }
            }else {
                a.nodeType == 3 && b.push(e(a.nodeValue))
            }
        }
    }
    return b
}, scrapeText:function(a, b) {
    var c = [];
    (function(a) {
        var b = a.childNodes;
        if(b) {
            for(var f = 0;f < b.length;f++) {
                arguments.callee.call(this, b[f])
            }
        }
        b = a.nodeValue;
        typeof b == "string" && c.push(b)
    })(MochiKit.DOM.getElement(a));
    return b ? c : c.join("")
}, removeEmptyTextNodes:function(a) {
    for(var a = MochiKit.DOM.getElement(a), b = 0;b < a.childNodes.length;b++) {
        var c = a.childNodes[b];
        c.nodeType == 3 && !/\S/.test(c.nodeValue) && c.parentNode.removeChild(c)
    }
}, getFirstElementByTagAndClassName:function(a, b, c) {
    var d = MochiKit.DOM;
    if(typeof a == "undefined" || a === null) {
        a = "*"
    }
    if(typeof c == "undefined" || c === null) {
        c = d._document
    }
    c = d.getElement(c);
    if(c == null) {
        return null
    }
    a = c.getElementsByTagName(a) || d._document.all;
    if(a.length <= 0) {
        return null
    }else {
        if(typeof b == "undefined" || b === null) {
            return a[0]
        }
    }
    for(c = 0;c < a.length;c++) {
        var d = a[c], e = d.className;
        typeof e != "string" && (e = d.getAttribute("class"));
        if(typeof e == "string") {
            for(var e = e.split(" "), f = 0;f < e.length;f++) {
                if(e[f] == b) {
                    return d
                }
            }
        }
    }
    return null
}, getFirstParentByTagAndClassName:function(a, b, c) {
    var d = MochiKit.DOM, a = d.getElement(a), b = typeof b == "undefined" || b === null ? "*" : b.toUpperCase();
    if(typeof c == "undefined" || c === null) {
        c = null
    }
    if(a) {
        a = a.parentNode
    }
    for(;a && a.tagName;) {
        var e = a.tagName.toUpperCase();
        if((b === "*" || b == e) && (c === null || d.hasElementClass(a, c))) {
            return a
        }
        a = a.parentNode
    }
    return null
}, __new__:function(a) {
    var b = MochiKit.Base;
    if(typeof document != "undefined") {
        this._document = document, this._xhtml = document.documentElement && document.createElementNS && document.documentElement.namespaceURI === "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    }else {
        if(MochiKit.MockDOM) {
            this._document = MochiKit.MockDOM.document
        }
    }
    this._window = a;
    this.domConverters = new b.AdapterRegistry;
    var a = this._document.createElement("span"), c;
    if(a && a.attributes && a.attributes.length > 0) {
        var d = b.filter;
        c = function(a) {
            return d(c.ignoreAttrFilter, a.attributes)
        };
        c.ignoreAttr = {};
        for(var a = a.attributes, e = c.ignoreAttr, f = 0;f < a.length;f++) {
            var g = a[f];
            e[g.name] = g.value
        }
        c.ignoreAttrFilter = function(a) {
            return c.ignoreAttr[a.name] != a.value
        };
        c.compliant = !1;
        c.renames = {"class":"className", checked:"defaultChecked", usemap:"useMap", "for":"htmlFor", readonly:"readOnly", colspan:"colSpan", bgcolor:"bgColor", cellspacing:"cellSpacing", cellpadding:"cellPadding"}
    }else {
        c = function(a) {
            return a.attributes
        }, c.compliant = !0, c.ignoreAttr = {}, c.renames = {}
    }
    c.__export__ = !1;
    this.attributeArray = c;
    b._deprecated(this, "computedStyle", "MochiKit.Style.getStyle", "1.4", !0);
    b._deprecated(this, "elementDimensions", "MochiKit.Style.getElementDimensions", "1.4");
    b._deprecated(this, "elementPosition", "MochiKit.Style.getElementPosition", "1.4");
    b._deprecated(this, "getViewportDimensions", "MochiKit.Style.getViewportDimensions", "1.4");
    b._deprecated(this, "hideElement", "MochiKit.Style.hideElement", "1.4");
    b._deprecated(this, "makeClipping", "MochiKit.Style.makeClipping", "1.4.1");
    b._deprecated(this, "makePositioned", "MochiKit.Style.makePositioned", "1.4.1");
    b._deprecated(this, "setElementDimensions", "MochiKit.Style.setElementDimensions", "1.4");
    b._deprecated(this, "setElementPosition", "MochiKit.Style.setElementPosition", "1.4");
    b._deprecated(this, "setDisplayForElement", "MochiKit.Style.setDisplayForElement", "1.4");
    b._deprecated(this, "setOpacity", "MochiKit.Style.setOpacity", "1.4");
    b._deprecated(this, "showElement", "MochiKit.Style.showElement", "1.4");
    b._deprecated(this, "undoClipping", "MochiKit.Style.undoClipping", "1.4.1");
    b._deprecated(this, "undoPositioned", "MochiKit.Style.undoPositioned", "1.4.1");
    b._deprecated(this, "Coordinates", "MochiKit.Style.Coordinates", "1.4");
    b._deprecated(this, "Dimensions", "MochiKit.Style.Dimensions", "1.4");
    a = this.createDOMFunc;
    this.UL = a("ul");
    this.OL = a("ol");
    this.LI = a("li");
    this.DL = a("dl");
    this.DT = a("dt");
    this.DD = a("dd");
    this.TD = a("td");
    this.TR = a("tr");
    this.TBODY = a("tbody");
    this.THEAD = a("thead");
    this.TFOOT = a("tfoot");
    this.TABLE = a("table");
    this.TH = a("th");
    this.INPUT = a("input");
    this.SPAN = a("span");
    this.A = a("a");
    this.DIV = a("div");
    this.IMG = a("img");
    this.BUTTON = a("button");
    this.TT = a("tt");
    this.PRE = a("pre");
    this.H1 = a("h1");
    this.H2 = a("h2");
    this.H3 = a("h3");
    this.H4 = a("h4");
    this.H5 = a("h5");
    this.H6 = a("h6");
    this.BR = a("br");
    this.HR = a("hr");
    this.LABEL = a("label");
    this.TEXTAREA = a("textarea");
    this.FORM = a("form");
    this.P = a("p");
    this.SELECT = a("select");
    this.OPTION = a("option");
    this.OPTGROUP = a("optgroup");
    this.LEGEND = a("legend");
    this.FIELDSET = a("fieldset");
    this.STRONG = a("strong");
    this.CANVAS = a("canvas");
    this.$ = this.getElement;
    b.nameFunctions(this)
}});
MochiKit.DOM.__new__(typeof window == "undefined" ? this : window);
if(MochiKit.__export__) {
    withWindow = MochiKit.DOM.withWindow, withDocument = MochiKit.DOM.withDocument
}
MochiKit.Base._exportSymbols(this, MochiKit.DOM);
__FILE__ = "3rdparty/mochikit/MochiKit/Style.js";
MochiKit.Base._module("Style", "1.5", ["Base", "DOM"]);
MochiKit.Style.Dimensions = function(a, b) {
    if(!(this instanceof MochiKit.Style.Dimensions)) {
        return new MochiKit.Style.Dimensions(a, b)
    }
    this.w = a;
    this.h = b
};
MochiKit.Style.Dimensions.prototype.__repr__ = function() {
    var a = MochiKit.Base.repr;
    return"{w: " + a(this.w) + ", h: " + a(this.h) + "}"
};
MochiKit.Style.Dimensions.prototype.toString = function() {
    return this.__repr__()
};
MochiKit.Style.Coordinates = function(a, b) {
    if(!(this instanceof MochiKit.Style.Coordinates)) {
        return new MochiKit.Style.Coordinates(a, b)
    }
    this.x = a;
    this.y = b
};
MochiKit.Style.Coordinates.prototype.__repr__ = function() {
    var a = MochiKit.Base.repr;
    return"{x: " + a(this.x) + ", y: " + a(this.y) + "}"
};
MochiKit.Style.Coordinates.prototype.toString = function() {
    return this.__repr__()
};
MochiKit.Base.update(MochiKit.Style, {getStyle:function(a, b) {
    var c = MochiKit.DOM, d = c._document, a = c.getElement(a), b = MochiKit.Base.camelize(b);
    if(a && a != d) {
        if(b == "opacity" && typeof a.filters != "undefined") {
            if((c = (MochiKit.Style.getStyle(a, "filter") || "").match(/alpha\(opacity=(.*)\)/)) && c[1]) {
                return parseFloat(c[1]) / 100
            }
            return 1
        }
        if(b == "float" || b == "cssFloat" || b == "styleFloat") {
            return a.style["float"] ? a.style["float"] : a.style.cssFloat ? a.style.cssFloat : a.style.styleFloat ? a.style.styleFloat : "none"
        }
        c = a.style ? a.style[b] : null;
        if(!c) {
            if(d.defaultView && d.defaultView.getComputedStyle) {
                c = d.defaultView.getComputedStyle(a, null), b = b.replace(/([A-Z])/g, "-$1").toLowerCase(), c = c ? c.getPropertyValue(b) : null
            }else {
                if(a.currentStyle && (c = a.currentStyle[b], /^\d/.test(c) && !/px$/.test(c) && b != "fontWeight")) {
                    var d = a.style.left, e = a.runtimeStyle.left;
                    a.runtimeStyle.left = a.currentStyle.left;
                    a.style.left = c || 0;
                    c = a.style.pixelLeft + "px";
                    a.style.left = d;
                    a.runtimeStyle.left = e
                }
            }
        }
        b == "opacity" && (c = parseFloat(c));
        /Opera/.test(navigator.userAgent) && MochiKit.Base.findValue(["left", "top", "right", "bottom"], b) != -1 && MochiKit.Style.getStyle(a, "position") == "static" && (c = "auto");
        return c == "auto" ? null : c
    }
}, setStyle:function(a, b) {
    var a = MochiKit.DOM.getElement(a), c;
    for(c in b) {
        switch(c) {
            case "opacity":
                MochiKit.Style.setOpacity(a, b[c]);
                break;
            case "float":
                ;
            case "cssFloat":
                ;
            case "styleFloat":
                typeof a.style["float"] != "undefined" ? a.style["float"] = b[c] : typeof a.style.cssFloat != "undefined" ? a.style.cssFloat = b[c] : a.style.styleFloat = b[c];
                break;
            default:
                a.style[MochiKit.Base.camelize(c)] = b[c]
        }
    }
}, setOpacity:function(a, b) {
    var a = MochiKit.DOM.getElement(a), c = MochiKit.Style;
    if(b == 1) {
        var d = /Gecko/.test(navigator.userAgent) && !/Konqueror|AppleWebKit|KHTML/.test(navigator.userAgent);
        a.style.opacity = d ? 0.999999 : 1;
        /MSIE/.test(navigator.userAgent) && (a.style.filter = c.getStyle(a, "filter").replace(/alpha\([^\)]*\)/gi, ""))
    }else {
        b < 1.0E-5 && (b = 0), a.style.opacity = b, /MSIE/.test(navigator.userAgent) && (a.style.filter = c.getStyle(a, "filter").replace(/alpha\([^\)]*\)/gi, "") + "alpha(opacity=" + b * 100 + ")")
    }
}, getElementPosition:function(a, b) {
    var c = MochiKit.Style, d = MochiKit.DOM;
    typeof a == "string" && (a = d.getElement(a));
    if(!(a == null || !(a != null && a.nodeType == null && typeof a.x == "number" && typeof a.y == "number") && c.getStyle(a, "display") == "none")) {
        var d = new c.Coordinates(0, 0), e = null, f = null, g = MochiKit.DOM._document, f = g.documentElement, g = g.body;
        if(!a.parentNode && a.x && a.y) {
            d.x += a.x || 0, d.y += a.y || 0
        }else {
            if(a.getBoundingClientRect) {
                e = a.getBoundingClientRect(), d.x += e.left + (f.scrollLeft || g.scrollLeft) - (f.clientLeft || 0), d.y += e.top + (f.scrollTop || g.scrollTop) - (f.clientTop || 0)
            }else {
                if(a.offsetParent) {
                    d.x += a.offsetLeft;
                    d.y += a.offsetTop;
                    f = a.offsetParent;
                    if(f != a) {
                        for(;f;) {
                            d.x += parseInt(f.style.borderLeftWidth) || 0, d.y += parseInt(f.style.borderTopWidth) || 0, d.x += f.offsetLeft, d.y += f.offsetTop, f = f.offsetParent
                        }
                    }
                    f = navigator.userAgent.toLowerCase();
                    if(typeof opera != "undefined" && parseFloat(opera.version()) < 9 || f.indexOf("AppleWebKit") != -1 && c.getStyle(a, "position") == "absolute") {
                        d.x -= g.offsetLeft, d.y -= g.offsetTop
                    }
                    for(f = a.parentNode ? a.parentNode : null;f;) {
                        g = f.tagName.toUpperCase();
                        if(g === "BODY" || g === "HTML") {
                            break
                        }
                        c.getStyle(f, "display").search(/^inline|table-row.*$/i) && (d.x -= f.scrollLeft, d.y -= f.scrollTop);
                        f = f.parentNode ? f.parentNode : null
                    }
                }
            }
        }
        if(b && (b = arguments.callee(b))) {
            d.x -= b.x || 0, d.y -= b.y || 0
        }
        return d
    }
}, setElementPosition:function(a, b, c) {
    a = MochiKit.DOM.getElement(a);
    typeof c == "undefined" && (c = "px");
    var d = {}, e = MochiKit.Base.isUndefinedOrNull;
    e(b.x) || (d.left = b.x + c);
    e(b.y) || (d.top = b.y + c);
    MochiKit.DOM.updateNodeAttributes(a, {style:d})
}, makePositioned:function(a) {
    var a = MochiKit.DOM.getElement(a), b = MochiKit.Style.getStyle(a, "position");
    if(b == "static" || !b) {
        if(a.style.position = "relative", /Opera/.test(navigator.userAgent)) {
            a.style.top = 0, a.style.left = 0
        }
    }
}, undoPositioned:function(a) {
    a = MochiKit.DOM.getElement(a);
    if(a.style.position == "relative") {
        a.style.position = a.style.top = a.style.left = a.style.bottom = a.style.right = ""
    }
}, makeClipping:function(a) {
    var a = MochiKit.DOM.getElement(a), b = a.style, b = {overflow:b.overflow, "overflow-x":b.overflowX, "overflow-y":b.overflowY};
    if((MochiKit.Style.getStyle(a, "overflow") || "visible") != "hidden") {
        a.style.overflow = "hidden", a.style.overflowX = "hidden", a.style.overflowY = "hidden"
    }
    return b
}, undoClipping:function(a, b) {
    a = MochiKit.DOM.getElement(a);
    if(typeof b == "string") {
        a.style.overflow = b
    }else {
        if(b != null) {
            a.style.overflow = b.overflow, a.style.overflowX = b["overflow-x"], a.style.overflowY = b["overflow-y"]
        }
    }
}, getElementDimensions:function(a, b) {
    var c = MochiKit.Style, d = MochiKit.DOM;
    if(typeof a.w == "number" || typeof a.h == "number") {
        return new c.Dimensions(a.w || 0, a.h || 0)
    }
    if(a = d.getElement(a)) {
        d = c.getStyle(a, "display");
        if(d == "none" || d == "" || typeof d == "undefined") {
            var e = a.style, f = e.visibility, g = e.position, h = e.display;
            e.visibility = "hidden";
            e.position = "absolute";
            e.display = c._getDefaultDisplay(a);
            var d = a.offsetWidth, i = a.offsetHeight;
            e.display = h;
            e.position = g;
            e.visibility = f
        }else {
            d = a.offsetWidth || 0, i = a.offsetHeight || 0
        }
        b && ((f = (e = "colSpan" in a && "rowSpan" in a) && a.parentNode && c.getStyle(a.parentNode, "borderCollapse") == "collapse") ? /MSIE/.test(navigator.userAgent) ? (g = a.previousSibling ? 0.5 : 1, h = a.nextSibling ? 0.5 : 1) : h = g = 0.5 : h = g = 1, d -= Math.round((parseFloat(c.getStyle(a, "paddingLeft")) || 0) + (parseFloat(c.getStyle(a, "paddingRight")) || 0) + g * (parseFloat(c.getStyle(a, "borderLeftWidth")) || 0) + h * (parseFloat(c.getStyle(a, "borderRightWidth")) || 0)), e = e ? /Gecko|Opera/.test(navigator.userAgent) &&
            !/Konqueror|AppleWebKit|KHTML/.test(navigator.userAgent) ? 0 : /MSIE/.test(navigator.userAgent) ? 1 : f ? 0.5 : 1 : 1, i -= Math.round((parseFloat(c.getStyle(a, "paddingTop")) || 0) + (parseFloat(c.getStyle(a, "paddingBottom")) || 0) + e * ((parseFloat(c.getStyle(a, "borderTopWidth")) || 0) + (parseFloat(c.getStyle(a, "borderBottomWidth")) || 0))));
        return new c.Dimensions(d, i)
    }
}, setElementDimensions:function(a, b, c) {
    a = MochiKit.DOM.getElement(a);
    typeof c == "undefined" && (c = "px");
    var d = {}, e = MochiKit.Base.isUndefinedOrNull;
    e(b.w) || (d.width = b.w + c);
    e(b.h) || (d.height = b.h + c);
    MochiKit.DOM.updateNodeAttributes(a, {style:d})
}, _getDefaultDisplay:function(a) {
    var b = MochiKit.Style;
    if(a = MochiKit.DOM.getElement(a)) {
        return a = a.tagName.toUpperCase(), b._defaultDisplay[a] || "block"
    }
}, setDisplayForElement:function(a, b) {
    for(var c = MochiKit.Base.extend(null, arguments, 1), d = MochiKit.DOM.getElement, e = 0;e < c.length;e++) {
        if(b = d(c[e])) {
            b.style.display = a
        }
    }
}, getViewportDimensions:function() {
    var a = new MochiKit.Style.Dimensions, b = MochiKit.DOM._window, c = MochiKit.DOM._document.body;
    if(b.innerWidth) {
        a.w = b.innerWidth, a.h = b.innerHeight
    }else {
        if(c && c.parentElement && c.parentElement.clientWidth) {
            a.w = c.parentElement.clientWidth, a.h = c.parentElement.clientHeight
        }else {
            if(c && c.clientWidth) {
                a.w = c.clientWidth, a.h = c.clientHeight
            }
        }
    }
    return a
}, getViewportPosition:function() {
    var a = new MochiKit.Style.Coordinates(0, 0), b = MochiKit.DOM._document, c = b.documentElement, b = b.body;
    if(c && (c.scrollTop || c.scrollLeft)) {
        a.x = c.scrollLeft, a.y = c.scrollTop
    }else {
        if(b) {
            a.x = b.scrollLeft, a.y = b.scrollTop
        }
    }
    return a
}, __new__:function() {
    var a = MochiKit.Base, b = ["A", "ABBR", "ACRONYM", "B", "BASEFONT", "BDO", "BIG", "BR", "CITE", "CODE", "DFN", "EM", "FONT", "I", "IMG", "KBD", "LABEL", "Q", "S", "SAMP", "SMALL", "SPAN", "STRIKE", "STRONG", "SUB", "SUP", "TEXTAREA", "TT", "U", "VAR"];
    this._defaultDisplay = {TABLE:"table", THEAD:"table-header-group", TBODY:"table-row-group", TFOOT:"table-footer-group", COLGROUP:"table-column-group", COL:"table-column", TR:"table-row", TD:"table-cell", TH:"table-cell", CAPTION:"table-caption", LI:"list-item", INPUT:"inline-block", SELECT:"inline-block"};
    if(/MSIE/.test(navigator.userAgent)) {
        for(var c in this._defaultDisplay) {
            this._defaultDisplay[c].indexOf("table") == 0 && (this._defaultDisplay[c] = "block")
        }
    }
    for(c = 0;c < b.length;c++) {
        this._defaultDisplay[b[c]] = "inline"
    }
    a._deprecated(this, "elementPosition", "MochiKit.Style.getElementPosition", "1.3", !0);
    a._deprecated(this, "elementDimensions", "MochiKit.Style.getElementDimensions", "1.3", !0);
    this.hideElement = a.partial(this.setDisplayForElement, "none");
    this.showElement = a.partial(this.setDisplayForElement, "block");
    a.nameFunctions(this)
}});
MochiKit.Style.__new__();
MochiKit.Base._exportSymbols(this, MochiKit.Style);
__FILE__ = "luna/common/lib/minimochi.js";
if(!globals.document) {
    globals.document = {createElement:function() {
        return null
    }}, globals.navigator = {}
}
(function() {
    var a = function(a, c) {
        globals[c] = a[c]
    };
    a(MochiKit.Async, "Deferred");
    a(MochiKit.Async, "succeed");
    a(MochiKit.Base, "NamedError");
    a(MochiKit.Base, "_exportSymbols");
    a(MochiKit.Base, "_module");
    a(MochiKit.Base, "bind");
    a(MochiKit.Base, "compose");
    a(MochiKit.Base, "concat");
    a(MochiKit.Base, "extend");
    a(MochiKit.Base, "filter");
    a(MochiKit.Base, "findValue");
    a(MochiKit.Base, "flattenArguments");
    a(MochiKit.Base, "forwardCall");
    a(MochiKit.Base, "isArrayLike");
    a(MochiKit.Base, "map");
    a(MochiKit.Base, "merge");
    a(MochiKit.Base, "method");
    a(MochiKit.Base, "methodcaller");
    a(MochiKit.Base, "nameFunctions");
    a(MochiKit.Base, "operator");
    a(MochiKit.Base, "partial");
    a(MochiKit.Base, "update");
    a(MochiKit.Base, "NamedError");
    a(MochiKit.Base, "_exportSymbols");
    a(MochiKit.Base, "_module");
    a(MochiKit.Base, "bind");
    a(MochiKit.Base, "concat");
    a(MochiKit.Base, "extend");
    a(MochiKit.Base, "forwardCall");
    a(MochiKit.Base, "isArrayLike");
    a(MochiKit.Base, "values");
    a(MochiKit.Base, "nameFunctions");
    a(MochiKit.Base, "setdefault");
    a(MochiKit.DOM, "$");
    a(MochiKit.DOM, "_newCallStack");
    a(MochiKit.DOM, "addLoadEvent");
    a(MochiKit.DOM, "addToCallStack");
    a(MochiKit.DOM, "escapeHTML");
    a(MochiKit.Iter, "forEach");
    a(MochiKit.Iter, "isIterable");
    a(MochiKit.Iter, "iter");
    a(MochiKit.Iter, "repeat");
    a(MochiKit.Iter, "reversed");
    a(MochiKit.Iter, "some");
    a(MochiKit.Iter, "sum");
    a(MochiKit.Iter, "range")
})();
noop = function() {
};
isArrayLike = function() {
    for(var a = 0;a < arguments.length;a++) {
        var b = arguments[a], c = typeof b;
        if(c !== "object" && !(c === "function" && typeof b.item === "function") || b === null || typeof b.length !== "number" || "nodeType" in b && (b.nodeType === 3 || b.nodeType === 4)) {
            return!1
        }
    }
    return!0
};
__FILE__ = "luna/common/lib/basics.js";
$A = concat;
intl = function(a) {
    return a
};
breakpoint = function() {
    globals["debugger"] = null;
    if(!breakpoint._in_progress) {
        breakpoint._in_progress = !0;
        debugger;
        breakpoint._in_progress = !1
    }
};
breakpoint._in_progress = !1;
breakpointInProgress = function() {
    return breakpoint._in_progress
};
lowLevelUfu = function(a) {
    breakpoint();
    throw a;
};
throwAssertFailure = function(a) {
    var b = $A(arguments).slice(1);
    typeof ufuWithOptions === "undefined" ? lowLevelUfu(["Assertion failed, and ufuWithOptions not loaded"].concat(b)) : ufuWithOptions({name_for_hoptoad_grouping:a, args:["Assertion failed"].concat(b)})
};
assert = function(a) {
    if(!a) {
        var b = $A(arguments).slice(1), c;
        try {
            c = PrettyPrintUtils.stringify(b)
        }catch(d) {
            c = b.join(", ")
        }
        throwAssertFailure(["assert", c].join("/"), c)
    }
};
throwAssertRelationFailure = function(a, b, c, d) {
    var e = $A(arguments).slice(3), e = PrettyPrintUtils.stringify(e), f = [];
    f.push(["assert", d, b, a].join("/"));
    e !== "" && f.push(prettyProof(e));
    f.push(prettyProof("Expected:\n"));
    f.push(prettyProof(indent(prettyPrint(b))));
    f.push(prettyProof(a));
    f.push(prettyProof(indent(prettyPrint(c))));
    throwAssertFailure.apply(null, f)
};
assertEquals = function(a, b) {
    equals(a, b) || throwAssertRelationFailure.apply(null, concat(["but got:"], arguments))
};
assertNotEquals = function(a, b) {
    equals(a, b) && throwAssertRelationFailure.apply(null, concat(["!="], arguments))
};
assertDoesNotThrowInstanceOf = function(a, b) {
    try {
        b()
    }catch(c) {
        if(c instanceof a) {
            throwAssertRelationFailure.apply(null, concat(["! throw instanceof"], [a, c].concat($A(arguments).slice(2))))
        }else {
            throw c;
        }
    }
};
assertEq = assertEquals;
assertNe = assertNotEquals;
assertLt = function(a, b) {
    compare(a, b) >= 0 && throwAssertRelationFailure.apply(null, concat(["<"], arguments))
};
assertLe = function(a, b) {
    compare(a, b) > 0 && throwAssertRelationFailure.apply(null, concat(["<="], arguments))
};
assertGt = function(a, b) {
    compare(a, b) <= 0 && throwAssertRelationFailure.apply(null, concat([">"], arguments))
};
assertGe = function(a, b) {
    compare(a, b) < 0 && throwAssertRelationFailure.apply(null, concat([">="], arguments))
};
assertInstanceof = function(a, b) {
    a instanceof b || throwAssertRelationFailure.apply(null, concat(["instanceof"], arguments))
};
assertNotNull = function(a) {
    null === a && throwAssertRelationFailure.apply(null, concat(["not", "[Not null]"], arguments))
};
assertAllDefined = function() {
    $A(arguments).forEach(function(a, b) {
        void 0 === a && throwAssertFailure("assertAllDefined", "Value is undefined -- argument", b + 1)
    })
};
assertIn = function(a, b) {
    a.findIndex(partial(equals, b)) < 0 && throwAssertFailure("assertIn", "Expected one of:", a, "but got:", b)
};
memberOr = function(a, b, c) {
    return b in a ? a[b] : c
};
head = function(a) {
    return a[0]
};
tail = function(a) {
    return a.slice(1)
};
last = function(a) {
    return a[a.length - 1]
};
makeUniqueValue = function(a) {
    return a ? [a] : []
};
makeCounter = function(a) {
    var b = a || 0;
    return function() {
        return b++
    }
};
localUniq = makeCounter();
localID = function(a) {
    if(!("__localid" in a)) {
        a.__localid = "obj_" + localUniq()
    }
    return a.__localid
};
setLocalID = function(a, b) {
    a.__localid = b
};
equals = function(a, b) {
    return a instanceof Object && "__localid" in a ? b instanceof Object && "__localid" in b && a.__localid === b.__localid : a === b
};
hashKey = function(a) {
    if(a === null) {
        return"null"
    }else {
        if(a === void 0) {
            return"undefined"
        }
    }
    switch(typeof a) {
        case "number":
            return"n" + a;
        case "boolean":
            return a;
        case "string":
            return"str_" + a;
        default:
            return localID(a)
    }
};
ABSTRACT = function() {
    ufu("Trying to call ABSTRACT")
};
Interface = function() {
};
update(Interface, {prototype:{}, create:function(a, b, c, d) {
    a.indexOf("I") !== 1 + a.lastIndexOf(".") && lowLevelUfu("Bad interface name, must start with I: " + a);
    d === void 0 && lowLevelUfu("Interface.create() takes 4 arguments, pass more for: " + a);
    var e = new Interface;
    e.name = a;
    update(e, c);
    e.__instance_members = {};
    e.__instance_members["__implements_" + e.name] = !0;
    e.__super_interfaces = b;
    for(a = 0;a < b.length;a++) {
        update(e.__instance_members, b[a].__instance_members)
    }
    for(var f in d) {
        e.__instance_members[f] = d[f]
    }
    return e
}, instanceImplements:function(a, b) {
    return a !== null && a["__implements_" + b.name] === !0
}});
update(Interface.prototype, {patchClass:function(a) {
    a = a.prototype;
    if(!a["__implements_" + this.name]) {
        for(var b in this.__instance_members) {
            b in a || (a[b] = this.__instance_members[b])
        }
    }
}, patchInstance:function(a) {
    if(!a["__implements_" + this.name]) {
        for(var b in this.__instance_members) {
            b in a || (a[b] = this.__instance_members[b])
        }
    }
}, addToClass:function(a) {
    a = a.prototype;
    if(!a["__implements_" + this.name]) {
        for(var b in this.__instance_members) {
            var c = this.__instance_members[b];
            if(c !== ABSTRACT || !(b in a)) {
                a[b] = c
            }
        }
    }
}, isImplementedByClass:function(a) {
    return a.prototype["__implements_" + this.name] === !0
}, getPrettyInfo:function() {
    return[this.name, []]
}});
SET_IN_CONSTRUCTOR = "set-in-constructor";
UNSUPPORTED_METHOD = function() {
    ufu("Unsupported method", this)
};
DIAGNOSTICS_COUNT_INSTANCES = !1;
instance_counts = {};
printInstanceCounts = function() {
    var a = [], b = 0;
    Map.mapEntries(instance_counts, function(c, d) {
        d !== 0 && (a.push([d, c]), b += d)
    });
    a.sort(function(a, b) {
        return b[0] - a[0]
    });
    host.console.println("Total: " + b);
    host.console.println(a.join("\n"));
    resetInstanceCounts()
};
resetInstanceCounts = function() {
    Map.forEach(instance_counts, function(a) {
        instance_counts[a] = 0
    })
};
AsanaObject = function() {
    var a = function(b, c, d, e, f) {
        if(c.__allow_object_instance_members && !("__allow_object_instance_members" in e)) {
            e.__allow_object_instance_members = !0
        }
        if(!e.__allow_object_instance_members) {
            for(var g in f) {
                var h = f[g];
                typeof h === "object" && h !== null && lowLevelUfu("instance field " + g + " in class " + b + " is an object. That is not allowed")
            }
        }
        var i = function() {
        };
        i.prototype = new c;
        for(h = 0;h < d.length;h++) {
            d[h].addToClass(i)
        }
        update(i.prototype, f);
        i.__type_name = b;
        i.toString = function() {
            return"class:" + b
        };
        i.__file = __FILE__;
        i.prototype.__type_name = b;
        i.prototype.__type = i;
        i.prototype.assignNewLocalID = function() {
            this.__localid = localUniq()
        };
        i.superproto = c.prototype;
        i.superclass = c;
        i.subclasses = [];
        c !== Object && c.subclasses.push(i);
        update(i, e);
        i.subclass = function(b, c, d, e) {
            arguments.length === 3 ? (e = d, d = c, c = []) : arguments.length !== 4 && lowLevelUfu("Invalid arguments to subclass" + $A(arguments));
            return a(b, this, c, d, e)
        };
        i._staticConstructor = function(a) {
            c !== Object && c._staticConstructor.call(c, a);
            i.staticConstructor !== void 0 && i.staticConstructor.call(i, a)
        };
        i.isSuperclassOf = function(a) {
            return i === a || a.prototype !== void 0 && a.prototype instanceof i
        };
        instance_counts[b] = 0;
        i._staticConstructor(i);
        i.__abstract_keys = [];
        for(g in i.prototype) {
            i.prototype[g] === ABSTRACT && i.__abstract_keys.push(g)
        }
        i.is_abstract = i.__abstract_keys.length !== 0;
        i._create = i.is_abstract ? function() {
            ufu("Class", b, "has abstract members: ", i.__abstract_keys)
        } : function(a, c, d, e, f, g, h, t, w, v, r) {
            r !== void 0 && ufu("Attempt to pass too many arguments to a constructor");
            DIAGNOSTICS_COUNT_INSTANCES && instance_counts[b]++;
            r = new i;
            r.__localid = localUniq();
            r.constructor(a, c, d, e, f, g, h, t, w, v);
            r._constructed || ufu("Call did not call constructor chain: " + b);
            return r
        };
        if(i.create === void 0) {
            i.create = i._create
        }
        return i
    };
    return a("AsanaObject", Object, [], {}, {constructor:function() {
        this._constructed = !0
    }, toString:function() {
        return"[" + this.__type_name + "]"
    }, isImplOf:function(a) {
        return this["__implements_" + a.name] === !0
    }, __setFields:function(a) {
        var c = this;
        Map.forEach(a, function(a, b) {
            a in c || lowLevelUfu("AsanaObject has no such field:" + a);
            c[a] = b
        })
    }})
}();
isInstanceOf = function(a, b) {
    return a instanceof b
};
if(!RegExp.escape) {
    RegExp.escape = function(a, b) {
        return b !== !0 ? a.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&") : a.replace(/[-[\]{}()*+?.,\\^$|#]/g, "\\$&")
    }
}
if(!globals.hasOwnProperty) {
    globals.hasOwnProperty = function(a) {
        return!!globals[a]
    }
}
ATTRIBUTE_REQUIRED = "updateWithDefaults.ATTRIBUTE_REQUIRED";
ATTRIBUTE_OPTIONAL = "updateWithDefaults.ATTRIBUTE_OPTIONAL";
attributedFunc = function(a, b) {
    var c = function(c) {
        c = updateWithDefaults(c, a);
        return b.call(this, c)
    };
    c.attribute_spec = a;
    c.bareFunc = b;
    return c
};
attributedConstructorAfterSuper = function(a, b) {
    return function(c) {
        c = c === void 0 ? {} : c;
        a.prototype.constructor.call(this);
        update(this, updateWithDefaults(c, this));
        b.call(this)
    }
};
updateWithDefaults = function(a, b) {
    for(var c in a) {
    }
    return updateWithDefaultsAllowExtras(a, b)
};
updateWithDefaultsAllowExtras = function(a, b) {
    for(var c in b) {
        var d = b[c];
        d !== ATTRIBUTE_REQUIRED && a[c] === void 0 && d !== ATTRIBUTE_OPTIONAL && (a[c] = d)
    }
    return a
};
globals.start = globals.stop = function() {
};
getFiredDeferredResult = function(a) {
    return a.results[0]
};
prettyProof = function(a, b) {
    return PrettyProofWrapper.create(a, b)
};
PrettyProofWrapper = AsanaObject.subclass("PrettyProofWrapper", {}, {constructor:function(a, b) {
    PrettyProofWrapper.superproto.constructor.call(this);
    this._str = a;
    this._sub_values = b || null
}, getPrettyInfo:function() {
    return[this._str, this._sub_values]
}, toString:function() {
    return prettyPrint(this)
}});
prettyHint = function(a, b) {
    return PrettyHintWrapper.create(a, b)
};
PrettyHintWrapper = AsanaObject.subclass("PrettyHintWrapper", {}, {constructor:function(a, b) {
    PrettyHintWrapper.superproto.constructor.call(this);
    this._value = a;
    this.max_traversal_depth = b
}, getPrettyInfo:function() {
    return PrettyPrintUtils.getPrettyInfo(this._value)
}, toString:function() {
    return this._value.toString()
}});
Number.MAX_INT_VALUE = Math.pow(2, 53);
Number.MIN_INT_VALUE = -Number.MAX_INT_VALUE;
compare = function(a, b) {
    return a < b ? -1 : a > b ? 1 : 0
};
Class = makeUniqueValue("Class");
isA = function(a, b) {
    return typeof a === "object" ? isInterface(b) ? Interface.instanceImplements(a, b) : typeof b === "function" || b === Node ? a instanceof b : !1 : b === Number ? typeof a === "number" : b === Integer ? typeof a === "number" && parseInt(a, 10) === a : b === String ? typeof a === "string" : b === Boolean ? typeof a === "boolean" : b === Function ? typeof a === "function" : b === Class ? isClass(a) : b === Interface ? isInterface(a) : !1
};
isRawObject = function(a) {
    return typeof a === "object" && a !== null && a.__proto__ === Object.prototype
};
isInterface = function(a) {
    return typeof a === "object" && a instanceof Interface
};
isClass = function(a) {
    if(typeof a === "function" && "prototype" in a) {
        for(var b in a.prototype) {
            return!0
        }
    }
    return a === Object
};
clonePrimitive = function(a, b) {
    b = b || "v";
    if(a instanceof Object) {
        if(a instanceof Array) {
            var c = [], d = Array.prototype
        }else {
            c = {}, d = Object.prototype
        }
        for(k in a) {
            k in d || (c[k] = clonePrimitive(a[k], b + "." + k))
        }
        return c
    }else {
        return a
    }
};
safeTimeout = function(a, b) {
    var c = typeof host !== "undefined" ? host.wrapInExceptionHandler("safeTimeout", ExceptionHandler.ReentryStrategy.DELAY, function() {
        return a.call(this)
    }) : a;
    return setTimeout(c, b)
};
safeInterval = function(a, b) {
    var c = typeof host !== "undefined" ? host.wrapInExceptionHandler("safeInterval", ExceptionHandler.ReentryStrategy.DELAY, function() {
        return a.call(this)
    }) : a;
    return setInterval(c, b)
};
safeClearTimeout = function(a) {
    return clearTimeout(a)
};
defineNamespace = function(a) {
    var b = globals;
    a.split(".").forEach(function(a) {
        a in b || (b[a] = {});
        b = b[a]
    })
};
__FILE__ = "luna/common/lib/iiterable.js";
IIterable = Interface.create("IIterable", [], {STOP:makeUniqueValue("STOP"), NOT_FOUND:makeUniqueValue("NOT_FOUND"), safeForEach:function(a, b, c) {
    a !== null && (isA(a, IIterable) ? a.forEach(b, c) : b.call(c, a, 0, a))
}}, {_iterate:ABSTRACT, contains:function(a) {
    return-1 !== this.findIndex(function(b) {
        return equals(b, a)
    })
}, filter:function(a, b) {
    var c = this, d = [];
    this.forEach(function(e, f) {
        a.call(b, e, f, c) && d.push(e)
    });
    return d
}, find:function(a, b, c) {
    var d = this, e = c !== void 0 ? c : null;
    this._iterate(function(c, g) {
        if(a.call(b, c, g, d)) {
            throw e = c, IIterable.STOP;
        }
    });
    return e
}, findIndex:function(a, b, c) {
    var d = this, e = c !== void 0 ? c : -1;
    this._iterate(function(c, g) {
        if(a.call(b, c, g, d)) {
            throw e = g, IIterable.STOP;
        }
    });
    return e
}, firstNonNull:function() {
    return this.find(function(a) {
        return a !== null
    }, null, null)
}, forEach:function(a, b) {
    this._iterate(a, b)
}, forEachUntil:function(a, b) {
    this._iterate(a, b)
}, isEmpty:function() {
    return this.size() === 0
}, join:function(a) {
    return this.toArray().join(a)
}, any:function(a, b) {
    return this.find(a, b) !== null
}, all:function(a, b) {
    return this.find(function(b, d, e) {
        return!a(b, d, e)
    }, b) === null
}, map:function(a, b) {
    var c = this, d = [];
    this.forEach(function(e, f) {
        d.push(a.call(b, e, f, c))
    });
    return d
}, reduce:function(a, b) {
    var c = b;
    this._iterate(function(b) {
        c = a(c, b)
    });
    return c
}, size:function() {
    var a = 0;
    this._iterate(function() {
        a++
    });
    return a
}, group:function(a, b) {
    var c = this, d = Map.create();
    c.forEach(function(e, f) {
        var g = a.call(b, e, f, c), h = d.getOr(g, null);
        h !== null ? h.push(e) : d.put(g, [e])
    });
    return d
}, toArray:function() {
    var a = [];
    this.forEach(function(b) {
        a.push(b)
    });
    return a
}, maxValue:function(a) {
    var b;
    this.forEach(function(c) {
        b = b === void 0 ? c : a(b, c)
    });
    return b
}});
__FILE__ = "luna/common/lib/ivector.js";
IVector = Interface.create("IVector", [IIterable], {}, {_iterateReverse:ABSTRACT, atIndex:ABSTRACT, removeAtIndex:ABSTRACT, setAtIndex:ABSTRACT, forEachReverse:function(a, b) {
    this._iterateReverse(a, b)
}, pop:function() {
    return this.removeAtIndex(this.size() - 1)
}, push:function() {
    for(var a = 0;a < arguments.length;a++) {
        this.setAtIndex(this.size(), arguments[a])
    }
}, pushAll:function(a) {
    this.push.apply(this, a);
    return this
}, chunk:function(a) {
    for(var b = [], c = this.size(), d = 0;d < c;) {
        b.push(this.slice(d, d + a)), d += a
    }
    return b
}, first:function() {
    return this.atIndex(0)
}, last:function() {
    return this.atIndex(this.size() - 1)
}, indexOf:function(a) {
    return this.findIndex(function(b) {
        return equals(a, b)
    })
}, reverse:function() {
    var a = [];
    this._iterateReverse(function(b) {
        a.push(b)
    });
    return a
}, findLast:function(a, b, c) {
    var d = this, e = c !== void 0 ? c : null;
    this._iterateReverse(function(c, g) {
        if(a.call(b, c, g, d)) {
            throw e = c, IIterable.STOP;
        }
    });
    return e
}, slice:function(a, b) {
    var c = this.size(), d = b === void 0 ? c : b;
    if(c === 0) {
        return[]
    }
    for(;a < 0;) {
        a = c + a
    }
    for(;d < 0;) {
        d = c + d
    }
    for(var e = [], d = d > c ? c : d, c = a;c < d;++c) {
        e.push(this.atIndex(c))
    }
    return e
}, top:function() {
    return this.last()
}});
__FILE__ = "luna/common/lib/iserializable.js";
ISerializable = Interface.create("ISerializable", [], {CONSTRUCTION_ATTRIBUTES:"_construction_attributes"}, {toRawJS:function(a) {
    return a.pojoToRawJS(this[ISerializable.CONSTRUCTION_ATTRIBUTES])
}, fromRawJS:function(a, b) {
    this.constructor(b.pojoFromRawJS(a))
}, typeNameForSerialization:function() {
    return this.__type_name
}, _setConstructionAttributes:function(a) {
    this[ISerializable.CONSTRUCTION_ATTRIBUTES] = a
}});
__FILE__ = "luna/common/lib/array.js";
Array.create = function() {
    return[]
};
Array.safeArrayize = function(a) {
    return a === null || a === void 0 ? [] : isArrayLike(a) ? a : [a]
};
if(typeof Array.prototype.forEach === "function") {
    Array.prototype._forEach = Array.prototype.forEach, Array.prototype.forEach = function() {
        try {
            this._forEach.apply(this, arguments)
        }catch(a) {
            if(a !== IIterable.STOP) {
                throw a;
            }
        }
    }
}
IVector.patchClass(Array);
ISerializable.patchClass(Array);
update(Array.prototype, {_iterate:function(a, b) {
    var c = this.length >>> 0;
    try {
        for(var d = 0;d < c;++d) {
            d in this && a.call(b, this[d], d, this)
        }
    }catch(e) {
        if(e !== IIterable.STOP) {
            throw e;
        }
    }
}, _iterateReverse:function(a, b) {
    var c = this.length >>> 0;
    try {
        for(c -= 1;c >= 0;--c) {
            c in this && a.call(b, this[c], c, this)
        }
    }catch(d) {
        if(d !== IIterable.STOP) {
            throw d;
        }
    }
}, isEmpty:function() {
    return this.length === 0
}, size:function() {
    return this.length
}, atIndex:function(a) {
    return this[a]
}, removeAtIndex:function(a) {
    for(var b = this[a];a < this.length - 1;) {
        this[a] = this[a + 1], a++
    }
    a < this.length && (delete this[this.length - 1], this.length -= 1);
    return b
}, setAtIndex:function(a, b) {
    this[a] = b
}, clone:function() {
    for(var a = this.length, b = Array(a), c = 0;c < a;++c) {
        c in this && (b[c] = this[c])
    }
    return b
}, sortBy:function(a) {
    this.sort(function(b, c) {
        var d = a(b), e = a(c);
        return d < e ? -1 : d === e ? 0 : 1
    })
}, betwixt:function(a) {
    for(var b = [], c = 0;c < this.length;c++) {
        b.push(this[c]), c < this.length - 1 && b.push(a)
    }
    return b
}, toRawJS:function(a) {
    return this.map(function(b) {
        return a.freeze(b)
    })
}, fromRawJS:function(a, b) {
    for(var c = 0;c < a.length;++c) {
        this.push(b.thaw(a[c]))
    }
}});
__FILE__ = "luna/common/lib/crypto.js";
Crypto = {URL_FRIENDLY_ALPHABET:"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", DEFAULT_BASE64_PAD:"=", Algorithm:{MD5:makeUniqueValue("MD5"), SHA1:makeUniqueValue("SHA1"), SHA256:makeUniqueValue("SHA256")}, Format:{HEX:makeUniqueValue("HEX"), BASE64:makeUniqueValue("BASE64"), CUSTOM:makeUniqueValue("CUSTOM")}, hash:function(a, b) {
    var c = copyWithDefaults(b || {}, {algorithm:Crypto.Algorithm.MD5, hmac_key:null, output:Crypto.Format.HEX, output_custom_alphabet:"", output_base64_pad:Crypto.DEFAULT_BASE64_PAD}), d;
    if(globals.env === void 0 || env.is_server) {
        d = (new (require("openssl").OpenSSL)).hash(c.algorithm[0], a, c.hmac_key)
    }else {
        var e = this._impl.str2rstr_utf8(a), f = c.hmac_key !== null ? this._impl.str2rstr_utf8(c.hmac_key) : null;
        c.algorithm === Crypto.Algorithm.MD5 ? d = f !== null ? this._impl.rstr_hmac_md5(f, e) : this._impl.rstr_md5(e) : c.algorithm === Crypto.Algorithm.SHA1 ? d = f !== null ? this._impl.rstr_hmac_sha1(f, e) : this._impl.rstr_sha1(e) : c.algorithm === Crypto.Algorithm.SHA256 ? d = f !== null ? this._impl.rstr_hmac_sha256(f, e) : this._impl.rstr_sha256(e) : ufu("Unknown algorithm", c.algorithm)
    }
    var g;
    c.output === Crypto.Format.HEX ? g = this._impl.rstr2hex(d) : c.output === Crypto.Format.BASE64 ? g = this._impl.rstr2b64(d, c.output_base64_pad) : c.output === Crypto.Format.CUSTOM ? g = this._impl.rstr2any(d, c.output_custom_alphabet) : ufu("Unknown output format", c.output);
    return g
}, stringToBase64:function(a) {
    return require("base64").encode(a).toString("utf8")
}, stringFromBase64:function(a) {
    return require("base64").decode(a).toString("utf8")
}};
Crypto._impl = function() {
    function a(a) {
        for(var b = Array(a.length >> 2), c = 0;c < b.length;c++) {
            b[c] = 0
        }
        for(c = 0;c < a.length * 8;c += 8) {
            b[c >> 5] |= (a.charCodeAt(c / 8) & 255) << c % 32
        }
        return b
    }
    function b(a) {
        for(var b = "", c = 0;c < a.length * 32;c += 8) {
            b += String.fromCharCode(a[c >> 5] >>> c % 32 & 255)
        }
        return b
    }
    function c(a, b) {
        a[b >> 5] |= 128 << b % 32;
        a[(b + 64 >>> 9 << 4) + 14] = b;
        for(var c = 1732584193, i = -271733879, j = -1732584194, l = 271733878, m = 0;m < a.length;m += 16) {
            var o = c, n = i, p = j, F = l, c = e(c, i, j, l, a[m + 0], 7, -680876936), l = e(l, c, i, j, a[m + 1], 12, -389564586), j = e(j, l, c, i, a[m + 2], 17, 606105819), i = e(i, j, l, c, a[m + 3], 22, -1044525330), c = e(c, i, j, l, a[m + 4], 7, -176418897), l = e(l, c, i, j, a[m + 5], 12, 1200080426), j = e(j, l, c, i, a[m + 6], 17, -1473231341), i = e(i, j, l, c, a[m + 7], 22, -45705983), c = e(c, i, j, l, a[m + 8], 7, 1770035416), l = e(l, c, i, j, a[m + 9], 12, -1958414417), j = e(j, l, c,
                i, a[m + 10], 17, -42063), i = e(i, j, l, c, a[m + 11], 22, -1990404162), c = e(c, i, j, l, a[m + 12], 7, 1804603682), l = e(l, c, i, j, a[m + 13], 12, -40341101), j = e(j, l, c, i, a[m + 14], 17, -1502002290), i = e(i, j, l, c, a[m + 15], 22, 1236535329), c = f(c, i, j, l, a[m + 1], 5, -165796510), l = f(l, c, i, j, a[m + 6], 9, -1069501632), j = f(j, l, c, i, a[m + 11], 14, 643717713), i = f(i, j, l, c, a[m + 0], 20, -373897302), c = f(c, i, j, l, a[m + 5], 5, -701558691), l = f(l, c, i,
                j, a[m + 10], 9, 38016083), j = f(j, l, c, i, a[m + 15], 14, -660478335), i = f(i, j, l, c, a[m + 4], 20, -405537848), c = f(c, i, j, l, a[m + 9], 5, 568446438), l = f(l, c, i, j, a[m + 14], 9, -1019803690), j = f(j, l, c, i, a[m + 3], 14, -187363961), i = f(i, j, l, c, a[m + 8], 20, 1163531501), c = f(c, i, j, l, a[m + 13], 5, -1444681467), l = f(l, c, i, j, a[m + 2], 9, -51403784), j = f(j, l, c, i, a[m + 7], 14, 1735328473), i = f(i, j, l, c, a[m + 12], 20, -1926607734), c = d(i ^ j ^ l,
                c, i, a[m + 5], 4, -378558), l = d(c ^ i ^ j, l, c, a[m + 8], 11, -2022574463), j = d(l ^ c ^ i, j, l, a[m + 11], 16, 1839030562), i = d(j ^ l ^ c, i, j, a[m + 14], 23, -35309556), c = d(i ^ j ^ l, c, i, a[m + 1], 4, -1530992060), l = d(c ^ i ^ j, l, c, a[m + 4], 11, 1272893353), j = d(l ^ c ^ i, j, l, a[m + 7], 16, -155497632), i = d(j ^ l ^ c, i, j, a[m + 10], 23, -1094730640), c = d(i ^ j ^ l, c, i, a[m + 13], 4, 681279174), l = d(c ^ i ^ j, l, c, a[m + 0], 11, -358537222), j = d(l ^ c ^
                i, j, l, a[m + 3], 16, -722521979), i = d(j ^ l ^ c, i, j, a[m + 6], 23, 76029189), c = d(i ^ j ^ l, c, i, a[m + 9], 4, -640364487), l = d(c ^ i ^ j, l, c, a[m + 12], 11, -421815835), j = d(l ^ c ^ i, j, l, a[m + 15], 16, 530742520), i = d(j ^ l ^ c, i, j, a[m + 2], 23, -995338651), c = g(c, i, j, l, a[m + 0], 6, -198630844), l = g(l, c, i, j, a[m + 7], 10, 1126891415), j = g(j, l, c, i, a[m + 14], 15, -1416354905), i = g(i, j, l, c, a[m + 5], 21, -57434055), c = g(c, i, j, l, a[m + 12], 6,
                1700485571), l = g(l, c, i, j, a[m + 3], 10, -1894986606), j = g(j, l, c, i, a[m + 10], 15, -1051523), i = g(i, j, l, c, a[m + 1], 21, -2054922799), c = g(c, i, j, l, a[m + 8], 6, 1873313359), l = g(l, c, i, j, a[m + 15], 10, -30611744), j = g(j, l, c, i, a[m + 6], 15, -1560198380), i = g(i, j, l, c, a[m + 13], 21, 1309151649), c = g(c, i, j, l, a[m + 4], 6, -145523070), l = g(l, c, i, j, a[m + 11], 10, -1120210379), j = g(j, l, c, i, a[m + 2], 15, 718787259), i = g(i, j, l, c, a[m + 9], 21,
                -343485551), c = h(c, o), i = h(i, n), j = h(j, p), l = h(l, F)
        }
        return[c, i, j, l]
    }
    function d(a, b, c, d, e, f) {
        return h(i(h(h(b, a), h(d, f)), e), c)
    }
    function e(a, b, c, e, f, g, h) {
        return d(b & c | ~b & e, a, b, f, g, h)
    }
    function f(a, b, c, e, f, g, h) {
        return d(b & e | c & ~e, a, b, f, g, h)
    }
    function g(a, b, c, e, f, g, h) {
        return d(c ^ (b | ~e), a, b, f, g, h)
    }
    function h(a, b) {
        var c = (a & 65535) + (b & 65535);
        return(a >> 16) + (b >> 16) + (c >> 16) << 16 | c & 65535
    }
    function i(a, b) {
        return a << b | a >>> 32 - b
    }
    function j(a) {
        for(var b = Array(a.length >> 2), c = 0;c < b.length;c++) {
            b[c] = 0
        }
        for(c = 0;c < a.length * 8;c += 8) {
            b[c >> 5] |= (a.charCodeAt(c / 8) & 255) << 24 - c % 32
        }
        return b
    }
    function l(a) {
        for(var b = "", c = 0;c < a.length * 32;c += 8) {
            b += String.fromCharCode(a[c >> 5] >>> 24 - c % 32 & 255)
        }
        return b
    }
    function m(a, b) {
        a[b >> 5] |= 128 << 24 - b % 32;
        a[(b + 64 >> 9 << 4) + 15] = b;
        for(var c = Array(80), d = 1732584193, e = -271733879, f = -1732584194, g = 271733878, j = -1009589776, l = 0;l < a.length;l += 16) {
            for(var m = d, o = e, n = f, p = g, u = j, s = 0;s < 80;s++) {
                c[s] = s < 16 ? a[l + s] : i(c[s - 3] ^ c[s - 8] ^ c[s - 14] ^ c[s - 16], 1);
                var z = i(d, 5), E;
                E = s < 20 ? e & f | ~e & g : s < 40 ? e ^ f ^ g : s < 60 ? e & f | e & g | f & g : e ^ f ^ g;
                z = h(h(z, E), h(h(j, c[s]), s < 20 ? 1518500249 : s < 40 ? 1859775393 : s < 60 ? -1894007588 : -899497514));
                j = g;
                g = f;
                f = i(e, 30);
                e = d;
                d = z
            }
            d = h(d, m);
            e = h(e, o);
            f = h(f, n);
            g = h(g, p);
            j = h(j, u)
        }
        return[d, e, f, g, j]
    }
    function o(a, b) {
        return a >>> b | a << 32 - b
    }
    function n(a, b) {
        var c = [1779033703, -1150833019, 1013904242, -1521486534, 1359893119, -1694144372, 528734635, 1541459225], d = Array(64), e, f, g, i, j, l, m, n, C, u, s, z;
        a[b >> 5] |= 128 << 24 - b % 32;
        a[(b + 64 >> 9 << 4) + 15] = b;
        for(C = 0;C < a.length;C += 16) {
            e = c[0];
            f = c[1];
            g = c[2];
            i = c[3];
            j = c[4];
            l = c[5];
            m = c[6];
            n = c[7];
            for(u = 0;u < 64;u++) {
                d[u] = u < 16 ? a[u + C] : h(h(h(o(d[u - 2], 17) ^ o(d[u - 2], 19) ^ d[u - 2] >>> 10, d[u - 7]), o(d[u - 15], 7) ^ o(d[u - 15], 18) ^ d[u - 15] >>> 3), d[u - 16]), s = h(h(h(h(n, o(j, 6) ^ o(j, 11) ^ o(j, 25)), j & l ^ ~j & m), p[u]), d[u]), z = h(o(e, 2) ^ o(e, 13) ^ o(e, 22), e & f ^ e & g ^ f & g), n = m, m = l, l = j, j = h(i, s), i = g, g = f, f = e, e = h(s, z)
            }
            c[0] = h(e, c[0]);
            c[1] = h(f, c[1]);
            c[2] = h(g, c[2]);
            c[3] = h(i, c[3]);
            c[4] = h(j, c[4]);
            c[5] = h(l, c[5]);
            c[6] = h(m, c[6]);
            c[7] = h(n, c[7])
        }
        return c
    }
    var p = [1116352408, 1899447441, -1245643825, -373957723, 961987163, 1508970993, -1841331548, -1424204075, -670586216, 310598401, 607225278, 1426881987, 1925078388, -2132889090, -1680079193, -1046744716, -459576895, -272742522, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, -1740746414, -1473132947, -1341970488, -1084653625, -958395405, -710438585, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, -2117940946, -1838011259, -1564481375,
        -1474664885, -1035236496, -949202525, -778901479, -694614492, -200395387, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, -2067236844, -1933114872, -1866530822, -1538233109, -1090935817, -965641998];
    return{str2rstr_utf8:function(a) {
        for(var b = "", c = -1, d, e;++c < a.length;) {
            d = a.charCodeAt(c), e = c + 1 < a.length ? a.charCodeAt(c + 1) : 0, 55296 <= d && d <= 56319 && 56320 <= e && e <= 57343 && (d = 65536 + ((d & 1023) << 10) + (e & 1023), c++), d <= 127 ? b += String.fromCharCode(d) : d <= 2047 ? b += String.fromCharCode(192 | d >>> 6 & 31, 128 | d & 63) : d <= 65535 ? b += String.fromCharCode(224 | d >>> 12 & 15, 128 | d >>> 6 & 63, 128 | d & 63) : d <= 2097151 && (b += String.fromCharCode(240 | d >>> 18 & 7, 128 | d >>> 12 & 63, 128 | d >>> 6 & 63, 128 |
                d & 63))
        }
        return b
    }, rstr_md5:function(d) {
        return b(c(a(d), d.length * 8))
    }, rstr_hmac_md5:function(d, e) {
        var f = a(d);
        f.length > 16 && (f = c(f, d.length * 8));
        for(var g = Array(16), h = Array(16), i = 0;i < 16;i++) {
            g[i] = f[i] ^ 909522486, h[i] = f[i] ^ 1549556828
        }
        f = c(g.concat(a(e)), 512 + e.length * 8);
        return b(c(h.concat(f), 640))
    }, rstr_sha1:function(a) {
        return l(m(j(a), a.length * 8))
    }, rstr_hmac_sha1:function(a, b) {
        var c = j(a);
        c.length > 16 && (c = m(c, a.length * 8));
        for(var d = Array(16), e = Array(16), f = 0;f < 16;f++) {
            d[f] = c[f] ^ 909522486, e[f] = c[f] ^ 1549556828
        }
        c = m(d.concat(j(b)), 512 + b.length * 8);
        return l(m(e.concat(c), 672))
    }, rstr_sha256:function(a) {
        return l(n(j(a), a.length * 8))
    }, rstr_hmac_sha256:function(a, b) {
        var c = j(a);
        c.length > 16 && (c = n(c, a.length * 8));
        for(var d = Array(16), e = Array(16), f = 0;f < 16;f++) {
            d[f] = c[f] ^ 909522486, e[f] = c[f] ^ 1549556828
        }
        c = n(d.concat(j(b)), 512 + b.length * 8);
        return l(n(e.concat(c), 768))
    }, rstr2hex:function(a) {
        for(var b = "", c, d = 0;d < a.length;d++) {
            c = a.charCodeAt(d), b += "0123456789abcdef".charAt(c >>> 4 & 15) + "0123456789abcdef".charAt(c & 15)
        }
        return b
    }, rstr2b64:function(a, b) {
        b === void 0 && (b = "");
        for(var c = "", d = a.length, e = 0;e < d;e += 3) {
            for(var f = a.charCodeAt(e) << 16 | (e + 1 < d ? a.charCodeAt(e + 1) << 8 : 0) | (e + 2 < d ? a.charCodeAt(e + 2) : 0), g = 0;g < 4;g++) {
                c += e * 8 + g * 6 > a.length * 8 ? b : "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(f >>> 6 * (3 - g) & 63)
            }
        }
        return c
    }, rstr2any:function(a, b) {
        var c = b.length, d, e, f, g, h, i = Array(Math.ceil(a.length / 2));
        for(d = 0;d < i.length;d++) {
            i[d] = a.charCodeAt(d * 2) << 8 | a.charCodeAt(d * 2 + 1)
        }
        var j = Math.ceil(a.length * 8 / (Math.log(b.length) / Math.log(2))), l = Array(j);
        for(e = 0;e < j;e++) {
            h = [];
            for(d = g = 0;d < i.length;d++) {
                if(g = (g << 16) + i[d], f = Math.floor(g / c), g -= f * c, h.length > 0 || f > 0) {
                    h[h.length] = f
                }
            }
            l[e] = g;
            i = h
        }
        c = "";
        for(d = l.length - 1;d >= 0;d--) {
            c += b.charAt(l[d])
        }
        return c
    }}
}();
__FILE__ = "luna/common/lib/indexing.js";
index = function(a, b, c) {
    var d = "__index_" + b;
    d in a || (a[d] = tempIndex(b, a));
    return arguments.length < 3 ? a[d] : a[d][c] || null
};
indexed = function(a, b) {
    b.get = function(c) {
        return index(b, a)[c]
    };
    return b
};
Memoize = AsanaObject.subclass("Memoize", {_counter:makeCounter(), active_memoize_name:null, _memoize:function(a, b, c) {
    return function() {
        var d = c.apply(this, arguments), e = "env" in globals && globals.env ? memberOr(env, "memo_env", null) : null, e = concat([a, this, e], arguments), e = map(hashKey, e).join("|"), f = d[e], g;
        if(f === void 0) {
            f = Memoize.active_memoize_name;
            Memoize.active_memoize_name = a;
            d[e] = Memoize.MEMO_IN_PROGRESS_VALUE;
            try {
                d[e] = g = b.apply(this, arguments)
            }catch(h) {
                throw delete d[e], h;
            }finally {
                Memoize.active_memoize_name = f
            }
        }else {
            f === Memoize.MEMO_IN_PROGRESS_VALUE && ufu("Memoized function called itself with the same arguments. This would have resulted in an infinite recursion.", "memoized name", a, "memoized arguments", arguments), g = d[e]
        }
        return g
    }
}, memoizeLeaky:function(a, b) {
    b.__memoization = {};
    return Memoize._memoize(a, b, function() {
        return b.__memoization
    })
}, memoizeFew:function(a, b) {
    b.__memoization = {};
    return Memoize._memoize(a, b, function() {
        return b.__memoization
    })
}, memoizeInThis:function(a, b) {
    var c = "__memo_" + Memoize._counter();
    return Memoize._memoize(a, b, function() {
        this.hasOwnProperty(c) || (this[c] = {});
        return this[c]
    })
}, memoizeInFirstParam:function(a, b) {
    var c = "__memo_" + Memoize._counter();
    return Memoize._memoize(a, b, function(a) {
        c in a || (a[c] = {});
        return a[c]
    })
}}, {});
Memoize.MEMO_IN_PROGRESS_VALUE = makeUniqueValue("MEMO_IN_PROGRESS");
__FILE__ = "luna/common/lib/registry.js";
Registry = AsanaObject.subclass("Registry", {}, {_registry_map:SET_IN_CONSTRUCTOR, constructor:function() {
    "SystemRegistry" in globals && ufu("For now, you can only create one Registry");
    Registry.superproto.constructor.call(this);
    this._registry_map = {}
}, register:function(a, b) {
    a in this._registry_map && ufu("Duplicate Registry registration for name ", a);
    this._registry_map[a] = b;
    this.isRegistered(b) && ufu("Trying to give a single object two registry names: ", this.getName(b), a);
    b.__registry_name = a;
    return b
}, registerGlobal:function(a, b) {
    globals[a] = this.register(a, b);
    return globals[a]
}, has:function(a) {
    return a in this._registry_map
}, get:function(a) {
    a in this._registry_map || ufu("Nothing in Registry with name: ", a);
    return this._registry_map[a]
}, getName:function(a, b) {
    return this.isRegistered(a) ? a.__registry_name : arguments.length > 1 ? b : null
}, isRegistered:function(a) {
    return a instanceof Object && a.hasOwnProperty("__registry_name")
}});
globals.SystemRegistry = Registry.create();
define = function(a, b) {
    if(b.__type_name === void 0) {
        b.__type_name = a
    }
    if(b.prototype && b.prototype.__type_name === void 0) {
        b.prototype.__type_name = a
    }
    return SystemRegistry.registerGlobal(a, b)
};
__FILE__ = "luna/common/lib/date_time.js";
update(Date, {TZ_LOCAL:"TZ_LOCAL", TZ_UTC:"TZ_UTC", SECONDS_PER_DAY:86400, MILLISECONDS_PER_SECOND:1E3, MILLISECONDS_PER_MINUTE:6E4, MILLISECONDS_PER_HOUR:36E5, MILLISECONDS_PER_DAY:864E5, MILLISECONDS_PER_WEEK:6048E5, Units:{MILLISECONDS:"milliseconds", SECONDS:"seconds", MINUTES:"minutes", HOURS:"hours", DAYS:"days", WEEKS:"weeks", MONTHS:"months", YEARS:"years"}, Names:{MONTHS:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    ABBR_MONTHS:["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], DAYS:["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], ABBR_DAYS:["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]}, Formats:{ISO:"%Y-%m-%dT%H:%M:%S.%N%G", SQL:"%Y-%m-%d %H:%M:%S"}, betterParseDate:function(a) {
    var a = a.toLowerCase().trim(), b = a.split("/");
    if(b.length === 1 && (a.contains("+") || a.contains("-") || a.contains("next") || a.contains("last") || !a.contains(" "))) {
        return a.match(/[a-zA-Z]/) ? (a === "yesterday" ? b = "-1 day" : a === "today" ? b = "+0 days" : a === "tomorrow" ? b = "+1 day" : a.length >= 3 ? (b = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"].find(function(b) {
            return b.startsWith(a.toLowerCase())
        }), b = b !== null ? "next " + b : a) : b = a, b = Date._strtotime(b, env.clock.today() / 1E3), b === !1 ? NaN : b * 1E3) : NaN
    }else {
        if(b.length === 2) {
            return Date._ensureFutureTending(Date.create(Date.parse(a + "/" + env.clock.nowDate().getFullYear()))).getTime()
        }else {
            b = Date.parse(a);
            if(isNaN(b) || b < Date.create(2002, 0, 1, 0) && b >= Date.create(2E3, 0, 1, 0)) {
                return Date._ensureFutureTending(Date.create(Date.parse(a + ", " + env.clock.nowDate().getFullYear()))).getTime()
            }else {
                var c = Date.create(b), b = c.getFullYear();
                b >= 1900 && b < 2E3 && c.setFullYear(b + 100)
            }
            return c.getTime()
        }
    }
}, _ensureFutureTending:function(a) {
    a < env.clock.nowDate() && a.setFullYear(env.clock.nowDate().getFullYear() + 1);
    return a
}, _strtotime:function(a, b) {
    var c, d, e;
    d = e = "";
    e = a.replace(/\s{2,}|^\s|\s$/g, " ");
    e = e.replace(/[\t\r\n]/g, "");
    if(e === "now") {
        return b
    }else {
        if(isNaN(d = Date.parse(e))) {
            b ? b = Date.create(b * 1E3) : ufu("must pass now")
        }else {
            return d / 1E3
        }
    }
    e = e.toLowerCase();
    var f = {day:{sun:0, mon:1, tue:2, wed:3, thu:4, fri:5, sat:6}, mon:{jan:0, feb:1, mar:2, apr:3, may:4, jun:5, jul:6, aug:7, sep:8, oct:9, nov:10, dec:11}}, g = function(a) {
        var c = a[2] && a[2] === "ago", d = (d = a[0] === "last" ? -1 : 1) * (c ? -1 : 1);
        switch(a[0]) {
            case "last":
                ;
            case "next":
                switch(a[1].substring(0, 3)) {
                    case "yea":
                        b.setFullYear(b.getFullYear() + d);
                        break;
                    case "wee":
                        b.setDate(b.getDate() + d * 7);
                        break;
                    case "day":
                        b.setDate(b.getDate() + d);
                        break;
                    case "hou":
                        b.setHours(b.getHours() + d);
                        break;
                    case "min":
                        b.setMinutes(b.getMinutes() + d);
                        break;
                    case "sec":
                        b.setSeconds(b.getSeconds() + d);
                        break;
                    case "mon":
                        if(a[1].substring(0, 4) === "mont") {
                            b.setMonth(b.getMonth() + d);
                            break
                        }else {
                            if(a[1].substring(0, 4) !== "mond") {
                                break
                            }
                        }
                        ;
                    default:
                        if(typeof(c = f.day[a[1].substring(0, 3)]) !== "undefined") {
                            c -= b.getDay(), c === 0 ? c = 7 * d : c > 0 ? a[0] === "last" && (c -= 7) : a[0] === "next" && (c += 7), b.setDate(b.getDate() + c)
                        }
                }
                break;
            default:
                if(/\d+/.test(a[0])) {
                    switch(d *= parseInt(a[0], 10), a[1].substring(0, 3)) {
                        case "yea":
                            b.setFullYear(b.getFullYear() + d);
                            break;
                        case "mon":
                            b.setMonth(b.getMonth() + d);
                            break;
                        case "wee":
                            b.setDate(b.getDate() + d * 7);
                            break;
                        case "day":
                            b.setDate(b.getDate() + d);
                            break;
                        case "hou":
                            b.setHours(b.getHours() + d);
                            break;
                        case "min":
                            b.setMinutes(b.getMinutes() + d);
                            break;
                        case "sec":
                            b.setSeconds(b.getSeconds() + d)
                    }
                }else {
                    return!1
                }
        }
        return!0
    };
    d = e.match(/^(\d{2,4}-\d{2}-\d{2})(?:\s(\d{1,2}:\d{2}(:\d{2})?)?(?:\.(\d+))?)?$/);
    if(d !== null) {
        d[2] ? d[3] || (d[2] += ":00") : d[2] = "00:00:00";
        e = d[1].split(/-/g);
        for(c in f.mon) {
            f.mon[c] === e[1] - 1 && (e[1] = c)
        }
        e[0] = parseInt(e[0], 10);
        e[0] = e[0] >= 0 && e[0] <= 69 ? "20" + (e[0] < 10 ? "0" + e[0] : e[0] + "") : e[0] >= 70 && e[0] <= 99 ? "19" + e[0] : e[0] + "";
        return parseInt(this.strtotime(e[2] + " " + e[1] + " " + e[0] + " " + d[2]) + (d[4] ? d[4] / 1E3 : ""), 10)
    }
    d = e.match(RegExp("([+-]?\\d+\\s(years?|months?|weeks?|days?|hours?|min|minutes?|sec|seconds?|sun\\.?|sunday|mond\\.?|monday|tue\\.?|tuesday|wed\\.?|wednesday|thu\\.?|thursday|fri\\.?|friday|sat\\.?|saturday)|(last|next)\\s(years?|months?|weeks?|days?|hours?|min|minutes?|sec|seconds?|sun\\.?|sunday|mond\\.?|monday|tue\\.?|tuesday|wed\\.?|wednesday|thu\\.?|thursday|fri\\.?|friday|sat\\.?|saturday))(\\sago)?", "gi"));
    if(d === null) {
        return!1
    }
    for(c = 0;c < d.length;c++) {
        if(!g(d[c].split(" "))) {
            return!1
        }
    }
    return b.getTime() / 1E3
}, _format_codes:{matcher:/()%([#!]?(%|[a-z]))/i, A:"DayName", a:"AbbrDayName", B:"MonthName", b:"AbbrMonthName", C:"Century", d:"Date.2", "#d":"Date", e:"Date", G:"GmtOffset", H:"Hours.2", "#H":"Hours", I:"Hours12.2", "#I":"Hours12", L:"Milliseconds.3", "#L":"Milliseconds", M:"Minutes.2", "#M":"Minutes", m:"MonthNumber.2", "#m":"MonthNumber", N:"Milliseconds.3", "#N":"Milliseconds", O:"TimezoneOffset", o:"DayOrdinal", P:"AmPmLowercase", p:"AmPm", S:"Seconds.2", "#S":"Seconds", s:"Unix", w:"Day",
    Y:"FullYear", y:"ShortYear.2", Z:"TimezoneName", "!D":"MostlyPastDayDescription", "!d":"MostlyFutureDayDescription"}, _format_shortcuts:{c:"%a %b %e %H:%M:%S %Y", D:"%m/%d/%y", F:"%Y-%m-%d", n:"\n", R:"%H:%M", r:"%I:%M:%S %p", T:"%H:%M:%S", t:"\t", v:"%e-%b-%Y", X:"%H:%M:%S", x:"%m/%d/%y", "%":"%"}, daysInMonth:function(a, b) {
    if(b === 2) {
        return(new Date(a, 1, 29)).getDate() === 29 ? 29 : 28
    }
    return[void 0, 31, void 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][b]
}, _format:function(a, b) {
    if(Date._format_shortcuts[b]) {
        return a.strftime(Date._format_shortcuts[b])
    }else {
        var c = (Date._format_codes[b] || "").split("."), d = "get" + c[0], d = d in a ? a[d]() : "";
        c[1] && (d = zeroPadLeft(d, c[1]));
        return d
    }
}, makeUtcDateWrapper:function(a) {
    a = a.clone();
    return update(a, {getFullYear:function() {
        return this.getUTCFullYear()
    }, getMonth:function() {
        return this.getUTCMonth()
    }, getDate:function() {
        return this.getUTCDate()
    }, getHours:function() {
        return this.getUTCHours()
    }, getMinutes:function() {
        return this.getUTCMinutes()
    }, getSeconds:function() {
        return this.getUTCSeconds()
    }, getTimezoneOffset:function() {
        return 0
    }, getDay:function() {
        return this.getUTCDay()
    }, getYear:function() {
        host.recordWarningOnce("Use getFullYear instead.");
        return this.getUTCFullYear() - 1900
    }})
}, create:function(a, b, c, d, e, f, g) {
    switch(arguments.length) {
        case 0:
            ufu("Reading the system clock via Date.create() is not supported. Use env.clock.nowDate().");
            break;
        case 1:
            return new Date(a);
        case 2:
            return new Date(a, b);
        case 3:
            return new Date(a, b, c);
        case 4:
            return new Date(a, b, c, d);
        case 5:
            return new Date(a, b, c, d, e);
        case 6:
            return new Date(a, b, c, d, e, f);
        case 7:
            return new Date(a, b, c, d, e, f, g);
        default:
            ufu("Too many arguments to Date.create()")
    }
}});
Date._multipliers = {};
Date._multipliers[Date.Units.MILLISECONDS] = 1;
Date._multipliers[Date.Units.SECONDS] = 1E3;
Date._multipliers[Date.Units.MINUTES] = 6E4;
Date._multipliers[Date.Units.HOURS] = 36E5;
Date._multipliers[Date.Units.DAYS] = Date.MILLISECONDS_PER_DAY;
Date._multipliers[Date.Units.WEEKS] = 7 * Date.MILLISECONDS_PER_DAY;
Date._multipliers[Date.Units.MONTHS] = {add:function(a, b) {
    Date._multipliers[Date.Units.YEARS].add(a, Math[b > 0 ? "floor" : "ceil"](b / 12));
    var c = a.getUTCMonth() + b % 12;
    c === 12 ? (c = 0, a.setUTCFullYear(a.getUTCFullYear() + 1)) : c === -1 && (c = 11, a.setUTCFullYear(a.getUTCFullYear() - 1));
    a.setUTCMonth(c)
}, diff:function(a, b) {
    var c = a.getUTCFullYear() - b.getUTCFullYear(), c = a.getUTCMonth() - b.getUTCMonth() + c * 12, d = a.getDate() - b.getDate();
    return c + d / 30
}};
Date._multipliers[Date.Units.YEARS] = {add:function(a, b) {
    a.setUTCFullYear(a.getUTCFullYear() + Math[b > 0 ? "floor" : "ceil"](b))
}, diff:function(a, b) {
    return Date._multipliers[Date.Units.MONTHS].diff(a, b) / 12
}};
update(Date.prototype, {succ:function(a) {
    return this.clone().add(1, a)
}, add:function(a, b) {
    var c = Date._multipliers[b || Date.Units.DAYS];
    typeof c === "number" ? this.setTime(this.getTime() + c * a) : c.add(this, a);
    return this
}, diff:function(a, b, c) {
    b = Date._multipliers[b || Date.Units.DAYS];
    a = typeof b === "number" ? (this.getTime() - a.getTime()) / b : b.diff(this, a);
    return c ? a : Math[a > 0 ? "floor" : "ceil"](a)
}, strftime:function(a, b) {
    for(var c = b === Date.TZ_UTC ? Date.makeUtcDateWrapper(this) : this, d = a || "%Y-%m-%d", e = "", f;d.length > 0;) {
        (f = d.match(Date._format_codes.matcher)) ? (e += d.slice(0, f.index), e += (f[1] || "") + Date._format(c, f[2]), d = d.slice(f.index + f[0].length)) : (e += d, d = "")
    }
    return e
}, getShortYear:function() {
    return this.getFullYear() % 100
}, getCentury:function() {
    return Math.floor(this.getFullYear() / 100)
}, getMonthNumber:function() {
    return this.getMonth() + 1
}, getMonthName:function() {
    return Date.Names.MONTHS[this.getMonth()]
}, getAbbrMonthName:function() {
    return Date.Names.ABBR_MONTHS[this.getMonth()]
}, getDayName:function() {
    return Date.Names.DAYS[this.getDay()]
}, getAbbrDayName:function() {
    return Date.Names.ABBR_DAYS[this.getDay()]
}, getDayOrdinal:function() {
    return this.getDate().ordinalSuffix()
}, getHours12:function() {
    var a = this.getHours();
    return a > 12 ? a - 12 : a === 0 ? 12 : a
}, getAmPm:function() {
    return this.getHours() >= 12 ? "PM" : "AM"
}, getAmPmLowercase:function() {
    return this.getHours() >= 12 ? "pm" : "am"
}, getUnix:function() {
    return Math.round(this.getTime() / 1E3, 0)
}, getGmtOffset:function() {
    var a = this.getTimezoneOffset() / 60, b = a < 0 ? "+" : "-", a = Math.abs(a);
    return b + zeroPadLeft(Math.floor(a), 2) + ":" + zeroPadLeft(a % 1 * 60, 2)
}, getTimezoneName:function() {
    var a = /(?:\((.+)\)$| ([A-Z]{3}) )/.exec(this.toString());
    return a[1] || a[2] || "GMT" + this.getGmtOffset()
}, toYmdInt:function() {
    return this.getFullYear() * 1E4 + this.getMonthNumber() * 100 + this.getDate()
}, getStaticPastDate:function() {
    return this.strftime("%#I:%M%p on %B %#d")
}, getStaticDayDescription:function() {
    return this.strftime("%B %#d")
}, getMostlyPastDayDescription:function() {
    var a = env.clock.nowDate(), b = this.getDaysPastToday();
    return b === 0 ? "Today" : b === -1 ? "Yesterday" : b === 1 ? "Tomorrow" : b > -7 && b < 0 ? this.getDayName() : this.getFullYear() === a.getFullYear() ? this.strftime("%b %#d") : this.strftime("%b %#d, %Y")
}, getMostlyFutureDayDescription:function() {
    var a = env.clock.nowDate(), b = this.getDaysPastToday();
    return b === 0 ? "Today" : b === -1 ? "Yesterday" : b === 1 ? "Tomorrow" : b > 0 && b < 7 ? this.getDayName() : this.getFullYear() === a.getFullYear() ? this.strftime("%b %#d") : this.strftime("%b %#d, %Y")
}, getPastTimeDescription:function() {
    var a = (env.clock.now() - this.getTime()) / 1E3, b = Math.floor(a / 86400);
    return a < 0 ? null : b === 0 && (a < 60 && "just now" || a < 120 && "1 minute ago" || a < 3600 && Math.floor(a / 60) + " minutes ago" || a < 7200 && "1 hour ago" || a < 86400 && Math.floor(a / 3600) + " hours ago") || b === 1 && "Yesterday" || b + " days ago"
}, getDaysPastToday:function() {
    var a = env.clock.nowDate(), a = Math.floor(a.getLocalTime() / Date.MILLISECONDS_PER_DAY);
    return Math.floor(this.getLocalTime() / Date.MILLISECONDS_PER_DAY) - a
}, getLocalTime:function() {
    return this.getTime() - 6E4 * this.getTimezoneOffset()
}, getDateHashString:function(a) {
    return Crypto.hash(env.clock.nowDate().getTime(), {algorithm:Crypto.Algorithm.MD5, output:Crypto.Format.HEX}).substr(0, a)
}, clone:function() {
    return new Date(this.getTime())
}, describeRelativeToToday:function() {
    return this.strftime("%!D at %#I:%M%P")
}, describeShortRelativeToToday:function() {
    return this.getDaysPastToday() === 0 ? this.strftime("%#I:%M%P") : this.strftime("%!D")
}, renderShortRelativeToToday:function() {
    var a = this.describeShortRelativeToToday(), b = this.strftime("%b %#d, %Y at %#I:%M%P");
    return SPAN({tooltip:b}, [a])
}, describeExactly:function() {
    return this.strftime("%m/%d/%Y %H:%M")
}, describeInLunaLogFormat:function() {
    return this.strftime("[%m-%d %H:%M:%S]")
}, describeInCommonLogFormat:function() {
    return this.strftime("%d/%b/%Y:%H:%M:%S %G")
}, getPrettyInfo:function() {
    return["Date", [this.toUTCString()]]
}});
__FILE__ = "luna/common/lib/data_structures.js";
define("DataStructure", AsanaObject.subclass("DataStructure", {_getPrimitiveIndex:function(a) {
    return hashKey(a)
}, _getPrimitiveIndexOfArray:function(a) {
    return a.map(function(a) {
        return DataStructure._getPrimitiveIndex(a)
    }).join("|")
}}, {toString:function() {
    return prettyPrint(this)
}}));
Compare = {entryKey:function() {
    return function(a, b) {
        return compare(a[0], b[0])
    }
}, entryValue:function() {
    return function(a, b) {
        return compare(a[1], b[1])
    }
}, field:function(a) {
    return function(b, c) {
        return compare(b[a], c[a])
    }
}, method:function(a) {
    return function(b, c) {
        return compare(b[a](), c[a]())
    }
}, reverse:function(a) {
    return function(b, c) {
        return-a(b, c)
    }
}};
define("CircularQueue", DataStructure.subclass("CircularQueue", [IIterable], {}, {_array:SET_IN_CONSTRUCTOR, _capacity:SET_IN_CONSTRUCTOR, _begin:SET_IN_CONSTRUCTOR, _end:SET_IN_CONSTRUCTOR, _size:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    CircularQueue.superproto.constructor.call(this);
    this._capacity = parseInt(a, 10);
    this.clear();
    this.pushAll(b || [])
}, _iterate:function(a, b) {
    try {
        for(var c = this._begin, d = 0;d < this._size;c++, d++) {
            a.call(b, this._array[c % this._capacity], c, this)
        }
    }catch(e) {
        if(e !== IIterable.STOP) {
            throw e;
        }
    }
}, size:function() {
    return this._size
}, first:function() {
    return this._size > 0 ? this._array[this._begin] : void 0
}, last:function() {
    return this._size > 0 ? this._array[(this._end + this._capacity - 1) % this._capacity] : void 0
}, pushAll:function(a) {
    var b = [], c = this;
    a.forEach(function(a) {
        c._size === c._capacity ? b.push(c.push(a)) : c.push(a)
    });
    return b
}, push:function(a) {
    if(this._size === this._capacity) {
        var b = this._array[this._begin];
        this._begin = (this._begin + 1) % this._capacity
    }else {
        b = void 0, this._size++
    }
    this._array[this._end] = a;
    this._end = (this._end + 1) % this._capacity;
    return b
}, pop:function() {
    var a = this._array[this._begin];
    this._array[this._begin] = void 0;
    this._begin = (this._begin + 1) % this._capacity;
    this._size--;
    return a
}, values:function() {
    var a = [];
    this.forEach(function(b) {
        a.push(b)
    });
    return a
}, clear:function() {
    this._array = [];
    this._size = this._end = this._begin = 0
}, getPrettyInfo:function() {
    return[this.__type_name, this.values()]
}}));
define("AbstractMap", DataStructure.subclass("AbstractMap", [ISerializable], {}, {constructor:function(a) {
    AbstractMap.superproto.constructor.call(this);
    this.putAll(a || [])
}, toRawJS:function(a) {
    var b = [];
    this.forEach(function(c, d) {
        b.push([a.freeze(c), a.freeze(d)])
    });
    return b
}, fromRawJS:function(a, b) {
    var c = this;
    c.constructor();
    a.forEach(function(a) {
        c.put(b.thaw(a[0]), b.thaw(a[1]))
    })
}, get:function(a) {
    this.containsKey(a) || ufu("Could not find key in map: ", a);
    return this.find(a)
}, getOr:function(a, b) {
    return this.containsKey(a) ? this.find(a) : b
}, setDefault:function(a, b) {
    if(this.containsKey(a)) {
        return this.find(a)
    }else {
        var c = typeof b === "function" ? b.call(null) : b;
        this.put(a, c);
        return c
    }
}, putAll:function(a) {
    for(var b = 0;b < a.length;++b) {
        var c = a[b];
        this.put(c[0], c[1])
    }
    return this
}, update:function(a) {
    a.forEach(method(this, "put"));
    return this
}, clone:function() {
    return Map.create().update(this)
}, merge:function(a) {
    return Map.merge(this, a)
}, mergeEntry:function(a, b) {
    return this.clone().put(a, b)
}, mapEntries:function(a) {
    return Map.mapEntries(this, a)
}, mapValues:function(a) {
    var b = Map.create();
    this.forEach(function(c, d) {
        b.put(c, a(d, c))
    });
    return b
}, filterEntries:function(a) {
    var b = Map.create();
    this.forEach(function(c, d) {
        a(c, d) && b.put(c, d)
    });
    return b
}, keys:function() {
    return this.mapEntries(function(a) {
        return a
    })
}, values:function() {
    return this.mapEntries(function(a, b) {
        return b
    })
}, getEntries:function() {
    var a = [];
    this.forEach(function(b, c) {
        a.push([b, c])
    });
    return a
}, intersectKeys:function(a) {
    return this.keys().filter(method(a, "containsKey"))
}, remove:function(a) {
    this._removeOne(!1, a);
    return this
}, checkedRemove:function(a) {
    this._removeOne(!0, a);
    return this
}, removeAll:function(a) {
    a.forEach(method(this, "_removeOne", !0));
    return this
}, getCount:function(a) {
    return this.getOr(a, 0)
}, incrementCount:function(a, b) {
    var c;
    c = this.getCount(a) + (b !== void 0 ? b : 1);
    this.put(a, c);
    return c
}, decrementCount:function(a, b) {
    var c = b !== void 0 ? b : 1;
    this.getOr(a, null) === null && ufu("Tried to decrement the count for a non-existent key", a);
    c = this.getCount(a) - c;
    this.put(a, c);
    return c
}, without:function() {
    return Map.prototype.remove.apply(this.clone(), arguments)
}, clear:ABSTRACT, toRawObject:function() {
    var a = {};
    this.forEach(function(b, c) {
        typeof b === "object" && ufu("toRawObject inappropriate for maps with non-primitive keys");
        a[b] = c
    });
    return a
}, size:function() {
    var a = 0;
    this.forEach(function() {
        ++a
    });
    return a
}, getPrettyInfo:function() {
    return[this.__type_name, this.getEntries()]
}, stringMapPrettyPrintable:function() {
    var a = this;
    return{getPrettyInfo:function() {
        return[a.__type_name, map(function(b) {
            return prettyProof(b + ": " + a.get(b))
        }, a.keys().sort())]
    }}
}}));
Map = define("Map", AbstractMap.subclass("Map", {mapize:function(a) {
    if(a instanceof AbstractMap) {
        return a
    }
    var b = Map.create();
    Map.forEach(a, function(a, d) {
        b.put(a, d)
    });
    return b
}, toRawObject:function(a) {
    return a instanceof AbstractMap ? a.toRawObject() : a
}, merge:function() {
    var a = flattenArguments(arguments), b = Map.create();
    forEach(a, method(b, "update"));
    return b
}, forEach:function(a, b) {
    if(a instanceof AbstractMap || a instanceof MultiMap) {
        a.forEach(b)
    }else {
        for(var c in a) {
            c !== "__localid" && b(c, a[c])
        }
    }
}, forEachUntil:function(a, b) {
    if(a instanceof AbstractMap || a instanceof MultiMap) {
        a.forEachUntil(b)
    }else {
        try {
            for(var c in a) {
                c !== "__localid" && b.call(null, c, a[c])
            }
        }catch(d) {
            if(d !== IIterable.STOP) {
                throw d;
            }
        }
    }
}, mapEntries:function(a, b) {
    var c = [];
    Map.forEach(a, function(a, e) {
        c.push(b(a, e))
    });
    return c
}, objectFromMappedValues:function(a, b) {
    var c = {};
    Map.forEach(a, function(a, e) {
        c[a] = b(e)
    });
    return c
}, toOneLineString:function(a, b, c) {
    var d = b || ": ", b = Map.mapEntries(a, function(a, b) {
        return[prettyPrint(a, 0), d, prettyPrint(b, 0)].join("")
    }).join(c || ", ");
    return[prettyPrint(a, 0), "{", b, "}"].join(" ")
}}, {constructor:function(a) {
    this.clear();
    Map.superproto.constructor.call(this, a)
}, getOr:function(a, b) {
    var c = this._entry_map[this._getPrimitiveIndex(a)];
    return c ? c[1] : b
}, find:function(a) {
    return(a = this._entry_map[this._getPrimitiveIndex(a)]) ? a[1] : null
}, put:function(a, b) {
    this._entry_map[this._getPrimitiveIndex(a)] = [a, b];
    return this
}, clear:function() {
    this._entry_map = {}
}, _removeOne:function(a, b) {
    var c = this._getPrimitiveIndex(b);
    a && !(c in this._entry_map) && ufu("Trying to remove an item from a Map that is not already in it.");
    delete this._entry_map[c]
}, containsKey:function(a) {
    return this._getPrimitiveIndex(a) in this._entry_map
}, isEmpty:function() {
    for(var a in this._entry_map) {
        return!1
    }
    return!0
}, forEach:function(a) {
    for(var b in this._entry_map) {
        var c = this._entry_map[b];
        a(c[0], c[1])
    }
}, forEachUntil:function(a) {
    try {
        for(var b in this._entry_map) {
            var c = this._entry_map[b];
            a.call(null, c[0], c[1])
        }
    }catch(d) {
        if(d !== IIterable.STOP) {
            throw d;
        }
    }
}, _getPrimitiveIndex:function(a) {
    return DataStructure._getPrimitiveIndex(a)
}}));
define("ArrayKeyedMap", Map.subclass("ArrayKeyedMap", {}, {_getPrimitiveIndex:function(a) {
    return DataStructure._getPrimitiveIndexOfArray(a)
}}));
define("OMap", AbstractMap.subclass("OMap", {merge:function() {
    var a = flattenArguments(arguments), b = OMap.create();
    forEach(a, method(b, "update"));
    return b
}, zip:function(a, b) {
    return OMap.create(zip(a, b))
}}, {constructor:function(a) {
    this.clear();
    OMap.superproto.constructor.call(this, a)
}, getEntryIndex:function(a) {
    return this._index_map[this._getPrimitiveIndex(a)]
}, find:function(a) {
    return(a = this._entries[this.getEntryIndex(a)]) ? a[1] : null
}, put:function(a, b) {
    var c = this._getPrimitiveIndex(a), d = this._index_map[c];
    if(d === void 0) {
        d = this._entries.length, this._index_map[c] = d
    }
    this._entries[d] = [a, b];
    return this
}, _removeOne:function(a, b) {
    var c = this._getPrimitiveIndex(b), d = this._index_map[c];
    d !== void 0 ? (delete this._index_map[c], this._entries[d] = void 0) : a && ufu("Trying to remove an item from an OMap that does not already exist")
}, clear:function() {
    this._entries = [];
    this._index_map = {}
}, containsKey:function(a) {
    return this.getEntryIndex(a) !== void 0
}, isEmpty:function() {
    for(var a = this._entries, b = 0;b < a.length;++b) {
        if(a[b]) {
            return!1
        }
    }
    return!0
}, forEach:function(a) {
    for(var b = this._entries, c = 0;c < b.length;++c) {
        var d = b[c];
        d && a(d[0], d[1])
    }
}, forEachUntil:function(a) {
    try {
        for(var b = this._entries, c = 0;c < b.length;++c) {
            var d = b[c];
            d && a.call(null, d[0], d[1])
        }
    }catch(e) {
        if(e !== IIterable.STOP) {
            throw e;
        }
    }
}, forEachReverse:function(a) {
    for(var b = this._entries, c = b.length - 1;c >= 0;--c) {
        var d = b[c];
        d && a(d[0], d[1])
    }
}, _getPrimitiveIndex:function(a) {
    return DataStructure._getPrimitiveIndex(a)
}}));
define("ArrayKeyedOMap", OMap.subclass("ArrayKeyedOMap", {}, {_getPrimitiveIndex:function(a) {
    return DataStructure._getPrimitiveIndexOfArray(a)
}}));
MultiMap = define("MultiMap", DataStructure.subclass("MultiMap", [ISerializable], {}, {toRawJS:function(a) {
    var b = [];
    this.forEach(function(c, d) {
        b.push([a.freeze(c), a.freeze(d)])
    });
    return b
}, fromRawJS:function(a, b) {
    var c = this;
    c.constructor();
    a.forEach(function(a) {
        c.addAll(b.thaw(a[0]), b.thaw(a[1]))
    })
}, constructor:function(a) {
    MultiMap.superproto.constructor.call(this);
    this._entry_map = Map.create();
    this._lazy_gc = a || !1
}, add:function(a, b) {
    this._entry_map.containsKey(a) ? this._entry_map.get(a).add(b) : this._entry_map.put(a, Set.create([b]))
}, addAll:function(a, b) {
    var c = this;
    b.forEach(function(b) {
        c.add(a, b)
    })
}, remove:function(a, b) {
    if(this._entry_map.containsKey(a)) {
        var c = this._entry_map.get(a);
        c.remove(b);
        !this._lazy_gc && c.isEmpty() && this._entry_map.remove(a)
    }
}, containsKey:function(a) {
    return this._entry_map.containsKey(a) && !(this._lazy_gc && this._entry_map.get(a).isEmpty())
}, contains:function(a, b) {
    return this.get(a).contains(b)
}, get:function(a) {
    return this._entry_map.getOr(a, ImmutableSet.empty_set)
}, keys:function() {
    return this._entry_map.keys()
}, forEach:function(a) {
    this._lazy_gc ? Map.forEach(this._entry_map, function(b, c) {
        c.isEmpty() || a(b, c)
    }) : Map.forEach(this._entry_map, a)
}, forEachUntil:function(a) {
    this._lazy_gc ? Map.forEachUntil(this._entry_map, function(b, c) {
        if(!c.isEmpty()) {
            return a(b, c)
        }
    }) : Map.forEachUntil(this._entry_map, a)
}, size:function() {
    var a = 0;
    Map.forEach(this._entry_map, function(b, c) {
        a += c.size()
    });
    return a
}, isEmpty:function() {
    return this._lazy_gc ? this.size() === 0 : this._entry_map.isEmpty()
}, _getPrimitiveIndex:function(a) {
    return DataStructure._getPrimitiveIndex(a)
}}));
define("ArrayKeyedMultiMap", MultiMap.subclass("ArrayKeyedMultiMap", {}, {constructor:function(a) {
    ArrayKeyedMultiMap.superproto.constructor.call(this, a);
    this._entry_map = ArrayKeyedMap.create()
}, _getPrimitiveIndex:function(a) {
    return DataStructure._getPrimitiveIndexOfArray(a)
}}));
FastMap = AsanaObject.subclass("FastMap", {}, {constructor:function(a) {
    FastMap.superproto.constructor.call(this);
    if(a) {
        for(var b = a.length, c = 0;c < b;c++) {
            this.put(a[c][0], a[c][1])
        }
    }
}, put:function(a, b) {
    this[hashKey(a)] = b
}, remove:function(a) {
    delete this[hashKey(a)]
}, removeAll:function(a) {
    a.forEach(method(this, "remove"))
}, containsKey:function(a) {
    return hashKey(a) in this
}, get:function(a) {
    var b = this[hashKey(a)];
    b === void 0 && ufu("Value not found for key", a);
    return b
}, getOr:function(a, b) {
    var c = this[hashKey(a)];
    return c === void 0 ? b : c
}, find:function(a) {
    a = this[hashKey(a)];
    return a === void 0 ? null : a
}, size:function() {
    var a = 0, b;
    for(b in this) {
        b !== "__localid" && b !== "_constructed" && this.hasOwnProperty(b) && a++
    }
    return a
}});
ImmutableSet = define("ImmutableSet", DataStructure.subclass("ImmutableSet", [IIterable, ISerializable], {intersectionAndDifferences:function(a, b) {
    var c = [], d = [], e = [];
    a.forEach(function(a) {
        b.contains(a) ? e.push(a) : c.push(a)
    });
    b.forEach(function(b) {
        a.contains(b) || d.push(b)
    });
    return{only_left:c, only_right:d, intersection:e}
}, onlyInLeft:function(a, b) {
    return ImmutableSet.intersectionAndDifferences(a, b).only_left
}, intersection:function(a, b) {
    var c = [];
    a.forEach(function(a) {
        b.contains(a) && c.push(a)
    });
    return c
}, _MAX_EMPTY_ITERATIONS:15}, {_is_empty_count:0, constructor:function(a) {
    ImmutableSet.superproto.constructor.call(this);
    this._data = {};
    a !== void 0 && !(a instanceof Array) && (a = a.toArray());
    a && this._addAll(a)
}, toRawJS:function(a) {
    var b = [];
    this.forEach(function(c) {
        b.push(a.freeze(c))
    });
    return b
}, fromRawJS:function(a, b) {
    this.constructor(a.map(function(a) {
        return b.thaw(a)
    }))
}, _iterate:function(a, b) {
    try {
        var c = 0, d;
        for(d in this._data) {
            a.call(b, this._data[d], c++, this)
        }
    }catch(e) {
        if(e !== IIterable.STOP) {
            throw e;
        }
    }
}, contains:function(a) {
    return DataStructure._getPrimitiveIndex(a) in this._data
}, isEmpty:function() {
    if(this._is_empty_count > 0) {
        return!1
    }
    this._is_empty_count = 0;
    for(var a in this._data) {
        if(++this._is_empty_count === ImmutableSet._MAX_EMPTY_ITERATIONS) {
            return!1
        }
    }
    return this._is_empty_count === 0
}, clone:function() {
    var a = this.__type.create();
    this.forEach(function(b) {
        a._add(b)
    });
    return a
}, values:function() {
    return this.toArray()
}, getOneValue:function() {
    for(var a in this._data) {
        return this._data[a]
    }
}, getOr:function(a, b) {
    var c = DataStructure._getPrimitiveIndex(a);
    return c in this._data ? this._data[c] : b
}, getZeroSingleItemOrTwo:function() {
    var a = 0, b;
    for(b in this._data) {
        if(a === 0) {
            a = this._data[b]
        }else {
            return 2
        }
    }
    return a
}, _add:function(a) {
    if(this._is_empty_count <= 0) {
        this._is_empty_count = 1
    }
    this._data[DataStructure._getPrimitiveIndex(a)] = a
}, _addAll:function(a) {
    var b = a.length;
    if(b === 1) {
        this._add(a[0])
    }else {
        for(var c = 0;c < b;c++) {
            this._add(a[c])
        }
    }
}, getPrettyInfo:function() {
    return[this.__type_name, this.values()]
}}));
update(ImmutableSet, {empty_set:ImmutableSet.create()});
Set = define("Set", ImmutableSet.subclass("Set", [ISerializable], {}, {toRawJS:function(a) {
    var b = [];
    this.forEach(function(c) {
        b.push(a.freeze(c))
    });
    return b
}, fromRawJS:function(a, b) {
    var c = this;
    c.constructor();
    a.forEach(function(a) {
        c.add(b.thaw(a))
    })
}, add:function(a) {
    this._add(a);
    return this
}, addAll:function(a) {
    this._addAll(a);
    return this
}, remove:function(a) {
    this._is_empty_count--;
    delete this._data[DataStructure._getPrimitiveIndex(a)]
}, checkedRemove:function(a) {
    this._is_empty_count--;
    delete this._data[DataStructure._getPrimitiveIndex(a)]
}, clear:function() {
    this._is_empty_count = 0;
    this._data = {}
}}));
define("OSet", Set.subclass("OSet", {}, {_values:SET_IN_CONSTRUCTOR, _index_map:SET_IN_CONSTRUCTOR, constructor:function(a) {
    OSet.superproto.constructor.call(this, a);
    this.clear();
    a && this.addAll(a)
}, _iterate:function(a, b) {
    var c = this._values;
    try {
        for(var d = 0, e = c.length;d < e;++d) {
            var f = c[d];
            f !== void 0 && a.call(b, f, d, this)
        }
    }catch(g) {
        if(g !== IIterable.STOP) {
            throw g;
        }
    }
}, contains:function(a) {
    return DataStructure._getPrimitiveIndex(a) in this._index_map
}, isEmpty:function() {
    return this._is_empty_count === 0
}, add:function(a) {
    var b = DataStructure._getPrimitiveIndex(a), c = this._index_map[b];
    if(c === void 0) {
        this._is_empty_count++, c = this._values.length, this._index_map[b] = c, this._values[c] = a
    }
    return this
}, addAll:function(a) {
    for(var b = a.length, c = 0;c < b;c++) {
        this.add(a[c])
    }
}, remove:function(a) {
    var a = DataStructure._getPrimitiveIndex(a), b = this._index_map[a];
    b !== void 0 && (this._is_empty_count--, delete this._index_map[a], this._values[b] = void 0)
}, checkedRemove:function(a) {
    var a = DataStructure._getPrimitiveIndex(a), b = this._index_map[a];
    this._is_empty_count--;
    delete this._index_map[a];
    this._values[b] = void 0
}, clear:function() {
    this._is_empty_count = 0;
    this._values = [];
    this._index_map = {}
}}));
define("MainlySingletonSet", DataStructure.subclass("MainlySingletonSet", {}, {_single_value:SET_IN_CONSTRUCTOR, _backing_set:SET_IN_CONSTRUCTOR, constructor:function() {
    MainlySingletonSet.superproto.constructor.call(this);
    this._backing_set = this._single_value = null;
    this._size = 0
}, values:function() {
    var a = [];
    this.forEach(function(b) {
        a.push(b)
    });
    return a
}, forEach:function(a) {
    this._backing_set !== null ? this._backing_set.forEach(a) : this._single_value !== null && a(this._single_value)
}, isEmpty:function() {
    return this._size === 0
}, contains:function(a) {
    return this._backing_set !== null ? this._backing_set.contains(a) : equals(this._single_value, a)
}, size:function() {
    return this._size
}, checkedAdd:function(a) {
    this._backing_set !== null ? this._backing_set.add(a) : this._single_value !== null ? (this._backing_set = Set.create([this._single_value, a]), this._single_value = null) : this._single_value = a;
    this._size++;
    return this
}, checkedRemove:function(a) {
    this._backing_set !== null ? this._backing_set.checkedRemove(a) : this._single_value = null;
    this._size--
}, getZeroSingleItemOrTwo:function() {
    return this._backing_set !== null ? this._backing_set.getZeroSingleItemOrTwo() : this._single_value !== null ? this._single_value : 0
}, getPrettyInfo:function() {
    return[this.__type_name, this.values()]
}}));
Trie = AsanaObject.subclass("Trie", {}, {constructor:function() {
    Trie.superproto.constructor.call(this);
    this._root = this._createNode(null)
}, put:function(a, b) {
    this._makePath(a).value = b
}, remove:function(a) {
    var b = this._find(a);
    if(b !== null && "value" in b) {
        delete b.value;
        for(var c = a.length - 1;b.num_children === 0 && c >= 0;--c) {
            b.parent.children.remove(a[c]), b.parent.num_children--, b = b.parent
        }
    }
}, containsKey:function(a) {
    return(a = this._find(a)) && "value" in a
}, exists:function(a) {
    return this._find(a) !== null
}, getOr:function(a, b) {
    var c = this._find(a);
    if(c !== null && "value" in c) {
        return c.value
    }
    return b
}, forEach:function(a) {
    this._preOrderTraversal([], this._root, function(b, c) {
        "value" in c && a(b, c.value)
    })
}, _createNode:function(a) {
    return{parent:a, children:FastMap.create(), num_children:0}
}, _makePath:function(a) {
    for(var b = this._root, c = 0;c < a.length;++c) {
        var d = a[c], e = b.children.getOr(d, null);
        e || (e = this._createNode(b), b.children.put(d, e), b.num_children++);
        b = e
    }
    return b
}, _find:function(a) {
    for(var b = this._root, c = 0;b && c < a.length;++c) {
        b = b.children.getOr(a[c], null)
    }
    return b
}, _preOrderTraversal:function(a, b, c) {
    var d = this;
    c(a, b);
    var e = $A(a), f = e.length;
    b.children.forEach(function(a, b) {
        e[f] = a;
        d._preOrderTraversal(e, b, c)
    })
}});
HeapSet = DataStructure.subclass("HeapSet", {}, {constructor:function(a) {
    HeapSet.superproto.constructor.call(this);
    this._array = [];
    this._element_to_index = FastMap.create();
    this._scoreFunction = a
}, add:function(a) {
    this._element_to_index.put(a, this._array.length);
    this._array.push(a);
    this._bubbleUp(this._array.length - 1)
}, pop:function() {
    var a = this._array[0];
    this._removeElementAtIndex(a, 0);
    return a
}, front:function() {
    return this._array[0]
}, remove:function(a) {
    var b = this._element_to_index.getOr(a, null);
    b !== null && this._removeElementAtIndex(a, b)
}, checkedRemove:function(a) {
    var b = this._element_to_index.get(a);
    this._removeElementAtIndex(a, b)
}, _removeElementAtIndex:function(a, b) {
    var c = this._array.pop();
    b !== this._array.length && (this._array[b] = c, this._element_to_index.put(c, b), this._bubbleDown(b) || this._bubbleUp(b));
    this._element_to_index.remove(a)
}, size:function() {
    return this._array.length
}, isEmpty:function() {
    return this._array.length === 0
}, contains:function(a) {
    return this._element_to_index.containsKey(a)
}, values:function() {
    return this._array
}, _bubbleUp:function(a) {
    for(var b = this._array[a];a > 0;) {
        var c = Math.floor((a + 1) / 2) - 1, d = this._array[c];
        if(this._scoreFunction(b) < this._scoreFunction(d)) {
            this._array[c] = b, this._element_to_index.put(b, c), this._array[a] = d, this._element_to_index.put(d, a), a = c
        }else {
            break
        }
    }
}, _bubbleDown:function(a) {
    for(var b = this._array.length, c = this._array[a], d = this._scoreFunction(c), e = !1;;) {
        var f = (a + 1) * 2, g = f - 1, h = null;
        if(g < b) {
            var i = this._scoreFunction(this._array[g]);
            i < d && (h = g)
        }
        if(f < b && this._scoreFunction(this._array[f]) < (h === null ? d : i)) {
            h = f
        }
        if(h !== null) {
            this._array[a] = this._array[h], this._element_to_index.put(this._array[a], a), this._array[h] = c, this._element_to_index.put(c, h), a = h, e = !0
        }else {
            break
        }
    }
    return e
}, assertConsistent:function() {
    this._array.length !== 0 && this._assertElementConsistent(0)
}, _assertElementConsistent:function(a) {
    this._scoreFunction(this._array[a]);
    var a = (a + 1) * 2, b = a - 1;
    b < this._array.length && this._assertElementConsistent(b);
    a < this._array.length && this._assertElementConsistent(a)
}});
LazyHeapSet = AsanaObject.subclass("LazyHeapSet", {}, {_heap_set:SET_IN_CONSTRUCTOR, _unordered_set:SET_IN_CONSTRUCTOR, constructor:function(a) {
    LazyHeapSet.superproto.constructor.call(this);
    this._heap_set = HeapSet.create(a);
    this._unordered_set = Set.create()
}, add:function(a) {
    !this._heap_set.contains(a) && !this._unordered_set.contains(a) && this._unordered_set.add(a)
}, remove:function(a) {
    this._heap_set.remove(a);
    this._unordered_set.remove(a)
}, isEmpty:function() {
    return this._heap_set.isEmpty() && this._unordered_set.isEmpty()
}, front:function() {
    var a = this;
    this._unordered_set.forEach(function(b) {
        a._heap_set.add(b)
    });
    this._unordered_set.clear();
    return this._heap_set.front()
}, deorder:function(a) {
    this._heap_set.contains(a) && (this._heap_set.checkedRemove(a), this._unordered_set.add(a))
}, values:function() {
    return concat(this._heap_set.values(), this._unordered_set.values())
}});
upperBound = function(a, b) {
    var c = 0, d = a.size();
    if(d === 0 || !b(a.atIndex(c))) {
        return-1
    }
    for(;d - c > 1;) {
        var e = Math.floor((c + d) / 2);
        b(a.atIndex(e)) ? c = e : d = e
    }
    return c
};
__FILE__ = "luna/common/lib/discrete_math.js";
traversePostOrder = function(a, b) {
    var c = [], d = Set.create(), e = function(b) {
        d.contains(b) || (d.add(b), a(b).forEach(e), c.push(b))
    };
    b.forEach(e);
    return c
};
traverseTopological = function() {
    return reversed(traversePostOrder.apply(this, arguments))
};
isSubset = function(a, b) {
    if(a.size() > b.size()) {
        return!1
    }
    var c = !0;
    a.forEach(function(a) {
        b.contains(a) || (c = !1)
    });
    return c
};
traverseBreadthFirst = function(a, b, c) {
    for(var c = c || noop, d = Set.create(), e = a.map(function(a) {
        return{object:a, referrer_chain:[]}
    }), a = 0;!e.isEmpty();) {
        c(a, e);
        for(var f = e.reverse(), e = [];!f.isEmpty();) {
            var g = f.pop();
            if(!d.contains(g.object)) {
                d.add(g.object);
                var h = [];
                b(g.object, g.referrer_chain, h);
                h.forEach(function(a) {
                    e.push({object:a, referrer_chain:concat(g.referrer_chain, [g.object])})
                })
            }
        }
        a++
    }
};
__FILE__ = "luna/common/flags.js";
update = function(a, b) {
    var a = a || {}, c;
    for(c in b) {
        a[c] = b[c]
    }
    return a
};
copyAndUpdate = function(a, b) {
    return update(update({}, a), b)
};
FlagDefs = AsanaObject.subclass("FlagDefs", {}, {flags_by_long_name:SET_IN_CONSTRUCTOR, flags_by_short_name:SET_IN_CONSTRUCTOR, constructor:function(a) {
    FlagDefs.superproto.constructor.call(this);
    a ? (this.flags_by_long_name = a.flags_by_long_name.clone(), this.flags_by_short_name = a.flags_by_short_name.clone()) : (this.flags_by_long_name = Map.create(), this.flags_by_short_name = Map.create())
}, register:function(a) {
    this.flags_by_long_name.put(a.name, a);
    a.short_name && this.flags_by_short_name.put(a.short_name, a)
}, get:function(a) {
    return this.flags_by_long_name.get(a)
}});
FlagSystem = AsanaObject.subclass("FlagSystem", {default_flag_data:null, PARSE_ERROR:{}, Scope:{SERVER:1, USER:2, DOMAIN:3}, defaultHandleError:function(a) {
    throw a;
}, defineBool:function() {
    return FlagSystem._createAndRegister(FlagSystem.Bool, arguments)
}, defineString:function() {
    return FlagSystem._createAndRegister(FlagSystem.String, arguments)
}, defineInt:function() {
    return FlagSystem._createAndRegister(FlagSystem.Int, arguments)
}, defineFloat:function() {
    return FlagSystem._createAndRegister(FlagSystem.Float, arguments)
}, defineEnum:function() {
    return FlagSystem._createAndRegister(FlagSystem.Enum, arguments)
}, defineList:function() {
    return FlagSystem._createAndRegister(FlagSystem.List, arguments)
}, defineMap:function() {
    return FlagSystem._createAndRegister(FlagSystem.Map, arguments)
}, defineSet:function() {
    return FlagSystem._createAndRegister(FlagSystem.Set, arguments)
}, defineFeature:function(a) {
    a = copyAndUpdate(a, {name:"enable_" + a.name, is_feature:!0});
    return FlagSystem._createAndRegister(FlagSystem.Bool, [a])
}, createPrototype:function(a, b) {
    b = b || {};
    b.name = "proto_flag";
    b.help = "proto_flag";
    return a.create(b, {})
}, createFlagData:function(a) {
    if(a) {
        var b = {};
        Map.forEach(a, function(c, d) {
            c in Object.prototype || (typeof d === "function" ? b[c] = d : FlagSystem.isValidFlagName(c) ? b[c] = a._defs.get(c).cloneValue(d) : c === "_defs" && (b[c] = FlagDefs.create(d)))
        });
        return b
    }else {
        return{_defs:FlagDefs.create()}
    }
}, parseCommandLine:function(a, b, c, d) {
    for(var c = c || FlagSystem.default_flag_data, d = d || !1, b = b || FlagSystem.defaultHandleError, e = this._makeHandleErrorWithFlag(b), f = [], g = !0, h = 0;h < a.length;++h) {
        var i = a[h];
        if(i === "--") {
            g = !1
        }else {
            if(g) {
                if(i.startsWith("-")) {
                    if(i.startsWith("--")) {
                        var j = c._defs.flags_by_long_name, l = i.indexOf("=");
                        if(l >= 0) {
                            var m = i.substring(2, l), i = i.substring(l + 1)
                        }else {
                            m = i.substring(2), i = null
                        }
                    }else {
                        j = c._defs.flags_by_short_name, m = i.substring(1, 2), i = i.length > 2 ? i.substring(2) : null
                    }
                    j = j.getOr(m, null);
                    if(j === null) {
                        b("Unknown flag: " + m)
                    }else {
                        if(j instanceof FlagSystem.Bool) {
                            i = i === null ? "1" : i
                        }else {
                            if(i === null) {
                                if(++h === a.length) {
                                    b("Expected value for flag: " + m);
                                    break
                                }
                                i = a[h]
                            }
                        }
                        j.parseValue(i, partial(e, m), c)
                    }
                }else {
                    f.push(i), d && (g = !1)
                }
            }else {
                f.push(i)
            }
        }
    }
    return f
}, parseMap:function(a, b, c) {
    var d = c || FlagSystem.default_flag_data, e = d._defs.flags_by_long_name, f = b || FlagSystem.defaultHandleError, g = this._makeHandleErrorWithFlag(f);
    Map.forEach(a, function(a, b) {
        var c = typeof b === "string" ? b : "" + b, l = e.getOr(a, null);
        l === null ? f("Unknown flag: " + a) : l.parseValue(c, partial(g, a), d)
    })
}, parseEnvironment:function(a, b) {
    var c = Map.create();
    host.envVarMap().forEach(function(a, b) {
        if(a.startsWith("ASANA_FLAG_")) {
            var f = a.substr(11);
            c.put(f, b)
        }
    });
    this.parseMap(c, a, b)
}, installParsedFlags:function() {
    Flags = FlagSystem.default_flag_data
}, uninstallFlags:function() {
    FlagSystem.default_flag_data = {_defs:FlagDefs.create(FlagSystem.default_flag_data._defs)};
    FlagSystem.default_flag_data._defs.flags_by_long_name.forEach(function(a, b) {
        FlagSystem.default_flag_data[a] = b.default_value
    });
    Flags = null
}, printUsage:function(a, b, c) {
    host.console.println("\n" + a);
    host.console.println("\n" + FlagSystem.getFlagsUsage(b || FlagSystem.default_flag_data));
    c && host.console.println("\nError: " + c)
}, getFlagsUsage:function(a) {
    var a = a || FlagSystem.default_flag_data, b = Map.mapEntries(a._defs.flags_by_long_name, function(a) {
        return a
    });
    b.sort();
    return b.map(function(b) {
        return FlagSystem.get(a, b).getUsage()
    }).join("\n")
}, forEach:function(a, b) {
    Map.forEach((b || FlagSystem.default_flag_data)._defs.flags_by_long_name, a)
}, get:function(a, b) {
    return a._defs.get(b)
}, isValidFlagName:function(a) {
    return a.match(/^[a-z][a-z0-9_]*$/)
}, replacementGlobalsToReplaceFlagData:function(a) {
    return{Flags:a, "FlagSystem.default_flag_data":a}
}, _makeHandleErrorWithFlag:function(a) {
    return function(b, c) {
        a("-" + b + ": " + c)
    }
}, _createAndRegister:function(a, b) {
    var c = $A(b);
    c.length < 2 && c.push(FlagSystem.default_flag_data);
    var d = a.create.apply(this, c);
    c[1]._defs.register(d);
    return d
}}, {});
FlagSystem.Flag = AsanaObject.subclass("FlagSystem.Flag", {}, {name:SET_IN_CONSTRUCTOR, short_name:null, default_value:SET_IN_CONSTRUCTOR, help:SET_IN_CONSTRUCTOR, scope:null, is_feature:!1, constructor:function(a, b, c) {
    FlagSystem.Flag.superproto.constructor.call(this);
    this.default_value = b;
    update(this, a);
    c[this.name] = this.default_value
}, getValue:function(a) {
    a = a || FlagSystem.default_flag_data;
    return a[this.name]
}, cloneValue:ABSTRACT, parseValue:function(a, b, c) {
    c = c || FlagSystem.default_flag_data;
    b = b || FlagSystem.defaultHandleError;
    a = this._parseValue(a, b);
    if(a === void 0) {
        a = FlagSystem.PARSE_ERROR
    }
    a !== FlagSystem.PARSE_ERROR && (c[this.name] = a);
    return a
}, valueAsString:function(a) {
    return this._getValueAsFlagString(this.getValue(a))
}, getUsage:function() {
    var a = ["--", this.name];
    this.short_name && extend(a, [", -", this.short_name]);
    extend(a, [" {", this._getTypeName(), "}", " default = '", this._getValueAsFlagString(this.default_value), "'"]);
    return extend([a.join(""), this.help], this._getUsageExtraDetails()).join("\n    ")
}, _parseValue:ABSTRACT, _getValueAsFlagString:ABSTRACT, _getUsageExtraDetails:function() {
    return[]
}, _getTypeName:function() {
    var a = [this.__type_name.substr(this.__type_name.indexOf(".") + 1)];
    this.value_prototype && extend(a, ["<", this.value_prototype._getTypeName(), ">"]);
    return a.join("")
}});
FlagSystem.Bool = FlagSystem.Flag.subclass("FlagSystem.Bool", {}, {constructor:function(a, b) {
    FlagSystem.Bool.superproto.constructor.call(this, a, !1, b)
}, cloneValue:function(a) {
    return a
}, _parseValue:function(a, b) {
    return a === "true" || a === "1" ? !0 : a === "false" || a === "0" ? !1 : (b("Expected boolean value, got: " + a), FlagSystem.PARSE_ERROR)
}, _getValueAsFlagString:function(a) {
    return a ? "true" : "false"
}});
FlagSystem.String = FlagSystem.Flag.subclass("FlagSystem.String", {}, {constructor:function(a, b) {
    FlagSystem.String.superproto.constructor.call(this, a, "", b)
}, cloneValue:function(a) {
    return a
}, _parseValue:function(a) {
    return"" + a
}, _getValueAsFlagString:function(a) {
    return a
}});
FlagSystem.Int = FlagSystem.Flag.subclass("FlagSystem.Int", {}, {min:null, max:null, constructor:function(a, b) {
    FlagSystem.Int.superproto.constructor.call(this, a, 0, b)
}, cloneValue:function(a) {
    return a
}, _parseValue:function(a, b) {
    var c = parseInt(a, 10);
    if("" + c !== a) {
        return b("Expected integer, got: " + a), FlagSystem.PARSE_ERROR
    }
    if(this.min !== null && c < this.min) {
        return b("Minimum value of " + this.min + ", got: " + c), FlagSystem.PARSE_ERROR
    }
    if(this.max !== null && c > this.max) {
        return b("Maximum value of " + this.max + ", got: " + c), FlagSystem.PARSE_ERROR
    }
    return c
}, _getValueAsFlagString:function(a) {
    return"" + a
}, _getUsageExtraDetails:function() {
    var a = [];
    this.min !== null && a.push("Minimum: " + this.min);
    this.max !== null && a.push("Maximum: " + this.max);
    return a.length > 0 ? [a.join(", ")] : []
}});
FlagSystem.Float = FlagSystem.Flag.subclass("FlagSystem.Float", {}, {min:null, max:null, constructor:function(a, b) {
    FlagSystem.Float.superproto.constructor.call(this, a, 0, b)
}, cloneValue:function(a) {
    return a
}, _parseValue:function(a, b) {
    var c = parseFloat(a);
    if(isNaN(c)) {
        return b("Expected float, got: " + a), FlagSystem.PARSE_ERROR
    }
    if(this.min !== null && c < this.min) {
        return b("Minimum value of " + this.min + ", got: " + c), FlagSystem.PARSE_ERROR
    }
    if(this.max !== null && c > this.max) {
        return b("Maximum value of " + this.max + ", got: " + c), FlagSystem.PARSE_ERROR
    }
    return c
}, _getValueAsFlagString:function(a) {
    return"" + a
}, _getUsageExtraDetails:function() {
    var a = [];
    this.min !== null && a.push("Minimum: " + this.min);
    this.max !== null && a.push("Maximum: " + this.max);
    return a.length > 0 ? [a.join(", ")] : []
}});
FlagSystem.Enum = FlagSystem.Flag.subclass("FlagSystem.Enum", {}, {values:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    FlagSystem.Enum.superproto.constructor.call(this, a, [], b);
    if(!(this.values instanceof Set)) {
        this.values = ImmutableSet.create(this.values)
    }
}, cloneValue:function(a) {
    return a
}, _parseValue:function(a, b) {
    var c = "" + a;
    return this.values.contains(c) ? c : (b("Unknown enum value: " + c), FlagSystem.PARSE_ERROR)
}, _getValueAsFlagString:function(a) {
    return a
}, _getUsageExtraDetails:function() {
    return["Values: { " + this.values.map(identity).join(", ") + " }"]
}});
FlagSystem.List = FlagSystem.Flag.subclass("FlagSystem.List", {}, {value_prototype:SET_IN_CONSTRUCTOR, value_separator:",", constructor:function(a, b) {
    FlagSystem.List.superproto.constructor.call(this, a, [], b)
}, cloneValue:function(a) {
    var b = this;
    return a.map(function(a) {
        return b.value_prototype.cloneValue(a)
    })
}, _parseValue:function(a, b) {
    if(a === "") {
        return[]
    }
    var c = !0, d = function(a) {
        c = !1;
        b(a)
    }, e = this.value_prototype, f = a.split(this.value_separator).map(function(a) {
        return e._parseValue(a, d)
    });
    return c ? f : FlagSystem.PARSE_ERROR
}, _getValueAsFlagString:function(a) {
    var b = this;
    if(a === null) {
        return"null"
    }
    return a.map(function(a) {
        return b.value_prototype._getValueAsFlagString(a)
    }).join(this.value_separator)
}, _getUsageExtraDetails:function() {
    return this.value_prototype._getUsageExtraDetails()
}});
FlagSystem.Map = FlagSystem.Flag.subclass("FlagSystem.Map", {}, {value_prototype:SET_IN_CONSTRUCTOR, entry_separator:",", value_separator:"=", constructor:function(a, b) {
    FlagSystem.Map.superproto.constructor.call(this, a, OMap.create(), b)
}, cloneValue:function(a) {
    var b = this;
    return OMap.create(a.mapEntries(function(a, d) {
        return[a, b.value_prototype.cloneValue(d)]
    }))
}, _parseValue:function(a, b) {
    var c = OMap.create();
    if(a === "") {
        return c
    }
    for(var d = !0, e = function(a) {
        d = !1;
        b(a)
    }, f = FlagSystem.createPrototype(FlagSystem.String), g = this.value_prototype, h = a.split(this.entry_separator), i = 0;i < h.length && d;++i) {
        var j = h[i], l = j.indexOf(this.value_separator);
        if(l === 0) {
            return b("Missing key"), FlagSystem.PARSE_ERROR
        }else {
            if(l === -1) {
                return b("Missing value"), FlagSystem.PARSE_ERROR
            }else {
                var m = f._parseValue(j.substr(0, l), e), j = g._parseValue(j.substr(l + 1), e);
                c.put(m, j)
            }
        }
    }
    return d ? c : FlagSystem.PARSE_ERROR
}, _getValueAsFlagString:function(a) {
    var b = this;
    return a.mapEntries(function(a, d) {
        return a + b.value_separator + b.value_prototype._getValueAsFlagString(d)
    }).join(this.entry_separator)
}, _getUsageExtraDetails:function() {
    return this.value_prototype._getUsageExtraDetails()
}});
FlagSystem.Set = FlagSystem.Flag.subclass("FlagSystem.Set", {}, {value_prototype:SET_IN_CONSTRUCTOR, value_separator:",", constructor:function(a, b) {
    FlagSystem.Set.superproto.constructor.call(this, a, Set.create(), b)
}, cloneValue:function(a) {
    var b = this;
    return ImmutableSet.create(a.map(function(a) {
        return b.value_prototype.cloneValue(a)
    }))
}, _parseValue:function(a, b) {
    var c = this;
    if(a === "") {
        return ImmutableSet.create()
    }
    var d = !0, e = function(a) {
        d = !1;
        b(a)
    }, f = a.split(this.value_separator), f = ImmutableSet.create(f.map(function(a) {
        return c.value_prototype._parseValue(a, e)
    }));
    return d ? f : FlagSystem.PARSE_ERROR
}, _getValueAsFlagString:function(a) {
    var b = this;
    if(a === null) {
        return""
    }
    return a.map(function(a) {
        return b.value_prototype._getValueAsFlagString(a)
    }).join(this.value_separator)
}, _getUsageExtraDetails:function() {
    return this.value_prototype._getUsageExtraDetails()
}});
FlagSystem.default_flag_data = FlagSystem.createFlagData();
Flags = null;
__FILE__ = "luna/common/lib/format.js";
FlagSystem.defineBool({name:"sanitize_logs", help:"Avoid writing actual user-generated text to logs, for privacy.", default_value:!0});
var link_regular_expression_string = "https?://[^\\s<>]+?(?=(?:[\\s<>.,:;?!'\")\\]]|(?:&|&amp;)(?:lt|gt|quot|apos|raquo|laquo|rsaquo|lsaquo);)*(?:$|[\\s<>]))";
Format = {_ASANA_LINK_RE:null, VALID_LINK_RE:RegExp("^" + link_regular_expression_string + "$"), _CAPTURING_LINK_RE:RegExp("(" + link_regular_expression_string + ")", "g"), _LINK_RE:RegExp(link_regular_expression_string, "g"), EMAIL_RE:/^([^@]+)@([^@]+\.[a-z]{2,})$/i, testEmailInput:function(a) {
    return Format.EMAIL_RE.test(Format.sanitizeEmailInput(a))
}, sanitizeEmailInput:function(a) {
    return a.replace(/\s/g, "")
}, emailDomain:function(a) {
    var b = Format.sanitizeEmailInput(a).match(Format.EMAIL_RE);
    if(b === null) {
        ufu("Couldn't parse domain from email", a)
    }else {
        return b[2].toLowerCase()
    }
}, sanitizeValueForLogs:function(a) {
    if(typeof a !== "string" || !Flags.sanitize_logs) {
        return"" + a
    }
    return a.replace(/[^ ]/g, "x")
}, stylizedHtmlFromPlainText:function(a, b) {
    return'<span style="white-space: pre-wrap;">' + Format.linkify(escapeHTML(a), b).replace("&lt;3", "\u2665").replace(/\n\n/g, '\n<div style="height: 5px; margin: 0px; padding: 0px; border: 0px;">\n</div>') + "</span>"
}, linkify:function(a, b) {
    return a.replace(Format._LINK_RE, b || function(a) {
        var b = Format.truncateWithEllipsesHTML(a, 35);
        return'<a href="' + a + '" target="_blank">' + b + "</a>"
    })
}, truncateWithEllipses:function(a, b) {
    return a.length <= b ? a : a.substring(0, b - 3) + "..."
}, truncateWithEllipsesHTML:function(a, b) {
    return a.length <= b ? a : a.substring(0, b - 3) + '<span class="ellipses">' + a.substring(b - 3) + "</span>"
}, truncateEndWithNote:function(a, b) {
    if(a.length <= b) {
        return a
    }
    var c = Format._omissionLength(a.length, b, 4);
    return a.substr(0, a.length - c) + "..[" + c + "]"
}, truncateStartWithNote:function(a, b) {
    if(a.length <= b) {
        return a
    }
    var c = Format._omissionLength(a.length, b, 4);
    return"[" + c + "].." + a.slice(c - a.length)
}, truncateMiddleWithNote:function(a, b) {
    if(a.length <= b) {
        return a
    }
    var c = Format._omissionLength(a.length, b, 6), d = Math.floor((a.length - c) / 2);
    return a.substr(0, d) + "..[" + c + "].." + a.slice(d + c)
}, truncateLinesEndWithNote:function(a, b) {
    var c = [], d = 0;
    a.forEach(function(a) {
        d += a.length;
        if(d > b) {
            throw IIterable.STOP;
        }
        c.push(a)
    });
    c.size() < a.size() && c.push("[.." + (a.size() - c.size()) + " more]");
    return c
}, truncateLinesStartWithNote:function(a, b) {
    var c = [], d = 0;
    a.forEachReverse(function(a) {
        d += a.length;
        if(d > b) {
            throw IIterable.STOP;
        }
        c.push(a)
    });
    c.size() < a.size() && c.push("[" + (a.size() - c.size()) + " more..]");
    return c.reverse()
}, truncateLinesMiddleWithNote:function(a, b) {
    if(a.isEmpty()) {
        return a
    }
    for(var c = [], d = [], e = 0, f = a.toArray(), g = Math.floor(f.length / 2), h = function(a, c) {
        e += c.length;
        if(e > b) {
            return!0
        }
        a.push(c);
        return!1
    }, i = 0;i <= g;i++) {
        if(h(c, f[i])) {
            break
        }
        if(i === g && i % 2 === 1 || h(d, f[f.length - i - 1])) {
            break
        }
    }
    return c.size() + d.size() < a.size() ? (c.push("[.." + (a.size() - c.size() - d.size()) + " more..]"), concat(c, d)) : a
}, _omissionLength:function(a, b, c) {
    c = c + a - b;
    a = function(a) {
        for(var b = 0;a > 0;a = Math.floor(a / 10)) {
            b++
        }
        return b
    };
    b = a(c);
    c += b;
    return c + a(c) - b
}, dedupLines:function(a) {
    return Format.dedupLinesWithOptions({lines:a})
}, dedupLinesWithOptions:attributedFunc({lines:ATTRIBUTE_REQUIRED, max_pattern_length:3, min_repeats:2, single_line_replacement:"[..%1 more times]", multi_line_replacement:"[..preceding %2 lines occur %1 more times]"}, function(a) {
    for(var b = [], c = 0;c < a.lines.length;) {
        for(var d = 0, e = 0, f = a.max_pattern_length;f > 0;f--) {
            for(var g = Number.MAX_INT_VALUE, h = 0;g >= a.min_repeats && h < f;h++) {
                for(var i = 0;a.lines[c + h] === a.lines[c + h + (i + 1) * f];) {
                    i++
                }
                g = g === Number.MAX_INT_VALUE ? i : Math.min(g, i)
            }
            g >= a.min_repeats && g !== Number.MAX_INT_VALUE && g * f > d * e && (d = f, e = g)
        }
        if(d > 0) {
            for(f = 0;f < d;f++) {
                b.push(a.lines[c + f])
            }
            d === 1 ? b.push(a.single_line_replacement.replace("%1", e)) : b.push(a.multi_line_replacement.replace("%1", e).replace("%2", d));
            c += (1 + e) * d
        }else {
            b.push(a.lines[c]), c++
        }
    }
    return b
})};
__FILE__ = "luna/common/lib/typeahead.js";
Typeahead = {regexpFromFilterText:function(a) {
    return!a || a.trim() === "" ? null : (a = RegExp.escape(a.trim(), !0).trim().split(/\s+/).map(function(a) {
        return"(" + a + ")"
    }).join("(.*\\s+)"), RegExp("(?:\\b|^|(?=\\W))" + a, "i"))
}};
__FILE__ = "luna/common/logging.js";
FlagSystem.defineSet({name:"vlog", value_prototype:FlagSystem.createPrototype(FlagSystem.String, {}), help:"Set of tags to enable verbose logging (vlog) for.", send_to_client:!0});
ILogSink = Interface.create("ILogSink", [], {Level:{DEBUG:makeUniqueValue("DEBUG"), INFO:makeUniqueValue("INFO"), WARN:makeUniqueValue("WARN"), ERROR:makeUniqueValue("ERROR"), toString:function(a) {
    return a === ILogSink.Level.INFO ? "[Info]" : a === ILogSink.Level.WARN ? "[Warn]" : a === ILogSink.Level.ERROR ? "[Error]" : ""
}}, toSimpleLogLine:function(a, b, c) {
    return b + ILogSink.Level.toString(a) + " " + PrettyPrintUtils.stringify(c)
}}, {onLogMessage:ABSTRACT});
Logger = AsanaObject.subclass("Logger", {}, {_sinks:SET_IN_CONSTRUCTOR, constructor:function() {
    Logger.superproto.constructor.call(this);
    this._sinks = OSet.create()
}, addSink:function(a) {
    this._sinks.add(a)
}, removeSink:function(a) {
    this._sinks.remove(a)
}, debug:function() {
    this._log(ILogSink.Level.DEBUG, arguments)
}, info:function() {
    this._log(ILogSink.Level.INFO, arguments)
}, warn:function() {
    this._log(ILogSink.Level.WARN, arguments)
}, error:function() {
    this._log(ILogSink.Level.ERROR, arguments)
}, _log:function(a, b) {
    var c = (new Date).describeInLunaLogFormat(), d = $A(b);
    this._sinks.forEach(function(b) {
        b.onLogMessage(a, c, d)
    })
}});
StringLogSink = AsanaObject.subclass("StringLogSink", [ILogSink], {DEFAULT_MAX_MESSAGES:10}, {_messages:SET_IN_CONSTRUCTOR, constructor:function(a) {
    StringLogSink.superproto.constructor.call(this);
    this._messages = CircularQueue.create(a || StringLogSink.DEFAULT_MAX_MESSAGES)
}, readLines:function() {
    return this._messages.values()
}, onLogMessage:function(a, b, c) {
    this._messages.push(ILogSink.toSimpleLogLine(a, b, c))
}});
log = Logger.create();
vlog = function() {
    log.debug.apply(log, $A(arguments).slice(1))
};
vlogEnabled = function(a) {
    return Flags.vlog.contains(a)
};
__FILE__ = "luna/common/lib/day.js";
_Day_proxiedMethod = function() {
    var a = {}, b = function(b) {
        a[b] = function(a, e, f, g, h, i, j, l, m, o) {
            b === "setFullYear" && ufu("We currently can't use setFullYear here since setFullYear receives optional arguments and the way we pass arguemnts in here doesn't support that. It leads to invalid dates.");
            return this._utc_date[b].call(this._utc_date, a, e, f, g, h, i, j, l, m, o)
        }
    };
    Map.forEach(Date.prototype, b);
    "getTime getFullYear getMonth getDate getDay setDate setYear toUTCString toISOString".split(" ").forEach(b);
    return a
};
Day = AsanaObject.subclass("Day", {fromLocalMidnightTimestamp:function(a) {
    if(a === null) {
        return null
    }
    a += 12 * Date.MILLISECONDS_PER_HOUR;
    return Day.create(a - a % Date.MILLISECONDS_PER_DAY)
}, fromYMD:function(a, b, c) {
    return Day.create(Date.UTC(a, b, c))
}, parse:function(a) {
    a = Date.betterParseDate(a);
    return isNaN(a) ? null : Day.fromLocalMidnightTimestamp(a)
}, today:function() {
    return this.todayInPotentiallyWrongTimezoneAllowedOnServer()
}, todayInPotentiallyWrongTimezoneAllowedOnServer:function() {
    var a = env.clock.nowDate();
    return Day.fromYMD(a.getFullYear(), a.getMonth(), a.getDate())
}, equals:function(a, b) {
    return a === null || b === null ? a === b : a instanceof Day && b instanceof Day && a.getTime() === b.getTime()
}}, update(_Day_proxiedMethod(), {_utc_date:SET_IN_CONSTRUCTOR, constructor:function(a) {
    Day.superproto.constructor.call(this);
    this._utc_date = Date.makeUtcDateWrapper(new Date(a));
    this._resetLocalID()
}, _resetLocalID:function() {
    setLocalID(this, "day_" + this.getTime())
}, add:function(a, b) {
    this._utc_date.add(a, b);
    this._resetLocalID();
    return this
}, clone:function() {
    return Day.create(this._utc_date.getTime())
}, succ:function(a) {
    return this.clone().add(1, a)
}}));
__FILE__ = "luna/common/job_queue.js";
JobQueue_no_job_job = {name:"(none)", _pausable_clock:null, pausableClock:function() {
    if(this._pausable_clock === null) {
        this._pausable_clock = PausableClock.create(), this._pausable_clock.start()
    }
    return this._pausable_clock
}};
JobQueue = AsanaObject.subclass("JobQueue", {_onJobCreated_funcs:[], _:Fiber.addOnFiberCreatedFunc(function() {
    var a = Fiber.current;
    if(a === Fiber.main) {
        a.job_queue_job = JobQueue_no_job_job
    }
}), currentJob:function() {
    return Fiber.current.job_queue_job
}, addOnJobCreatedFunc:function(a) {
    a();
    JobQueue._onJobCreated_funcs.push(a)
}}, {addJob:ABSTRACT, join:ABSTRACT, run:ABSTRACT, isRunning:ABSTRACT, numJobsRemaining:ABSTRACT, runningJobs:ABSTRACT, gcIdleWorkers:ABSTRACT, currentJobName:function() {
    return JobQueue.currentJob().name
}, forEachParallel:function(a, b, c) {
    var d = this, e = [];
    a.forEach(function(a, g) {
        e.push(d.addJob("forEachParallel-" + g, function() {
            b.call(c, a, g)
        }))
    });
    d.join(e)
}});
__FILE__ = "luna/common/lib/signal.js";
Signal = {Event:function(a, b) {
    this._event = b || window.event;
    this._src = a
}};
Signal.Event.__export__ = !1;
MochiKit.Base.update(Signal.Event.prototype, {__repr__:function() {
    var a = MochiKit.Base.repr, b = "{event(): " + a(this.event()) + ", src(): " + a(this.src()) + ", type(): " + a(this.type()) + ", target(): " + a(this.target());
    if(this.type() && this.type().indexOf("key") === 0 || this.type().indexOf("mouse") === 0 || this.type().indexOf("click") != -1 || this.type() == "contextmenu") {
        b += ", modifier(): {alt: " + a(this.modifier().alt) + ", ctrl: " + a(this.modifier().ctrl) + ", meta: " + a(this.modifier().meta) + ", shift: " + a(this.modifier().shift) + ", any: " + a(this.modifier().any) + "}"
    }
    this.type() && this.type().indexOf("key") === 0 && (b += ", key(): {code: " + a(this.key().code) + ", string: " + a(this.key().string) + "}");
    if(this.type() && (this.type().indexOf("mouse") === 0 || this.type().indexOf("click") != -1 || this.type() == "contextmenu")) {
        b += ", mouse(): {page: " + a(this.mouse().page) + ", client: " + a(this.mouse().client), this.type() != "mousemove" && this.type() != "mousewheel" && (b += ", button: {left: " + a(this.mouse().button.left) + ", middle: " + a(this.mouse().button.middle) + ", right: " + a(this.mouse().button.right) + "}"), this.type() == "mousewheel" && (b += ", wheel: " + a(this.mouse().wheel)), b += "}"
    }
    if(this.type() == "mouseover" || this.type() == "mouseout" || this.type() == "mouseenter" || this.type() == "mouseleave") {
        b += ", relatedTarget(): " + a(this.relatedTarget())
    }
    b += "}";
    return b
}, toString:function() {
    return this.__repr__()
}, src:function() {
    return this._src
}, event:function() {
    return this._event
}, type:function() {
    return this._event.type === "DOMMouseScroll" ? "mousewheel" : this._event.type || void 0
}, target:function() {
    return this._event.target || this._event.srcElement
}, _relatedTarget:null, relatedTarget:function() {
    if(this._relatedTarget !== null) {
        return this._relatedTarget
    }
    var a = null;
    if(this.type() == "mouseover" || this.type() == "mouseenter") {
        a = this._event.relatedTarget || this._event.fromElement
    }else {
        if(this.type() == "mouseout" || this.type() == "mouseleave") {
            a = this._event.relatedTarget || this._event.toElement
        }
    }
    try {
        if(a !== null && a.nodeType !== null) {
            return this._relatedTarget = a
        }
    }catch(b) {
    }
}, _modifier:null, modifier:function() {
    if(this._modifier !== null) {
        return this._modifier
    }
    var a = {};
    a.alt = this._event.altKey;
    a.ctrl = this._event.ctrlKey;
    a.meta = this._event.metaKey || !1;
    a.shift = this._event.shiftKey;
    a.any = a.alt || a.ctrl || a.shift || a.meta;
    return this._modifier = a
}, _key:null, key:function() {
    if(this._key !== null) {
        return this._key
    }
    var a = {};
    if(this.type() && this.type().indexOf("key") === 0) {
        if(this.type() == "keydown" || this.type() == "keyup") {
            return a.code = this._event.keyCode, a.string = Signal._specialKeys[a.code] || "KEY_UNKNOWN", this._key = a
        }else {
            if(this.type() == "keypress") {
                a.code = 0;
                a.string = "";
                if(typeof this._event.charCode != "undefined" && this._event.charCode !== 0 && !Signal._specialMacKeys[this._event.charCode]) {
                    a.code = this._event.charCode, a.string = String.fromCharCode(a.code)
                }else {
                    if(this._event.keyCode && (typeof this._event.charCode == "undefined" || this._event.charCode === 0)) {
                        a.code = this._event.keyCode, a.string = String.fromCharCode(a.code)
                    }
                }
                return this._key = a
            }
        }
    }
}, _mouse:null, mouse:function() {
    if(this._mouse !== null) {
        return this._mouse
    }
    var a = {}, b = this._event;
    if(this.type() && (this.type().indexOf("mouse") === 0 || this.type().indexOf("click") != -1 || this.type() == "contextmenu")) {
        a.client = new MochiKit.Style.Coordinates(0, 0);
        if(b.clientX || b.clientY) {
            a.client.x = !b.clientX || b.clientX < 0 ? 0 : b.clientX, a.client.y = !b.clientY || b.clientY < 0 ? 0 : b.clientY
        }
        a.page = new MochiKit.Style.Coordinates(0, 0);
        if(b.pageX || b.pageY) {
            a.page.x = !b.pageX || b.pageX < 0 ? 0 : b.pageX, a.page.y = !b.pageY || b.pageY < 0 ? 0 : b.pageY
        }else {
            var c = MochiKit.DOM._document.documentElement, d = MochiKit.DOM._document.body;
            a.page.x = b.clientX + (c.scrollLeft || d.scrollLeft) - (c.clientLeft || 0);
            a.page.y = b.clientY + (c.scrollTop || d.scrollTop) - (c.clientTop || 0)
        }
        if(this.type() != "mousemove" && this.type() != "mousewheel") {
            a.button = {}, a.button.left = !1, a.button.right = !1, a.button.middle = !1, b.which ? (a.button.left = b.which == 1, a.button.middle = b.which == 2, a.button.right = b.which == 3) : (a.button.left = !!(b.button & 1), a.button.right = !!(b.button & 2), a.button.middle = !!(b.button & 4))
        }
        if(this.type() == "mousewheel") {
            a.wheel = new MochiKit.Style.Coordinates(0, 0), b.wheelDeltaX || b.wheelDeltaY ? (a.wheel.x = b.wheelDeltaX / -40 || 0, a.wheel.y = b.wheelDeltaY / -40 || 0) : a.wheel.y = b.wheelDelta ? b.wheelDelta / -40 : b.detail || 0
        }
        return this._mouse = a
    }
}, stop:function() {
    this.stopPropagation();
    this.preventDefault()
}, stopPropagation:function() {
    this._event.stopPropagation ? this._event.stopPropagation() : this._event.cancelBubble = !0
}, preventDefault:function() {
    if(this._event.preventDefault) {
        this._event.preventDefault()
    }else {
        if(this._confirmUnload === null) {
            this._event.returnValue = !1
        }
    }
}, _confirmUnload:null, confirmUnload:function(a) {
    if(this.type() == "beforeunload") {
        this._confirmUnload = a, this._event.returnValue = a
    }
}});
Signal._specialMacKeys = {3:"KEY_ENTER", 63289:"KEY_NUM_PAD_CLEAR", 63276:"KEY_PAGE_UP", 63277:"KEY_PAGE_DOWN", 63275:"KEY_END", 63273:"KEY_HOME", 63234:"KEY_ARROW_LEFT", 63232:"KEY_ARROW_UP", 63235:"KEY_ARROW_RIGHT", 63233:"KEY_ARROW_DOWN", 63302:"KEY_INSERT", 63272:"KEY_DELETE"};
(function() {
    for(var a = Signal._specialMacKeys, b = 63236;b <= 63242;b++) {
        a[b] = "KEY_F" + (b - 63236 + 1)
    }
})();
Signal._specialKeys = {8:"KEY_BACKSPACE", 9:"KEY_TAB", 12:"KEY_NUM_PAD_CLEAR", 13:"KEY_ENTER", 16:"KEY_SHIFT", 17:"KEY_CTRL", 18:"KEY_ALT", 19:"KEY_PAUSE", 20:"KEY_CAPS_LOCK", 27:"KEY_ESCAPE", 32:"KEY_SPACEBAR", 33:"KEY_PAGE_UP", 34:"KEY_PAGE_DOWN", 35:"KEY_END", 36:"KEY_HOME", 37:"KEY_ARROW_LEFT", 38:"KEY_ARROW_UP", 39:"KEY_ARROW_RIGHT", 40:"KEY_ARROW_DOWN", 44:"KEY_PRINT_SCREEN", 45:"KEY_INSERT", 46:"KEY_DELETE", 59:"KEY_SEMICOLON", 91:"KEY_WINDOWS_LEFT", 92:"KEY_WINDOWS_RIGHT", 93:"KEY_SELECT",
    106:"KEY_NUM_PAD_ASTERISK", 107:"KEY_NUM_PAD_PLUS_SIGN", 109:"KEY_NUM_PAD_HYPHEN-MINUS", 110:"KEY_NUM_PAD_FULL_STOP", 111:"KEY_NUM_PAD_SOLIDUS", 144:"KEY_NUM_LOCK", 145:"KEY_SCROLL_LOCK", 186:"KEY_SEMICOLON", 187:"KEY_EQUALS_SIGN", 188:"KEY_COMMA", 189:"KEY_HYPHEN-MINUS", 190:"KEY_FULL_STOP", 191:"KEY_SOLIDUS", 192:"KEY_GRAVE_ACCENT", 219:"KEY_LEFT_SQUARE_BRACKET", 220:"KEY_REVERSE_SOLIDUS", 221:"KEY_RIGHT_SQUARE_BRACKET", 222:"KEY_APOSTROPHE"};
Signal._wrapDomSignal = null;
(function() {
    for(var a = Signal._specialKeys, b = 48;b <= 57;b++) {
        a[b] = "KEY_" + (b - 48)
    }
    for(b = 65;b <= 90;b++) {
        a[b] = "KEY_" + String.fromCharCode(b)
    }
    for(b = 96;b <= 105;b++) {
        a[b] = "KEY_NUM_PAD_" + (b - 96)
    }
    for(b = 112;b <= 123;b++) {
        a[b] = "KEY_F" + (b - 112 + 1)
    }
})();
Signal.Ident = function(a) {
    this.source = a.source;
    this.signal = a.signal;
    this.listener = a.listener;
    this.isDOM = a.isDOM;
    this.objOrFunc = a.objOrFunc;
    this.funcOrStr = a.funcOrStr;
    this.connected = a.connected
};
Signal.Ident.__export__ = !1;
Signal.Ident.prototype = {};
MochiKit.Base.update(Signal, {_listener:function(a, b, c, d, e) {
    var f = Signal.Event;
    if(!e) {
        return typeof c.im_self == "undefined" ? MochiKit.Base.bindLate(c, d) : c
    }
    d = d || a;
    return typeof c == "string" ? b === "onload" || b === "onunload" ? function(e) {
        d[c].apply(d, [new f(a, e)]);
        e = new Signal.Ident({source:a, signal:b, objOrFunc:d, funcOrStr:c});
        Signal._disconnect(e)
    } : function(b) {
        d[c].apply(d, [new f(a, b)])
    } : b === "onload" || b === "onunload" ? function(e) {
        c.apply(d, [new f(a, e)]);
        e = new Signal.Ident({source:a, signal:b, objOrFunc:c});
        Signal._disconnect(e)
    } : function(b) {
        c.apply(d, [new f(a, b)])
    }
}, _browserAlreadyHasMouseEnterAndLeave:function() {
    return/MSIE/.test(navigator.userAgent)
}, _browserLacksMouseWheelEvent:function() {
    return/Gecko\//.test(navigator.userAgent)
}, _mouseEnterListener:function(a, b, c, d) {
    var e = Signal.Event;
    return function(f) {
        f = new e(a, f);
        try {
            noop(f.relatedTarget().nodeName)
        }catch(g) {
            return
        }
        f.stop();
        if(!MochiKit.DOM.isChildNode(f.relatedTarget(), a)) {
            return f.type = function() {
                return b
            }, typeof c == "string" ? d[c].apply(d, [f]) : c.apply(d, [f])
        }
    }
}, _getDestPair:function(a, b) {
    var c = null, d = null;
    if(typeof b != "undefined") {
        if(c = a, d = b, typeof b == "string") {
            if(typeof a[b] != "function") {
                throw Error("'funcOrStr' must be a function on 'objOrFunc'");
            }
        }else {
            if(typeof b != "function") {
                throw Error("'funcOrStr' must be a function or string");
            }
        }
    }else {
        if(typeof a != "function") {
            throw Error("'objOrFunc' must be a function if 'funcOrStr' is not given");
        }else {
            d = a
        }
    }
    return[c, d]
}, connect:function(a, b, c, d) {
    typeof a == "string" && (a = MochiKit.DOM.getElement(a));
    var e = Signal;
    if(typeof b != "string") {
        throw Error("'sig' must be a string");
    }
    var f = e._getDestPair(c, d), g = f[0], h = f[1];
    if(typeof g == "undefined" || g === null) {
        g = a
    }
    (f = "addEventListener" in a || "attachEvent" in a) && (b === "onmouseenter" || b === "onmouseleave") && !e._browserAlreadyHasMouseEnterAndLeave() ? (e = e._mouseEnterListener(a, b.substr(2), h, g), b = b === "onmouseenter" ? "onmouseover" : "onmouseout") : f && b == "onmousewheel" && e._browserLacksMouseWheelEvent() ? (e = e._listener(a, b, h, g, f), b = "onDOMMouseScroll") : e = e._listener(a, b, h, g, f);
    g = e;
    f && Signal._wrapDomSignal !== null && (g = Signal._wrapDomSignal(e));
    a.addEventListener ? a.addEventListener(b.substr(2), g, !1) : a.attachEvent && a.attachEvent(b, g);
    e = new Signal.Ident({source:a, signal:b, listener:g, isDOM:f, objOrFunc:c, funcOrStr:d, connected:!0});
    if(!("__observers" in a)) {
        a.__observers = Set.create()
    }
    a.__observers.add(e);
    !f && typeof a.__connect__ == "function" && (f = MochiKit.Base.extend([e], arguments, 1), a.__connect__.apply(a, f));
    return e
}, _disconnect:function(a) {
    if(a.connected) {
        a.connected = !1;
        var b = a.source, c = a.signal, d = a.listener;
        if(a.isDOM) {
            if(b.removeEventListener) {
                b.removeEventListener(c.substr(2), d, !1)
            }else {
                if(b.detachEvent) {
                    b.detachEvent(c, d)
                }else {
                    throw Error("'src' must be a DOM element");
                }
            }
        }else {
            typeof b.__disconnect__ == "function" && b.__disconnect__(a, c, a.objOrFunc, a.funcOrStr)
        }
    }
}, disconnect:function(a) {
    var b = Signal;
    if(arguments.length > 1) {
        return ufu("We do not support this old API")
    }else {
        var c = a.source.__observers;
        b._disconnect(a);
        c.remove(a);
        return!0
    }
}, signal:function(a, b) {
    typeof a == "string" && (a = MochiKit.DOM.getElement(a));
    var c = memberOr(a, "__observers", ImmutableSet.empty_set), d = MochiKit.Base.extend(null, arguments, 2), e = [];
    c.forEach(function(c) {
        if(c.source === a && c.signal === b && c.connected) {
            if(c.isDOM && c.funcOrStr) {
                var e = c.objOrFunc;
                e[c.funcOrStr].apply(e, d)
            }else {
                c.isDOM ? c.objOrFunc.apply(a, d) : c.listener.apply(a, d)
            }
        }
    });
    if(e.length == 1) {
        throw e[0];
    }else {
        if(e.length > 1) {
            throw c = Error("Multiple errors thrown in handling 'sig', see errors property"), c.errors = e, c;
        }
    }
}, setDomSignalWrapper:function(a) {
    Signal._wrapDomSignal = a
}});
Signal.__new__ = function(a) {
    var b = MochiKit.Base;
    this._document = document;
    this._window = a;
    try {
        this.connect(window, "onunload", this._unloadCache)
    }catch(c) {
    }
    b.nameFunctions(this)
};
Signal.__new__(this);
__FILE__ = "3rdparty/mochikit/MochiKit/Format.js";
MochiKit.Base._module("Format", "1.5", ["Base"]);
MochiKit.Format._numberFormatter = function(a, b, c, d, e, f, g, h, i) {
    return function(j) {
        j = parseFloat(j);
        if(typeof j == "undefined" || j === null || isNaN(j)) {
            return a
        }
        var l = b, m = c;
        j < 0 ? j = -j : l = l.replace(/-/, "");
        var o = MochiKit.Format.formatLocale(d);
        e && (j *= 100, m = o.percent + m);
        for(var j = MochiKit.Format.roundToFixed(j, f), n = j.split(/\./), j = n[0], n = n.length == 1 ? "" : n[1], p = "";j.length < g;) {
            j = "0" + j
        }
        if(h) {
            for(;j.length > h;) {
                var q = j.length - h, p = o.separator + j.substring(q, j.length) + p, j = j.substring(0, q)
            }
        }
        p = j + p;
        if(f > 0) {
            for(;n.length < i;) {
                n += "0"
            }
            p = p + o.decimal + n
        }
        return l + p + m
    }
};
MochiKit.Format.numberFormatter = function(a, b, c) {
    typeof b == "undefined" && (b = "");
    var d = a.match(/((?:[0#]+,)?[0#]+)(?:\.([0#]+))?(%)?/);
    if(!d) {
        throw TypeError("Invalid pattern");
    }
    var e = a.substr(0, d.index), f = a.substr(d.index + d[0].length);
    e.search(/-/) == -1 && (e += "-");
    var g = d[1], h = typeof d[2] == "string" && d[2] != "" ? d[2] : "", d = typeof d[3] == "string" && d[3] != "", i = g.split(/,/);
    typeof c == "undefined" && (c = "default");
    var i = i.length == 1 ? null : i[1].length, g = g.length - g.replace(/0/g, "").length, j = h.length - h.replace(/0/g, "").length, e = MochiKit.Format._numberFormatter(b, e, f, c, d, h.length, g, i, j), l = MochiKit.Base;
    if(l) {
        var m = l.concat(arguments);
        e.repr = function() {
            return[self.NAME, "(", map(l.repr, m).join(", "), ")"].join("")
        }
    }
    return e
};
MochiKit.Format.formatLocale = function(a) {
    if(typeof a == "undefined" || a === null) {
        a = "default"
    }
    if(typeof a == "string") {
        var b = MochiKit.Format.LOCALE[a];
        typeof b == "string" && (b = arguments.callee(b), MochiKit.Format.LOCALE[a] = b);
        return b
    }else {
        return a
    }
};
MochiKit.Format.twoDigitAverage = function(a, b) {
    if(b) {
        var c = a / b;
        if(!isNaN(c)) {
            return MochiKit.Format.twoDigitFloat(c)
        }
    }
    return"0"
};
MochiKit.Format.twoDigitFloat = function(a) {
    a = roundToFixed(a, 2);
    return a.indexOf(".00") > 0 ? a.substring(0, a.length - 3) : a.charAt(a.length - 1) == "0" ? a.substring(0, a.length - 1) : a
};
MochiKit.Format.lstrip = function(a, b) {
    a += "";
    if(typeof a != "string") {
        return null
    }
    return b ? a.replace(RegExp("^[" + b + "]+"), "") : a.replace(/^\s+/, "")
};
MochiKit.Format.rstrip = function(a, b) {
    a += "";
    if(typeof a != "string") {
        return null
    }
    return b ? a.replace(RegExp("[" + b + "]+$"), "") : a.replace(/\s+$/, "")
};
MochiKit.Format.strip = function(a, b) {
    var c = MochiKit.Format;
    return c.rstrip(c.lstrip(a, b), b)
};
MochiKit.Format.truncToFixed = function(a, b) {
    var c = MochiKit.Format._numberToFixed(a, b), d = c.indexOf(".");
    d > 0 && d + b + 1 < c.length && (c = c.substring(0, d + b + 1), c = MochiKit.Format._shiftNumber(c, 0));
    return c
};
MochiKit.Format.roundToFixed = function(a, b) {
    var c = MochiKit.Format._numberToFixed(a, b), d = c.indexOf(".");
    d > 0 && d + b + 1 < c.length && (c = MochiKit.Format._shiftNumber(c, b), c = MochiKit.Format._numberToFixed(Math.round(parseFloat(c)), 0), c = MochiKit.Format._shiftNumber(c, -b));
    return c
};
MochiKit.Format._numberToFixed = function(a, b) {
    for(var c = a.toString().split(/[eE]/), d = c.length === 1 ? 0 : parseInt(c[1]) || 0, c = MochiKit.Format._shiftNumber(c[0], d).split(/\./), d = c[0], c = c.length === 1 ? "" : c[1];c.length < b;) {
        c += "0"
    }
    return c.length > 0 ? d + "." + c : d
};
MochiKit.Format._shiftNumber = function(a, b) {
    var c = a.indexOf(".");
    c < 0 ? c = a.length : a = a.substring(0, c) + a.substring(c + 1);
    for(c += b;c <= 0 || c <= 1 && a.charAt(0) === "-";) {
        a = a.charAt(0) === "-" ? "-0" + a.substring(1) : "0" + a, c++
    }
    for(;c > a.length;) {
        a += "0"
    }
    for(c < a.length && (a = a.substring(0, c) + "." + a.substring(c));/^0[^.]/.test(a);) {
        a = a.substring(1)
    }
    for(;/^-0[^.]/.test(a);) {
        a = "-" + a.substring(2)
    }
    return a
};
MochiKit.Format.percentFormat = function(a) {
    return MochiKit.Format.twoDigitFloat(100 * a) + "%"
};
MochiKit.Format.LOCALE = {en_US:{separator:",", decimal:".", percent:"%"}, de_DE:{separator:".", decimal:",", percent:"%"}, pt_BR:{separator:".", decimal:",", percent:"%"}, fr_FR:{separator:" ", decimal:",", percent:"%"}, "default":"en_US", __export__:!1};
MochiKit.Format.__new__ = function() {
    MochiKit.Base.nameFunctions(this);
    var a = this.NAME + ".", b, c;
    for(b in this.LOCALE) {
        if(c = this.LOCALE[b], typeof c == "object") {
            c.repr = function() {
                return this.NAME
            }, c.NAME = a + "LOCALE." + b
        }
    }
};
MochiKit.Format.__new__();
MochiKit.Base._exportSymbols(this, MochiKit.Format);
__FILE__ = "3rdparty/mochikit/MochiKit/Text.js";
MochiKit.Base._module("Text", "1.5", ["Base", "Format"]);
MochiKit.Text.startsWith = function(a, b) {
    return b != null && a != null && b.indexOf(a) == 0
};
MochiKit.Text.endsWith = function(a, b) {
    return b != null && a != null && b.lastIndexOf(a) == Math.max(b.length - a.length, 0)
};
MochiKit.Text.contains = function(a, b) {
    return b != null && a != null && b.indexOf(a) >= 0
};
MochiKit.Text.padLeft = function(a, b, c) {
    a = a || "";
    for(c = c || " ";a.length < b;) {
        a = c + a
    }
    return a
};
MochiKit.Text.padRight = function(a, b, c) {
    a = a || "";
    for(c = c || " ";a.length < b;) {
        a += c
    }
    return a
};
MochiKit.Text.truncate = function(a, b, c) {
    return a == null || a.length <= b || b < 0 ? a : c != null ? (a = a.slice(0, Math.max(0, b - c.length)), typeof a == "string" ? a + c : MochiKit.Base.extend(a, c)) : a.slice(0, b)
};
MochiKit.Text.split = function(a, b, c) {
    if(a == null || a.length == 0) {
        return a
    }
    b = b || "\n";
    a = a.split(b);
    if(typeof c == "undefined" || c >= a.length - 1) {
        return a
    }
    a.splice(c, a.length, a.slice(c, a.length).join(b));
    return a
};
MochiKit.Text.rsplit = function(a, b, c) {
    if(a == null || a.length == 0) {
        return a
    }
    b = b || "\n";
    a = a.split(b);
    if(typeof c == "undefined" || c >= a.length - 1) {
        return a
    }
    a.splice(0, a.length - c, a.slice(0, a.length - c).join(b));
    return a
};
MochiKit.Text.splitJoin = function(a, b, c) {
    if(b == null || b.length == 0) {
        return b
    }
    c = c || "\n";
    return MochiKit.Base.map(a, b.split(c)).join(c)
};
MochiKit.Text.formatter = function(a, b) {
    typeof b == "undefined" ? b = MochiKit.Format.formatLocale() : typeof b == "string" && (b = MochiKit.Format.formatLocale(b));
    var c = MochiKit.Text._parsePattern(a);
    return function() {
        for(var a = MochiKit.Base.extend([], arguments), e = [], f = 0;f < c.length;f++) {
            typeof c[f] == "string" ? e.push(c[f]) : e.push(MochiKit.Text.formatValue(c[f], a, b))
        }
        return e.join("")
    }
};
MochiKit.Text.format = function(a) {
    return MochiKit.Text.formatter(a).apply(this, MochiKit.Base.extend([], arguments, 1))
};
MochiKit.Text.formatValue = function(a, b, c) {
    var d = MochiKit.Text;
    typeof a === "string" && (a = d._parseFormatFlags(a, 0, a.length - 1));
    for(var e = 0;a.path != null && e < a.path.length;e++) {
        b != null && (b = b[a.path[e]])
    }
    typeof c == "undefined" ? c = MochiKit.Format.formatLocale() : typeof c == "string" && (c = MochiKit.Format.formatLocale(c));
    e = "";
    if(a.numeric) {
        if(typeof b != "number" || isNaN(b)) {
            e = ""
        }else {
            if(b === Number.POSITIVE_INFINITY) {
                e = "\u221e"
            }else {
                if(b === Number.NEGATIVE_INFINITY) {
                    e = "-\u221e"
                }else {
                    var f = a.sign === "-" ? "" : a.sign, f = b < 0 ? "-" : f, b = Math.abs(b);
                    a.format === "%" ? e = d._truncToPercent(b, a.precision) : a.format === "d" ? e = MochiKit.Format.roundToFixed(b, 0) : a.radix != 10 ? (e = Math.floor(b).toString(a.radix), a.format === "x" ? e = e.toLowerCase() : a.format === "X" && (e = e.toUpperCase())) : e = a.precision >= 0 ? MochiKit.Format.roundToFixed(b, a.precision) : b.toString();
                    a.padding === "0" && a.format === "%" ? e = d.padLeft(e, a.width - f.length - 1, "0") : a.padding == "0" && (e = d.padLeft(e, a.width - f.length, "0"));
                    e = d._localizeNumber(e, c, a.grouping);
                    e = f + e
                }
            }
        }
        e !== "" && a.format === "%" && (e += c.percent)
    }else {
        e = a.format == "r" ? MochiKit.Base.repr(b) : b == null ? "null" : b.toString(), e = d.truncate(e, a.precision)
    }
    return e = a.align == "<" ? d.padRight(e, a.width) : d.padLeft(e, a.width)
};
MochiKit.Text._localizeNumber = function(a, b, c) {
    for(var d = a.split(/\./), a = d[0], e = d.length == 1 ? "" : d[1], d = e.length > 0 ? b.decimal : "";c && e.length > 3;) {
        d = d + e.substring(0, 3) + b.separator, e = e.substring(3), a.charAt(0) == "0" && (a = a.substring(1))
    }
    for(e.length > 0 && (d += e);c && a.length > 3;) {
        e = a.length - 3, d = b.separator + a.substring(e) + d, a = a.substring(a.charAt(0) == "0" ? 1 : 0, e)
    }
    return a + d
};
MochiKit.Text._parsePattern = function(a) {
    for(var b = MochiKit.Text, c = [], d = 0, e = 0, e = 0;e < a.length;e++) {
        if(a.charAt(e) == "{") {
            if(e + 1 >= a.length) {
                throw c = "unescaped { char, should be escaped as {{", new b.FormatPatternError(a, e, c);
            }else {
                if(a.charAt(e + 1) == "{") {
                    c.push(a.substring(d, e + 1)), d = e + 2, e++
                }else {
                    d < e && c.push(a.substring(d, e));
                    d = a.indexOf("}", e) + 1;
                    if(d <= 0) {
                        throw c = "unmatched { char, not followed by a } char", new b.FormatPatternError(a, e, c);
                    }
                    c.push(b._parseFormat(a, e + 1, d - 1));
                    e = d - 1
                }
            }
        }else {
            if(a.charAt(e) == "}") {
                if(e + 1 >= a.length || a.charAt(e + 1) != "}") {
                    throw c = "unescaped } char, should be escaped as }}", new b.FormatPatternError(a, e, c);
                }
                c.push(a.substring(d, e + 1));
                d = e + 2;
                e++
            }
        }
    }
    d < e && c.push(a.substring(d, e));
    return c
};
MochiKit.Text._parseFormat = function(a, b, c) {
    var d = MochiKit.Text, e = a.substring(b, c), f = e.indexOf(":");
    f == 0 ? (c = d._parseFormatFlags(a, b + 1, c), c.path = [0]) : f > 0 ? (c = d._parseFormatFlags(a, b + f + 1, c), c.path = e.substring(0, f).split(".")) : (c = d._parseFormatFlags(a, c, c), c.path = e.split("."));
    e = /^\d+$/;
    for(f = 0;f < c.path.length;f++) {
        var g = c.path[f];
        if(typeof g == "string") {
            if(g = g.replace(/^\s+/, "").replace(/\s+$/, ""), g == "" && c.path.length == 1) {
                g = 0
            }else {
                if(g == "") {
                    throw new d.FormatPatternError(a, b, "format value path contains blanks");
                }else {
                    e.test(g) && (g = parseInt(g))
                }
            }
        }
        c.path[f] = g
    }
    (c.path.length < 0 || typeof c.path[0] != "number") && c.path.unshift(0);
    return c
};
MochiKit.Text._parseFormatFlags = function(a, b, c) {
    for(var d = MochiKit.Text, e = {numeric:!1, format:"s", width:0, precision:-1, align:">", sign:"-", padding:" ", grouping:!1}, c = a.substring(b, c).replace(/\s+$/, "");c.length > 0;) {
        switch(c.charAt(0)) {
            case ">":
                ;
            case "<":
                e.align = c.charAt(0);
                c = c.substring(1);
                break;
            case "+":
                ;
            case "-":
                ;
            case " ":
                e.sign = c.charAt(0);
                c = c.substring(1);
                break;
            case ",":
                e.grouping = !0;
                c = c.substring(1);
                break;
            case ".":
                var f = /^\d*/.exec(c.substring(1))[0];
                e.precision = parseInt(f);
                c = c.substring(1 + f.length);
                break;
            case "0":
                e.padding = c.charAt(0);
                c = c.substring(1);
                break;
            case "1":
                ;
            case "2":
                ;
            case "3":
                ;
            case "4":
                ;
            case "5":
                ;
            case "6":
                ;
            case "7":
                ;
            case "8":
                ;
            case "9":
                f = /^\d*/.exec(c)[0];
                e.width = parseInt(f);
                c = c.substring(f.length);
                break;
            case "s":
                ;
            case "r":
                e.format = c.charAt(0);
                c = c.substring(1);
                break;
            case "b":
                ;
            case "d":
                ;
            case "o":
                ;
            case "x":
                ;
            case "X":
                ;
            case "f":
                ;
            case "%":
                e.numeric = !0;
                e.format = c.charAt(0);
                e.radix = 10;
                if(e.format === "b") {
                    e.radix = 2
                }else {
                    if(e.format === "o") {
                        e.radix = 8
                    }else {
                        if(e.format === "x" || e.format === "X") {
                            e.radix = 16
                        }
                    }
                }
                c = c.substring(1);
                break;
            default:
                throw e = "unsupported format flag: " + c.charAt(0), new d.FormatPatternError(a, b, e);
        }
    }
    return e
};
MochiKit.Text._truncToPercent = function(a, b) {
    var c;
    c = b >= 0 ? MochiKit.Format.roundToFixed(a, b + 2) : a == null ? "0" : a.toString();
    var d = c.indexOf(".");
    if(d < 0) {
        c += "00"
    }else {
        if(d + 3 >= c.length) {
            for(var e = c.substring(d + 1);e.length < 2;) {
                e += "0"
            }
            c = c.substring(0, d) + e
        }else {
            e = c.substring(d + 1), c = c.substring(0, d) + e.substring(0, 2) + "." + e.substring(2)
        }
    }
    for(;c.length > 1 && c.charAt(0) == "0" && c.charAt(1) != ".";) {
        c = c.substring(1)
    }
    return c
};
MochiKit.Text.FormatPatternError = function(a, b, c) {
    this.pattern = a;
    this.pos = b;
    this.message = c
};
MochiKit.Text.FormatPatternError.prototype = new MochiKit.Base.NamedError("MochiKit.Text.FormatPatternError");
if(MochiKit.__export__) {
    formatter = MochiKit.Text.formatter, format = MochiKit.Text.format, formatValue = MochiKit.Text.formatValue
}
MochiKit.Base.nameFunctions(MochiKit.Text);
MochiKit.Base._exportSymbols(this, MochiKit.Text);
__FILE__ = "luna/common/debugging/table_formatter.js";
TableFormatter = AsanaObject.subclass("TableFormatter", {COLUMN_TYPE_PERCENT:"COLUMN_TYPE_PERCENT", COLUMN_TYPE_MICROSECONDS:"COLUMN_TYPE_MICROSECONDS", FORMAT_PRETTY:"FORMAT_PRETTY", FORMAT_TSV:"FORMAT_TSV", formatTable:function(a, b, c) {
    c = c || TableFormatter.FORMAT_PRETTY;
    if(c === TableFormatter.FORMAT_PRETTY) {
        var d = "  "
    }else {
        c === TableFormatter.FORMAT_TSV ? d = "\t" : ufu("Unknown format: " + c)
    }
    return a.map(function(a) {
        return c === TableFormatter.FORMAT_PRETTY ? MochiKit.Text.padLeft(a.header + "", a.padding) : a.header
    }).join(d) + "\n" + b.map(function(b) {
        var f = [];
        a.forEach(function(a) {
            var d = a.getValue(b);
            "type" in a && c === TableFormatter.FORMAT_PRETTY && (a.type === TableFormatter.COLUMN_TYPE_PERCENT ? d = (d * 100).toFixed(2) : a.type === TableFormatter.COLUMN_TYPE_MICROSECONDS && (d = (d / 1E3).toFixed(2) + "ms"));
            f.push(c === TableFormatter.FORMAT_PRETTY ? MochiKit.Text.padLeft(d + "", a.padding) : d)
        });
        return f.join(d)
    }).join("\n")
}}, {});
__FILE__ = "luna/common/clock.js";
Clock = AsanaObject.subclass("Clock", {}, {now:function() {
    return Math.round(this.nowInMicroseconds() / 1E3)
}, today:function() {
    return Date.betterParseDate(this.nowDate().strftime("%D"))
}, nowDate:function() {
    var a = new Date;
    a.setTime(this.now());
    return a
}, nowInSeconds:function() {
    return Math.round(this.nowInMicroseconds() / 1E6)
}, nowInMicroseconds:ABSTRACT});
SystemClock = Clock.subclass("SystemClock", {}, {nowInMicroseconds:function() {
    return"getTimeInMicroseconds" in globals ? getTimeInMicroseconds() : (new Date).getTime() * 1E3
}});
__FILE__ = "luna/common/pausable_clock.js";
PausableClock = Clock.subclass("PausableClock", {}, {_opt_clock:SET_IN_CONSTRUCTOR, _prerun_total:SET_IN_CONSTRUCTOR, _run_start_time:SET_IN_CONSTRUCTOR, constructor:function(a) {
    PausableClock.superproto.constructor.call(this);
    this._opt_clock = a;
    this._prerun_total = 0;
    this._run_start_time = null
}, _isRunning:function() {
    return this._run_start_time !== null
}, start:function() {
    this._run_start_time = this._innerClockNowInMicroseconds();
    return this
}, stop:function() {
    this._prerun_total = this.nowInMicroseconds();
    this._run_start_time = null;
    return this
}, nowInMicroseconds:function() {
    return this._prerun_total + (this._isRunning() ? this._innerClockNowInMicroseconds() - this._run_start_time : 0)
}, _innerClockNowInMicroseconds:function() {
    return this._opt_clock !== void 0 ? this._opt_clock.nowInMicroseconds() : env.clock.nowInMicroseconds()
}});
__FILE__ = "luna/common/debugging/profiling.js";
FlagSystem.defineString({name:"server_profiling_file", help:"Filename to which profiling information should be written"});
FlagSystem.defineString({name:"rvalue_profiler_sort_field", help:"Name of the field to sort", default_value:"inclusive_time"});
windowPerformanceTiming = function() {
    if(!("performance" in window)) {
        return{}
    }
    var a = copyAndUpdate(window.performance.timing);
    if(a.loadEventEnd === 0) {
        a.loadEventEnd = env.clock.now()
    }
    return a
};
profileWastedTime = function(a, b) {
    return host.profiler.timeFuncSummary("wasted - " + a, function() {
        return profileWastedTimeCheaply(b)
    })
};
profileWastedTimeCheaply = function(a) {
    return a()
};
profileClientWastedTimeCheaply = function(a) {
    return env.is_server ? a() : profileWastedTimeCheaply(a)
};
profileServerWastedTimeCheaply = function(a) {
    return env.is_server ? profileWastedTimeCheaply(a) : a()
};
Profiler = AsanaObject.subclass("Profiler", {SUMMARY_PREFIX:"[Summary] ", isSummaryTest:function(a) {
    return a.startsWith(Profiler.SUMMARY_PREFIX)
}, formatRawReport:function(a) {
    var b = a.events.filter(function(a) {
        return Profiler.isSummaryTest(a.name)
    }).sort(function(a, b) {
            return compare(a.name, b.name)
        }), c = a.total_time_usec, d = [{header:"Exc. %", padding:6, type:TableFormatter.COLUMN_TYPE_PERCENT, getValue:function(a) {
        return a.total_excl_time_usec / c
    }}, {header:"Exc. Time", padding:10, type:TableFormatter.COLUMN_TYPE_MICROSECONDS, getValue:function(a) {
        return a.total_excl_time_usec
    }}, {header:"Inc. %", padding:6, type:TableFormatter.COLUMN_TYPE_PERCENT, getValue:function(a) {
        return a.total_time_usec / c
    }}, {header:"Inc. Time", padding:10, type:TableFormatter.COLUMN_TYPE_MICROSECONDS, getValue:function(a) {
        return a.total_time_usec
    }}, {header:"Calls", padding:6, getValue:function(a) {
        return a.calls
    }}, {header:"Average", property_name:"average_time_usec", padding:10, type:TableFormatter.COLUMN_TYPE_MICROSECONDS, getValue:function(a) {
        return a.average_time_usec
    }}, {header:"Max excl", property_name:"max_excl_time_usec", padding:10, type:TableFormatter.COLUMN_TYPE_MICROSECONDS, getValue:function(a) {
        return a.max_excl_time_usec
    }}, {header:"Description", property_name:"name", padding:0, getValue:function(a) {
        return a.name
    }}], b = b.length === 0 ? "" : "\n\nSummary results\n\n" + TableFormatter.formatTable(d, b);
    return"\nTotal Measured Time: " + (a.total_time_usec / 1E3).toFixed(2) + "ms\nTotal Wall Time: " + (a.total_wall_time_usec / 1E3).toFixed(2) + "ms\n\n" + TableFormatter.formatTable(d, a.events) + b
}, TimedEventSet:AsanaObject.subclass("Profiler.TimedEventSet", {}, {description:SET_IN_CONSTRUCTOR, clock:SET_IN_CONSTRUCTOR, exclusive_time:SET_IN_CONSTRUCTOR, exclusive_start_time:SET_IN_CONSTRUCTOR, exclusive_times:SET_IN_CONSTRUCTOR, max_exclusive_time:SET_IN_CONSTRUCTOR, inclusive_time:SET_IN_CONSTRUCTOR, inclusive_start_time:SET_IN_CONSTRUCTOR, event_count:SET_IN_CONSTRUCTOR, recursion_depth:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    Profiler.TimedEventSet.superproto.constructor.call(this);
    this.description = a;
    this.exclusive_time = this.recursion_depth = this.event_count = 0;
    this.exclusive_times = [];
    this.max_exclusive_time = null;
    this.inclusive_time = 0;
    this.inclusive_start_time = b;
    this.start(b)
}, length:function() {
    return this.event_count
}, getInclusiveTime:function() {
    return this.inclusive_time
}, getExclusiveTime:function() {
    return this.exclusive_time
}, getMaxExclusiveTime:function() {
    return this.max_exclusive_time
}, isSummaryTest:function() {
    return Profiler.isSummaryTest(this.description)
}, _getExclusiveTimes:Memoize.memoizeInThis("Profiler.TimedEventSet._getExclusiveTimes", function() {
    return concat(this.events.map(methodcaller("getExclusiveTime")), this.recursive_events.map(methodcaller("getExclusiveTime")))
}), start:function(a) {
    this.exclusive_start_time = a
}, stopWithElapsedTime:function(a) {
    this.exclusive_time += a;
    this.exclusive_times[this.recursion_depth] += a
}, stopWithCurrentTime:function(a) {
    this.stopWithElapsedTime(a - this.exclusive_start_time)
}, stopSingleEvent:function(a) {
    this.stopWithCurrentTime(a);
    this.inclusive_time = this.max_exclusive_time = this.exclusive_time;
    this.event_count = 1
}})}, {_sets:SET_IN_CONSTRUCTOR, _current_stack:SET_IN_CONSTRUCTOR, _stack:SET_IN_CONSTRUCTOR, _stack_length:SET_IN_CONSTRUCTOR, _real_clock:SET_IN_CONSTRUCTOR, clock:SET_IN_CONSTRUCTOR, _meta_event:SET_IN_CONSTRUCTOR, _record_detailed:SET_IN_CONSTRUCTOR, _exception_suppressed:!1, constructor:function(a, b) {
    Profiler.superproto.constructor.call(this);
    this._real_clock = a;
    this.clock = PausableClock.create(this._real_clock).start();
    this.setRecordDetailedEvents(b);
    this._current_stack = {};
    this._stack = [];
    this._stack_length = 0;
    this._exception_suppressed = !1;
    this._resetWithConfig(null)
}, stackContains:function(a) {
    return a in this._current_stack
}, timeFuncSummary:function(a, b) {
    return this._timeFunc(a, !0, b)
}, timeFuncDetailed:function(a, b) {
    return this._timeFunc(a, !1, b)
}, startSummary:function(a) {
    this._start(Profiler.SUMMARY_PREFIX + a, !0)
}, stopSummary:function(a) {
    this._stop(Profiler.SUMMARY_PREFIX + a, !0)
}, startDetailed:function(a) {
    this._start(a, !1)
}, stopDetailed:function(a) {
    this._stop(a, !1)
}, _timeFunc:function(a, b, c) {
    var d = this;
    a instanceof Array ? a.forEach(function(a) {
        d._start((b ? Profiler.SUMMARY_PREFIX : "") + a, b)
    }) : d._start((b ? Profiler.SUMMARY_PREFIX : "") + a, b);
    try {
        return c()
    }finally {
        if(a instanceof Array) {
            for(c = a.length - 1;c >= 0;c--) {
                d._stop((b ? Profiler.SUMMARY_PREFIX : "") + a[c], b)
            }
        }else {
            d._stop((b ? Profiler.SUMMARY_PREFIX : "") + a, b)
        }
    }
}, _start:function(a, b) {
    if(!this._exception_suppressed && Fiber.main === Fiber.current) {
        if(this._shouldRecord(b)) {
            this.clock.stop();
            var c = this.clock.nowInMicroseconds();
            this._startWhilePaused(a, c);
            this.clock.start()
        }
        this._stack_length++
    }
}, _shouldRecord:function(a) {
    return this._stack_length === 0 || this._record_detailed || a
}, _startWhilePaused:function(a, b) {
    var c;
    a in this._sets ? c = this._sets[a] : (c = Profiler.TimedEventSet.create(a, b), this._sets[a] = c);
    c.event_count++;
    c.exclusive_times.push(0);
    this._stack.length && this._stack.top().stopWithCurrentTime(b);
    this.stackContains(a) ? c.recursion_depth++ : (this._current_stack[a] = 1, c.inclusive_start_time = b);
    c.exclusive_start_time = b;
    this._stack.push(c)
}, _stop:function(a, b, c) {
    if(Fiber.main === Fiber.current && !this._exception_suppressed && (this._stack_length--, this._shouldRecord(b))) {
        this.clock.stop();
        b = this.clock.nowInMicroseconds();
        this._stack.length || ufu("`stop` called without corresponding `start`");
        var d = this._stack.pop();
        c !== void 0 ? d.stopWithElapsedTime(c) : d.stopWithCurrentTime(b);
        d.recursion_depth === 0 ? (delete this._current_stack[a], d.inclusive_time += c === void 0 ? b - d.inclusive_start_time : c) : d.recursion_depth--;
        a = d.exclusive_times.pop();
        if(d.max_exclusive_time === null || a > d.max_exclusive_time) {
            d.max_exclusive_time = a
        }
        this._stack.length && this._stack.top().start(b);
        this.clock.start()
    }
}, inject:function(a, b, c) {
    a = b ? Profiler.SUMMARY_PREFIX + a : a;
    this._start(a, b);
    this._stop(a, b, c);
    this._stack.forEach(function(a) {
        a.inclusive_time += c
    });
    this._meta_event.exclusive_start_time -= c
}, printReport:function() {
    var a = this.rawReportAndReset();
    log.info(prettyProof(Profiler.formatRawReport(a)));
    return a
}, rawReportAndReset:function() {
    if(this._exception_suppressed) {
        this.reset(), this._exception_suppressed = !1
    }
    this._assertStackEmpty();
    var a = Profiler.TimedEventSet.create("[Profiler] getReportAndReset", this.clock.nowInMicroseconds()), b = [], c;
    for(c in this._sets) {
        b.push(this._sets[c])
    }
    b.filter(function(a) {
        return a.isSummaryTest()
    }).sort(Compare.field("description"));
    b.sort(Compare.reverse(Compare.method("getExclusiveTime")));
    c = sum(b.map(methodcaller("getExclusiveTime")));
    var d = this.clock.nowInMicroseconds(), e = this._real_clock.nowInMicroseconds();
    a.stopSingleEvent(d);
    b.push(a);
    this._meta_event.stopSingleEvent(e);
    a = this._meta_event.getExclusiveTime();
    this.reset();
    b = b.map(function(a) {
        var b = ObjectBundle.createStateObjectAsRawObject(ProfilerEvent, {});
        b.name = a.description;
        b.calls = a.length();
        b.average_time_usec = a.getInclusiveTime() / a.length();
        b.total_time_usec = a.getInclusiveTime();
        b.total_excl_time_usec = a.getExclusiveTime();
        b.max_excl_time_usec = a.getMaxExclusiveTime();
        return b
    });
    return ObjectBundle.createStateObjectAsRawObject(ProfilerReport, {name:"Report", total_time_usec:c, total_wall_time_usec:a, events:b})
}, reset:function() {
    this._resetWithConfig(null)
}, _resetWithConfig:function(a) {
    var b = this;
    this._exception_suppressed ? (this._stack = [], this._stack_length = 0) : this._assertStackEmpty();
    this._sets = {};
    var c = this.clock.nowInMicroseconds(), d = this._real_clock.nowInMicroseconds();
    if(a !== null) {
        var e = a.start_millis * 1E3, f = c - (d - e);
        this._meta_event = Profiler.TimedEventSet.create("== Total Wall Time ==", e);
        a.sections.forEach(function(a) {
            b._shouldRecord(a.is_summary) && b._startWhilePaused(a.is_summary ? Profiler.SUMMARY_PREFIX + a.description : a.description, f);
            b._stack_length++
        })
    }else {
        this._meta_event = Profiler.TimedEventSet.create("== Total Wall Time ==", d)
    }
}, setRecordDetailedEvents:function(a) {
    this._record_detailed = a
}, isEnabled:function() {
    return this._record_detailed
}, _assertStackEmpty:function() {
    this._stack.length && ufu("Profiler stack should be empty", "This can be caused by any missing stop() call, not just the one(s) below. Consider turning on profiling to catch the error closer to the source. If you are testing, assertUfusButContinues may be your friend.", pull("description", this._stack))
}});
RvalueProfiler = AsanaObject.subclass("RvalueProfiler", {active_profiler:null, maybeEnable:function() {
    (Flags.diagnostics_profile_rvalues || DIAGNOSTICS_DUMP_ALL_COMPUTED_RVALUE_COUNTS) && RvalueProfiler.enable()
}, enable:function() {
    if(!RvalueProfiler.active_profiler) {
        RvalueProfiler.active_profiler = RvalueProfiler.create()
    }
}, excludeTime:function(a) {
    var b = RvalueProfiler.active_profiler;
    return b ? b.excludeTime(a) : a()
}, _:JobQueue.addOnJobCreatedFunc(function() {
    JobQueue.currentJob().rvalue_profiler_rvalue_start_times = Map.create()
})}, {_rvalue_individual_times:null, _rvalue_batch_stacks:null, constructor:function() {
    RvalueProfiler.superproto.constructor.call(this);
    host.job_queue !== null && host.job_queue.enableJobClocks();
    this._rvalue_individual_times = Map.create();
    this._rvalue_batch_stacks = []
}, excludeTime:function(a) {
    if(DIAGNOSITICS_EXCLUDE_EXTERNAL_TIME_FROM_COMPUTED_RVALUE_TIMES) {
        var b = JobQueue.currentJob().pausableClock().nowInMicroseconds(), a = a(), c = JobQueue.currentJob().pausableClock().nowInMicroseconds() - b, d = JobQueue.currentJob().rvalue_profiler_rvalue_start_times;
        d.forEach(function(a, b) {
            d.put(a, b + c)
        });
        return a
    }else {
        return a()
    }
}, startRvalue:function(a) {
    JobQueue.currentJob().rvalue_profiler_rvalue_start_times.put(a, JobQueue.currentJob().pausableClock().nowInMicroseconds())
}, stopRvalue:function(a) {
    var b = JobQueue.currentJob().rvalue_profiler_rvalue_start_times, c = JobQueue.currentJob().pausableClock().nowInMicroseconds() - b.get(a);
    b.remove(a);
    this._rvalue_individual_times.put(a, this._rvalue_individual_times.getOr(a, 0) + c);
    b.forEach(function(a, e) {
        b.put(a, e + c)
    })
}, onRvalueBlockedOnDatastore:function() {
    var a = EvaluationContext.getEvaluationStack();
    host.job_queue.currentJobName() !== "propagation" && a.length > 1 ? this._rvalue_batch_stacks.push(a.slice(1)) : this._rvalue_batch_stacks.push(a)
}, prettyReport:function() {
    var a = 0.01, b = Flags.rvalue_profiler_sort_field, c = TableFormatter.FORMAT_PRETTY;
    b !== "exclusive_time" && b !== "inclusive_time" && (a = -1);
    if(DIAGNOSTICS_DUMP_ALL_COMPUTED_RVALUE_COUNTS) {
        a = 0, b = "count", c = TableFormatter.FORMAT_TSV
    }
    var d = this._totalTime(), b = this._bottomUpNameToRecordMap().values().filter(function(b) {
        return b.inclusive_time / d > a || b.inclusive_batches > 1
    }).sort(Compare.reverse(Compare.field(b))), c = "Total computeValue time: " + (d / 1E3).toFixed(2) + "ms\nNum rvalues: " + this._rvalue_individual_times.size() + "\n\nBottom-up:\n\n" + TableFormatter.formatTable(this._columnDescs(d, !1), b, c) + "\n\nTop-down\n\n" + TableFormatter.formatTable(this._columnDescs(d, !0), this._flattenedTopdownRecords(), c);
    this._rvalue_individual_times.clear();
    this._rvalue_batch_stacks = [];
    return c
}, _totalTime:function() {
    var a = 0;
    this._rvalue_individual_times.forEach(function(b, c) {
        a += c
    });
    return a
}, _rvalueRecordMap:function() {
    var a = DIAGNOSTICS_DUMP_ALL_COMPUTED_RVALUE_COUNTS, b = Map.create();
    this._rvalue_individual_times.forEach(function(c, d) {
        c._getStackArray().forEach(function(e) {
            var f = e.getIdentifier();
            a && (f = f.replace(/obj_[0-9]+/g, "obj_X"));
            var g = b.getOr(e, null);
            g === null && (g = {rvalue:e, name:f, inclusive_time:0, exclusive_time:0, inclusive_batches:0, exclusive_batches:0, inclusive_num_inputs:0, exclusive_num_inputs:0}, b.put(e, g));
            g.inclusive_time += d;
            f = c._getState();
            f = f.auto_inputs.size() + (f.manual_inputs === null ? 0 : f.manual_inputs.size());
            g.inclusive_num_inputs += f;
            equals(e, c) && (g.exclusive_time += d, g.exclusive_num_inputs += f)
        })
    });
    this._rvalue_batch_stacks.forEach(function(a) {
        b.get(a.top()).exclusive_batches++;
        a.forEach(function(a) {
            b.get(a).inclusive_batches++
        })
    });
    return b
}, _bottomUpNameToRecordMap:function() {
    var a = Map.create();
    this._rvalueRecordMap().forEach(function(b, c) {
        var d = a.getOr(c.name, null);
        d === null ? (delete c.rvalue, c.count = 1, a.put(c.name, c)) : (d.inclusive_time += c.inclusive_time, d.exclusive_time += c.exclusive_time, d.inclusive_batches = Math.max(d.inclusive_batches, c.inclusive_batches), d.exclusive_batches = Math.max(d.exclusive_batches, c.exclusive_batches), d.inclusive_num_inputs += c.inclusive_num_inputs, d.exclusive_num_inputs += c.exclusive_num_inputs, d.count++)
    });
    return a
}, _topDownRootRecords:function() {
    var a = [];
    rvalue_to_record = this._rvalueRecordMap();
    rvalue_to_record.forEach(function(a, c) {
        c.children = []
    });
    rvalue_to_record.forEach(function(b, c) {
        c.count = 1;
        b._parent === null ? a.push(c) : rvalue_to_record.get(b._parent).children.push(c)
    });
    return a
}, _flattenedTopdownRecords:function() {
    var a = [], b = Flags.rvalue_profiler_sort_field, c = function(d, e) {
        var f = 0;
        d.sort(function(a, c) {
            return-compare(a[b], c[b])
        });
        d.forEach(function(b) {
            b.name = ".".repeat(e) + ">" + b.name;
            a.push(b);
            b.count += c(b.children, e + 1);
            f += b.count
        });
        return f
    };
    c(this._topDownRootRecords(), 0);
    return a
}, _columnDescs:function(a, b) {
    return[{header:"Inc. %", padding:6, type:TableFormatter.COLUMN_TYPE_PERCENT, getValue:function(b) {
        return b.inclusive_time / a
    }}, {header:"Inc. Time", padding:9, type:TableFormatter.COLUMN_TYPE_MICROSECONDS, getValue:function(a) {
        return a.inclusive_time
    }}, {header:"Exc. %", padding:6, type:TableFormatter.COLUMN_TYPE_PERCENT, getValue:function(b) {
        return b.exclusive_time / a
    }}, {header:"Exc. Time", padding:9, type:TableFormatter.COLUMN_TYPE_MICROSECONDS, getValue:function(a) {
        return a.exclusive_time
    }}, {header:(b ? "" : "Max ") + "I Batches", padding:13, getValue:function(a) {
        return a.inclusive_batches
    }}, {header:(b ? "" : "Max ") + "E Batches", padding:13, getValue:function(a) {
        return a.exclusive_batches
    }}, {header:"Count", padding:5, getValue:function(a) {
        return a.count
    }}, {header:"I Inputs", padding:5, getValue:function(a) {
        return a.inclusive_num_inputs
    }}, {header:"E Inputs", padding:5, getValue:function(a) {
        return a.exclusive_num_inputs
    }}, {header:"Description", padding:0, getValue:function(a) {
        return a.name
    }}]
}});
__FILE__ = "luna/common/experiment.js";
FlagSystem.defineFeature({name:"experiment_testing_mode", help:"Makes experiments be forced into / out of their default variant depending on enable_all_experiments_in_testing_mode", default_value:!1});
FlagSystem.defineFeature({name:"all_experiments_in_testing_mode", help:"Makes experiments take a non default variant if in testing mode", is_testable:!0, default_value:!1});
parseDate = function(a) {
    var b = a.match(/(\d{4})-(\d{2})-(\d{2})/), a = parseInt(b[1], 10), c = parseInt(b[2], 10) - 1, b = parseInt(b[3], 10);
    return Date.UTC(a, c, b)
};
Experiment = AsanaObject.subclass("Experiment", {GRANULARITY:1073741824, OVERRIDE_NOT_SET:"OVERRIDE_NOT_SET", SubjectType:{CurrentUser:"SPECIAL_SUBJECT_CURRENT_USER", CurrentDomain:"SPECIAL_SUBJECT_CURRENT_DOMAIN", User:"User", Domain:"Domain"}, _experiments:Map.create(), experiments_by_subject_type:MultiMap.create(), defineExperiment:attributedFunc({name:ATTRIBUTE_REQUIRED, subject_type:"SPECIAL_SUBJECT_CURRENT_USER", allow_null_subject_in_tests:!1, variants:ATTRIBUTE_REQUIRED, default_value:ATTRIBUTE_REQUIRED,
    variant_weights:null, min_creation_time:null, max_creation_time:null, start_date:null, end_date:null}, function(a) {
    if(a.start_date !== null) {
        a.min_creation_time = parseDate(a.start_date)
    }
    delete a.start_date;
    if(a.end_date !== null) {
        a.max_creation_time = parseDate(a.end_date)
    }
    delete a.end_date;
    var b = {name:a.name + "_variant_weights", help:"How much weight each experimental group should get.", value_prototype:FlagSystem.createPrototype(FlagSystem.Float), send_to_client:!0};
    if(a.variant_weights !== null) {
        b.default_value = Map.mapize(a.variant_weights)
    }
    delete a.variant_weights;
    var b = FlagSystem.defineMap(b), c = FlagSystem.defineEnum({name:a.name + "_override", help:"Force experiment " + a.name + " into a specific variant", values:concat([Experiment.OVERRIDE_NOT_SET], a.variants), default_value:Experiment.OVERRIDE_NOT_SET, send_to_client:!0}), b = Experiment.create(update(a, {override_flag:c, variant_weights_flag:b}));
    this._experiments.put(a.name, b);
    this.experiments_by_subject_type.add(a.subject_type, b);
    return b
}), variant:function(a, b) {
    return this._experiments.get(a).variant(b)
}}, {name:SET_IN_CONSTRUCTOR, _subject_type:SET_IN_CONSTRUCTOR, _allow_null_subject_in_tests:SET_IN_CONSTRUCTOR, _variant_weights_flag:SET_IN_CONSTRUCTOR, _non_default_variants:SET_IN_CONSTRUCTOR, _override_flag:SET_IN_CONSTRUCTOR, _default_value:SET_IN_CONSTRUCTOR, _min_creation_time:SET_IN_CONSTRUCTOR, _max_creation_time:SET_IN_CONSTRUCTOR, constructor:attributedFunc({name:ATTRIBUTE_REQUIRED, subject_type:ATTRIBUTE_REQUIRED, allow_null_subject_in_tests:ATTRIBUTE_REQUIRED, variant_weights_flag:ATTRIBUTE_REQUIRED,
    variants:ATTRIBUTE_REQUIRED, override_flag:ATTRIBUTE_REQUIRED, default_value:ATTRIBUTE_REQUIRED, min_creation_time:ATTRIBUTE_REQUIRED, max_creation_time:ATTRIBUTE_REQUIRED}, function(a) {
    Experiment.superproto.constructor.call(this);
    this.name = a.name;
    this._subject_type = a.subject_type;
    this._allow_null_subject_in_tests = a.allow_null_subject_in_tests;
    this._non_default_variants = a.variants.filter(function(b) {
        return b !== a.default_value
    });
    this._variant_weights_flag = a.variant_weights_flag;
    this._override_flag = a.override_flag;
    this._default_value = a.default_value;
    this._min_creation_time = a.min_creation_time;
    this._max_creation_time = a.max_creation_time
}), variant:function(a) {
    var b = this, c = Flags.enable_experiment_testing_mode && b._allow_null_subject_in_tests, d;
    b._subject_type === Experiment.SubjectType.CurrentUser ? (d = User, a === void 0 && (a = c ? env.userOrNull() : env.user())) : b._subject_type === Experiment.SubjectType.CurrentDomain ? (d = Domain, a === void 0 && (a = c && env.userOrNull() === null ? null : env.realAppSession().activeDomain() || Domain.globalDomain())) : d = globals[b._subject_type];
    if(b._override_flag.getValue() !== void 0 && b._override_flag.getValue() !== Experiment.OVERRIDE_NOT_SET) {
        return b._override_flag.getValue()
    }else {
        if(Flags.enable_experiment_testing_mode) {
            return Flags.enable_all_experiments_in_testing_mode ? b._non_default_variants[0] : b._default_value
        }else {
            if(b._min_creation_time !== null || b._max_creation_time !== null) {
                if(c = View.runWithoutLvalueChecking(function() {
                    return a.getV("__creation_time")
                }), c === null || b._min_creation_time !== null && c < b._min_creation_time || b._max_creation_time !== null && c > b._max_creation_time) {
                    return b._default_value
                }
            }
            if(d === Domain && a.isGlobal()) {
                var e = 0, f = b._variant_weights_flag.getValue();
                b._non_default_variants.forEach(function(a) {
                    e += Math.min(1 / b._non_default_variants.length, f.getOr(a, 0))
                });
                if(e < 1) {
                    return b._default_value
                }
            }
            d = Crypto.hash(b.name + a.global_id, {output:Crypto.Format.HEX, algorithm:Crypto.Algorithm.MD5});
            c = parseInt(d.substr(0, 8), 16) % Experiment.GRANULARITY / Experiment.GRANULARITY;
            d = b._non_default_variants[Math.floor(c * b._non_default_variants.length)];
            c %= 1 / b._non_default_variants.length;
            var g = b._variant_weights_flag.getValue().getOr(d, 0);
            g > 1 / b._non_default_variants.length && host.recordWarningOnce("Variant weight for " + b._name + "=" + d + " is set to " + g + ", but is being artificially capped at " + 1 / b._non_default_variants);
            return c < g ? d : b._default_value
        }
    }
}});
ExperimentalFeature = AsanaObject.subclass("ExperimentalFeature", {defineExperimentalFeature:attributedFunc({name:ATTRIBUTE_REQUIRED, on_percentage:0, on_percentage_for_new_subjects:0, on_percentage_for_existing_subjects:0, help:ATTRIBUTE_REQUIRED, is_testable:!0, subject_type:ATTRIBUTE_REQUIRED, allow_null_subject_in_tests:!1, min_creation_time_for_new_subjects:null, start_date_for_new_subjects:null}, function(a) {
    ["on_percentage", "on_percentage_for_new_subjects", "on_percentage_for_existing_subjects"].forEach(function(b) {
        if(a[b] > 1) {
            throw"It's called on_percentage but that's a lie.";
        }
    });
    FlagSystem.defineFeature({name:a.name, help:a.help, default_value:!1, scope:[Experiment.SubjectType.Domain, Experiment.SubjectType.CurrentDomain].contains(a.subject_type) ? FlagSystem.Scope.DOMAIN : FlagSystem.Scope.USER, is_testable:a.is_testable});
    Experiment.defineExperiment({name:a.name, subject_type:a.subject_type, allow_null_subject_in_tests:a.allow_null_subject_in_tests, variants:["disabled", "enabled"], default_value:"disabled", variant_weights:{enabled:a.on_percentage}});
    Experiment.defineExperiment({name:a.name + "_new_subjects", subject_type:a.subject_type, allow_null_subject_in_tests:a.allow_null_subject_in_tests, variants:["disabled", "enabled"], default_value:"disabled", variant_weights:{enabled:a.on_percentage_for_new_subjects}, min_creation_time:a.min_creation_time_for_new_subjects, start_date:a.start_date_for_new_subjects});
    Experiment.defineExperiment({name:a.name + "_existing_subjects", subject_type:a.subject_type, allow_null_subject_in_tests:a.allow_null_subject_in_tests, variants:["disabled", "enabled"], default_value:"disabled", variant_weights:{enabled:a.on_percentage_for_existing_subjects}, max_creation_time:a.min_creation_time_for_new_subjects, end_date:a.start_date_for_new_subjects})
}), enabled:function(a, b) {
    var c = [Experiment._experiments.get(a), Experiment._experiments.get(a + "_new_subjects"), Experiment._experiments.get(a + "_existing_subjects")];
    if(Flags["enable_" + a]) {
        return!0
    }
    if(Flags.experiment_testing_mode && Flags.all_experiments_in_testing_mode) {
        return!0
    }
    var d = c[0];
    if(b === void 0 && d._subject_type === Experiment.SubjectType.CurrentDomain) {
        if(env.lunaSession() === null || env.lunaSession().lunaSessionState() === null) {
            return!1
        }
        if(!isA(env.realAppSession(), IAsanaSession)) {
            return!1
        }
        b = env.realAppSession().activeDomain();
        if(b === null) {
            return!1
        }
    }
    c = c.any(function(a) {
        return a.variant(b) === "enabled"
    });
    return b instanceof Domain ? c || b.hasFeature(a) : c
}, enabledForAnyOfThisUsersDomains:function(a, b) {
    return(b === void 0 ? env.user() : b).domains().any(function(b) {
        return ExperimentalFeature.enabled(a, b)
    })
}}, {});
__FILE__ = "luna/common/features.js";
FlagSystem.defineBool({name:"enable_all_testable_features", help:"Force all features marked as 'is_testable' to be enabled.", default_value:!1});
FlagSystem.defineBool({name:"enable_non_commit_blocking_tests", help:"Tests which depend on external services are usually put behind thisflag.", default_value:!1, send_to_client:!0});
FlagSystem.defineBool({name:"proto_grid", help:"Show an experimental version of task rows.", default_value:!1, is_feature:!0, is_testable:!1});
ExperimentalFeature.defineExperimentalFeature({name:"email_bridge", help:"Makes asana an email client! And a support queue!", on_percentage:0, subject_type:Experiment.SubjectType.CurrentUser});
FlagSystem.defineInt({name:"allow_percentage_of_users", help:"A percentage (0 to 100) of users who are allowed to use the product", default_value:100, is_testable:!1});
FlagSystem.defineFeature({name:"select_first_task", help:"Select the first task when switching lists. This has a performance impact in production due to the time it takes to render/load a task instead of the list in the details pane.", default_value:!1, is_testable:!1});
FlagSystem.defineFeature({name:"navigating_to_detailless_subtasks", help:"Suppress the behavior where selecting a detail-less subtask in the grid causes the parent task to load in the details pane, not the subtask itself.", default_value:!0, is_testable:!1});
FlagSystem.defineFeature({name:"mobile_debug_console", help:"Show a debug console on mobile apps.", default_value:!1, is_testable:!0});
FlagSystem.defineFeature({name:"mobile_native_debug_console", help:"Show the status bar and debug console on the native iOS app.", default_value:!1});
FlagSystem.defineBool({name:"enable_debug_console", help:"Show a debug console.", default_value:!1, is_feature:!0, is_testable:!0});
FlagSystem.defineBool({name:"testing_dummy_feature_flag", help:"A dummy feature flag used by tests", default_value:!1, is_feature:!0});
FlagSystem.defineFeature({name:"mobile_app", help:"Allow the user to access the mobile application", default_value:!0, is_testable:!0});
FlagSystem.defineFeature({name:"formatting_in_luna_text", help:"Whether to preserve <b> and <i> when converting to luna text", default_value:!1, is_testable:!0, scope:FlagSystem.Scope.DOMAIN});
FlagSystem.defineFeature({name:"premium_permissions_available", help:"Users can purchase premium permissions", default_value:!1, is_testable:!0});
FlagSystem.defineFeature({name:"show_word_count", help:"Shows word count when you're writing a comment as a mindfulness check.", default_value:!1, is_testable:!0});
ExperimentalFeature.defineExperimentalFeature({name:"new_workspace_tour", help:"When the user creates a work workspace, guide them through a tour", on_percentage:0.9, subject_type:Experiment.SubjectType.CurrentUser});
ExperimentalFeature.defineExperimentalFeature({name:"completed_tasks_remain_inline", help:"Completed tasks should not sort to the top of project lists.", on_percentage:0, subject_type:Experiment.SubjectType.CurrentUser});
FlagSystem.defineFeature({name:"webhooks_ui", help:"Adds a menu option to tasks to view/edit/debug webhooks.", default_value:!1, is_testable:!0});
FlagSystem.defineFeature({name:"webhooks_api", help:"Exposes webhooks in the API.", default_value:!1, is_testable:!0});
FlagSystem.defineBool({name:"stub_out_photos_upload", help:"Don't process the uploaded photo and set dummy profile photo version", default_value:!1});
FlagSystem.defineFeature({name:"oauth", help:"Expose Oauth 2.0 authorization endpoints and capabilities.", default_value:!1, is_testable:!0});
FlagSystem.defineFeature({name:"mobile_force_native_ios", help:"Force the app to run as if it's running the native iOS app.", default_value:!1, is_testable:!1});
FlagSystem.defineFeature({name:"fast_inbox_task_switch", help:"", default_value:!1, is_testable:!0});
FlagSystem.defineFeature({name:"backpropagation", help:"Enable backpropagation in query system", default_value:!0, is_testable:!0});
FlagSystem.defineFeature({name:"fast_batching", help:"Cache and prefetch addresses during pageload", default_value:!0, is_testable:!0});
ExperimentalFeature.defineExperimentalFeature({name:"dropbox", help:"Allow attachments via dropbox", on_percentage:0, allow_null_subject_in_tests:!0, subject_type:Experiment.SubjectType.CurrentDomain});
ExperimentalFeature.defineExperimentalFeature({name:"new_user_comment_prompt", help:"Prompt users to leave a comment when assigning to a new user", on_percentage_for_new_subjects:0.5, on_percentage_for_existing_subjects:0, start_date_for_new_subjects:"2012-10-08", subject_type:Experiment.SubjectType.CurrentDomain});
ExperimentalFeature.defineExperimentalFeature({name:"new_workspace_dialog", help:"Show a different questions based new workspace dialog", on_percentage:0, allow_null_subject_in_tests:!0, subject_type:Experiment.SubjectType.CurrentUser});
ExperimentalFeature.defineExperimentalFeature({name:"networks_left_pane_ui", help:"Enable Networks UI changes in the left pane, applicable even without Networks enabled.", on_percentage:0, subject_type:Experiment.SubjectType.CurrentUser});
ExperimentalFeature.defineExperimentalFeature({name:"networks_left_pane_header", help:"Enable Networks UI changes in the left pane's header, applicable even without Networks enabled.", on_percentage:0, subject_type:Experiment.SubjectType.CurrentUser});
ExperimentalFeature.defineExperimentalFeature({name:"expose_teams", help:"Exposes the ability for there to be multiple teams within a network", on_percentage:0, subject_type:Experiment.SubjectType.CurrentDomain});
FlagSystem.defineFloat({name:"change_event_sample_rate", help:"Fraction (between 0 and 1) of change events to transmit.", min_value:0, max_value:1, default_value:0});
FlagSystem.defineBool({name:"disable_onbeforeunload", help:"Suppresses the dialog box that we normally show if the user tries to leave the page with changes still unsynced.", default_value:!1, is_feature:!0, is_testable:!1});
FlagSystem.defineBool({name:"enable_html5state", help:"Use HTML5's pushState/onpopstate facility, rather than location.hash, to provide tasks with permalinks.", default_value:!0, is_feature:!0, is_testable:!0});
FlagSystem.defineFeature({name:"only_propagate_unknown_loading_values_to_loading_boundaries", help:"Only UnknownValue.Loading will propagate to the loading boundary in the UI, while the rest will just replace the unknown nodewith the proper message.", default_value:!0, is_testable:!0});
ExperimentalFeature.defineExperimentalFeature({name:"forest_background", help:"Show the product with an image, rather than a gray, in the background.", on_percentage:0, subject_type:Experiment.SubjectType.CurrentUser});
FlagSystem.defineInt({name:"mobile_wrapper_network_warning_threshold", help:"The network warning threshold will be shown after we have failed to sync for this many milliseconds.", default_value:15E3, send_to_client:!0});
FlagSystem.defineBool({name:"enable_memcache", help:"Whether to add the memcached caching layer.", default_value:!0, is_feature:!0, is_testable:!0});
FlagSystem.defineBool({name:"disable_update_cached_values_and_propagate", help:"Whether to update cached values from the datastore on each RPC.", default_value:!1, is_feature:!0, is_testable:!1});
FlagSystem.defineBool({name:"enable_beta", help:"Whether to use beta", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"enable_fewer_pubsub_subscriptions", help:"Enables a new pubsub subscription strategy that drastically reduces the number of topic subscriptions and the number of invalidations delivered to a given client as a result.", default_value:!1, is_feature:!0, is_testable:!1});
FlagSystem.defineBool({name:"enable_rest_api", help:"Enables sweet programmatic access to the data model.", default_value:!0, is_feature:!0, is_testable:!0});
FlagSystem.defineBool({name:"enable_unsafe_static_js", help:"Enables serving of static JS files by v8cgi. This is needed to accommodate diagnostics_individual_js_and_css and should only be used in sand or test environments due to security and perf issues.", default_value:!1, send_to_client:!0});
FlagSystem.defineBool({name:"correct_client_timestamps", help:"Do server-side correction of timestamps that are too far from present", default_value:!0});
FlagSystem.defineBool({name:"enable_fibered_parallel_peeks", help:"Enables more aggressive parallelism in peekXvaluesAnd...() using more fibers. May be essential for access-control.", default_value:!1});
FlagSystem.defineFeature({name:"action_coalescing", help:"Attempt to coalesce some actions to reduce db and network load", default_value:!0, is_testable:!0});
FlagSystem.defineFeature({name:"fast_query_result_sharing", help:"Share server query results with the client", default_value:!1, is_testable:!1});
FlagSystem.defineFeature({name:"list_caching", help:"Caches the most recently visited lists for faster list switch.", default_value:!0, send_to_client:!0, is_testable:!0});
FlagSystem.defineFeature({name:"fail_on_reentrant_handlers", help:"causes reentrant handlers to fail clearly rather than in random parts of the code", default_value:!0, is_testable:!0, send_to_client:!0});
FlagSystem.defineFeature({name:"winter_wonderland", help:"Shows snow in the left pane if the user completes a special task.", default_value:!1, is_testable:!0});
FlagSystem.defineFeature({name:"unicorns_and_rainbows", help:"Sometimes shows unicorns and rainbows when a user completes a task", default_value:!1, is_testable:!1});
FlagSystem.defineFeature({name:"timezones", help:"The user can set a timezone on their account.", default_value:!1, is_testable:!1});
FlagSystem.defineFeature({name:"completion_to_project_followers", help:"Project followers get notified of completions in the project.", default_value:!1, is_testable:!0});
ExperimentalFeature.defineExperimentalFeature({name:"inbox_holdback", help:"Turn off inbox", on_percentage:0, subject_type:Experiment.SubjectType.CurrentUser});
ExperimentalFeature.defineExperimentalFeature({name:"mobile_rating_prompt", help:"Prompt users to rate our iOS app if certain conditions are met.", on_percentage:1, subject_type:Experiment.SubjectType.CurrentUser});
FlagSystem.defineFeature({name:"mobile_task_reordering", help:"Drag and drop for task reordering.", default_value:!1, is_testable:!0});
FlagSystem.defineFeature({name:"mobile_search", help:"Search for mobile app.", default_value:!1, is_testable:!1});
FlagSystem.defineBool({name:"stub_out_google_sso", help:"Use stubs for gapi. Should only be used in tests.", default_value:!1});
FlagSystem.defineFeature({name:"send_second_day_email_now", help:"Turn on this flag for testing second day emails, so that the email gets sent after 1 minute, rather than after 24 hours", default_value:!1});
ExperimentalFeature.defineExperimentalFeature({name:"contact_importer_in_nux", help:"Show the contact importer to the user after they close the welcome dialog", on_percentage:1, subject_type:Experiment.SubjectType.CurrentUser});
ExperimentalFeature.defineExperimentalFeature({name:"share_asana_launches_invite_dialog", help:"Makes the 'Share Asana' button launch the invite dialog", on_percentage:0, subject_type:Experiment.SubjectType.CurrentUser});
FlagSystem.defineBool({name:"prepopulate_billing_data", default_value:!1, help:"Prepopulates the billing forms with test data.", send_to_client:!0});
FlagSystem.defineBool({name:"use_webdriver", help:"Use webdriver to drive UI tests.", default_value:!1, send_to_client:!0});
FlagSystem.defineString({name:"recurly_subdomain", default_value:null, help:"The subdomain of the recurly account.", send_to_client:!0});
FlagSystem.defineInt({name:"soft_version_error_reload_window_minutes", help:"The size of the window in which a client should reload once it finds out about a new version", default_value:5, send_to_client:!0});
FlagSystem.defineFeature({name:"show_loading_indicators_if_datastore_stale", help:"Show a loading indicator in the grid and details pane if the client datastore is out of date.", default_value:!1, is_testable:!0});
FlagSystem.defineString({name:"cloudsponge_domain_key", help:"Key to use for cloudsponge contact importer, should be set based on which domain the host is running in.", send_to_client:!0});
FlagSystem.defineFeature({name:"premium_permissions", help:"Allow projects to be private to multiple people. We charge for this", default_value:!1, is_testable:!1, scope:FlagSystem.Scope.DOMAIN});
FlagSystem.defineFeature({name:"ding", help:"Ring a bell on task completion", default_value:!1, is_testable:!1, scope:FlagSystem.Scope.DOMAIN});
FlagSystem.defineFeature({name:"try_now_on_disconnect", help:"Gives users more info about pending syncs and give them an option to try now", default_value:!0, is_testable:!0, scope:FlagSystem.Scope.USER});
FeatureFlags = AsanaObject.subclass("FeatureFlags", {_singleton:null, get:function() {
    return FeatureFlags._singleton
}, init:function(a) {
    FeatureFlags._singleton = FeatureFlags.create();
    a = a || [];
    FlagSystem.default_flag_data.enable_all_testable_features ? FeatureFlags._singleton.enableTestable() : a.forEach(function(a) {
        a.length > 0 && FeatureFlags._singleton.enableMatching(RegExp("^" + a + "$"))
    })
}, initFromEnabledFeaturesString:function(a) {
    FeatureFlags.init(a.split(","))
}}, {_flags:SET_IN_CONSTRUCTOR, did_set_flags_via_request_params:!1, constructor:function() {
    FeatureFlags.superproto.constructor.call(this);
    var a = this;
    this._flags = Map.create();
    FlagSystem.forEach(function(b, c) {
        c.is_feature ? a._flags.put(b, c) : c.is_testable && ufu("flag is testable but not a feature. That is not supported", b)
    })
}, exists:function(a) {
    return this._flags.containsKey(a)
}, scope:function(a) {
    return this._flags.get(a).scope || FlagSystem.Scope.USER
}, enable:function(a) {
    FlagSystem.default_flag_data[a] || (log.info("Feature enabled: " + a), FlagSystem.get(FlagSystem.default_flag_data, a).parseValue("true"))
}, enableMatching:function(a) {
    var b = this;
    this._flags.forEach(function(c) {
        c.match(a) && b.enable(c)
    })
}, enableTestable:function() {
    var a = this;
    this._flags.forEach(function(b, c) {
        c.is_testable && a.enable(b)
    })
}, getFeatureNames:function() {
    return this._flags.keys()
}, getEnabledFeatureNames:function(a) {
    var b = [];
    this._flags.forEach(function(c, d) {
        d.getValue() && (!a || d.scope === FlagSystem.Scope.DOMAIN) && b.push(c)
    });
    return b
}, toJson:function() {
    var a = {};
    this._flags.forEach(function(b, c) {
        a[b] = !!c.getValue()
    });
    return a
}});
applyUserFlags = function(a) {
    a.getV("flag_settings").forEachValue(function(a) {
        a = a.name();
        FeatureFlags.get().exists(a) && (FeatureFlags.get().scope(a) === FlagSystem.Scope.DOMAIN ? log.info("Refusing to honor domain-scoped feature as flag", a) : FeatureFlags.get().enable(a))
    })
};
__FILE__ = "luna/common/debugging/diagnostics.js";
FlagSystem.defineBool({name:"diagnostics_dump_queries_and_results", help:"Set to true to have the server log all the Query-based SQL queries it runs and the results they return.", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_detailed_rvalue_names", help:"Whether to name rvalues more informatively.", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_do_expensive_error_checking", help:"whether to do time-consuming error checks", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_only_poll_on_change", help:"Set to true to have the client only sync with the server when the client has changes to send.", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_sync_only_after_propagation", help:"Disables the optimistic syncing of changes before propagating those changes.", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_allow_api_debug_output_for_non_admin", help:"Allows any user to generate debug output from the API", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_warn_about_unknown_rvalues", help:"Warn about rvalues whose values are UNKNOWN after loading the page and receiving data from the server. Only warn about rvalues that have no unknown inputs.", default_value:!1, is_feature:!0, is_testable:!1});
FlagSystem.defineBool({name:"diagnostics_check_handler_lvalues", help:"Check that handlers only use lvalues that we are confident will beloaded.", default_value:!1, is_feature:!0, is_testable:!1});
FlagSystem.defineBool({name:"diagnostics_v8_profile_initial_data", default_value:!1, help:'Turns on the V8 CPU profiler during loading data for page load.You must run jsweb with "jsweb profile-run" otherwise no data is logged.'});
FlagSystem.defineBool({name:"diagnostics_v8_profile_page_load", default_value:!1, help:'Turns on the V8 CPU profiler during page load.You must run jsweb with "jsweb profile-run" otherwise no data is logged.'});
FlagSystem.defineBool({name:"diagnostics_v8_profile_main_fiber_only", default_value:!1, help:"Only profile the main fiber, not other fiabers"});
FlagSystem.defineBool({name:"diagnostics_profile_syncs", help:"Set to true profile the time spend syncing, including server time.", default_value:!1, is_testable:!0, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_v8_profile_syncs", default_value:!1, help:'Turns on the V8 CPU profiler around all but the first sync request.You must run jsweb with "jsweb profile-run" otherwise no data is logged.'});
FlagSystem.defineInt({name:"diagnostics_simulate_rpc_latency_ms", help:"The number of milliseconds to sleep before processing server RPC responses to simulate network latency.", default_value:0});
FlagSystem.defineBool({name:"diagnostics_capture_unknown_stack_traces", help:"Capture stack traces for ValueIsUnknownErrors. This has a significant performance impact.", default_value:!1, is_feature:!0, is_testable:!1});
FlagSystem.defineBool({name:"diagnostics_log_unknown_values_in_ui", help:"Logs the stacks of UnknownValues when UnknownValues cause UI Nodes to become unknown (Loading).", default_value:!1, is_feature:!0, is_testable:!0});
FlagSystem.defineBool({name:"diagnostics_highlight_new_elements", help:"Briefly highlight new dom elements.", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_print_access_control_filtered_values", help:"Logs all values that were not filtered just before sync because ofaccess control checks. (only prints on the server)", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_log_client_changed_lvalues", help:"Set to true to log which lvalues are mutated by client requests.", default_value:!0, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_log_client_actions", help:"Set to true to log full dump of actions and changes by client.", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_log_batched_read_rvalues", help:"Set to true to log which rvalues are read in each batch.", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_log_datastore_memcached_reads", help:"Set to true to log which addresses are fetched from memcache.", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_log_batched_read_counts", help:"Set to true to log the sizes of each batch read.", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_log_computed_dslvalues", help:"Set to true to log which lvalues are computed.", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_simulate_mobile_wrapper_errors", help:"Set to true to periodically report failures to the mobile wrapper to better test our fault tolerance.", default_value:!1, is_feature:!0});
DIAGNOSTICS_DUMP_COMPUTED_RVALUES = DIAGNOSTICS_DUMP_COMPUTED_RVALUES_NAMES = DIAGNOSTICS_DUMP_COMPUTED_RVALUES_HISTORY = DIAGNOSTICS_DUMP_SQL_STATEMENTS = DIAGNOSTICS_DUMP_QUERIES_CONFIRMED_TO_CLIENT = DIAGNOSTICS_FRP_EXTRA_PERF_BLOCKS = DIAGNOSTICS_FRP_CHECK_LEAKS = !1;
FlagSystem.defineBool({name:"diagnostics_profile_rvalues", help:"Reports on slow rvalues", default_value:!1, is_feature:!0, is_testable:!1});
DIAGNOSITICS_EXCLUDE_EXTERNAL_TIME_FROM_COMPUTED_RVALUE_TIMES = !0;
DIAGNOSTICS_DUMP_ALL_COMPUTED_RVALUE_COUNTS = !1;
FlagSystem.defineBool({name:"diagnostics_trace_computation", help:"Prints verbose logs about when rvalues are computed, dirtied, etc during any computation", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_trace_preloading", help:"Prints verbose logs about when properties are [un]preloaded", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_trace_view_recreation", help:"Prints a message when an rvalue that constructed views is recomputed", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_dump_query_times", help:"Set to true to have the server log the timing of all Query-based SQL queries", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_capture_computation_details", help:"Captures extensive information about rvalues: creation and input stacks and dirty inputs. Fast in Chrome, slow in Firefox.", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_trace_focus", help:"Logs when and why the focus changes", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_trace_focus_with_stack_trace", help:"Logs a stack trace when the focus changes", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_verbose_query_manager", help:"Prints verbose logs about why queries considered a given change", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_crash_on_search_failure", help:"When the search service throws an exception, re-throw it instead ofturning it into an Unknown.SearchUnavailable", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_trace_fiber_jobs", help:"Captures various info about jobs running in runInBatches. Useful for batch count debugging", default_value:!1, is_feature:!1});
FlagSystem.defineInt({name:"debug_int_1", help:"Useful for random debugging", default_value:0, is_feature:!1});
DIAGNOSTICS_PROFILE_EACH_UI_TEST = !1;
DIAGNOSTICS_FAKE_COMPATIBLE_VERSION_EVERY_N_REQUESTS = DIAGNOSTICS_FAKE_INCOMPATIBLE_VERSION_EVERY_N_REQUESTS = 0;
DIAGNOSTICS_DUMP_PUBSUB_OPERATIONS = DIAGNOSTICS_LOG_COMPUTED_QUERIES = !1;
FlagSystem.defineBool({name:"diagnostics_individual_js_and_css", default_value:!1, help:"whether to serve one script tag per js/css file (true) or to concatenate using the resource bundler (false)", is_feature:!0, is_testable:!0});
FlagSystem.defineBool({name:"diagnostics_annotate_js_with_stack_tracking", default_value:!1, help:"Whether to annotate built JS bundles with extra code to provide stack debugging info for browsers like Safari. Increases code size by roughly 38% (15% gzipped) and resource bundles take a minute or so each to build. This flag must be enabled both during resource bundling and on the server.", send_to_client:!0});
FlagSystem.defineBool({name:"diagnostics_preprocessed_individual_js", default_value:!1, help:"whether to serve preprocessed js files when serving individual js files"});
FlagSystem.defineBool({name:"diagnostics_show_dom_node_source", default_value:!1, help:"Puts the top JS caller and computing Rvalue in the title of every HTML element rendered on the client. May slow things down a bit.", is_feature:!0, is_testable:!1});
FlagSystem.defineBool({name:"diagnostics_disable_mouse_tracking", default_value:!1, help:"whether to set the timer in MouseTracker.requestUpdate; avoiding it can make it easier to debug FRP.", is_feature:!0, is_testable:!0});
FlagSystem.defineBool({name:"v8cgi_debugging_enabled", help:"Indicates that v8cgi is in debug mode.", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_print_pasted_data", help:"Prints the plain text and html versions of pasted data into HypertextInputs.", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_show_hypertext_query", help:"Displays the search text for hypertext", default_value:!1, is_feature:!0});
DIAGNOSTICS_IGNORE_ACCESS_CONTROL_AND_TRASH = !1;
FlagSystem.defineBool({name:"diagnostics_query_limits_dump", help:"Dumps query limits to build/query_limits.js", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_query_limits_read", help:"Limits query results based on build/query_limits.js", default_value:!1, is_feature:!0});
FlagSystem.defineBool({name:"diagnostics_no_font", help:"Disables the custom font", default_value:!1, is_feature:!0});
__FILE__ = "luna/common/debugging/debugging.js";
slog = function() {
    log.debug.apply(log, arguments);
    return last(arguments)
};
srun = function(a) {
    host.wrapInExceptionHandler("srun", ExceptionHandler.ReentryStrategy.FAIL, function() {
        processHandler(function() {
            var b = a();
            b !== void 0 && log.debug(b)
        })
    })()
};
conditionalBreakpoint = function() {
    conditionalBreakpoint.enabled && breakpoint()
};
conditionalBreakpoint.enabled = !1;
logStackTrace = function() {
    log.info(prettyProof(getStackTrace()))
};
getStackTrace = function() {
    try {
        0()
    }catch(a) {
        return getStackTraceFromException(a, EvaluationContext.getTopRvalue())
    }
};
getStackTraceFromException = function(a, b) {
    var c = getJsStackTraceFromException(a), d = c, e = a.message + "\n", f = c.indexOf(e);
    f !== -1 && (d = c.substr(f + e.length));
    c = Rvalue.getStackPrettyPrintable(b);
    return"=== Javascript Stack ===\n" + d + "\n=== Construction stack for top rvalue ===\n" + c + "\n=== Rvalues being computed ===\n  " + JobQueue.currentJob().evaluation_context_rvalues_being_computed.join("\n  ")
};
getJsStackTraceFromException = function(a) {
    return typeof a === "object" && "stack" in a ? (a = a.stack === void 0 ? "stack was undefined, probably because of too much recursion in chrome" : a.stack.replace(/^[^@]+@/gm, ""), Flags.diagnostics_annotate_js_with_stack_tracking && (a += "--- Exception caught here ---\n" + StackTracking.stack()), a) : "(javascript stacktrace unavailable)"
};
fastGetJsStackTrace = function() {
    var a = {};
    Error.captureStackTrace ? Error.captureStackTrace(a) : a.stack = Error ? Error().stack : null;
    return a
};
getJsCallerName = function(a) {
    var b;
    try {
        0()
    }catch(c) {
        b = getJsStackTraceFromException(c).split("\n")[4 + (a || 0)]
    }
    return(b || "unknown caller").trim()
};
logException = function(a, b) {
    a.logged_from_stack !== void 0 && log.warn("NOTE: This exception has already been logged once. Clean up your exception-handling code, sir (or madam). Previously logged from", prettyProof(a.logged_from_stack));
    log.error(prettyProof("" + a), prettyProof("" + getStackTraceFromException(a, b)));
    log.error("exception info stack", a.exception_info_stack || $A(host.exception_info_stack));
    trySetProperty(a, "logged_from_stack", getStackTrace())
};
maybeWaitForDebugger = function() {
    Flags.v8cgi_debugging_enabled && (log.info("Waiting for debugger to attach (and continue)..."), breakpoint(), log.info("Running again"))
};
RvalueMatcher = AsanaObject.subclass("RvalueMatcher", {instanceEquals:function(a) {
    var b = RvalueMatcher.create(function(a) {
        return a === this.rvalue
    });
    b.rvalue = a;
    return b
}, nameEquals:function(a) {
    var b = RvalueMatcher.create(function(a) {
        return a._name === this.rvalue_name
    });
    b.rvalue_name = a;
    return b
}}, {constructor:function(a) {
    RvalueMatcher.superproto.constructor.call(this);
    this.matchRvalue = bind(a, this)
}, getRvalueName:function() {
    return this.rvalue ? this.rvalue._name : this.rvalue_name ? this.rvalue_name : null
}});
RvalueDebugger = AsanaObject.subclass("RvalueDebugger", {dumpRvalue:function(a) {
    if(Flags.diagnostics_capture_computation_details) {
        var b = function(a, d, e) {
            var f = d.last_reason_for_recomputation;
            console.groupCollapsed(a + " " + prettyHint(d, 0));
            d._parent ? f && f.type === "newly created" && e ? b("Parent rvalue ", d._parent, e) : log.info("Parent rvalue " + prettyHint(d._parent, 0)) : log.info("This is a root rvalue.");
            console.groupCollapsed("Creation stack");
            log.info(prettyProof(d.creation_stack.stack));
            console.groupEnd();
            f = d.last_reason_for_recomputation;
            f === null ? log.info("Recomputed because of who knows why.") : (log.info("Recomputed because of " + f.type), f.input && (console.groupCollapsed("Dependency picked up at"), log.info(prettyProof(f.stack.stack)), console.groupEnd(), b("Dependency", f.input, !1)));
            console.groupEnd()
        };
        b("Rvalue", a, !0)
    }else {
        log.error("Enable --diagnostics_capture_computation_details")
    }
}, dumpTopRvalue:function() {
    RvalueDebugger.dumpRvalue(EvaluationContext.getTopRvalue())
}}, {breakpoints:null, enabled:!1, in_breakpoint_handler:!1, constructor:function() {
    RvalueDebugger.superproto.constructor.call(this);
    this.breakpoints = OSet.create();
    this.disable()
}, enable:function() {
    this.onRvalueCompute = this._onRvalueCompute;
    this.enabled = !0
}, disable:function() {
    this.onRvalueCompute = noop;
    this.enabled = !1
}, setBreakpoint:function(a) {
    this.enable();
    this.breakpoints.add(a)
}, clearBreakpoint:function(a) {
    this.breakpoints.remove(a)
}, clearAllBreakpoints:function() {
    this.breakpoints.clear()
}, getBreakpointsForRvalue:function(a) {
    var b = [];
    this.breakpoints.forEach(function(c) {
        c.matcher.matchRvalue(a) && b.push(c)
    });
    return b
}, onRvalueCompute:noop, _onRvalueCompute:function(a) {
    var b = !1;
    this.breakpoints.forEach(function(c) {
        b = b || c.shouldBreakOnCompute(a)
    });
    if(b) {
        host.rvalue_debugger.in_breakpoint_handler = !0;
        debugger;
        host.rvalue_debugger.in_breakpoint_handler = !1
    }
}});
RvalueDebugger.Breakpoint = AsanaObject.subclass("RvalueDebugger.Breakpoint", {}, {matcher:null, enabled:!0, constructor:function(a) {
    RvalueDebugger.Breakpoint.superproto.constructor.call(this);
    this.matcher = a
}, enable:function() {
    this.enabled = !0
}, disable:function() {
    this.enabled = !1
}, shouldBreakOnCompute:function(a) {
    return this.enabled && this.matcher.matchRvalue(a)
}});
logUnknowns = function() {
    document.body.unknownValues().forEach(function(a) {
        UnknownValue.prettyLogUnknownValueInDom(a[1], a[0])
    })
};
__FILE__ = "luna/common/testing/matcher.js";
assertThat = function(a, b, c) {
    var d = Map.create();
    if(!Matcher.match(a, b, d)) {
        var e = c !== void 0 ? [c, ": "] : [];
        Matcher.runWithResults(d, function() {
            e.push(prettyPrint(prettyProof("\nExpected to match:", [a])))
        });
        e.push(prettyPrint(prettyProof("\nGot:", [b])));
        ufu(prettyProof(e.join("")))
    }
};
Matcher = AsanaObject.subclass("Matcher", {_results:null, match:function(a, b, c) {
    a = Matcher._autoboxMatcher(a);
    b = a.getMatchResult(b, c);
    c.put(a, b);
    return b.matched
}, matchIgnoreDetails:function(a, b) {
    return Matcher.match(a, b, Map.create())
}, runWithResults:function(a, b) {
    Matcher._results = a;
    var c = b.call(null);
    Matcher._results = null;
    return c
}, _getValues:function(a) {
    return a instanceof List ? a.toArray() : a instanceof DataStructure ? a.values() : a
}, _autoboxMatcher:function(a) {
    return a === void 0 ? Matcher.isUndefined() : a instanceof Matcher ? a : isArrayLike(a) ? Matcher.isArrayOf(a) : isRawObject(a) ? Matcher.hasExactKeyValues(a) : Matcher.isEquivalent(a)
}, _autoboxMatcherMap:function(a, b) {
    var c = b || Matcher._autoboxMatcher, d = Map.create();
    Map.forEach(a, function(a, b) {
        d.put(a, c(b, a))
    });
    return d
}, _autoboxMatcherArray:function(a, b) {
    return a.map(b || Matcher._autoboxMatcher)
}}, {__suppress_prettyprint_id:!0, _match:ABSTRACT, getPrettyInfo:ABSTRACT, getMatchResult:function(a, b) {
    var c = this._match(a, b);
    return typeof c === "boolean" ? Matcher.Result.create(c) : c
}, _getPrettyResult:function() {
    if(Matcher._results !== null) {
        var a = Matcher._results.getOr(this, null);
        if(a !== null) {
            return" [" + a.message + "]"
        }
    }
    return""
}});
update(Matcher, {not:function(a) {
    return ScalarMatcher.create("not", a, [], function(a, c, d) {
        return!Matcher.match(a, c, d)
    })
}, all:function() {
    return ListMatcher.create("all", $A(arguments), [], function(a, b, c) {
        a = a.findIndex(function(a) {
            return!Matcher.match(a, b, c)
        });
        if(a !== -1) {
            return Matcher.Result.failure("Failed at index " + a)
        }
        return!0
    })
}, any:function() {
    return ListMatcher.create("any", $A(arguments), [], function(a, b, c) {
        return-1 !== a.findIndex(function(a) {
            return Matcher.match(a, b, c)
        })
    })
}, isAnything:function() {
    return SimpleMatcher.create("isAnything", [], function() {
        return!0
    })
}, isDefined:function() {
    return SimpleMatcher.create("isDefined", [], function(a) {
        return a !== void 0
    })
}, isUndefined:function() {
    return SimpleMatcher.create("isUndefined", [], function(a) {
        return a === void 0
    })
}, isNull:function() {
    return SimpleMatcher.create("isNull", [], function(a) {
        return a === null
    })
}, isNotNull:function() {
    return SimpleMatcher.create("isNotNull", [], function(a) {
        return a !== null
    })
}, isBoolean:function() {
    return Matcher.hasType("boolean")
}, isNumber:function() {
    return Matcher.hasType("number")
}, isInteger:function() {
    return SimpleMatcher.create("isInteger", [], function(a) {
        return typeof a === "number" && parseInt(a, 10) === a
    })
}, isString:function() {
    return Matcher.hasType("string")
}, isArray:function() {
    return SimpleMatcher.create("isArray", [], function(a) {
        return isArrayLike(a)
    })
}, isObject:function() {
    return Matcher.hasType("object")
}, isRawObject:function() {
    return SimpleMatcher.create("isRawObject", [], function(a) {
        return isRawObject(a)
    })
}, isFunction:function() {
    return Matcher.hasType("function")
}, isUnknown:function() {
    return SimpleMatcher.create("isUnknown", [], function(a) {
        return isUnknown(toValueAllowingUnknown(a))
    })
}, isKnown:function() {
    return SimpleMatcher.create("isKnown", [], function(a) {
        return isKnown(toValueAllowingUnknown(a))
    })
}, hasIdOf:function(a) {
    return SimpleMatcher.create("hasIdOf", [localID(a)], function(b) {
        return localID(a) === localID(b)
    })
}, isEqual:function(a) {
    return SimpleMatcher.create("isEqual", [a], function(b) {
        return b === a
    })
}, isEquivalent:function(a) {
    return SimpleMatcher.create("isEquivalent", [a], function(b) {
        return equals(b, a)
    })
}, isNotEqual:function(a) {
    return SimpleMatcher.create("isNotEqual", [a], function(b) {
        return b !== a
    })
}, isGreaterThan:function(a) {
    return SimpleMatcher.create("isGreaterThan", [a], function(b) {
        return b > a
    })
}, isGreaterThanOrEqual:function(a) {
    return SimpleMatcher.create("isGreaterThanOrEqual", [a], function(b) {
        return b >= a
    })
}, isLessThan:function(a) {
    return SimpleMatcher.create("isLessThan", [a], function(b) {
        return b < a
    })
}, isLessThanOrEqual:function(a) {
    return SimpleMatcher.create("isLessThanOrEqual", [a], function(b) {
        return b <= a
    })
}, matchesRegex:function(a) {
    return SimpleMatcher.create("matchesRegex", [a], function(b) {
        return typeof b === "string" && !!b.match(a)
    })
}, hasSubstring:function(a) {
    return SimpleMatcher.create("hasSubstring", [a], function(b) {
        return typeof b === "string" && b.indexOf(a) !== -1
    })
}, isEquivalentInnerHtml:function(a) {
    return SimpleMatcher.create("isEquivalentInnerHtml", [a], function(b) {
        if(typeof b !== "string") {
            return Matcher.Result.failure("Value is not a string")
        }
        var c = function(a) {
            var b = document.createElement("div");
            b.innerHTML = a;
            b.normalize();
            return b
        }, d = c(a), b = c(b);
        return d.isEqualNode(b)
    })
}, methodReturns:function(a, b, c) {
    return ScalarMatcher.create("methodReturns", c, concat([a], b), function(c, e, f) {
        if(typeof e !== "object") {
            return Matcher.Result.failure("Value is not an object, no methods")
        }
        var g = e[a];
        if(g === void 0) {
            return Matcher.Result.failure("Method not found")
        }
        e = g.apply(e, b);
        return Matcher.match(c, e, f)
    })
}, returnsTrue:function(a) {
    return SimpleMatcher.create("returnsTrue", [], function(b) {
        return a.call(null, b) === !0
    })
}, hasType:function(a) {
    return ScalarMatcher.create("hasType", a, [], function(a, c, d) {
        return Matcher.match(a, typeof c, d)
    })
}, isA:function(a) {
    return SimpleMatcher.create("isA", [a], function(b) {
        return isA(b, a)
    })
}, isInstanceOf:function(a) {
    return SimpleMatcher.create("isInstanceOf", [a.__type_name], function(b) {
        return b instanceof a
    })
}, hasMember:function(a, b) {
    return ScalarMatcher.create("hasMember", b, [a], function(b, d, e) {
        return Matcher.match(b, d[a], e)
    })
}, hasPropertyValue:function(a, b) {
    return ScalarMatcher.create("hasPropertyValue", b, [a], function(b, d, e) {
        return d instanceof StateObject && d.getXvalue(a) !== void 0 && Matcher.match(b, d.getV(a), e)
    })
}, hasProperties:function(a) {
    var b = function(a) {
        return isRawObject(a) ? Matcher.hasProperties(a) : Matcher._autoboxMatcher(a)
    };
    return MapMatcher.create("hasProperties", a, [], function(a, b, e) {
        if(!isA(b, StateObject)) {
            return Matcher.Result.failure("Value is not a DatastoreObject")
        }
        var f = !0;
        a.keys().forEach(function(g) {
            var h = b[g];
            typeof h !== "function" && (h = b[g.camelCase()]);
            typeof h !== "function" && f === !0 ? f = Matcher.Result.failure("Failed on property (no method found): " + g) : !Matcher.match(a.get(g), h.call(b), e) && f === !0 && (f = Matcher.Result.failure("Failed on property: " + g))
        });
        return f
    }, function(a) {
        return isArrayLike(a) ? Matcher.isListishOfValues(a, b) : isRawObject(a) ? Matcher.hasProperties(a) : Matcher._autoboxMatcher(a)
    })
}, hasGlobalId:function(a) {
    return Matcher.all(Matcher.isInstanceOf(StateObject), Matcher.hasMember("global_id", a))
}, computesTo:function(a) {
    return ScalarMatcher.create("computesTo", a, [], function(a, c, d) {
        return Matcher.match(a, toValue(c), d)
    })
}, hasKeys:function(a, b) {
    var c = Map.create(a.map(function(a) {
        return[a, Matcher.isAnything()]
    }));
    return Matcher.hasKeyValues(c, b)
}, hasExactKeys:function(a, b) {
    var c = Map.create(a.map(function(a) {
        return[a, Matcher.isAnything()]
    }));
    return Matcher.hasExactKeyValues(c, b)
}, hasKeyValues:function(a, b) {
    return MapMatcher.create("hasKeyValues", a, [], function(a, d, e) {
        return MatcherHelpers.matchHasKeyValues(a, d, e, b, !1)
    })
}, hasExactKeyValues:function(a, b) {
    return MapMatcher.create("hasExactKeyValues", a, [], function(a, d, e) {
        return MatcherHelpers.matchHasKeyValues(a, d, e, b, !0)
    })
}, hasSingleKeyValue:function(a, b) {
    return ScalarMatcher.create("hasSingleKeyValue", b, [a], function(b, d, e) {
        return Matcher.match(b, Map.mapize(d).getOr(a, void 0), e)
    })
}, isArrayOf:function(a) {
    return ListMatcher.create("isArrayOf", a, [], function(a, c, d) {
        if(!isArrayLike(c)) {
            return Matcher.Result.failure("Value is not an array")
        }
        if(c.length !== a.length) {
            return Matcher.Result.failure("Expected " + a.length + " elements, found " + c.length)
        }
        for(var e = 0;e < a.length;e++) {
            if(!Matcher.match(a[e], c[e], d)) {
                return Matcher.Result.failure("Failed at index " + e)
            }
        }
        return!0
    })
}, isListishOfValues:function(a, b) {
    return ListMatcher.create("isListishOfValues", a, [], function(a, b, e) {
        if(!Rvalue.isListish(b)) {
            return Matcher.Result.failure("Value is not listish")
        }
        return Matcher.isArrayOf(a).getMatchResult(Rvalue.peekValuesArray(b), e)
    }, b)
}, hasExactValuesInOrder:function(a) {
    return ListMatcher.create("hasExactValuesInOrder", a, [], function(a, c, d) {
        c = Matcher._getValues(c);
        if(!isArrayLike(c)) {
            return Matcher.Result.failure("Value is not a known enumeration")
        }
        return Matcher.isArrayOf(a).getMatchResult(c, d)
    })
}, hasExactValues:function(a) {
    return ListMatcher.create("hasExactValues", a, [], function(a, c, d) {
        return MatcherHelpers.matchHasValues(a, c, d, !0)
    })
}, hasValues:function(a) {
    return ListMatcher.create("hasValues", a, [], function(a, c, d) {
        return MatcherHelpers.matchHasValues(a, c, d, !1)
    })
}});
MatcherHelpers = {matchHasValues:function(a, b, c, d) {
    var e = Matcher._getValues(b);
    if(!isArrayLike(e)) {
        return Matcher.Result.failure("Value is not a known enumeration")
    }
    if(d && e.length !== a.length) {
        return Matcher.Result.failure("Expected " + a.length + " elements, found " + e.length)
    }
    var f = Set.create();
    return(a = a.find(function(a) {
        for(var b = !1, d = 0;d < e.length;d++) {
            var j = Map.create();
            Matcher.match(a, e[d], j) && (b = !0, f.add(e[d]), c.update(j))
        }
        return!b
    })) ? (c.put(a, Matcher.Result.failure("Failed to match any elements")), Matcher.Result.failure("At least one element matcher failed")) : !0
}, matchHasKeyValues:function(a, b, c, d, e) {
    d !== void 0 && (b = d(b));
    if(typeof b !== "object") {
        return Matcher.Result.failure("Value is not a recognized object")
    }
    var f = Map.mapize(b);
    if(e && (f.size() !== a.size() || f.intersectKeys(a).length !== f.size())) {
        return Matcher.Result.failure("Maps have different keys")
    }
    return(b = a.keys().find(function(b) {
        return!f.containsKey(b) || !Matcher.match(a.get(b), f.get(b), c)
    })) ? Matcher.Result.failure("Failed on key: " + b) : !0
}};
SimpleMatcher = Matcher.subclass("SimpleMatcher", {}, {constructor:function(a, b, c) {
    SimpleMatcher.superproto.constructor.call(this);
    this._name = a;
    this._ref_values = b;
    this._matchSimple = c
}, _match:function(a) {
    return this._matchSimple(a)
}, getPrettyInfo:function() {
    return[this._name + this._getPrettyResult(), this._ref_values]
}});
ScalarMatcher = Matcher.subclass("ScalarMatcher", {}, {constructor:function(a, b, c, d) {
    ScalarMatcher.superproto.constructor.call(this);
    this._name = a;
    this._sub_matcher = Matcher._autoboxMatcher(b);
    this._ref_values = c;
    this._matchScalar = d
}, _match:function(a, b) {
    return this._matchScalar(this._sub_matcher, a, b)
}, getPrettyInfo:function() {
    return[this._name + this._getPrettyResult(), concat(this._ref_values, [this._sub_matcher])]
}});
ListMatcher = Matcher.subclass("ListMatcher", {}, {constructor:function(a, b, c, d, e) {
    ListMatcher.superproto.constructor.call(this);
    this._name = a;
    this._sub_matchers = Matcher._autoboxMatcherArray(b, e);
    this._ref_values = c;
    this._matchList = d
}, _match:function(a, b) {
    return this._matchList(this._sub_matchers, a, b)
}, getPrettyInfo:function() {
    return[this._name + this._getPrettyResult(), concat(this._ref_values, this._sub_matchers)]
}});
MapMatcher = Matcher.subclass("MapMatcher", {}, {constructor:function(a, b, c, d, e) {
    ListMatcher.superproto.constructor.call(this);
    this._name = a;
    this._sub_matchers = Matcher._autoboxMatcherMap(b, e);
    this._ref_values = c;
    this._matchMap = d
}, _match:function(a, b) {
    return this._matchMap(this._sub_matchers, a, b)
}, getPrettyInfo:function() {
    return[this._name + this._getPrettyResult(), concat(this._ref_values, this._sub_matchers.mapEntries(function(a, b) {
        return{getPrettyInfo:function() {
            var c = b.getPrettyInfo();
            return[a + ": " + c[0], c[1]]
        }, __suppress_prettyprint_id:!0}
    }))]
}});
MockMatcher = Matcher.subclass("MockMatcher", {}, {constructor:function(a, b) {
    MockMatcher.superproto.constructor.call(this);
    this._match = a;
    this._getPrettyInfo = b || function() {
        return["MockMatcher"]
    }
}, _match:function(a, b) {
    return this._mock_match(a, b)
}, getPrettyInfo:function() {
    return this._getPrettyInfo()
}});
Matcher.Result = AsanaObject.subclass("Matcher.Result", {success:function() {
    return Matcher.Result.create(!0)
}, failure:function(a) {
    return Matcher.Result.create(!1, a)
}}, {matched:SET_IN_CONSTRUCTOR, message:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    Matcher.Result.superproto.constructor.call(this);
    this.matched = a;
    this.message = b || (a ? "OK" : "Failed")
}});
__FILE__ = "luna/common/frp/auto_input_to_index_map.js";
AutoInputToIndexMap = AsanaObject.subclass("AutoInputToIndexMap", {_THRESHOLD:5}, {constructor:function(a) {
    AutoInputToIndexMap.superproto.constructor.call(this);
    this._auto_inputs = a;
    this._map = null
}, onInputAddedToAutoInputsArray:function(a, b) {
    if(this._map === null && this._auto_inputs.length > AutoInputToIndexMap._THRESHOLD - 1) {
        this._map = FastMap.create();
        for(var c = 0;c < this._auto_inputs.length;c++) {
            this._map.put(this._auto_inputs[c], c)
        }
    }
    this._map !== null && this._map.put(a, b)
}, remove:function(a) {
    this._map !== null && this._map.remove(a)
}, clear:function() {
    this._map = null
}, getOr:function(a, b) {
    if(this._map !== null) {
        return this._map.getOr(a, b)
    }
    for(var c = 0;c < this._auto_inputs.length;c++) {
        if(equals(this._auto_inputs[c], a)) {
            return c
        }
    }
    return b
}, get:function(a) {
    a = this.getOr(a, null);
    a === null && ufu("missing");
    return a
}, containsKey:function(a) {
    return this.getOr(a, null) !== null
}, size:function() {
    return this._auto_inputs.length
}});
__FILE__ = "luna/common/frp/rvalue_state.js";
RvalueState = AsanaObject.subclass("RvalueState", {}, {cached_xvalue:void 0, cached_xvalue_data_version:void 0, needed_on_client_count:0, needed_on_client_from_preloading:!1, dependents:SET_IN_CONSTRUCTOR, auto_inputs:SET_IN_CONSTRUCTOR, old_auto_inputs:null, auto_input_to_index:SET_IN_CONSTRUCTOR, auto_input_next_index:void 0, auto_input_earliest_changed_index:void 0, manual_inputs:null, manual_inputs_for_element_id:null, history:SET_IN_CONSTRUCTOR, computing_fiber:null, directly_dirty:!1, num_dirty_inputs:0,
    directly_dirty_manual_inputs:null, blocked_jobs:null, query_results:null, datastore_value:void 0, auto_input_stacks:null, manual_inputs_stacks:null, constructor:function() {
        RvalueState.superproto.constructor.call(this);
        this.dependents = MainlySingletonSet.create();
        this.auto_inputs = [];
        this.auto_input_to_index = AutoInputToIndexMap.create(this.auto_inputs);
        this.history = [];
        if(Flags && Flags.diagnostics_capture_computation_details) {
            this.auto_input_stacks = []
        }
    }, blockCurrentJob:function() {
        if(this.blocked_jobs === null) {
            this.blocked_jobs = []
        }
        var a = JobQueue.currentJob();
        this.blocked_jobs.push(a);
        a.block()
    }, isComputing:function() {
        return this.computing_fiber !== null
    }, lockCompute:function() {
        this.computing_fiber = Fiber.current
    }, unlockComputeAndUnblockBlockedJobs:function() {
        this.computing_fiber = null;
        if(this.blocked_jobs !== null) {
            for(var a = 0;a < this.blocked_jobs.length;a++) {
                this.blocked_jobs[a].unblock()
            }
            this.blocked_jobs = null
        }
    }});
RvalueState.EMPTY = RvalueState.create();
RvalueState.EMPTY.dependents = ImmutableSet.empty_set;
__FILE__ = "luna/common/frp/rvalue.js";
Rvalue_NeededOnClientPolicy = {ALWAYS:!0, NEVER:!1, CHECK_DEPENDENTS:void 0};
Rvalue = AsanaObject.subclass("Rvalue", {watchScalar:function(a, b) {
    return a instanceof Rvalue ? a.watchScalar(b) : (b(a, void 0), null)
}, watchList:function(a, b) {
    var c = b.onInserted;
    a instanceof Rvalue ? a.watchList(b) : a instanceof List ? a.forEach(function(a) {
        c(a, null)
    }) : isArrayLike(a) ? a.forEach(function(a) {
        c(a, null)
    }) : ufu("Can't watchList on non-list", a)
}, peekDeep:function(a) {
    a = toValue(a);
    a instanceof List && a.forEach(Rvalue.peekDeep);
    return a
}, isListish:function(a) {
    a = toValue(a);
    return isA(a, IIterable)
}, peekValuesArray:function(a) {
    a = toValue(a);
    if(a instanceof List) {
        return a.peekValuesArray()
    }else {
        if(a instanceof Array) {
            return a.map(toValue)
        }else {
            ufu("must be a list or array", a)
        }
    }
}, map:function(a, b) {
    var c = toValue(a);
    if(isA(c, IIterable)) {
        return c.map(b)
    }else {
        ufu("must be a list or array", c)
    }
}, forEachValue:function(a, b) {
    var c = toValue(a);
    isUnknown(c) || (c instanceof List ? c.forEachValue(b) : c instanceof Array ? c.forEach(function(a) {
        b(toValue(a))
    }) : ufu("must be a list or array", c))
}, forEach:function(a, b) {
    var c = isA(c, IIterable);
    isUnknown(c) || (c instanceof IIterable ? c.forEach(b) : ufu("must be a list or array", c))
}, forEachValueAndRank:function(a, b) {
    var c = toValue(a);
    isUnknown(c) || (c instanceof List ? c._items.forEach(function(a) {
        b(a.value, a.rank)
    }) : c instanceof Array ? c.forEach(b) : ufu("must be a list or array", c))
}, getStackPrettyPrintable:function(a) {
    return a instanceof Rvalue ? a.getStackPrettyPrintable() : prettyProof("(rvalue stacktrace unavailable)")
}, rvalues_computed_count:0, cached_state_count:0, cached_rvalue_to_count:Map.create(), _assert_no_peeks_inside_memoize:!0, _peekDataVersion:function(a) {
    if(a instanceof List) {
        return a.getDataVersion()
    }
    return null
}, setNeededOnClientFromPreloading:function(a, b) {
    var c = a._getState(), d = a.isNeededOnClient();
    c.needed_on_client_from_preloading = b;
    d !== a.isNeededOnClient() && a._onNeededOnClientChanged(a.isNeededOnClient())
}, incrementNeededOnClient:function(a) {
    if(env.is_server && a._needed_on_client_policy === Rvalue_NeededOnClientPolicy.CHECK_DEPENDENTS) {
        var b = a._getState();
        a.isNeededOnClient() || a._onNeededOnClientChanged(!0);
        b.needed_on_client_count++
    }
}, decrementNeededOnClient:function(a) {
    env.is_server && a._needed_on_client_policy === Rvalue_NeededOnClientPolicy.CHECK_DEPENDENTS && (a._getState().needed_on_client_count--, a.isNeededOnClient() || a._onNeededOnClientChanged(!1))
}, runWithinAssertNoPeeks:function(a) {
    Fiber.current.frp_assert_no_peeks = !0;
    try {
        var b = a()
    }finally {
        Fiber.current.frp_assert_no_peeks = !1
    }
    return b
}, peeksDisallowed:function() {
    return!!Fiber.current.frp_assert_no_peeks
}, runWithinAllowMemoizedPeeks:function(a) {
    var b = Rvalue._assert_no_peeks_inside_memoize;
    Rvalue._assert_no_peeks_inside_memoize = !1;
    try {
        var c = a()
    }finally {
        Rvalue._assert_no_peeks_inside_memoize = b
    }
    return c
}}, {_name:SET_IN_CONSTRUCTOR, _parent:SET_IN_CONSTRUCTOR, _is_watch:!1, _needed_on_client_policy:Rvalue_NeededOnClientPolicy.CHECK_DEPENDENTS, _can_be_safely_peeked_by_ancestor:!1, _exempt_from_peek_consistency_checks:!1, _state:SET_IN_CONSTRUCTOR, _dirty_dependents_specified:!1, _assert_on_new_inputs:!1, creation_stack:null, last_reason_for_recomputation:null, current_reason_for_recomputation:null, constructor:function() {
    Rvalue.superproto.constructor.call(this);
    "env" in globals && env.counters.increment("frp.num_rvalues_created");
    this._name = null;
    this._parent = EvaluationContext.getTopRvalue();
    this._state = RvalueState.EMPTY;
    if(Flags && Flags.diagnostics_capture_computation_details) {
        this.creation_stack = fastGetJsStackTrace(), this.last_reason_for_recomputation = null, this.current_reason_for_recomputation = {type:"newly created"}
    }
}, toString:function() {
    return prettyPrint(this, 0)
}, getPrettyInfo:function() {
    var a = this.getIdentifier(), b = this.getCachedXvalue();
    return[a, b === void 0 ? ["uncached"] : ["cached value:", prettyHint(b, 0)]]
}, setName:function(a) {
    this._name = a;
    return this
}, getName:function() {
    return this._name
}, becomeWatch:function() {
    this._can_be_safely_peeked_by_ancestor = this._is_watch = !0;
    return this
}, isWatch:function() {
    return this._is_watch
}, isUnknown:function() {
    return isUnknown(toValueAllowingUnknown(this))
}, getIdentifier:function() {
    return this._name === null ? this.__type_name : this.__type_name + " (" + this._name + ")"
}, canBeSafelyPeekedByAncestor:function() {
    return this._can_be_safely_peeked_by_ancestor
}, setAsSafelyPeekableByAncestor:function() {
    this._can_be_safely_peeked_by_ancestor = !0;
    return this
}, _setAsExemptFromPeekConsistencyChecks:function() {
    this._exempt_from_peek_consistency_checks = !0;
    return this
}, _getStackArray:function() {
    var a;
    a = this._parent ? this._parent._getStackArray() : [];
    a.push(this);
    return a
}, getStackPrettyPrintable:function() {
    var a = this._getStackArray();
    return prettyProof("Rvalue Stack (deepest last)", a.map(function(a) {
        return prettyHint(a, 0)
    }))
}, getRandomDependencyChain:function() {
    var a = function(b, d) {
        var e = null;
        b._getState().dependents.forEach(function(a) {
            e = a
        });
        e !== null && (d.push(e), a(e, d))
    }, b = [];
    a(this, b);
    return b
}, peek:function() {
    return toValue(this._peekXvalue(!1, !0))
}, peekAllowingUnknown:function() {
    return toValueAllowingUnknown(this._peekXvalue(!0, !0))
}, peekAllowingUnknownWithoutDependencies:function() {
    return toValueAllowingUnknown(this._peekXvalue(!0, !1))
}, getXvalue:function() {
    return this._peekXvalue(!1, !0)
}, getXvalueAllowingUnknown:function() {
    return this._peekXvalue(!0, !0)
}, getLvalue:function() {
    var a = this._peekXvalue(!1, !0);
    a instanceof Rvalue || ufu("Rvalue does not simplify to an Lvalue: ", a);
    return a.getLvalue()
}, isCached:function() {
    return this.getCachedXvalue() !== void 0
}, getCachedXvalue:function() {
    return this._getState().cached_xvalue
}, getCachedValue:function() {
    var a = this.getCachedXvalue();
    return a instanceof Rvalue ? a.getCachedValue() : a
}, computeValue:ABSTRACT, watchScalar:function(a) {
    a = ScalarWatch.create(this, {onChanged:a}, !1);
    a.peek();
    return a
}, watchScalarRoot:function(a) {
    a = ScalarWatch.create(this, {onChanged:a}, !0);
    a.peek();
    return a
}, watchList:function(a) {
    a = ListWatch.create(this, a, !1);
    a.peek();
    return a
}, blockCurrentJob:function() {
    this._getState().blockCurrentJob()
}, _peekXvalue:function(a, b) {
    var c = this._getOrCreateState();
    Flags.diagnostics_do_expensive_error_checking && c.cached_xvalue === void 0 && c.dependents.isEmpty();
    var d = b ? EvaluationContext.getTopRvalueEntry() : null, e = d === null ? null : d[EvaluationContext.RVALUE_ENTRY_INDEX_RVALUE];
    this._onPeeked(c, d, e);
    this._ensureCurrent(c);
    env.frp._onPeeked !== null && env.frp._onPeeked(this);
    c = this.getCachedXvalue();
    if(isKnown(c) || a) {
        return c
    }else {
        throw e !== null && env.frp_tracer.shouldTrace(e) && env.frp_tracer.trace(e, "peeked unknown", this), new ValueIsUnknownError(c, e === null);
    }
}, _onPeeked:function(a, b, c) {
    if(b === null) {
        env.frp.addPossiblyUnusedRvalue(this)
    }else {
        if(a = b[EvaluationContext.RVALUE_ENTRY_INDEX_MANUAL_INPUT_KEY], c._addInput(this, a) && this._addDependent(c), Flags.diagnostics_do_expensive_error_checking && !env.datastore_manager.isRunningHandler() && a === null) {
            for(a = this;a._parent !== null && !a.canBeSafelyPeekedByAncestor();) {
                a._parent === c && ufu("rvalue is attempting to peek a descendant. Peeker is", c, "peeked is", this.getStackPrettyPrintable()), a = a._parent
            }
        }
    }
}, _ensureCurrent:function(a) {
    if(this.isCached()) {
        if(this._isDirty(a)) {
            env.frp_tracer.shouldTrace(this) && (env.frp_tracer.startRvalue(), env.frp_tracer.trace(this, "_ensureCurrent checking dirty inputs"));
            EvaluationContext.start(this);
            for(var b = 0;b < a.auto_inputs.length && a.num_dirty_inputs > 0 && !a.directly_dirty;b++) {
                var c = a.auto_inputs[b], d = c._getState();
                c._ensureCurrent(d, null)
            }
            (a.directly_dirty || a.directly_dirty_manual_inputs !== null && a.directly_dirty_manual_inputs.size() > 0) && this._compute();
            EvaluationContext.stop(this);
            env.frp_tracer.shouldTrace(this) && env.frp_tracer.stopRvalue()
        }
    }else {
        env.frp_tracer.shouldTrace(this) && env.frp_tracer.startRvalue(), EvaluationContext.start(this), this._compute(), EvaluationContext.stop(this), env.frp_tracer.shouldTrace(this) && env.frp_tracer.stopRvalue()
    }
}, _compute:function() {
    var a = this._getState();
    if(a.computing_fiber) {
        Fiber.current === a.computing_fiber && ufu("An rvalue is (transitively) peeking itself", "peeked rvalue", Rvalue.getStackPrettyPrintable(this), "rvalues being computed", EvaluationContext.getEvaluationStack()), a.blockCurrentJob()
    }else {
        a.lockCompute();
        if(Flags.diagnostics_capture_computation_details) {
            this.last_reason_for_recomputation = this.current_reason_for_recomputation, this.current_reason_for_recomputation = null
        }
        if(Flags.diagnostics_trace_view_recreation) {
            this.created_view_classes = void 0
        }
        Rvalue.rvalues_computed_count++;
        env.counters.increment("frp.num_rvalues_computed");
        if(env.frp_tracer.shouldTrace(this)) {
            env.frp_tracer.trace(this, "_compute"), a.old_auto_inputs = $A(a.auto_inputs)
        }
        Flags.diagnostics_do_expensive_error_checking && env.frp._rvalues_computed_during_propagate !== null && env.frp._rvalues_computed_during_propagate.add(this);
        a.auto_input_next_index = 0;
        var b = a.cached_xvalue, c = a.cached_xvalue_data_version;
        this._dirty_dependents_specified = !1;
        if(host.rvalue_debugger.enabled) {
            host.rvalue_debugger.onRvalueCompute(this)
        }
        try {
            var d = this.computeValue()
        }catch(e) {
            if(e instanceof ValueIsUnknownError) {
                d = e.unknown_value.__type.create(this, e)
            }else {
                throw e;
            }
        }
        this._is_watch && (isKnown(d), d = null);
        a.directly_dirty_manual_inputs !== null && (host.job_queue && host.job_queue.isRunning() ? host.job_queue.forEachParallel(a.directly_dirty_manual_inputs, function(a) {
            var b = a._getState();
            a._ensureCurrent(b, null)
        }) : a.directly_dirty_manual_inputs.forEach(function(a) {
            var b = a._getState();
            a._ensureCurrent(b, null)
        }), a.directly_dirty_manual_inputs.clear());
        a.cached_xvalue = d;
        a.cached_xvalue_data_version = Rvalue._peekDataVersion(d);
        if(a.auto_input_next_index < a.auto_inputs.length) {
            a.auto_input_earliest_changed_index !== void 0 && !this._exempt_from_peek_consistency_checks && Flags.diagnostics_do_expensive_error_checking && a.auto_input_earliest_changed_index >= a.auto_input_next_index && (log.debug("Current auto inputs", prettyHint(a.auto_inputs, 1)), env.frp_tracer.shouldTrace(this) ? log.debug("Old auto inputs", prettyHint(a.old_auto_inputs, 1)) : log.debug("Enable FrpTracer for this rvalue to see the original inputs"), ufu(prettyHint(this, 0), "did not peek first changed dependency",
                a.auto_input_earliest_changed_index, prettyHint(a.auto_inputs[a.auto_input_earliest_changed_index], 0), this.getStackPrettyPrintable()));
            for(var f = a.auto_inputs.length - 1;f >= a.auto_input_next_index;f--) {
                var g = a.auto_inputs[f];
                a.auto_inputs.length = f;
                g !== null && (a.auto_input_to_index.remove(g), g._removeDependent(this))
            }
            if(Flags.diagnostics_capture_computation_details) {
                a.auto_input_stacks.length = a.auto_input_next_index
            }
        }
        a.auto_input_next_index = void 0;
        if(b !== void 0 && (b !== d || c !== a.cached_xvalue_data_version)) {
            this._dirty_dependents_specified || this._setDirtyDependents(a.dependents), Flags.diagnostics_trace_view_recreation && !env.is_server && this.created_view_classes !== void 0 && (c = this.created_view_classes.map(function(a) {
                return a.view.__type_name
            }), console.groupCollapsed("recreated views: " + c.join(" ")), this.created_view_classes.forEach(function(a) {
                console.groupCollapsed("stack for " + a.view.__type_name);
                log.info(prettyProof(a.stack));
                console.groupEnd()
            }), RvalueDebugger.dumpRvalue(this), console.groupEnd())
        }
        a.history = [];
        a.auto_input_earliest_changed_index = void 0;
        this._onValueMaybeChanged(b, d);
        env.frp_tracer.shouldTrace(this) && env.frp_tracer.trace(this, "finished _compute");
        if(a.directly_dirty) {
            a.directly_dirty = !1, this._onBecameClean(a)
        }
        a.unlockComputeAndUnblockBlockedJobs()
    }
}, _setDirtyDependents:function(a) {
    var b = this;
    env.frp_tracer.shouldTrace(b) && env.frp_tracer.trace(b, "value changed", "new value", isKnown(b.getCachedXvalue()) ? "known" : UnknownValue.Loading.create(b, null), "Marking dependents as dirty", prettyHint(a, 1));
    b._dirty_dependents_specified = !0;
    var c = b._getState().history;
    a.forEach(function(a) {
        var e = a._getState();
        if(e.computing_fiber === null) {
            if(e.history.length === 0) {
                e.history = $A(c), e.history.push(a)
            }
            env.frp._addDirtyRvalue(a)
        }
        var f = e.auto_input_to_index.getOr(b, null);
        if(f !== null && (e.auto_input_earliest_changed_index === void 0 || e.auto_input_earliest_changed_index > f)) {
            if(e.auto_input_earliest_changed_index = f, Flags.diagnostics_capture_computation_details) {
                a.current_reason_for_recomputation = {type:"auto input", input:b, stack:e.auto_input_stacks[f]}
            }
        }
    })
}, _onValueMaybeChanged:function(a, b) {
    var c = isUnknown(b), d = isUnknown(a);
    c !== d && (c ? Fiber.current.frp_ignore_unknowns ? env.frp._unknowns_ignored.add(this) : (Flags.diagnostics_warn_about_unknown_rvalues && env.frp._unknowns.add(this), env.frp.num_unknowns++) : env.frp._unknowns_ignored.contains(this) ? env.frp._unknowns_ignored.remove(this) : (Flags.diagnostics_warn_about_unknown_rvalues && env.frp._unknowns.remove(this), env.frp.num_unknowns--))
}, _getOrCreateState:function() {
    var a = this._getState();
    a === RvalueState.EMPTY && (a = RvalueState.create(), this._setState(a));
    return a
}, _getState:function() {
    return this._state
}, _setState:function(a) {
    a === RvalueState.EMPTY ? this._state !== RvalueState.EMPTY && (Rvalue.cached_state_count--, Flags.diagnostics_do_expensive_error_checking && (Rvalue.cached_rvalue_to_count.decrementCount(this), Rvalue.cached_rvalue_to_count.get(this) === 0 && Rvalue.cached_rvalue_to_count.remove(this))) : this._state === RvalueState.EMPTY && (Flags.diagnostics_do_expensive_error_checking && Rvalue.cached_rvalue_to_count.incrementCount(this), Rvalue.cached_state_count++);
    this._state = a
}, _isDirty:function(a) {
    return a.directly_dirty || a.num_dirty_inputs !== 0
}, _onBecameDirty:function(a) {
    var b = this;
    a.dependents.forEach(function(a) {
        var d = a._getState(), e = a._isDirty(d);
        d.num_dirty_inputs++;
        e || a._onBecameDirty(d);
        if(d.manual_inputs !== null && d.manual_inputs.contains(b)) {
            if(d.directly_dirty_manual_inputs === null) {
                d.directly_dirty_manual_inputs = Set.create()
            }
            d.directly_dirty_manual_inputs.add(b);
            if(Flags.diagnostics_capture_computation_details) {
                a.current_reason_for_recomputation = {type:"manual input", input:b, stack:d.manual_inputs_stacks.find(b)}
            }
        }
    })
}, _decrementNumDirtyInputs:function(a) {
    a.num_dirty_inputs--;
    this._isDirty(a) || this._onBecameClean(a)
}, _onBecameClean:function(a) {
    a.dependents.forEach(function(a) {
        var c = a._getState();
        a._decrementNumDirtyInputs(c)
    })
}, _setManualInputKey:function(a) {
    var b = this._getState(), c = EvaluationContext.getTopRvalueEntry();
    if(a !== null) {
        if(b.manual_inputs_for_element_id === null) {
            b.manual_inputs_for_element_id = {}
        }
        var d = hashKey(a);
        d in b.manual_inputs_for_element_id || (b.manual_inputs_for_element_id[d] = [])
    }
    c[EvaluationContext.RVALUE_ENTRY_INDEX_MANUAL_INPUT_KEY] = a
}, _removeManualInputKey:function(a) {
    var a = hashKey(a), b = this._getState();
    if(b.manual_inputs_for_element_id !== null) {
        var c = b.manual_inputs_for_element_id[a];
        if(c !== void 0) {
            for(var d = 0;d < c.length;d++) {
                this._removeManualInput(c[d])
            }
            delete b.manual_inputs_for_element_id[a]
        }
    }
}, _removeManualInput:function(a) {
    var b = this._getState();
    b.manual_inputs.checkedRemove(a);
    b.directly_dirty_manual_inputs !== null && b.directly_dirty_manual_inputs.remove(a);
    if(b.manual_inputs.isEmpty()) {
        b.manual_inputs = null
    }
    a._removeDependent(this)
}, _addInput:function(a, b) {
    var c = this._getState();
    if(b !== null) {
        var d = hashKey(b), d = c.manual_inputs_for_element_id[d];
        if(c.manual_inputs === null && (c.manual_inputs = Set.create(), Flags.diagnostics_capture_computation_details)) {
            c.manual_inputs_stacks = Map.create()
        }
        return c.manual_inputs.contains(a) ? !1 : (c.manual_inputs.add(a), Flags.diagnostics_capture_computation_details && c.manual_inputs_stacks.put(a, fastGetJsStackTrace()), d.push(a), !0)
    }
    d = !0;
    if(c.auto_inputs.length > 0) {
        var e = c.auto_input_to_index.getOr(a, -1);
        if(e !== -1) {
            if(e < c.auto_input_next_index) {
                return!1
            }else {
                if(e === c.auto_input_next_index) {
                    return c.auto_input_next_index++, !1
                }else {
                    e > c.auto_input_next_index ? (c.auto_inputs[e] = null, Flags.diagnostics_capture_computation_details && (c.auto_input_stacks[e] = null), d = !1) : ufu("should not get here", e, c, RvalueState.EMPTY)
                }
            }
        }
    }
    if(c.auto_inputs.length > c.auto_input_next_index && (e = c.auto_inputs[c.auto_input_next_index], e !== null)) {
        if(c.auto_input_earliest_changed_index !== void 0 && !this._exempt_from_peek_consistency_checks && Flags.diagnostics_do_expensive_error_checking && c.auto_input_earliest_changed_index >= c.auto_input_next_index) {
            e.canBeSafelyPeekedByAncestor() ? c.auto_input_earliest_changed_index = c.auto_input_next_index : (log.debug("Current auto inputs", prettyHint(c.auto_inputs, 1)), ufu(prettyHint(this, 0), "did not peek dependency even though nothing before it changed", prettyHint(e, 0), "instead peeked", prettyHint(a, 0), "Construction stack for current rvalue", this.getStackPrettyPrintable()))
        }
        c.auto_input_to_index.remove(e);
        e._removeDependent(this)
    }
    c.auto_inputs[c.auto_input_next_index] = a;
    Flags.diagnostics_capture_computation_details && (c.auto_input_stacks[c.auto_input_next_index] = fastGetJsStackTrace());
    c.auto_input_to_index.onInputAddedToAutoInputsArray(a, c.auto_input_next_index);
    c.auto_input_next_index++;
    return d
}, _addDependent:function(a) {
    var b = this._getState();
    b.dependents.checkedAdd(a);
    var c = a._getState();
    this._isDirty(b) && (b = a._isDirty(c), c.num_dirty_inputs++, b || a._onBecameDirty(c));
    a._isNeededOnClient(c) && Rvalue.incrementNeededOnClient(this)
}, _removeDependent:function(a) {
    var b = this._getState();
    b.dependents.checkedRemove(a);
    var c = a._getState();
    this._isDirty(b) && a._decrementNumDirtyInputs(c);
    a._isNeededOnClient(c) && Rvalue.decrementNeededOnClient(this);
    b.dependents.isEmpty() && env.frp.addPossiblyUnusedRvalue(this)
}, onUnused:function() {
    var a = this;
    env.frp_tracer.shouldTrace(this) && env.frp_tracer.trace(this, "going unused");
    var b = this._getState(), c = b.cached_xvalue, d;
    for(d in b.manual_inputs_for_element_id) {
        for(var e = b.manual_inputs_for_element_id[d], f = 0;f < e.length;f++) {
            this._removeManualInput(e[f])
        }
    }
    b.manual_inputs_for_element_id = {};
    b.auto_inputs.forEach(function(b) {
        b._removeDependent(a)
    });
    this._setState(RvalueState.EMPTY);
    this._onValueMaybeChanged(c, void 0);
    if(Flags.diagnostics_capture_computation_details) {
        this.current_reason_for_recomputation = {type:"was unused"}
    }
}, _isUsed:function(a) {
    (a = a || !1) && log.debug("_isRvalueUsed ", this);
    var b = this._getState();
    return b.dependents.isEmpty() ? (a && log.debug("_isRvalueUsed unused"), !1) : (a && log.debug("_isRvalueUsed has deps " + b.dependents), !0)
}, isNeededOnClient:function() {
    return this._isNeededOnClient(this._getState())
}, setNeededOnClientPolicy:function(a) {
    this._needed_on_client_policy = a
}, _isNeededOnClient:function(a) {
    return this._needed_on_client_policy === Rvalue_NeededOnClientPolicy.ALWAYS || a.needed_on_client_count > 0 || a.needed_on_client_from_preloading
}, _onNeededOnClientChanged:function(a) {
    env.frp_tracer.shouldTrace(this) && env.frp_tracer.trace(this, "_onNeededOnClientChanged", a, this.isNeededOnClient());
    var b = this._getState();
    this._needed_on_client_policy === Rvalue_NeededOnClientPolicy.CHECK_DEPENDENTS && (a ? (b.auto_inputs.forEach(Rvalue.incrementNeededOnClient), b.manual_inputs !== null && b.manual_inputs.forEach(Rvalue.incrementNeededOnClient)) : (b.auto_inputs.forEach(Rvalue.decrementNeededOnClient), b.manual_inputs !== null && b.manual_inputs.forEach(Rvalue.decrementNeededOnClient)))
}});
__FILE__ = "luna/common/frp/latest_known_rvalue.js";
LatestKnownRvalue = Rvalue.subclass("LatestKnownRvalue", {}, {_input_xvalue:SET_IN_CONSTRUCTOR, _output:void 0, _last_known_value:void 0, _poller:null, constructor:function(a) {
    LatestKnownRvalue.superproto.constructor.call(this);
    this._input_xvalue = a
}, computeValue:function() {
    var a = toValueAllowingUnknown(this._input_xvalue);
    if(isKnown(a) || this._output === void 0) {
        if(a instanceof List) {
            if(a !== this._last_known_value) {
                this._output = a.emptyClone();
                var b = List.Poller.identityCallbacks(this._output);
                this._poller = List.Poller.create(a, b)
            }
            this._poller.poll()
        }else {
            this._output = a
        }
        this._last_known_value = a
    }
    return this._output
}, onUnused:function() {
    LatestKnownRvalue.superproto.onUnused.call(this);
    this._last_known_value = UnknownValue.Loading.create(this, null);
    this._output = UnknownValue.Loading.create(this, null);
    this._poller = null
}, getLvalue:function() {
    return this._input_xvalue.getLvalue()
}});
__FILE__ = "luna/common/frp/fast_equals_rvalue.js";
FastEqualsRvalue = Rvalue.subclass("FastEqualsRvalue", {Manager:Rvalue.subclass("FastEqualsManager", {_get:function(a) {
    if(!("__fast_equals_manager" in a)) {
        a.__fast_equals_manager = FastEqualsRvalue.Manager.create(a)
    }
    return a.__fast_equals_manager
}}, {constructor:function(a) {
    FastEqualsRvalue.Manager.superproto.constructor.call(this);
    this._variable_rvalue = a;
    this._map = MultiMap.create()
}, computeValue:function() {
    var a = this.getCachedXvalue(), b = this._variable_rvalue.peekAllowingUnknown(), c = [];
    b !== a && (this._map.get(a).forEach(function(a) {
        c.push(a)
    }), this._map.get(b).forEach(function(a) {
        c.push(a)
    }));
    this._setDirtyDependents(c);
    return b
}, _addDependent:function(a) {
    FastEqualsRvalue.Manager.superproto._addDependent.call(this, a);
    this._map.add(a._invariant_value, a)
}, _removeDependent:function(a) {
    FastEqualsRvalue.Manager.superproto._removeDependent.call(this, a);
    this._map.remove(a._invariant_value, a)
}})}, {constructor:function(a, b) {
    FastEqualsRvalue.superproto.constructor.call(this);
    this._manager = FastEqualsRvalue.Manager._get(b);
    this._invariant_xvalue = a;
    this._invariant_value = UnknownValue.Loading.create(a, null);
    this.setName("fastEquals(" + b._name + ")")
}, computeValue:function() {
    this._invariant_value = toValueAllowingUnknown(this._invariant_xvalue);
    return this._invariant_value === toValueAllowingUnknown(this._manager)
}});
__FILE__ = "luna/common/frp/deferred_rvalue.js";
DeferredRvalue = define("DeferredRvalue", Rvalue.subclass("DeferredRvalue", {}, {_input_xvalue:SET_IN_CONSTRUCTOR, _is_stabilized:!0, _has_just_become_stable:!1, _allow_immediate_recomputation:!1, _delay_ms_xvalue:SET_IN_CONSTRUCTOR, _stable_timeout_id:null, _stable_list:null, _poller:null, constructor:function(a, b, c) {
    DeferredRvalue.superproto.constructor.call(this);
    this._input_xvalue = a;
    this._delay_ms_xvalue = b;
    this._allow_immediate_recomputation = c
}, computeValue:function() {
    var a = toValue(this._input_xvalue), b = this._has_just_become_stable;
    this._has_just_become_stable = !1;
    return env.defer_deferred_rvalues ? (b || this._scheduleStabilization(), this.getCachedXvalue() === void 0 || this._is_stabilized ? (this._is_stabilized = this._allow_immediate_recomputation && b, a instanceof List ? this._stableListValue(a) : (this._resetStableListState(), a)) : this.getCachedXvalue()) : a
}, _resetStableListState:function() {
    this._poller = this._stable_list = null
}, _stableListValue:function(a) {
    if(this._stable_list === null) {
        this._stable_list = a.emptyClone(), a = List.Poller.identityCallbacks(this._stable_list), this._poller = List.Poller.create(this._input_xvalue, a)
    }
    this._poller.poll();
    return this._stable_list
}, _scheduleStabilization:function() {
    var a = this;
    if(a._stable_timeout_id !== null) {
        safeClearTimeout(a._stable_timeout_id), a._stable_timeout_id = null
    }
    a._stable_timeout_id = safeTimeout(function() {
        a._is_stabilized = !0;
        a._has_just_become_stable = !0;
        env.frp.propagate([a])
    }, toValue(this._delay_ms_xvalue))
}}));
__FILE__ = "luna/common/frp/watch.js";
Watch = Rvalue.subclass("Watch", {}, {_rvalue:SET_IN_CONSTRUCTOR, _is_live_root_watch:SET_IN_CONSTRUCTOR, _old_value:void 0, constructor:function(a, b) {
    Watch.superproto.constructor.call(this);
    this.becomeWatch();
    this.setAsSafelyPeekableByAncestor();
    b && (env.frp._root_rvalues.add(this), this._setState(RvalueState.create()), this.setNeededOnClientPolicy(Rvalue_NeededOnClientPolicy.ALWAYS));
    this._rvalue = a;
    this._is_live_root_watch = b;
    Flags.diagnostics_detailed_rvalue_names && this.setName(a.getIdentifier())
}, computeValue:function() {
    var a = this._rvalue.peekAllowingUnknown();
    this._fire(a, this._old_value);
    this._old_value = a
}, unwatch:function() {
    this._is_live_root_watch = !1;
    env.frp._root_rvalues.remove(this);
    env.frp.addPossiblyUnusedRvalue(this)
}, _fire:ABSTRACT, _isUsed:function(a) {
    return this._is_live_root_watch ? !0 : Watch.superproto._isUsed.call(this, a)
}});
__FILE__ = "luna/common/frp/reactive_timeout.js";
_ReactiveTimeoutRvalue = Rvalue.subclass("_ReactiveTimeoutRvalue", {}, {_timeout:null, constructor:function(a, b) {
    var c = this;
    _ReactiveTimeoutRvalue.superproto.constructor.call(this);
    c._timeout = safeTimeout(function() {
        c._timeout = null;
        a()
    }, b);
    this.becomeWatch()
}, computeValue:function() {
}, onUnused:function() {
    _ReactiveTimeoutRvalue.superproto.onUnused.call(this);
    if(this._timeout !== null) {
        safeClearTimeout(this._timeout), this._timeout = null
    }
}});
reactiveTimeout = function(a, b) {
    var c = _ReactiveTimeoutRvalue.create(a, b);
    c.peek();
    return c._timeout
};
__FILE__ = "luna/common/data_model.js";
FlagSystem.defineInt({name:"datastore_max_fibered_batches", help:"The maximum number of batches allowed", default_value:2E3});
FlagSystem.defineBool({name:"preserve_modification_times", help:"When set, __modification_time will preserved when touching objects", default_value:!1});
toValue = function(a) {
    return a instanceof Rvalue ? a.peek() : a
};
toValueAllowingUnknown = function(a) {
    return a instanceof Rvalue ? a.peekAllowingUnknown() : a
};
toValueOrDefaultIfUnknown = function(a, b) {
    var c = toValueAllowingUnknown(a);
    return isKnown(c) ? c : b
};
knownReturnValueOrDefault = function(a, b) {
    var c = valueOrUnknown(a);
    return isKnown(c) ? c : b
};
valueOrUnknown = function(a) {
    try {
        return a()
    }catch(b) {
        if(b instanceof ValueIsUnknownError) {
            return b.unknown_value
        }else {
            throw b;
        }
    }
};
attributedValueFunc = function(a, b) {
    return attributedFunc(a, function(a) {
        a = Map.objectFromMappedValues(a, toValue);
        return b.call(this, a)
    })
};
ValueIsUnknownError = function(a, b) {
    this.unknown_value = a;
    this.name = "ValueIsUnknownError";
    this.stack = Flags.diagnostics_capture_unknown_stack_traces || b ? getStackTrace() : "(Turn on diagnostics_capture_unknown_stack_traces to capture ValueIsUnknownError stack traces)"
};
ValueIsUnknownError.prototype = Error();
ValueIsUnknownError.prototype.unknownValueStackForName = function() {
    return this.unknown_value.unknownValueStack().map(function(a) {
        return prettyPrint(a.rvalue, 0)
    }).join("|")
};
ValueIsUnknownError.prototype.nameForHoptoadGrouping = function() {
    return this.name + " " + this.unknownValueStackForName().replace(/\d+/g, "#")
};
ValueIsUnknownError.prototype.toString = function() {
    return this.name + " " + this.unknown_value.__type_name + "\n" + this.unknownValueStackForName()
};
Lvalue = Rvalue.subclass("Lvalue", {}, {constructor:function() {
    Lvalue.superproto.constructor.call(this)
}, getLvalue:function() {
    return this
}});
LocalLvalue = Lvalue.subclass("LocalLvalue", {}, {_value:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    LocalLvalue.superproto.constructor.call(this);
    this._value = a;
    this._name = b || "unknown LocalLvalue"
}, computeValue:function() {
    return this._value
}, requestSet:function(a) {
    if(!equals(a, this._value)) {
        this._value = a, env.frp.addDirtyRvalueIfUsed(this)
    }
}});
JavascriptLvalue = Lvalue.subclass("JavascriptLvalue", {}, {_xvalue:SET_IN_CONSTRUCTOR, _computeValue:SET_IN_CONSTRUCTOR, _requestSet:SET_IN_CONSTRUCTOR, constructor:function(a, b, c) {
    JavascriptLvalue.superproto.constructor.call(this);
    this._computeValue = a;
    this._requestSet = b;
    this._name = c
}, computeValue:function() {
    return this._computeValue()
}, requestSet:function(a) {
    this._requestSet(a)
}});
ElementDimensionsLvalue = LocalLvalue.subclass("ElementDimensionsLvalue", {recomputeAll:function() {
    host.runWithExceptionInfo("EDL.recomputeAll", function() {
        var a = function() {
            env.frp.active_element_dimensions_lvalues.forEach(function(a) {
                var c = a.func();
                c !== a._value && (env.frp.propagationDepth() > 2 && log.warn("EDL changed", prettyHint(a, 1), "depth", env.frp._propagate_recursion_depth, "old value", a._value, "new value", c), a.requestSet(c))
            })
        };
        env.is_server ? a() : host.profiler.timeFuncDetailed("EDL.recomputeAll", a)
    })
}}, {name:ATTRIBUTE_REQUIRED, element:ATTRIBUTE_REQUIRED, func:ATTRIBUTE_REQUIRED, _onUnused:noop, constructor:function(a) {
    ElementDimensionsLvalue.superproto.constructor.call(this, null);
    updateWithAttributes(this, a);
    this.setName(this.name)
}, onUnused:function() {
    ElementDimensionsLvalue.superproto.onUnused.call(this);
    if(!env.is_server) {
        env.frp.active_element_dimensions_lvalues.remove(this), this._value = null
    }
    this._onUnused()
}, computeValue:function() {
    if(env.is_server) {
        return 0
    }else {
        env.frp.active_element_dimensions_lvalues.add(this);
        if(this._value === null) {
            this._value = this.func()
        }
        return this._value
    }
}, getPrettyInfo:function() {
    var a = ElementDimensionsLvalue.superproto.getPrettyInfo.call(this), b = this.element === null ? "null" : this.element.debugPath();
    return[a[0], concat(a[1], ["element", b])]
}});
InstantRvalue = Rvalue.subclass("InstantRvalue", {}, {constructor:function(a) {
    InstantRvalue.superproto.constructor.call(this);
    this._func = a
}, computeValue:function() {
    env.datastore_manager.isRunningHandler() || ufu("Cannot use an InstantRvalue outside of a handler function");
    return this._func()
}, watchScalar:function() {
    ufu("Cannot watch an InstantRvalue; it cannot be used in UI functions")
}, watchScalarRoot:function() {
    ufu("Cannot watch an InstantRvalue; it cannot be used in UI functions")
}, watchList:function() {
    ufu("Cannot watch an InstantRvalue; it cannot be used in UI functions")
}});
JavaScriptRvalue = Rvalue.subclass("JavaScriptRvalue", {}, {constructor:function(a) {
    JavaScriptRvalue.superproto.constructor.call(this);
    this.computeValue = a.computeValue;
    this._name = a.name;
    this._onUnused = a.onUnused
}, onUnused:function() {
    JavaScriptRvalue.superproto.onUnused.call(this);
    this._onUnused !== void 0 && this._onUnused()
}, computeValue:SET_IN_CONSTRUCTOR, _onUnused:SET_IN_CONSTRUCTOR});
AppendToBodyRvalue = Rvalue.subclass("AppendToBodyRvalue", {}, {_node:SET_IN_CONSTRUCTOR, _node_added_to_body:!1, constructor:function(a, b) {
    AppendToBodyRvalue.superproto.constructor.call(this);
    this._node = a;
    this.becomeWatch();
    this.setName(b)
}, computeValue:function() {
    this._node_added_to_body = !0;
    document.body._appendLiveDOM(this._node, null)
}, onUnused:function() {
    AppendToBodyRvalue.superproto.onUnused.call(this);
    document.body._removeChildNode(this._node);
    this._node_added_to_body = !1
}});
ScalarWatch = Watch.subclass("ScalarWatch", {}, {constructor:function(a, b, c) {
    ScalarWatch.superproto.constructor.call(this, a, c);
    this.handler = b.onChanged
}, handler:SET_IN_CONSTRUCTOR, _fire:function(a, b) {
    this.handler(a, b)
}});
ListWatch = Watch.subclass("ListWatch", {}, {constructor:function(a, b, c) {
    var d = this;
    ListWatch.superproto.constructor.call(this, a, c);
    this._callbacks = b;
    this._list_poller = List.Poller.create(this._rvalue, {onUnknown:function(a) {
        if(d._callbacks.onUnknown) {
            d._callbacks.onUnknown(a)
        }
    }, onKnown:function() {
        if(d._callbacks.onKnown) {
            d._callbacks.onKnown()
        }
    }, onInserted:function(a, b, c) {
        d._setManualInputKey(a);
        d._callbacks.onInserted(a, c);
        d._setManualInputKey(null)
    }, onMoved:function(a, b, c) {
        d._callbacks.onMoved(a, c)
    }, onRemoved:function(a) {
        d._removeManualInputKey(a);
        d._callbacks.onRemoved(a)
    }})
}, _fire:function() {
    this._list_poller.poll()
}});
Chronometer = AsanaObject.subclass("Chronometer", {APPROXIMATE_TIME_PRECISION_MS:5E3}, {instant_time_rvalue:SET_IN_CONSTRUCTOR, approximate_time_lvalue:SET_IN_CONSTRUCTOR, _last_time:SET_IN_CONSTRUCTOR, _clock:SET_IN_CONSTRUCTOR, constructor:function(a) {
    Chronometer.superproto.constructor.call(this);
    var b = this;
    this._clock = a;
    this.instant_time_rvalue = InstantRvalue.create(function() {
        return b._clock.now()
    });
    this._last_time = a.now();
    this.approximate_time_lvalue = LocalLvalue.create(this._last_time)
}, poll:function() {
    var a = this, b = this._clock.now();
    Math.floor(b / Chronometer.APPROXIMATE_TIME_PRECISION_MS) > Math.floor(this._last_time / Chronometer.APPROXIMATE_TIME_PRECISION_MS) && processHandler(function() {
        a._last_time = b;
        a.approximate_time_lvalue.requestSet(b)
    })
}, schedulePollingInterval:function() {
    var a = this;
    safeInterval(function() {
        a.poll()
    }, Chronometer.APPROXIMATE_TIME_PRECISION_MS)
}});
FRP = AsanaObject.subclass("FRP", {MAX_PROPAGATION_RECURSION_DEPTH:10, _:Fiber.addOnFiberCreatedFunc(function() {
    var a = Fiber.current;
    a.frp_may_propagate = Fiber.current === Fiber.main;
    a.frp_assert_no_peeks = !1
}), _addAllDirectlyDirtyRvalues:function(a, b, c) {
    if(!a.contains(c)) {
        a.add(c);
        var d = c._getState();
        d.directly_dirty && b.add(c);
        d.auto_inputs.forEach(function(c) {
            FRP._addAllDirectlyDirtyRvalues(a, b, c)
        });
        d.manual_inputs !== null && d.manual_inputs.forEach(function(c) {
            FRP._addAllDirectlyDirtyRvalues(a, b, c)
        })
    }
}}, {_root_rvalues:null, _possibly_unused_rvalues:SET_IN_CONSTRUCTOR, chronometer:SET_IN_CONSTRUCTOR, _used_rvalues_are_dirty:!1, _process_handler_depth:0, _propagate_recursion_depth:0, _allow_propagation:!0, num_unknowns:0, _unknowns_ignored:null, _unknowns:null, _rvalues_computed_during_propagate:null, _propagation_job_exists:!1, active_element_dimensions_lvalues:SET_IN_CONSTRUCTOR, _onPeeked:null, runWithOnPeeked:function(a, b) {
    var c = this._onPeeked;
    this._onPeeked = a;
    try {
        return b()
    }finally {
        this._onPeeked = c
    }
}, constructor:function(a) {
    FRP.superproto.constructor.call(this);
    this._root_rvalues = Set.create();
    this._possibly_unused_rvalues = Set.create();
    this.chronometer = Chronometer.create(a);
    this._unknowns_ignored = Set.create();
    this._unknowns = Set.create();
    this.active_element_dimensions_lvalues = Set.create();
    Signal.connect(this, "propagate_stop", ElementDimensionsLvalue.recomputeAll)
}, tearDownAllRvalues:function() {
    this._root_rvalues.values().forEach(function(a) {
        a.isWatch() && a.unwatch()
    });
    this.propagate([]);
    env.is_server && (env.world_store.runInBatches(noop), env.world_store.unloadPreloadedPropertiesForTesting(), this.propagate([]), env.world_store.runInBatches(noop), this.propagate([]));
    this._root_rvalues = Set.create()
}, propagating:function() {
    return this._propagate_recursion_depth > 0
}, propagationDepth:function() {
    return this._propagate_recursion_depth
}, propagate:function(a) {
    var b = this;
    host.profiler.timeFuncDetailed("FRP.propagate", function() {
        b._propagate_recursion_depth++;
        host.ufuThatExceptionHandlerActive();
        b._allow_propagation || ufu("Trying to call FRP.propagate while a propagation is in process");
        EvaluationContext.getEvaluationStack().isEmpty() || ufu("Evaluation stack must be empty when propagate() is called", EvaluationContext.getEvaluationStack());
        b._allow_propagation = !1;
        if(Flags.diagnostics_do_expensive_error_checking) {
            b._rvalues_computed_during_propagate = Set.create()
        }
        b._processUnusedRvalues();
        EvaluationContext.resetRvalueLog();
        a.forEach(function(a) {
            b.addDirtyRvalueIfUsed(a)
        });
        var c = !1;
        b._root_rvalues.forEach(function(a) {
            if(a._isDirty(a._getState())) {
                throw c = !0, IIterable.STOP;
            }
        });
        c && env.world_store.runInBatches(function() {
            host.job_queue && host.job_queue.isRunning() ? host.job_queue.forEachParallel(b._root_rvalues, function(a) {
                a._ensureCurrent(a._getState(), null)
            }) : b._root_rvalues.forEach(function(a) {
                a._ensureCurrent(a._getState(), null)
            })
        });
        b._processUnusedRvalues();
        host.profiler.timeFuncDetailed("FRP.propagate dumping rvalue log", function() {
            EvaluationContext.dumpRvalueLog()
        });
        if(Flags.diagnostics_do_expensive_error_checking) {
            b._rvalues_computed_during_propagate = null
        }
        env.counters.increment("frp.num_propagates");
        b._used_rvalues_are_dirty = !1;
        if(c) {
            Signal.signal(env.frp, "propagate_stop");
            if(b._used_rvalues_are_dirty) {
                if(b._propagate_recursion_depth === FRP.MAX_PROPAGATION_RECURSION_DEPTH) {
                    var d = Set.create(), e = Set.create();
                    b._root_rvalues.forEach(function(a) {
                        FRP._addAllDirectlyDirtyRvalues(d, e, a)
                    });
                    log.warn("directly dirty rvalues", prettyHint(e, 1));
                    host.recordWarningOnce("Exceeded max recursion depth for propagate_stop")
                }else {
                    b._allow_propagation = !0, b.propagate([]), b._allow_propagation = !1
                }
            }
            b._propagate_recursion_depth === 1 && Signal.signal(env.frp, "propagate_all_stop")
        }
        b._allow_propagation = !0;
        b._propagate_recursion_depth--
    })
}, addPropagationJob:function(a) {
    var b = this;
    this._propagation_job_exists = !0;
    return host.job_queue.addJob("propagation", function() {
        var c = Fiber.current.frp_may_propagate;
        Fiber.current.frp_may_propagate = !0;
        var d = a();
        b._propagation_job_exists = !1;
        Fiber.current.frp_may_propagate = c;
        return d
    })
}, addRvalueJob:function(a, b, c) {
    return host.job_queue !== null ? host.job_queue.addJob(["computing rvalue", a.getIdentifier(), b].join(" "), function() {
        EvaluationContext.start(a);
        a._setManualInputKey(b);
        var d = c();
        a._setManualInputKey(null);
        EvaluationContext.stop(a);
        return d
    }) : function() {
        a._setManualInputKey(b);
        var d = c();
        a._setManualInputKey(null);
        return d
    }
}, mapParallel:function(a, b, c) {
    var d = [];
    env.frp.forEachParallel(a, function(a, f) {
        d[f] = b.call(c, a, f)
    });
    return d
}, forEachParallel:function(a, b, c) {
    b === void 0 && (b = function(a) {
        a()
    });
    if(host.job_queue === null || !host.job_queue.isRunning()) {
        a.forEach(b, c)
    }else {
        var d = $rval(function() {
            if(d.getCachedXvalue() === void 0) {
                var e = [], f = null;
                a.forEach(function(a, h) {
                    e.push(env.frp.addRvalueJob(d, null, function() {
                        try {
                            b.call(c, a, h)
                        }catch(d) {
                            if(d instanceof ValueIsUnknownError) {
                                f = f || d
                            }else {
                                throw d;
                            }
                        }
                    }))
                });
                host.job_queue.join(e);
                if(f) {
                    throw f;
                }else {
                    return!0
                }
            }else {
                return!1
            }
        });
        d._setAsExemptFromPeekConsistencyChecks();
        d.setAsSafelyPeekableByAncestor();
        $v(d)
    }
}, addDirtyRvalueIfUsed:function(a) {
    if(a.getCachedXvalue() !== void 0) {
        env.frp_tracer.shouldTrace(a) && env.frp_tracer.trace(a, "dirtying"), a._getState().history = [a], env.frp._used_rvalues_are_dirty = !0, this._addDirtyRvalue(a)
    }
}, _addDirtyRvalue:function(a) {
    var b = a._getState(), c = a._isDirty(b);
    b.directly_dirty = !0;
    c || a._onBecameDirty(b)
}, getInputsSlow:function(a) {
    return ImmutableSet.create(a._getState().auto_inputs)
}, testing_dependencyExists:function(a, b) {
    if(a instanceof Rvalue) {
        var c = b._getState(), c = c.auto_input_to_index.containsKey(a) || c.manual_inputs !== null && c.manual_inputs.contains(a);
        a._getState().dependents.contains(b);
        return c
    }else {
        return!1
    }
}, addPossiblyUnusedRvalue:function(a) {
    this._possibly_unused_rvalues.add(a)
}, runWithoutTrackingUnknowns:function(a) {
    Fiber.current.frp_ignore_unknowns = !0;
    a = a();
    Fiber.current.frp_ignore_unknowns = !1;
    return a
}, warnAboutUnknowns:function() {
    Flags.diagnostics_warn_about_unknown_rvalues && this._unknowns.forEach(function(a) {
        var b = !0;
        a._getState().auto_inputs.forEach(function(a) {
            a = a._getState();
            isUnknown(a.cached_xvalue) && (b = !1)
        });
        if(b) {
            var c = a.getRandomDependencyChain();
            log.warn("rvalue with unknown value", a, c)
        }
    })
}, _processUnusedRvalues:function() {
    var a = this;
    host.profiler.timeFuncDetailed("_processUnusedRvalues", function() {
        for(var b = function(a) {
            if(!a._isUsed() && a.getCachedXvalue() !== void 0) {
                a.onUnused()
            }
        };!a._possibly_unused_rvalues.isEmpty();) {
            var c = a._possibly_unused_rvalues;
            a._possibly_unused_rvalues = Set.create();
            c.forEach(b)
        }
    })
}});
EvaluationContext = {RVALUE_ENTRY_INDEX_RVALUE:0, RVALUE_ENTRY_INDEX_MANUAL_INPUT_KEY:1, _rvalues_computed_count:0, _rvalue_watches_computed_count:0, _rvalues_computed_log:[], _:JobQueue.addOnJobCreatedFunc(function() {
    JobQueue.currentJob().evaluation_context_rvalues_being_computed = []
}), start:function(a) {
    var b = JobQueue.currentJob().evaluation_context_rvalues_being_computed;
    DIAGNOSTICS_DUMP_COMPUTED_RVALUES && (EvaluationContext._rvalues_computed_count++, a instanceof Watch && EvaluationContext._rvalue_watches_computed_count++, DIAGNOSTICS_DUMP_COMPUTED_RVALUES_NAMES && EvaluationContext._rvalues_computed_log.push([a, b.length, a._getState().history]));
    b.push([a, null]);
    RvalueProfiler.active_profiler && RvalueProfiler.active_profiler.startRvalue(a)
}, stop:function(a) {
    JobQueue.currentJob().evaluation_context_rvalues_being_computed.pop();
    RvalueProfiler.active_profiler && RvalueProfiler.active_profiler.stopRvalue(a)
}, isStarted:function() {
    return JobQueue.currentJob().evaluation_context_rvalues_being_computed.length !== 0
}, resetRvalueLog:function() {
    EvaluationContext._rvalues_computed_log = [];
    EvaluationContext._rvalues_computed_count = 0;
    EvaluationContext._rvalue_watches_computed_count = 0
}, dumpRvalueLog:function() {
    DIAGNOSTICS_DUMP_COMPUTED_RVALUES && (DIAGNOSTICS_DUMP_COMPUTED_RVALUES_NAMES && (log.debug("FRP.propagate computed Rvalues in the following order:"), EvaluationContext._rvalues_computed_log.forEach(function(a) {
        var b = a[0], c = a[2], a = [prettyProof(MochiKit.Text.padLeft("", (a[1] + 1) * 2))];
        DIAGNOSTICS_DUMP_COMPUTED_RVALUES_HISTORY && b._getState().history.length !== 0 ? a.push(c.clone().reverse().map(function(a) {
            return prettyPrint(a, 0)
        }).join(" -> ")) : a.push(prettyHint(b, 0));
        c.length === 0 ? a.push("[new]") : c.length > 1 && (a.push("from"), a.push(prettyHint(c[c.length - 2], 0)));
        log.debug.apply(log, a)
    })), log.debug("FRP.propagate computed this many Rvalues total:", EvaluationContext._rvalues_computed_count, "(watches", EvaluationContext._rvalue_watches_computed_count, ")"))
}, getEvaluationStack:function(a) {
    return(a || JobQueue.currentJob()).evaluation_context_rvalues_being_computed.map(function(a) {
        return a[EvaluationContext.RVALUE_ENTRY_INDEX_RVALUE]
    })
}, getTopRvalue:function() {
    var a = JobQueue.currentJob().evaluation_context_rvalues_being_computed, b = a.length;
    return b > 0 ? a[b - 1][EvaluationContext.RVALUE_ENTRY_INDEX_RVALUE] : null
}, getTopRvalueEntry:function() {
    var a = JobQueue.currentJob().evaluation_context_rvalues_being_computed, b = a.length;
    return b > 0 ? a[b - 1] : null
}, dumpAllEvaluationStacks:function() {
    log.info("Dumping evaluation stack of all running jobs");
    host.job_queue.runningJobs().forEach(function(a) {
        log.info("Job:", a.name, EvaluationContext.getEvaluationStack(a))
    })
}};
UserActionContext = AsanaObject.subclass("UserActionContext", {get:Memoize.memoizeFew("UserActionContext", function() {
    return UserActionContext.create()
})}, {_is_started:!1, _is_recording:!1, _action:null, _undoing:SET_IN_CONSTRUCTOR, constructor:function() {
    UserActionContext.superproto.constructor.call(this);
    this._is_undoing = LocalLvalue.create(!1)
}, start:function(a) {
    env.datastore_manager.enactChange(StartUserActionContextChange.create({user_action:a}))
}, _start:function(a) {
    this._is_recording = this._is_started = !0;
    this._is_undoing.requestSet(!1);
    this._action = a
}, addChange:function(a) {
    this._is_recording = !1;
    this._action.getX("changes").requestInsertBefore(a, null);
    a.requestDo();
    this._is_recording = !0
}, end:function() {
    this._is_started = this._is_recording = !1;
    env.setLastUndoableUserAction(this._action);
    this._action = null
}, isStarted:function() {
    return this._is_started
}, isRecording:function() {
    return this._is_recording
}, isUndoing:function() {
    return $v(this._is_undoing)
}, requestUndo:function() {
    var a = env.lastUndoableUserActionOrNull();
    this.isUndoing() || (this._is_undoing.requestSet(!0), env.datastore_manager.enactChange(UndoUserActionChange.create({user_action:a})))
}, requestClearUndo:function() {
    env.setLastUndoableUserAction(null)
}, runWithoutRecording:function(a) {
    var b = this._is_recording;
    this._is_recording = !1;
    a = a();
    this._is_recording = b;
    return a
}});
$rval = function(a, b) {
    return JavaScriptRvalue.create({computeValue:a, name:b || a.name})
};
computedProperty = function(a, b, c) {
    var d = rvalueProperty(a, b, c);
    return function() {
        var a = d.apply(this, arguments).getXvalue();
        return a instanceof Rvalue ? (a.setAsSafelyPeekableByAncestor(), a.peek()) : a
    }
};
computedPropertyInFirstParam = function(a, b) {
    return computedProperty(a, b, !0)
};
serverComputedProperty = function(a, b) {
    return _serverComputedProperty(a, serverComputedValue, b)
};
serverComputedPropertyAllowingUnknown = function(a, b) {
    return _serverComputedProperty(a, serverComputedValueAllowingUnknown, b)
};
_serverComputedProperty = function(a, b, c) {
    return function() {
        return b((this.global_id !== void 0 ? this.global_id : this.fully_qualified_view_name) + ":" + a, c, this)
    }
};
serverComputedValue = function(a, b, c) {
    return env.datastore_manager.server_computed_rvalue_manager.rvalue(a, env.is_server ? b : null, c).peek()
};
serverComputedValueAllowingUnknown = function(a, b, c) {
    return env.datastore_manager.server_computed_rvalue_manager.rvalue(a, env.is_server ? b : null, c).peekAllowingUnknown()
};
rvalueProperty = function(a, b, c) {
    var d = function() {
        var c = this, d = arguments;
        return $rval(function() {
            return b.apply(c, d)
        }, a).setAsSafelyPeekableByAncestor()
    };
    return c ? Memoize.memoizeInFirstParam(a, d) : Memoize.memoizeInThis(a, d)
};
rvaluePropertyInFirstParam = function(a, b) {
    return rvalueProperty(a, b, !0)
};
findByUniquelyValuedProperty = function(a, b, c, d) {
    return computedProperty(a, function(e) {
        var f = QueryBuilder.queryForObjects(c);
        d !== void 0 && f.usingIndex(c.getIndexByName(d));
        e = f.where(QueryBuilder.scalarProperty(b).eq(e).orders()).withMemcacheKey(c.__type_name + "." + b + "." + e).allowUnscoped().getQueryRvalue(a + " rvalue").setAsSafelyPeekableByAncestor();
        return $v(e).firstValueOrNull()
    })
};
$v = toValue;
__FILE__ = "luna/common/type_registry.js";
IdMap = define("TypeIdMap", AsanaObject.subclass("TypeIdMap", [ISerializable], {}, {_maps:SET_IN_CONSTRUCTOR, _frozen_maps:null, constructor:function() {
    IdMap.superproto.constructor.call(this);
    this._maps = [Map.create(), Map.create()]
}, toRawJS:function(a) {
    if(this._frozen_maps !== null) {
        return this._frozen_maps
    }
    return a.freeze(this._maps)
}, fromRawJS:function(a, b) {
    IdMap.superproto.constructor.call(this);
    this._frozen_maps = a;
    this._maps = b.thaw(a)
}, idForName:function(a) {
    return this._maps[0].get(a)
}, idOrNullForName:function(a) {
    return this._maps[0].getOr(a, null)
}, nameForId:function(a) {
    return this._maps[1].get(a)
}, add:function(a, b, c) {
    this._maps[0].containsKey(a) && ufu("IdMap already contains type " + a);
    this._maps[0].put(a, b);
    c || (assert(!this._maps[1].containsKey(b), "Reserved an ID for an entry already in the registry", b), this._maps[1].put(b, a));
    this._frozen_maps = null
}, containsName:function(a) {
    return this._maps[0].containsKey(a)
}, forEach:function(a) {
    return this._maps[0].forEach(a)
}, forEachUntil:function(a) {
    return this.forEach(a)
}}));
TypeRegistry = AsanaObject.subclass("TypeRegistry", {_types_to_define:Map.create()}, {constructor:function() {
    TypeRegistry.superproto.constructor.call(this);
    this._global_types = Map.create();
    this._global_names = Map.create();
    if(!TypeRegistry._types_to_define.isEmpty()) {
        var a = this;
        TypeRegistry._types_to_define.forEach(function(b, c) {
            a.register(b, c)
        })
    }
}, typeIdMap:ABSTRACT, _putTypeIdMap:ABSTRACT, propertyIdMap:ABSTRACT, _putPropertyIdMap:ABSTRACT, _global_types:SET_IN_CONSTRUCTOR, _global_names:SET_IN_CONSTRUCTOR, getTypeName:function(a) {
    if(!this._global_names.containsKey(a)) {
        return null
    }
    return this._global_names.get(a)
}, getTypeFromId:function(a) {
    return this.getType(this.typeIdMap().nameForId(a))
}, typeOrNullFromId:function(a) {
    a = this.typeIdMap().nameForId(a);
    if(!this._global_types.containsKey(a)) {
        return null
    }
    return this.getType(a)
}, getType:function(a) {
    this._global_types.containsKey(a) || ufu("TypeRegistry does not know about type: " + a);
    return this._global_types.get(a)
}, getTypeId:function(a) {
    var b = this.getTypeName(a);
    b || ufu("TypeRegistry does not know about type for object: " + a.__type_name, " Your type might be abstract or have registry_name set to null");
    return this.typeIdMap().idForName(b)
}, register:function(a, b) {
    if(this._global_types.containsKey(a)) {
        if(this._global_types.get(a) === b) {
            return
        }else {
            ufu("TypeRegistry already contains a differnt type with this name: " + a)
        }
    }
    StateObject.isSuperclassOf(b) || ufu("TypeRegistry can only accept StateObjects, not: " + prettyPrint(b));
    this._global_names.put(b, a);
    this._global_types.put(a, b)
}, isRegistered:function(a) {
    return a instanceof Object && this.getTypeName(a)
}, updateIdMaps:function(a) {
    var b = this.typeIdMap(), c = this.propertyIdMap();
    this._global_names.forEach(function(d, e) {
        b.idOrNullForName(e) === null && (a && log.info("Registering type", e), b.add(e, env.global_id_provider.reserveId()));
        d.properties().forEach(function(b) {
            c.idOrNullForName(b.registry_name) === null && (a && log.info("Registering property", b.registry_name), c.add(b.registry_name, env.global_id_provider.reserveId()));
            if(b.key_name !== b.registry_name) {
                var d = c.idOrNullForName(b.key_name), e = c.idForName(b.registry_name);
                d !== null ? assertEq(d, e, "Property id for property's key_name did not match id for its registry_name. That means you tried to alias a property to a name that's already taken by another property. We don't support that. Please talk to Jack (or Malcolm or Greg).") : (a && log.info("Aliasing property", b.key_name, b.registry_name), c.add(b.key_name, e, !0))
            }
            assertEq(b.registry_name, c.nameForId(c.idForName(b.key_name)), "Property Name<--\>Id mapping is inconsistent. You may have tried to alias a property to a name that's already taken by another object.");
            assertEq(b.registry_name, c.nameForId(c.idForName(b.registry_name)), "Property Name<--\>Id mapping is inconsistent. You may have tried to alias a property to a name that's already taken by another object.")
        });
        Map.forEach(d._indexes, function(b) {
            c.idOrNullForName(b) === null && (a && log.info("Registering index", b), c.add(b, env.global_id_provider.reserveId()))
        })
    });
    this._putTypeIdMap(b);
    this._putPropertyIdMap(c)
}, getSubtypes:function(a) {
    return this._global_names.keys().filter(function(b) {
        return a.isSuperclassOf(b)
    })
}, getImplementations:function(a) {
    return this._global_names.keys().filter(function(b) {
        return a.isImplementedByClass(b)
    })
}});
KVStoreTypeRegistry = TypeRegistry.subclass("KVStoreTypeRegistry", {}, {constructor:function() {
    KVStoreTypeRegistry.superproto.constructor.call(this);
    this._type_registry_key = "platform|types:SerializationV2";
    this._property_registry_key = "platform|properties:SerializationV2";
    this._loaded = !1;
    this._property_id_map = this._type_id_map = null
}, _loadIfUnloaded:function() {
    if(!this._loaded) {
        this._type_id_map = this._idMap(this._type_registry_key), this._property_id_map = this._idMap(this._property_registry_key), this._loaded = !0
    }
}, typeIdMap:function() {
    this._loadIfUnloaded();
    return this._type_id_map
}, _putTypeIdMap:function(a) {
    this._putIdMap(this._type_registry_key, a)
}, propertyIdMap:function() {
    this._loadIfUnloaded();
    return this._property_id_map
}, _putPropertyIdMap:function(a) {
    this._putIdMap(this._property_registry_key, a)
}, _idMap:function(a) {
    if(a = env.world_store.readKvString(a, "")) {
        var b = Deserializer.deserialize(a);
        b instanceof IdMap || ufu(a + " must be of type IdMap");
        return b
    }
    return IdMap.create()
}, _putIdMap:function(a, b) {
    env.world_store.writeKvString(a, Serializer.serialize(b))
}});
defineType = function(a, b) {
    StateObject.isSuperclassOf(b) || lowLevelUfu("Cannot register non-datastoreobjects");
    TypeRegistry._types_to_define.put(a, b);
    globals.env && env.type_registry.register(a, b);
    return b
};
__FILE__ = "luna/common/unknown_value.js";
UnknownValue = AsanaObject.subclass("UnknownValue", [ISerializable], {prettyLogUnknownValueInDom:function(a, b) {
    "console" in globals ? (console.groupCollapsed("UnknownValue in DOM: " + prettyPrint(a.unknownRvalue(), 0)), console.log("DOM node:", b), console.log("Underlying lvalue:", prettyPrint(a.innerMostUnknownRvalue())), console.groupCollapsed("Rvalue stack"), a.unknownValueStack().forEach(function(a) {
        console.groupCollapsed(prettyPrint(a.rvalue, 0));
        console.log("Stack where rvalue was peeked:\n" + a.peeker_stack);
        console.groupEnd()
    }), console.groupEnd(), console.groupEnd()) : (log.info("UnknownValue in DOM: " + prettyPrint(a.unknownRvalue(), 0)), log.info("Underlying lvalue:", prettyPrint(a.innerMostUnknownRvalue())))
}}, {_error_rvalue:SET_IN_CONSTRUCTOR, _peeker_stack:SET_IN_CONSTRUCTOR, _inner_unknown_value:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    UnknownValue.superproto.constructor.call(this);
    if(a && a.datastore_lvalue) {
        a = a.datastore_lvalue
    }
    this._error_rvalue = a;
    b ? (this._peeker_stack = b.stack, this._inner_unknown_value = b.unknown_value) : this._inner_unknown_value = this._peeker_stack = null
}, toRawJS:function(a) {
    return a.freeze(this.innerMostUnknownRvalue())
}, fromRawJS:function(a, b) {
    this.constructor(b.thaw(a), null)
}, unknownValueStack:function() {
    var a = this._error_rvalue ? [{rvalue:this._error_rvalue, peeker_stack:this._peeker_stack ? this._peeker_stack : "(no stack, probably observered directly by a watch)"}] : [];
    this._inner_unknown_value !== null && (a = a.concat(this._inner_unknown_value.unknownValueStack()));
    return a
}, user_text:ABSTRACT, css_class_suffix:ABSTRACT, sync_to_client:ABSTRACT, propagates_unknown_values_in_ui:!1, innerMostUnknownRvalue:function() {
    return this._inner_unknown_value !== null ? this._inner_unknown_value.innerMostUnknownRvalue() : this._error_rvalue
}, unknownRvalue:function() {
    return this._error_rvalue
}});
define("UnknownValue.Loading", UnknownValue.Loading = UnknownValue.subclass("UnknownValue.Loading", {}, {user_text:"Loading...", css_class_suffix:"loading", sync_to_client:!1, propagates_unknown_values_in_ui:!0}));
define("UnknownValue.DoesNotExist", UnknownValue.DoesNotExist = UnknownValue.subclass("UnknownValue.DoesNotExist", {}, {user_text:"Not found", css_class_suffix:"not-found", sync_to_client:!0}));
define("UnknownValue.AccessDenied", UnknownValue.AccessDenied = UnknownValue.subclass("UnknownValue.AccessDenied", {}, {user_text:"Access Denied", css_class_suffix:"access-denied", sync_to_client:!0}));
define("UnknownValue.SearchUnavailable", UnknownValue.SearchUnavailable = UnknownValue.subclass("UnknownValue.SearchUnavailable", {}, {user_text:"Search unavailable", css_class_suffix:"service-unavailable", sync_to_client:!0}));
isUnknown = function(a) {
    return a instanceof UnknownValue
};
isKnown = function(a) {
    return!isUnknown(a)
};
__FILE__ = "luna/common/pointer.js";
define("Pointer", AsanaObject.subclass("Pointer", [ISerializable], {}, {_lvalue:SET_IN_CONSTRUCTOR, _address:SET_IN_CONSTRUCTOR, constructor:function(a) {
    Pointer.superproto.constructor.call(this);
    this._lvalue = this._address = null;
    a instanceof Lvalue ? this.setLvalue(a) : this.setAddress(a)
}, toRawJS:function(a) {
    return this._lvalue !== null ? a.freeze(this._lvalue) : a.freeze(this._address)
}, fromRawJS:function(a, b) {
    this.constructor(b.thaw(a))
}, hasAddress:function() {
    return this._address !== null
}, address:function() {
    return this._address
}, getLvalue:function() {
    if(this._lvalue === null) {
        this._lvalue = this._address.datastore().lvalueForAddress(this._address)
    }
    return this._lvalue
}, setAddress:function(a) {
    this._address = a;
    this.__localid = "ptr_" + hashKey(a)
}, setLvalue:function(a) {
    this._lvalue = a;
    if(Interface.instanceImplements(a, IDatastoreAddress)) {
        this._address = a
    }
    this.__localid = "ptr_" + hashKey(a)
}}));
__FILE__ = "luna/common/value_types.js";
isComparable = function(a) {
    return a === String || a === Integer || a === Float || a === Timestamp || a === Boolean
};
getDatabaseType = function(a) {
    switch(a) {
        case Integer:
            ;
        case Timestamp:
            ;
        case PlaceholderType:
            return"int";
        case Float:
            return"float";
        case Boolean:
            return"bool";
        case String:
            return"text";
        case Pointer:
            return"pointer";
        case IDatastoreAddress.TYPE_RANK:
            return"rank";
        case IDatastoreAddress.TYPE_LIST:
            return ufu("There is no database type associated with list values.");
        default:
            return"state_object"
    }
};
define("NumberType", AsanaObject.subclass("NumberType", {}, {}));
define("Integer", NumberType.subclass("Integer", {}, {}));
define("Float", NumberType.subclass("Float", {}, {}));
define("Timestamp", NumberType.subclass("Timestamp", {}, {}));
define("PlaceholderType", AsanaObject.subclass("PlaceholderType", {}, {}));
define("String", String);
define("Boolean", Boolean);
define("Array", Array);
couldBeInstanceOf = function(a, b) {
    return isUnknown(a) ? !0 : a instanceof b
};
__FILE__ = "luna/common/state_object_wrapped_lvalue.js";
StateObjectWrappedLvalue = Lvalue.subclass("StateObjectWrappedLvalue", {}, {allow_trashed:SET_IN_CONSTRUCTOR, object:SET_IN_CONSTRUCTOR, preloaded:SET_IN_CONSTRUCTOR, datastore_lvalue:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    StateObjectWrappedLvalue.superproto.constructor.call(this);
    this.allow_trashed = b;
    this.datastore_lvalue = a;
    this.object = a.object;
    this.preloaded = a.preloaded;
    this.object_id = a.object_id;
    this.property_name = a.property_name;
    var c = (b ? "1_" : "0_") + a._serialized_address;
    if(Flags.diagnostics_detailed_rvalue_names) {
        this._name = c
    }
    this.setAsSafelyPeekableByAncestor();
    setLocalID(this, "sowl_" + c)
}, computeValue:function() {
    var a = toValueAllowingUnknown(this.datastore_lvalue);
    if(env.is_server) {
        if(a === null || isUnknown(a)) {
            return this.datastore_lvalue.datastore().unmarkObjectReferenceInvisible(this), a
        }else {
            if(this._objectIsInvisibleOnServer(a)) {
                return this.datastore_lvalue.datastore().markObjectReferenceInvisible(this), a = UnknownValue.AccessDenied.create(this, null), env.counters.increment("access.num_invisible_references"), a
            }else {
                this.datastore_lvalue.datastore().unmarkObjectReferenceInvisible(this)
            }
        }
    }else {
        if(a === null || isUnknown(a)) {
            return a
        }
    }
    return!this.allow_trashed && this._objectIsTrashed(a) ? UnknownValue.DoesNotExist.create(this.datastore_lvalue, null) : a
}, _isUsed:function(a) {
    return this.datastore_lvalue.preloaded && env.is_server && this.datastore_lvalue.object.inUse() ? !0 : StateObjectWrappedLvalue.superproto._isUsed.call(this, a)
}, _onBecameDirty:function(a) {
    env.is_server && this.datastore_lvalue.preloaded && this.object.isNeededOnClient() && this.datastore_lvalue.datastore().scheduleLvalueForPreloading(this);
    StateObjectWrappedLvalue.superproto._onBecameDirty.call(this, a)
}, requestSet:function(a) {
    this.datastore_lvalue.requestSet(a)
}, onUnused:function() {
    env.is_server && this.datastore_lvalue.datastore().unmarkObjectReferenceInvisible(this);
    return StateObjectWrappedLvalue.superproto.onUnused.call(this)
}, getPrettyInfo:function() {
    return["StateObjectWrappedLvalue", [this.datastore_lvalue]]
}, _objectIsInvisibleOnServer:function(a) {
    var b = env.userOrNull();
    return b !== null && !a.isVisibleBy(b)
}, _objectIsTrashed:function(a) {
    a = toValueAllowingUnknown(a.getX(StateObject.PropertyName.TRASHED_AT));
    return isUnknown(a) || a !== 0
}});
__FILE__ = "luna/common/datastore/query.js";
define("Query", AsanaObject.subclass("Query", {Orders:{YES:!0, NO:!1}}, {_object_type:SET_IN_CONSTRUCTOR, _all_filters:SET_IN_CONSTRUCTOR, _generating_filters:SET_IN_CONSTRUCTOR, _indexed_filters:SET_IN_CONSTRUCTOR, _ordering_filters:SET_IN_CONSTRUCTOR, _name:SET_IN_CONSTRUCTOR, _index:SET_IN_CONSTRUCTOR, _has_unique_ranks:SET_IN_CONSTRUCTOR, _allow_unscoped:SET_IN_CONSTRUCTOR, _allow_unindexed:SET_IN_CONSTRUCTOR, constructor:function(a, b, c, d) {
    Query.superproto.constructor.call(this);
    var e = this;
    e._object_type = a;
    e._all_filters = [];
    e._indexed_filters = [];
    e._unindexed_filters = [];
    e._ordering_filters = [];
    e._name = c || "Unnamed";
    e._has_unique_ranks = !1;
    a = updateWithDefaults(d || {}, {memcache_key:null, index:null, server_matching_objects_r:null, allow_unscoped:!1, allow_unindexed:!1});
    e._memcache_key = a.memcache_key;
    e._index = a.index;
    e._server_matching_object_r = a.server_matching_objects_r;
    e._allow_unscoped = a.allow_unscoped;
    e._allow_unindexed = a.allow_unindexed;
    a = function(a) {
        e._all_filters.push(a);
        a.attach(e._object_type);
        a._is_indexed = !1;
        a instanceof Query.ScalarPropertyFilter && e._index !== null && e._index.hasProperty(a.propertyName()) ? (a._condition.supportsIndex() && e._indexed_filters.push(a), a._is_indexed = !0) : e._unindexed_filters.push(a);
        if(a.order_priority !== Query.Filter.DOES_NOT_ORDER && (e._ordering_filters.push(a), a.providesUniqueRanks())) {
            e._has_unique_ranks = !0
        }
    };
    b.forEach(a);
    e._object_type !== StateObject && (b = env.type_registry.getSubtypes(this._object_type), b = b.length > 1 ? Query.Condition.or(b.map(function(a) {
        return Query.Condition.eq(env.type_registry.getTypeId(a))
    })) : Query.Condition.eq(env.type_registry.getTypeId(this._object_type)), a(Query.ScalarPropertyFilter.create(StateObject.PropertyName.TYPE_ID, b)));
    e._ordering_filters.sort(function(a, b) {
        return compare(a.order_priority, b.order_priority)
    })
}, objectType:function() {
    return this._object_type
}, getName:function() {
    return this._name
}, getMemcacheKey:function() {
    return this._memcache_key
}, generateSubscriptionTopics:Memoize.memoizeInThis("generateSubscriptionTopics", function() {
    var a = MochiKit.Base.flattenArray(this._all_filters.map(function(a) {
        return a.subscriptionTopics()
    }));
    a.length === 0 && !this._allow_unscoped && log.warn("Query '" + this.getName() + "' doesn't subscribe to any topics");
    return a
}), queryIndex:function(a) {
    var b = this;
    return host.profiler.timeFuncDetailed("Query.queryIndex", function() {
        var c = b._all_filters[0], d = b._all_filters.slice(1), e = c.getMatchingObjectIds(a._datastore_cache_in_memory._property_index).filter(function(a) {
            a = RawDatastoreAddress.typeIdAddress(a);
            a = a.datastore().readValue(a);
            return isKnown(a) && b._object_type.isSuperclassOf(env.type_registry.getTypeFromId(a))
        });
        Flags.diagnostics_do_expensive_error_checking && e.forEach(function() {
        });
        var f;
        a.suppressNoSecondaryCacheReadAssertions(function() {
            f = e.filter(function(a) {
                for(var b = 0;b < d.length;++b) {
                    if(!d[b].objectSatisfies(a)) {
                        return!1
                    }
                }
                return!0
            })
        });
        return f
    })
}, fetchNthObjectRank:function(a, b) {
    var c = this.fetchNthObjectId(a, b);
    return c === null ? null : this._getRankOf(c)
}, fetchNthObjectId:function(a, b) {
    typeof b !== "number" && ufu("n is not a number", b);
    var c = this.getSQL(!0, a !== null, !1) + " LIMIT 1 OFFSET " + b, d = this.getSQLSubstitutions(a, null), c = env.KVStore.query(env.db.createStatement(c), d);
    return c.length === 0 ? null : c[0].result
}, _queryReliesOnMissingIndexes:function() {
    if(this._index === null && this._unindexed_filters.length > 0) {
        var a = this._unindexed_filters[0];
        if(a instanceof Query.ScalarPropertyFilter) {
            return a = a.tableSuffixes(), a = a.length === 0 ? null : a[0], a === "text" || a === "int" || a === "bool"
        }
    }
    return!1
}, getSQL:Memoize.memoizeInThis("getSQL", function(a, b, c) {
    var d = this;
    !d._allow_unindexed && d._queryReliesOnMissingIndexes() && ufu("query relies on missing indexes", d);
    var e = d._index ? "idx.object_id" : "o1." + d._all_filters[0].getSQLObjectIDColumnName(), f;
    env.is_server && Flags.diagnostics_query_limits_read ? (f = canned_query_hash_to_object_ids[d.toHash()], f = f.length === 0 ? ["false"] : [e + " in (" + f.join(", ") + ")"]) : f = null;
    var g = d._unindexed_filters.map(function(a) {
        return a.tableSuffixes()
    });
    assertNe(0, g.length, "First filter in a query should use a table!");
    var h = 1, i = d._unindexed_filters.map(function(a, b) {
        for(var c = [], d = g[b].length;d--;) {
            c.push("o" + h++)
        }
        return c
    }), j = concat(d._index === null ? [] : [d._index.tableName() + " AS idx"], MochiKit.Base.flattenArray(g).map(function(a, b) {
        return"okvstore_" + a + " AS o" + (b + 1)
    })).join(", ");
    f = "SELECT STRAIGHT_JOIN " + e + " AS result FROM " + j + " WHERE " + concat(d._index ? ["idx.index_id = " + d._index.indexId()] : [], d._indexed_filters.map(function(a) {
        var b = d._index.columnForProperty(a.propertyName());
        return a.getIndexSQL("idx." + b)
    }), d._unindexed_filters.map(function(a, b) {
        var c = a.getSQL(i[b], e);
        if(i[b].length > 0 && (b > 0 || d._index !== null)) {
            c += " AND " + i[b][0] + "." + a.getSQLObjectIDColumnName() + "=" + e
        }
        return c
    }), f).join(" AND ");
    if(a || b || c) {
        var l = MochiKit.Base.flattenArray(this._ordering_filters.map(function(a) {
            for(var b = 0;b < d._unindexed_filters.length && d._unindexed_filters[b] !== a;) {
                b++
            }
            b === d._unindexed_filters.length && ufu("ORDER BY cannot be generated using indexed filter");
            return a.getRankSQL(i[b], e)
        }));
        d._has_unique_ranks || l.push(e);
        j = l.join(", ");
        l = l.map(function() {
            return"?"
        }).join(", ");
        b && (f += " AND (" + j + ") > (" + l + ")");
        c && (f += " AND (" + j + ") < (" + l + ")");
        a && (f += " ORDER BY " + j)
    }
    return"/* " + this._name + " */ " + f
}), _convertRankToSqlTuple:function(a) {
    if(a instanceof List.MultiKeyRank && (a = a.asTuple(), Flags.diagnostics_do_expensive_error_checking)) {
        MochiKit.Base.flattenArray(this._ordering_filters.map(function(a) {
            return a.getRankSQL("", "")
        }));
        for(var b = 0;b < a.length;++b) {
        }
    }
    return a
}, getSQLSubstitutions:function(a, b) {
    return MochiKit.Base.flattenArguments(this._indexed_filters.map(methodcaller("getIndexSQLSubstitutions")), this._unindexed_filters.map(methodcaller("getSQLSubstitutions")), a !== null ? [this._convertRankToSqlTuple(a)] : [], b !== null ? [this._convertRankToSqlTuple(b)] : [])
}, objectSatisfies:function(a) {
    var b = env.datastoreForObjectId(a).readValue(RawDatastoreAddress.typeIdAddress(a));
    if(isUnknown(b)) {
        return!1
    }
    for(b = 0;b < this._all_filters.length;++b) {
        if(!this._all_filters[b].objectSatisfies(a)) {
            return!1
        }
    }
    return!0
}, getRankOf:function(a, b) {
    Flags.diagnostics_do_expensive_error_checking && b.suppressNoSecondaryCacheReadAssertions(function() {
    });
    return this._getRankOf(a)
}, _getRankOf:function(a) {
    var b = this._ordering_filters.map(function(b) {
        return b.getRankOf(a)
    });
    this._has_unique_ranks || b.push(a);
    return List.Rank.concat(b)
}, addressDependencies:function(a) {
    var b = [];
    b.push(RawDatastoreAddress.typeIdAddress(a));
    for(var c = 0;c < this._all_filters.length;++c) {
        b.pushAll(this._all_filters[c].addressDependencies(a))
    }
    return b
}, getReferencedObjectIds:function() {
    for(var a = Set.create(), b = 0;b < this._all_filters.length;++b) {
        this._all_filters[b].addReferencedObjectIds(a)
    }
    return a
}, getPrettyInfo:function() {
    return[this.__type_name + " (" + this._name + ")", this._all_filters]
}, toHash:Memoize.memoizeInThis("Query.toHash", function(a) {
    return this._all_filters.map(function(b) {
        return b.toHash() + (a ? "@" + b.order_priority : "")
    }).sort().join(",")
})}));
__FILE__ = "luna/common/datastore/query_index.js";
Query.QueryIndex = define("QueryIndex", AsanaObject.subclass("QueryIndex", {INDEX_TABLE_PREFIX:"okvstore_index_"}, {_name:SET_IN_CONSTRUCTOR, _keys:SET_IN_CONSTRUCTOR, _key_to_column_map:SET_IN_CONSTRUCTOR, _is_unique:SET_IN_CONSTRUCTOR, _table_name:SET_IN_CONSTRUCTOR, _column_names:SET_IN_CONSTRUCTOR, _key_value_types:SET_IN_CONSTRUCTOR, _object_ids_inserted_in_this_handler:SET_IN_CONSTRUCTOR, constructor:attributedFunc({name:ATTRIBUTE_REQUIRED, object_type:ATTRIBUTE_REQUIRED, keys:ATTRIBUTE_REQUIRED,
    unique:!1}, function(a) {
    Query.QueryIndex.superproto.constructor.call(this);
    var b = this;
    b._object_ids_inserted_in_this_handler = Set.create();
    b._name = a.name;
    b._keys = a.keys;
    b._is_unique = a.unique;
    b._column_names = [];
    b._key_value_types = [];
    b._key_to_column_map = FastMap.create();
    var c = [];
    b._keys.forEach(function(d, e) {
        var f, g = a.object_type.getProperty(d).type;
        b._key_value_types.push(g);
        g === Boolean || g === Integer || g === Timestamp || StateObject.isSuperclassOf(g) ? f = getDatabaseType(Integer) : g === String ? f = getDatabaseType(String) : ufu("Index doesn't support the type for key " + d + "(" + g + ")");
        c.push(f);
        f = f + "_" + (e + 1);
        b._key_to_column_map.put(d, f);
        b._column_names.push(f)
    });
    b._table_name = Query.QueryIndex.INDEX_TABLE_PREFIX + (b._is_unique ? "unique_" : "") + c.join("_")
}), indexId:Memoize.memoizeInThis("indexId", function() {
    return env.type_registry.propertyIdMap().idForName(this._name)
}), _getUpdateSQL:function() {
    var a = this;
    return"/* Update index:" + this._name + " */ UPDATE " + this._table_name + " SET " + a._keys.map(function(b, c) {
        return a._key_to_column_map.get(b) + " = (SELECT value FROM okvstore_" + getDatabaseType(a._key_value_types[c]) + " WHERE object_id = ? AND property_id = " + env.type_registry.propertyIdMap().idForName(b) + ")"
    }).join(", ") + " WHERE index_id = " + a.indexId() + " AND object_id = ?"
}, _getInsertSQL:function() {
    var a = this;
    return"INSERT INTO " + this._table_name + "(index_id, object_id, " + this._column_names.join(", ") + ") SELECT " + a.indexId() + " AS index_id, o1.object_id as object_id, " + a._keys.map(function(b, c) {
        return"o" + (c + 1) + ".value AS " + a._key_to_column_map.get(b)
    }).join(", ") + " FROM " + a._keys.map(function(b, c) {
        return"okvstore_" + getDatabaseType(a._key_value_types[c]) + " AS o" + (c + 1)
    }).join(", ") + " WHERE " + a._keys.map(function(a, c) {
        return"o" + (c + 1) + ".object_id = " + (c === 0 ? "?" : "o1.object_id") + " AND o" + (c + 1) + ".property_id = " + env.type_registry.propertyIdMap().idForName(a)
    }).join(" AND ")
}, _getOrCreateUpdateStatement:Memoize.memoizeInThis("_updateStatement", function(a) {
    return a.createStatement(this._getUpdateSQL())
}), _getOrCreateInsertStatement:Memoize.memoizeInThis("_insertStatement", function(a) {
    return a.createStatement(this._getInsertSQL())
}), afterHandler:function() {
    this._object_ids_inserted_in_this_handler.clear()
}, updateIndex:function(a, b) {
    env.datastore_manager.nonreactiveIsStateObjectNew(b) && !this._object_ids_inserted_in_this_handler.contains(b) ? (this._object_ids_inserted_in_this_handler.add(b), this._getOrCreateInsertStatement(a)._executeUpdate([b])) : this._getOrCreateUpdateStatement(a)._executeUpdate(concat([b], this._column_names.map(function() {
        return b
    })))
}, hasProperty:function(a) {
    return this._key_to_column_map.getOr(a, null) !== null
}, columnForProperty:function(a) {
    return this._key_to_column_map.get(a)
}, tableName:function() {
    return this._table_name
}}));
__FILE__ = "luna/common/access_control/access_control_visibility_rvalue.js";
defineNamespace("AccessControl");
AccessControl.VisibilityRvalue = Rvalue.subclass("AccessControl.VisibilityRvalue", {}, {_user:SET_IN_CONSTRUCTOR, _blacklisted_object_ids_for_user:SET_IN_CONSTRUCTOR, _state_object:SET_IN_CONSTRUCTOR, _state_object_id:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    env.userOrNull() !== null && assertEquals(env.user(), a, "When there is a current user, you can only check that the current user has access to objects because otherwise you will get implicitchecks for the current user while running explicit checks for the other user.");
    AccessControl.VisibilityRvalue.superproto.constructor.call(this);
    this._user = a;
    this._state_object = b;
    this._state_object_id = b.global_id;
    this._blacklisted_object_ids_for_user = env.access_control_blacklist.blacklistForUser(a);
    this._name = "AccessControl.VisibilityRvalue" + (Flags.diagnostics_detailed_rvalue_names ? "[obj=" + b.global_id + "]" : "")
}, computeValue:function() {
    try {
        var a = this._state_object._computeIsVisibleBy(this._user) || this._user.hasSuperuserReadPrivilege() || this._state_object.isNew()
    }catch(b) {
        if(b instanceof ValueIsUnknownError) {
            ufu("UnknownValue thrown while computing an access control visiblility check for object", prettyHint(this._state_object, 0), "We do not tolerate UnknownValues during _computeIsVisibleBy functions because they prevent the black list from being updated properly and also result in sometimes brittle access control checks. You may want to consider calling toValueAllowingUnknown in your access control check if you expected this to happen and handling the resulting exception explitily.", "Exception",
                prettyProof(b.toString()), prettyProof(b.stack))
        }else {
            throw b;
        }
    }
    var c = this.getCachedValue();
    if(c !== a) {
        if(!a || c === !1) {
            env.world_store.markVisibilityRvalueAsInteresting(this), env.session_store.markVisibilityRvalueAsInteresting(this)
        }
        a ? this._blacklisted_object_ids_for_user.remove(this._state_object_id) : this._blacklisted_object_ids_for_user.add(this._state_object_id)
    }
    vlogEnabled("access-control") && vlog("access-control", "AccessControl.VisibilityRvalue recomputed", "_state_object", prettyHint(this._state_object, 0), "is_visible?", a);
    return a
}, onUnused:function() {
    AccessControl.VisibilityRvalue.superproto.onUnused.call(this);
    this._blacklisted_object_ids_for_user.remove(this._state_object_id)
}});
__FILE__ = "luna/common/datastore/datastore_object.js";
StateObject = define("StateObject", AsanaObject.subclass("StateObject", {_subtype_counter:0, _properties:[], _indexes:{}, _backpropagation_edges:[], _backpropagation_edges_processed:null, _backpropagation_edges_processed_ids:null, _MAX_PRESENT_TIMESTAMP_DIVERGENCE_MS:3E4, PropertyChangeResponse:{accept:function() {
    return StateObject.PropertyChangeResponse._ACCEPT
}, reject:function(a) {
    return{accepted:!1, reason:a}
}, amend:function(a, b) {
    return{accepted:!0, new_value:a, reason:b}
}, _ACCEPT:{accepted:!0}}, registry_name:void 0, _addIndexes:function(a, b, c) {
    b && Map.forEach(b, function(b, c) {
        a._indexes[b] = Query.QueryIndex.create({name:b, object_type:a, keys:c.keys, unique:c.unique})
    });
    Map.forEach(c, function(b, c) {
        if(c.indexed) {
            var f = a.__type_name + "." + b;
            a._indexes[f] = Query.QueryIndex.create({name:f, object_type:a, keys:[b], unique:c.unique ? !0 : !1})
        }
    })
}, _addProperties:function(a, b) {
    b = StateObject._propertiesize(b);
    a._properties.pushAll(b);
    for(var c = 0;c < b.length;++c) {
        var d = b[c];
        a["#" + d.key_name] = d;
        d.backpropagates && StateObject._addBackpropagationEdge(d.type, a, d.key_name)
    }
}, getProperty:function(a) {
    return this["#" + a] || null
}, getIndexByName:function(a) {
    return this._indexes[a]
}, getIndexByNameOrNull:function(a) {
    return this._indexes[a] ? this._indexes[a] : null
}, indexes:function() {
    return this._indexes
}, properties:function() {
    return this._properties
}, backpropagationEdges:function(a) {
    if(this === StateObject) {
        return[]
    }
    if(this._backpropagation_edges_processed === null) {
        this._backpropagation_edges_processed = this.superclass.backpropagationEdges(!1).concat(this._backpropagation_edges.map(function(a) {
            return[env.type_registry.getTypeId(a[0]), a[1]]
        }))
    }
    if(a) {
        if(this._backpropagation_edges_processed_ids === null) {
            this._backpropagation_edges_processed_ids = this._backpropagation_edges_processed.map(function(a) {
                return[a[0], env.type_registry.propertyIdMap().idForName(a[1])]
            })
        }
        return this._backpropagation_edges_processed_ids
    }else {
        return this._backpropagation_edges_processed
    }
}, _addBackpropagationEdge:function(a, b, c) {
    a._backpropagation_edges.push([b, c])
}, globalId:function(a) {
    return a.global_id
}, _propertiesize:function(a) {
    if(a instanceof Array) {
        return a
    }
    return Map.mapEntries(a, function(a, c) {
        c.key_name = a;
        return StateObject.Property.create(c)
    })
}, create:function(a) {
    var b = this, c = {};
    b._properties.forEach(function(a) {
        var b = a.key_name;
        b !== StateObject.PropertyName.MODIFIED_AT && StateObject.getProperty(b) === null && (a.type === List ? c[b] = [] : a.default_value !== void 0 ? c[b] = ATTRIBUTE_OPTIONAL : a.type !== PlaceholderType && (c[b] = ATTRIBUTE_REQUIRED))
    });
    return attributedValueFunc(c, function(a) {
        a = Map.objectFromMappedValues(a, toValue);
        return(SessionObject.isSuperclassOf(b) ? env.session_store : env.world_store).createStateObject(b, a)
    })(a)
}, runWithoutWriteAccessControl:function(a) {
    var b = StateObject._is_write_access_control_enabled, c;
    try {
        StateObject._is_write_access_control_enabled = !1, c = a()
    }finally {
        StateObject._is_write_access_control_enabled = b
    }
    return c
}}, {_in_use:!1, _initial_values:null, _blessed_for_write_properties:null, _observed_as_new_rvalue:null, datastore:SET_IN_CONSTRUCTOR, _torn_down:!1, constructor:function() {
    StateObject.superproto.constructor.call(this);
    this._xvalues = {}
}, storeName:function() {
    return"world_store"
}, _onInUse:function() {
    this._in_use = !0;
    env.datastore_manager.nonreactiveIsStateObjectNew(this.global_id) || (this.datastore.isBatching() ? this.datastore._objects_to_register_with_unique_key_manager.push(this) : this.datastore.unique_key_manager.registerObject(this))
}, _onUnused:function() {
    var a = this;
    if(a._in_use) {
        a._in_use = !1, env.is_server && a.getProperties().forEach(function(b) {
            b.preloaded && (b = a.getX(b.key_name), b.isNeededOnClient() || (env.frp.addPossiblyUnusedRvalue(b), b instanceof StateObjectWrappedLvalue && env.frp.addPossiblyUnusedRvalue(b.datastore_lvalue)))
        }), a.datastore.unique_key_manager.unregisterObject(a)
    }
}, inUse:function() {
    return this._in_use
}, _onNeededOnClient:function() {
    var a = this;
    a.datastore === env.world_store && a.getProperties().forEach(function(b) {
        b.preloaded && (b = a.getX(b.key_name), env.world_store.scheduleLvalueForPreloading(b))
    })
}, _onUnneededOnClient:function(a) {
    var b = this;
    if(b.datastore === env.world_store && !b._torn_down) {
        if(a) {
            b._torn_down = !0
        }
        b.getProperties().forEach(function(a) {
            a.preloaded && (a = b.getX(a.key_name), env.world_store.scheduleLvalueForUnpreloading(a))
        })
    }
}, isNeededOnClient:function() {
    return this.typeIdLvalue().isNeededOnClient()
}, onServerCreate:function() {
}, getValueAllowingUnknown:function(a) {
    return toValueAllowingUnknown(this.getX(a))
}, getX:function(a) {
    return this.getXvalue(a)
}, getRvalue:function(a) {
    var b = this.getXvalue(a);
    return b === void 0 ? null : b instanceof Rvalue ? b : ufu("Requested field is a value, not rvalue", a)
}, getXvalue:function(a) {
    var b = this._xvalues;
    if(a in b) {
        return b[a]
    }
    var c;
    c = a === "__properties__" ? this.__type._properties : this._makeXvalue(a);
    return b[a] = c
}, _makeXvalue:function(a) {
    var b = this.getProperty(a);
    b || ufu("StateObject type " + this.__type_name + " does not have property " + a);
    var c = b.type, d = !!b.allow_trashed_values;
    if(c === List) {
        a = DatastoreListLvalue.create(this, a), a.setAllowContainTrashedValues(d)
    }else {
        if(a = DatastoreScalarLvalue.create(this, a, c, IDatastoreAddress.ELEMENT_ID_SCALAR, b.default_value, b.preloaded, b.untimely), StateObject.isSuperclassOf(c) && !DIAGNOSTICS_IGNORE_ACCESS_CONTROL_AND_TRASH) {
            return StateObjectWrappedLvalue.create(a, d)
        }
    }
    return a
}, getV:function(a) {
    a = this.getXvalue(a);
    return a instanceof Rvalue ? a.peek() : a
}, getProperty:function(a) {
    return this.__type["#" + a] || null
}, getPropertyType:function(a) {
    var b = this.getProperty(a);
    b || ufu("StateObject type " + this.__type_name + " does not have property " + a);
    return b.type
}, hasProperty:function(a) {
    return this.getProperty(a) !== null
}, getProperties:function() {
    return this.__type._properties
}, forEachProperty:function(a) {
    var b = this;
    this.getProperties().forEach(function(c) {
        c = c.key_name;
        a(c, b.getXvalue(c))
    })
}, requestSetProperties:function(a) {
    var b = this;
    Map.forEach(a, function(a, d) {
        b.getX(a).requestSet(d)
    })
}, typeIdLvalue:function() {
    return this.getXvalue(StateObject.PropertyName.TYPE_ID)
}, datastoreLvalueForProperty:function(a) {
    for(a = this.getX(a);a instanceof StateObjectWrappedLvalue;) {
        a = a.datastore_lvalue
    }
    return a
}, datastoreLvalueForAddress:function(a) {
    var b = this.datastoreLvalueForProperty(a.property_name);
    return a.isRank() ? b.rankLvalue(a.element_id) : b
}, getAddress:function(a) {
    a = this.getX(a);
    return a instanceof StateObjectWrappedLvalue ? a.datastore_lvalue : a
}, rankLvalue:Memoize.memoizeInThis("rankLvalue", function(a, b) {
    return DatastoreScalarLvalue.create(this, a, IDatastoreAddress.TYPE_RANK, b, void 0, !1, !1)
}), _shouldUseDefaultValueInsteadOfDatastoreValue:function(a) {
    return a instanceof UnknownValue.DoesNotExist
}, isIndexed:function() {
    return!1
}, isTrashed:function() {
    var a = toValueAllowingUnknown(this.getX(StateObject.PropertyName.TRASHED_AT));
    if(isKnown(a)) {
        return a !== 0
    }else {
        if(a instanceof UnknownValue.AccessDenied) {
            return!0
        }else {
            throw new ValueIsUnknownError(a);
        }
    }
}, trashedBy:function() {
    return this.getV(StateObject.PropertyName.TRASHED_BY)
}, trash:function() {
    env.datastore_manager.enactChange(TrashObjectChange.create({object:this}))
}, onBeforeTrashedOnServer:noop, onAfterTrashedOnServer:noop, onBeforeTrashedChangedOnServer:noop, isVisibleBy:function(a) {
    if(DIAGNOSTICS_IGNORE_ACCESS_CONTROL_AND_TRASH) {
        return!0
    }
    if(env.is_server) {
        return $v(this.isVisibleByR(a))
    }
    return!0
}, isVisibleByR:Memoize.memoizeInThis("isVisibleByR", function(a) {
    if(env.is_server) {
        return AccessControl.VisibilityRvalue.create(a, this).setAsSafelyPeekableByAncestor()
    }else {
        ufu("isVisibleByR should not be called on the client with access control enabled")
    }
}), apiModel:function() {
    return null
}, setPropertyBlessed:function(a, b) {
    !env.is_server && !env.isInUnitTest() && ufu("writePropertyBlessed does no blessing on the client and will therefore likely result in an access control exception on the server so it must not be used on the client.");
    if(this._blessed_for_write_properties === null) {
        this._blessed_for_write_properties = Map.create()
    }
    this._blessed_for_write_properties.put(a, b);
    this.getX(a).requestSet(b)
}, _isPropertyBlessedForWrite:function(a) {
    var b = a.property_name;
    return this._blessed_for_write_properties !== null && this._blessed_for_write_properties.containsKey(b) && this._blessed_for_write_properties.get(b) === a.peek()
}, onBeforeCommit:function(a) {
    var b = env.userOrNull();
    env.datastore_manager.nonreactiveIsStateObjectNew(this.global_id) && this.datastore.unique_key_manager.registerObject(this);
    this.validate(a);
    env.is_server && b !== null && !b.hasSuperuserWritePrivilege() && StateObject._is_write_access_control_enabled && !this._computeIsWriteableBy(b, a) && ufuWithOptions({args:["Access control exception", this.getDebugName(), "is not writeable by", b.getDebugName()], name_for_hoptoad_grouping:"Access control exception/" + this._getPrettyInfoHeadline() + "/" + b._getPrettyInfoHeadline()});
    this._shouldLogChangeEvents() && env.change_event_generator.generateEvents(this, a).forEach(function(a) {
        logChangeEvent(a)
    })
}, onAfterCommit:function() {
    if(this._observed_as_new_rvalue !== null) {
        env.frp.addDirtyRvalueIfUsed(this._observed_as_new_rvalue), this._observed_as_new_rvalue = null
    }
    this._initial_values !== null && this._initial_values.clear();
    this._blessed_for_write_properties !== null && this._blessed_for_write_properties.clear();
    env.is_server && this.isIndexed() && env.world_store.queueObjectIdForReindexing(this.global_id)
}, onBeforeChangeProperty:function(a, b) {
    if(this.getProperty(a.property_name).track_initial_value) {
        if(this._initial_values === null) {
            this._initial_values = Map.create()
        }
        var c = a.property_name + ":" + a.element_id;
        !this.isNew() && !this._initial_values.containsKey(c) && (a._isUsed() || env.counters.increment("initial_values.cache_miss"), this._initial_values.put(c, Datastore.valueForDatastoreValue(a.value_type, env.datastoreForObjectId(this.global_id).readValue(a))))
    }
    if(env.is_server && a.property_name === StateObject.PropertyName.TRASHED_AT && !this.isNew()) {
        this.onBeforeTrashedChangedOnServer(b !== 0)
    }
}, onAfterChangeProperty:noop, validatePropertyChange:function(a, b) {
    if(env.is_server && (a.property_name === StateObject.PropertyName.CREATED_AT || a.property_name === StateObject.PropertyName.MODIFIED_AT)) {
        return this._presentTimestampChangeResponse(b)
    }
    return StateObject.PropertyChangeResponse.accept()
}, validate:function() {
}, initialValue:function(a, b) {
    var c = this, d = this.getProperty(a), e;
    e = a + ":" + (b !== void 0 ? b : IDatastoreAddress.ELEMENT_ID_SCALAR);
    var f = function() {
        var d = c.datastoreLvalueForProperty(a);
        d.isList() && (d = d.rankLvalue(b));
        return d.peek()
    };
    e = this._initial_values === null ? f() : this._initial_values.containsKey(e) ? this._initial_values.get(e) : f();
    if(!isKnown(e)) {
        if(f = d.default_value, f !== void 0 && this._shouldUseDefaultValueInsteadOfDatastoreValue(e)) {
            return f
        }else {
            if(d.type === List) {
                return List.RANK_NOT_IN_LIST
            }
        }
    }
    return e
}, _computeIsWriteableBy:function(a, b) {
    var c = this, d = !0;
    b.forEachUntil(function(b) {
        if(c._isPropertyBlessedForWrite(b)) {
            return!0
        }
        var f = c.getProperty(b.property_name);
        if(f.name !== StateObject.PropertyName.TYPE_ID) {
            if(b.element_id === IDatastoreAddress.ELEMENT_ID_SCALAR) {
                d = f.isWriteableBy(c, a, b, void 0)
            }else {
                var g = env.datastoreObjectWithoutAC(b.element_id);
                d = f.isWriteableBy(c, a, b, g)
            }
            if(!d) {
                throw f = c.isNew() ? "new object, has no initial value" : f.track_initial_value ? c.initialValue(b.property_name, b.element_id) : "untracked", log.debug("User " + a.getDebugName() + " does not have write access to '" + b.property_name + "' property of " + c.getDebugName(), "Value", $v(b), "Initial value", f), IIterable.STOP;
            }
        }
    });
    return d
}, _computeIsVisibleBy:ABSTRACT, _areTrashPropertiesWriteableBy:function() {
    return!1
}, isNew:computedProperty("StateObject.isNew", function() {
    var a = env.datastore_manager.nonreactiveIsStateObjectNew(this.global_id);
    if(a) {
        this._observed_as_new_rvalue = EvaluationContext.getTopRvalue()
    }
    return a
}), _presentTimestampChangeResponse:function(a) {
    var b = env.clock.now();
    a -= b;
    return Flags.correct_client_timestamps && Math.abs(a) > StateObject._MAX_PRESENT_TIMESTAMP_DIVERGENCE_MS ? StateObject.PropertyChangeResponse.amend(b, "Timestamp diverges " + a + "ms from present, too much") : StateObject.PropertyChangeResponse.accept()
}, _shouldLogChangeEvents:function() {
    return env.is_server && this.apiModel() !== null && this.apiModel().hasChangeEvents() && Math.random() < Flags.change_event_sample_rate
}, getDebugName:function() {
    return this._getPrettyInfoHeadline() + "#" + this.global_id
}, getPrettyInfo:function() {
    return[this._getPrettyInfoHeadline(), this._getPrettyInfoProperties()]
}, _getPrettyInfoHeadline:function() {
    return this.typeName()
}, typeName:function() {
    return this.__type_name
}, productTypeName:function() {
    return this.__type_name
}, _getPrettyInfoProperties:function() {
    var a = [];
    this.forEachProperty(function(b, c) {
        var d = c instanceof Rvalue ? c.getCachedXvalue() : c;
        a.push({__suppress_prettyprint_id:!0, getPrettyInfo:function() {
            return[b + ":", [prettyHint(d, 0)]]
        }})
    });
    return a
}}));
StateObject.staticConstructor = function(a) {
    a.getProperty = StateObject.getProperty;
    a.getIndexByName = StateObject.getIndexByName;
    a.getIndexByNameOrNull = StateObject.getIndexByNameOrNull;
    a.indexes = StateObject.indexes;
    a.properties = StateObject.properties;
    a.backpropagationEdges = StateObject.backpropagationEdges;
    if(a.create === void 0) {
        a.create = a.superclass.create
    }
    a._backpropagation_edges = [];
    a._backpropagation_edges_processed = null;
    a._backpropagation_edges_processed_ids = null;
    a._properties = [];
    StateObject._addProperties(a, a.superclass._properties);
    a.property_descs !== void 0 && StateObject._addProperties(a, a.property_descs);
    a._indexes = {};
    Map.forEach(a.superclass._indexes, function(b, c) {
        a._indexes[b] = c
    });
    StateObject._addIndexes(a, a.index_descs, a.property_descs);
    if(a.registry_name === void 0) {
        a.registry_name = a.__type_name
    }
    !a.is_abstract && a.registry_name !== null && defineType(a.registry_name, a);
    globals[a.__type_name] = a;
    a._properties.forEach(function(b) {
        var c = b.key_name;
        if(c !== "__type_id") {
            var d = c.camelCase(), b = function(b) {
                return a.prototype[b] === void 0 || a.prototype[b] === ABSTRACT
            };
            b(d) && (a.prototype[d] = function() {
                return this.getV(c)
            });
            b(d + "OrUnknown") && (a.prototype[d + "OrUnknown"] = function() {
                return this.getX(c).peekAllowingUnknown()
            });
            c.startsWith("_") || (b(d + "L") && (a.prototype[d + "L"] = function() {
                return this.getX(c)
            }), d = "set" + c.tokenTitleize(), b(d) && (a.prototype[d] = function(a) {
                return this.getX(c).requestSet(a)
            }))
        }
    });
    a.unique_keys ? a.unique_keys.forEach(function(b) {
        b.forEach(function(b) {
            a.getProperty(b)
        })
    }) : a.unique_keys = [];
    a.unique_keys.pushAll(a.superclass.unique_keys)
};
StateObject._is_write_access_control_enabled = !0;
StateObject.PropertyName = {TYPE_ID:"__type_id", CREATED_AT:"__creation_time", MODIFIED_AT:"__modification_time", TRASHED_BY:"__trashed_by", TRASHED_AT:"__trashed_at"};
StateObject.Property = AsanaObject.subclass("StateObject.Property", {READ_ONLY:function() {
    return!1
}, WRITEABLE_ON_CREATE:function(a) {
    return a.isNew()
}, WRITEABLE_ON_CREATE_WITH_NEW_OBJECT:function(a, b, c) {
    return a.isNew() && ($v(c) === null || $v(c).isNew())
}, WRITEABLE_ON_UPDATE:function(a) {
    return!a.isNew()
}, WRITEABLE_BY_SELF:function(a, b) {
    return a === b
}, WRITEABLE_BY_SELF_OR_ON_CREATE:function(a, b) {
    return a.isNew() || a === b
}, TRASH_PROPERTIES_WRITEABLE:function(a, b) {
    return a.isNew() || a._areTrashPropertiesWriteableBy(b)
}, WRITEABLE:function() {
    return!0
}}, {key_name:SET_IN_CONSTRUCTOR, type:SET_IN_CONSTRUCTOR, registry_name:SET_IN_CONSTRUCTOR, makeXvalue:function() {
    return this.default_value
}, default_value:void 0, preloaded:void 0, untimely:!1, server_only:!1, description:null, isWriteableBy:SET_IN_CONSTRUCTOR, allow_trashed_values:!1, track_initial_value:!1, api_info:null, backpropagates:!1, indexed:!1, unique:!1, constructor:function(a) {
    StateObject.Property.superproto.constructor.call(this);
    a && this.__setFields(Map.toRawObject(a));
    if(this.isWriteableBy === SET_IN_CONSTRUCTOR) {
        this.isWriteableBy = StateObject.Property.WRITEABLE
    }
    if(this.registry_name === SET_IN_CONSTRUCTOR) {
        this.registry_name = this.key_name
    }
}, getPrettyInfo:function() {
    return[[this.key_name, this.type.__type_name].join("/"), []]
}});
StateObject._addProperties(StateObject, {__type_id:{type:Integer}, __creation_time:{type:Timestamp, description:intl("When this item was created")}, __trashed_by:{type:StateObject, isWriteableBy:StateObject.Property.TRASH_PROPERTIES_WRITEABLE}, __trashed_at:{type:Timestamp, isWriteableBy:StateObject.Property.TRASH_PROPERTIES_WRITEABLE, preloaded:!0, api_info:{field_name:"deleted_at"}}});
__FILE__ = "luna/common/change.js";
Change = define("Change", AsanaObject.subclass("Change", [ISerializable], {}, {required_on_server:!0, constructor:function(a) {
    Change.superproto.constructor.call(this);
    updateWithAttributes(this, a);
    this._setConstructionAttributes(a)
}, enact:ABSTRACT, getNewObjectIds:function() {
    return[]
}, taintedObjectIds:ABSTRACT}));
__FILE__ = "luna/common/list.js";
define("List", AsanaObject.subclass("List", [IVector], {}, {_rank_policy:SET_IN_CONSTRUCTOR, _items:SET_IN_CONSTRUCTOR, _element_id_to_rank:SET_IN_CONSTRUCTOR, _modifications:SET_IN_CONSTRUCTOR, _last_removed_modification_id:0, _last_applied_modification_id:0, _next_modification_id:1, _propagate_stop_signal_id:null, _suppress_modifications_reset:!1, constructor:function(a, b) {
    var c = this;
    List.superproto.constructor.call(c);
    c._items = [];
    c._element_id_to_rank = Map.create();
    c._modifications = [];
    c._rank_policy = b || List.POLICY_USE_ALPHABET;
    c._boundClearModifications = function() {
        c._clearModifications()
    };
    a && a.forEach(function(a) {
        c.append(a)
    })
}, _clearModifications:function() {
    this._last_removed_modification_id = this._modifications[this._modifications.length - 1].id;
    this._modifications = [];
    this._disconnectSignal()
}, _connectSignal:function() {
    if(this._propagate_stop_signal_id === null) {
        this._propagate_stop_signal_id = Signal.connect(env.frp, "processHandler_stop", this._boundClearModifications)
    }
}, _disconnectSignal:function() {
    if(this._propagate_stop_signal_id !== null) {
        Signal.disconnect(this._propagate_stop_signal_id), this._propagate_stop_signal_id = null
    }
}, suppressModificationsReset:function(a) {
    (this._suppress_modifications_reset = a) ? this._disconnectSignal() : this._modifications.length > 0 && this._connectSignal()
}, emptyClone:function() {
    return List.create([], this._rank_policy)
}, firstValueOrNull:function() {
    var a = this._itemAtIndexOrNull(0);
    return a === null ? null : $v(a.value)
}, lastValueOrNull:function() {
    return this._items.length > 0 ? this.valueAtIndex(this._items.length - 1) : null
}, valueBeforeValueOrNull:function(a) {
    if(a === null) {
        return this.lastValueOrNull()
    }
    return this.valueBeforeValueOr(a, null)
}, valueBeforeValueOr:function(a, b) {
    var c = this.indexOfValue(a);
    if(c === 0) {
        return b
    }
    return this._items[c - 1].value
}, valueAfterValueOrNull:function(a) {
    if(a === null) {
        return null
    }
    return this.valueAfterValueOr(a, null)
}, valueAfterValueOr:function(a, b) {
    var c = this.indexOfValue(a);
    if(c + 1 === this._items.length) {
        return b
    }
    return this._items[c + 1].value
}, valueAtIndex:function(a) {
    return this._items[a].value
}, indexOfValue:function(a) {
    var b = this._indexOfValueOr(a, -1);
    b === -1 && ufu("Could not find value", a);
    return b
}, rankAtIndex:function(a) {
    return this._items[a].rank
}, valueAtRankOr:function(a, b) {
    var c = this._getIndexForRank(a, void 0);
    if(c === this._items.length) {
        return b
    }
    c = this._items[c];
    if(List.Rank.compare(c.rank, a) !== 0) {
        return b
    }
    return c.value
}, valueBeforeRankOrNull:function(a) {
    var b = this._getIndexForRank(a, void 0);
    if(b === 0) {
        return null
    }
    var c = this._items[b - 1];
    return List.Rank.compare(c.rank, a) === 0 ? b > 1 ? this._items[b - 2].value : null : c.value
}, valueAfterRankOrNull:function(a) {
    var b = this._getIndexForRank(a, void 0);
    if(b === this._items.length) {
        return null
    }
    var c = this._items[b];
    if(List.Rank.compare(c.rank, a) === 0) {
        if(b + 1 === this._items.length) {
            return null
        }
        return this._items[b + 1].value
    }else {
        return c.value
    }
}, rankForValueOrNull:function(a) {
    return this.rankForValueOr(a, null)
}, rankForValueOr:function(a, b) {
    var c = this._indexOfValueOr(a, -1);
    return c === -1 ? b : this._items[c].rank
}, size:function() {
    return this._items.length
}, isEmpty:function() {
    return this._items.length === 0
}, getDataVersion:function() {
    return this._next_modification_id
}, peekValuesArray:function() {
    return this._items.map(function(a) {
        return $v(a.value)
    })
}, findValueOrNull:function(a) {
    var b = null;
    return this.any(function(c) {
        b = toValue(c);
        return a(b)
    }) ? b : null
}, findXvalueWithLowestGlobalId:function() {
    var a = this.firstValueOrNull();
    this.forEach(function(b) {
        a.global_id > b.global_id && (a = b)
    });
    return a
}, forEachValue:function(a) {
    this._items.forEach(function(b) {
        a($v(b.value))
    })
}, forEachValueAndRank:function(a) {
    this._items.forEach(function(b) {
        a($v(b.value), b.rank)
    })
}, insertAtRank:function(a, b) {
    var c = List._elementIdForValue(a), c = {value:a, rank:b, element_id:c};
    this._insertItem(c, "onInserted");
    return c
}, append:function(a) {
    var b = List._elementIdForValue(a), b = this.rankToMoveBeforeValue(null, String(b));
    return this.insertAtRank(a, b)
}, setRankForValue:function(a, b) {
    var c = this._removeAndReturnItem(List._elementIdForValue(a));
    if(c) {
        c.rank = b, this._insertItem(c, "onMoved")
    }
}, rankToMoveBeforeValue:function(a, b) {
    if(a === null) {
        return this._items.length ? List._rank_alphabet.bisectRanksAvoidCollision(this._items[this._items.length - 1].rank, null, b) : List._rank_alphabet.bisectRanksAvoidCollision(null, null, b)
    }else {
        var c = this._getIndexOfElement(List._elementIdForValue(a));
        return List._rank_alphabet.bisectRanksAvoidCollision(c > 0 ? this._items[c - 1].rank : null, this._items[c].rank, b)
    }
}, removeValue:function(a) {
    a = this._removeAndReturnItem(List._elementIdForValue(a));
    this._recordModification("onRemoved", a, [a.value, a.rank])
}, mutateToMatch:function(a) {
    List.diff(this, a, List.Poller.identityCallbacks(this))
}, _itemAtIndexOrNull:function(a) {
    return a < this._items.length ? this._items[a] : null
}, _getIndexOfElementOr:function(a, b) {
    var c = this._element_id_to_rank.getOr(a, null);
    if(c === null) {
        return b
    }
    return this._getIndexForRank(c, a)
}, _getIndexOfElement:function(a) {
    var b = this._getIndexOfElementOr(a, -1);
    b === -1 && ufu("Could not find element", a);
    return b
}, _indexOfValueOr:function(a, b) {
    return this._getIndexOfElementOr(List._elementIdForValue(a), b)
}, _insertItem:function(a, b) {
    var c = a.element_id, d = this._getIndexForRank(a.rank, c), e;
    e = d < this._items.length ? this._items[d] : null;
    this._items.splice(d, 0, a);
    this._element_id_to_rank.put(c, a.rank);
    this._recordModification(b, a, [a.value, a.rank, e === null ? null : e.value, e === null ? null : e.rank])
}, _recordModification:function(a, b, c) {
    this._suppress_modifications_reset || this._connectSignal();
    this._modifications.push({callback_name:a, item:b, args:c, id:this._next_modification_id});
    this._last_applied_modification_id = this._next_modification_id;
    this._next_modification_id++
}, _removeAndReturnItem:function(a) {
    var b = this._getIndexOfElement(a), c = this._items[b];
    this._items.splice(b, 1);
    this._element_id_to_rank.remove(a);
    return c
}, _getIndexForRank:function(a, b) {
    for(var c = 0, d = this._items.length;c !== d;) {
        var e = Math.floor((c + d) / 2), f = this._items[e], g = List.Rank.compare(f.rank, a);
        g === -1 || g === 0 && f.element_id < b ? c = e + 1 : d = e
    }
    return c
}, _isValidRank:function(a) {
    return this._rank_policy === List.POLICY_ANY_RANK ? List.Rank.isValidRank(a) : List._rank_alphabet.isRank(a)
}, _getPrettyInfoProperties:function() {
    return this.toArray()
}, _iterate:function(a, b) {
    var c = this;
    c._items._iterate(function(d, e) {
        a.call(b, d.value, e, c)
    })
}, contains:function(a) {
    return this._indexOfValueOr(a, -1) !== -1
}, _iterateReverse:function(a, b) {
    var c = this;
    c._items._iterateReverse(function(d, e) {
        a.call(b, d.value, e, c)
    })
}, atIndex:function(a) {
    if(!(a >= this._items.length || a < 0)) {
        return this._items[a].value
    }
}, removeAtIndex:function(a) {
    a = this.atIndex(a);
    a !== void 0 && this.removeValue(a);
    return a
}, setAtIndex:function(a, b) {
    if(a === this._items.length) {
        this.append(b)
    }else {
        var c = this.rankAtIndex(a);
        this.removeAtIndex(a);
        this.insertAtRank(b, c)
    }
}}));
List.RankAlphabet = AsanaObject.subclass("List.RankAlphabet", {MIN_COLLISION_INVERSE_FREQUENCY:1E12, charsStartingAt:function(a, b) {
    var c = a.charCodeAt(a);
    return map(function(a) {
        return String.fromCharCode(c + a)
    }, range(b))
}}, {constructor:function(a) {
    List.RankAlphabet.superproto.constructor.call(this);
    a.sort();
    this._ord_to_char = a;
    this._char_to_ord = {};
    this._size = a.length;
    var b = this._char_to_ord;
    a.forEach(function(a, d) {
        b[a] = d
    });
    this._rank_mid_point = this._ord_to_char[a.length / 2];
    this._random_suffix_length = Math.ceil(Math.log(List.RankAlphabet.MIN_COLLISION_INVERSE_FREQUENCY) / Math.log(a.length))
}, _getOrd:function(a) {
    return this._char_to_ord[a]
}, _getZeroPaddedOrd:function(a, b) {
    return b < a.length ? this._getOrd(a[b]) : 0
}, _getChar:function(a) {
    return this._ord_to_char[a]
}, _newRank:function(a, b, c, d) {
    for(a = a.slice(0, b);a.length < b;) {
        a += this._getChar(0)
    }
    return a + this._getChar(Math.floor((c + d) / 2))
}, bisectRanks:function(a, b) {
    if(a === null && b === null) {
        return this._rank_mid_point
    }
    if(b === null) {
        for(var c = 0;c < a.length;c++) {
            var d = this._getOrd(a[c]);
            if(d + 1 < this._size) {
                return a.slice(0, c) + this._getChar(d + 1)
            }
        }
        return a + this._rank_mid_point
    }
    a === null && (a = this._getChar(0));
    if(a === b) {
        return a
    }
    for(var c = !1, d = void 0, e = Math.max(a.length, b.length), f = 0;f <= e;f++) {
        var g = this._getZeroPaddedOrd(a, f), h = this._getZeroPaddedOrd(b, f);
        if(c) {
            if(g !== this._size - 1) {
                d = this._newRank(a, f, g, this._size);
                break
            }else {
                if(h !== 0) {
                    d = this._newRank(b, f, 0, h);
                    break
                }
            }
        }else {
            if(g + 1 === h) {
                c = !0
            }else {
                if(g + 1 < h) {
                    d = this._newRank(a, f, g, h);
                    break
                }
            }
        }
    }
    if(f > e) {
        return a.length > b.length ? a : b
    }
    return d
}, bisectRanksAvoidCollision:function(a, b, c) {
    var d = this.bisectRanks(a, b), a = Crypto.hash([a, b, c].join("~~~~~"), {algorithm:Crypto.Algorithm.MD5, output:Crypto.Format.CUSTOM, output_custom_alphabet:this._ord_to_char.join("")}), a = a.substr(1, this._random_suffix_length);
    a.length < this._random_suffix_length && host.recordWarning("Can't satisfy MIN_COLLISION_INVERSE_FREQUENCY");
    return d + a
}, isRank:function(a) {
    return typeof a === "string"
}});
List.Rank = AsanaObject.subclass("List.Rank", {isValidRank:function(a) {
    return List.Rank.isValidRankPrimitive(a) || a instanceof List.Rank
}, isValidRankPrimitive:function(a) {
    return typeof a === "string" || typeof a === "number" || typeof a === "boolean" || a === null
}, compare:function(a, b) {
    return a === null ? b === null ? 0 : 1 : b === null ? -1 : a instanceof List.Rank ? a.compare(b) : compare(a, b)
}, concat:function(a) {
    return a.length === 1 ? a[0] : List.MultiKeyRank.create(concat.apply([], a.map(function(a) {
        return a instanceof List.MultiKeyRank ? a.asTuple() : [a]
    })))
}, max:function(a, b) {
    return List.Rank.compare(a, b) === 1 ? a : b
}, min:function(a, b) {
    return List.Rank.compare(a, b) === -1 ? a : b
}}, {compare:ABSTRACT});
List.MultiKeyRank = define("List.MultiKeyRank", List.Rank.subclass("List.MultiKeyRank", [ISerializable], {}, {constructor:function(a) {
    List.MultiKeyRank.superproto.constructor.call(this);
    this._keys = a
}, compare:function(a) {
    for(var b = 0;b < this._keys.length;++b) {
        if(b === a._keys.length) {
            return 1
        }
        var c = List.Rank.compare(this._keys[b], a._keys[b]);
        if(c !== 0) {
            return c
        }
    }
    return compare(this._keys.length, a._keys.length)
}, asTuple:function() {
    return this._keys
}, toRawJS:function(a) {
    return this._keys.map(function(b) {
        return a.freeze(b)
    })
}, fromRawJS:function(a, b) {
    this.constructor(a.map(function(a) {
        return b.thaw(a)
    }))
}}));
update(List, {_rank_alphabet:List.RankAlphabet.create(concat(List.RankAlphabet.charsStartingAt("0", 10), List.RankAlphabet.charsStartingAt("A", 26), List.RankAlphabet.charsStartingAt("a", 26))), RANK_NOT_IN_LIST:":removed", RANK_MID_POINT:null, RANK_END_POINT:null, POLICY_USE_ALPHABET:"POLICY_USE_ALPHABET", POLICY_ANY_RANK:"POLICY_ANY_RANK", diff:function(a, b, c) {
    a = isKnown(a) ? a : [];
    b = isKnown(b) ? b : [];
    if(a instanceof Array ? a.length === 0 : a.isEmpty()) {
        Rvalue.forEachValueAndRank(b, function(a, b) {
            c.onInserted.call(null, a, b, null, null)
        })
    }else {
        if(b instanceof Array ? b.length === 0 : b.isEmpty()) {
            var d = [];
            Rvalue.forEachValueAndRank(a, function(a, b) {
                d.push([a, b])
            });
            d.forEach(function(a) {
                c.onRemoved.call(null, a[0], a[1])
            })
        }else {
            var e = function(a) {
                var b = OMap.create();
                Rvalue.forEachValueAndRank(a, function(a, c) {
                    b.put(a, c)
                });
                return b
            }, f = e(a), g = e(b);
            f.forEach(function(a, b) {
                g.containsKey(a) || c.onRemoved.call(null, a, b)
            });
            var h = null, i = null;
            g.forEachReverse(function(a, b) {
                f.containsKey(a) ? f.get(a) !== b && c.onMoved.call(null, a, b, h, i) : c.onInserted.call(null, a, b, h, i);
                h = a;
                i = b
            })
        }
    }
}, _elementIdForValue:function(a) {
    return a instanceof StateObject ? a.global_id : (a = hashKey(a), typeof a === "Number" ? -a : a)
}, rankBeforeGivenRankForAlphabetPolicy:function(a, b) {
    return List._rank_alphabet.bisectRanksAvoidCollision(null, a, b)
}, rankAfterGivenRankForAlphabetPolicy:function(a, b) {
    return List._rank_alphabet.bisectRanksAvoidCollision(a, null, b)
}});
List.RANK_MID_POINT = List._rank_alphabet.bisectRanks(null, null);
List.Poller = AsanaObject.subclass("List.Poller", {identityCallbacks:function(a) {
    return{onInserted:function(b, c) {
        a.insertAtRank(b, c)
    }, onMoved:function(b, c) {
        a.setRankForValue(b, c)
    }, onRemoved:function(b) {
        a.removeValue(b)
    }}
}}, {list_xvalue:SET_IN_CONSTRUCTOR, _callbacks:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    AsanaObject.prototype.constructor.call(this);
    this.list_xvalue = a;
    this._callbacks = b;
    this._last_applied_modification_id = 0;
    this._last_listish = null;
    this._list_items = Set.create()
}, poll:function() {
    var a = this, b = toValueAllowingUnknown(this.list_xvalue), c = b instanceof List;
    if(b !== this._last_listish || c && b._last_removed_modification_id > this._last_applied_modification_id) {
        this._list_items.forEach(function(b) {
            a._callbacks.onRemoved.apply(null, [b.value, b.rank])
        });
        this._list_items = Set.create();
        var d = isUnknown(this._last_listish);
        this._last_listish = b;
        if(isKnown(b)) {
            if(d && a._callbacks.onKnown) {
                a._callbacks.onKnown()
            }
            c ? (b._items.forEach(function(b) {
                a._callbacks.onInserted.call(null, b.value, b.rank, null, null);
                a._list_items.add(b)
            }), this._last_applied_modification_id = b._last_applied_modification_id) : b instanceof Array ? b.forEach(function(b, c) {
                var d = {value:b, rank:c, element_id:List._elementIdForValue(b)};
                a._callbacks.onInserted.call(null, d.value, d.rank, null, null);
                a._list_items.add(d)
            }) : ufu("must be list or array", b)
        }else {
            if(a._callbacks.onUnknown) {
                a._callbacks.onUnknown(b)
            }
            this._last_applied_modification_id = 0
        }
    }else {
        if(isKnown(b) && b instanceof List) {
            b._modifications.forEach(function(b) {
                b.id > a._last_applied_modification_id && (b.callback_name === "onInserted" ? a._list_items.add(b.item) : b.callback_name === "onRemoved" && a._list_items.remove(b.item), a._callbacks[b.callback_name].apply(null, b.args))
            }), this._last_applied_modification_id = b._last_applied_modification_id
        }
    }
}, reset:function() {
    var a = toValue(this.list_xvalue);
    this._list_items = Set.create();
    this._last_listish = a;
    isKnown(a) ? a instanceof List ? (this._list_items.addAll(a._items), this._last_applied_modification_id = a._last_applied_modification_id) : a instanceof Array ? this._list_items.addAll(a) : ufu("must be list or array", a) : this._last_applied_modification_id = 0
}});
(function() {
    var a = List.create();
    a._insertItem = function() {
        ufu("List.EMPTY_LIST is immutable")
    };
    update(List, {EMPTY_LIST:a})
})();
__FILE__ = "luna/common/js_codegen.js";
JSCodeGen = {escape:function(a) {
    var b = a === null ? "null" : typeof a;
    switch(b) {
        case "null":
            ;
        case "undefined":
            ;
        case "number":
            ;
        case "boolean":
            return"" + a;
        case "string":
            return'"' + a.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\f/g, "\\f").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t").replace(/\u0000/g, "\\u0000").replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029").replace(/<\/script>/g, "<\\/script>") + '"';
        default:
            return ufu("JSCodeGen.escape handles only primitives. type is " + b)
    }
}, indent:function(a) {
    return env.getFlag("PRETTY_JS_CODEGEN") ? globals.indent(a) : a
}, quote:function(a) {
    return'"' + a + '"'
}, renderArray:function(a) {
    return"[" + (a.length > 0 ? "\n" : "") + JSCodeGen.indent(a.join(",\n")) + "\n]"
}, renderObject:function(a) {
    for(var b = [], c = 0;c < a.length;++c) {
        b.push('\n"' + a[c][0] + '": ' + a[c][1])
    }
    return"{" + JSCodeGen.indent(b.join(",")) + "\n}"
}};
__FILE__ = "luna/common/lib.js";
arrayize = function(a) {
    return a instanceof Array ? a : [a]
};
update = function(a, b) {
    var a = a || {}, c;
    for(c in b) {
        a[c] = b[c]
    }
    return a
};
updateWithAttributes = function(a, b) {
    for(var c in b) {
        a[c] = b[c]
    }
    for(c in a) {
        a[c] === ATTRIBUTE_REQUIRED && ufu("Key '" + c + "' must be passed", "Was updating object", prettyHint(a, 1))
    }
    return a
};
copyAndUpdate = function(a, b) {
    return update(update({}, a), b)
};
copyWithDefaults = function(a, b) {
    return updateWithDefaults(update({}, a), b)
};
copyWithDefaultsAllowExtras = function(a, b) {
    return updateWithDefaultsAllowExtras(update({}, a), b)
};
safeUpdate = function(a, b) {
    for(var c in b) {
        a[c] = b[c]
    }
    return a
};
updateFromMany = function(a) {
    for(var b = 1;b < arguments.length;b++) {
        update(a, arguments[b])
    }
    return a
};
update(String.prototype, {trimLeft:function() {
    return this.replace(/^\s+/, "")
}, trimRight:function() {
    return this.replace(/\s+$/, "")
}, trim:function() {
    return this.trimLeft().trimRight()
}, isAllWhitespace:function() {
    return this.match(/^\s*$/) ? !0 : !1
}, isInteger:function() {
    return"" + parseInt(this, 10) === "" + this
}, repeat:function(a) {
    for(var b = [], c = 0;c < a;++c) {
        b.push(this)
    }
    return b.join("")
}, startsWith:function(a) {
    return this.substring(0, a.length) === a
}, endsWith:function(a) {
    var b = this.length - a.length;
    return this.substring(b, b + a.length) === a
}, contains:function(a) {
    return this.indexOf(a) !== -1
}, capitalize:function() {
    return this.charAt(0).toUpperCase() + this.substring(1).toLowerCase()
}, titleize:function() {
    return this.split(/[\ \_]/).map(function(a) {
        return a.capitalize()
    }).join(" ")
}, tokenTitleize:function() {
    return this.split(/[\ \_]/).map(function(a) {
        return a.capitalize()
    }).join("")
}, camelCase:function() {
    var a = this.tokenTitleize();
    return a.charAt(0).toLowerCase() + a.substring(1)
}, utf8ByteCount:function() {
    if(globals.system !== void 0) {
        return system.utf8ByteCount(this)
    }else {
        for(var a = 0, b = 0;b < this.length;b++) {
            var c = this.charCodeAt(b);
            a += c < 128 ? 1 : c > 127 && c < 2048 ? 2 : 3
        }
        return a
    }
}});
enumerate = function(a) {
    for(var b = [], c = a.length, d = 0;d < c;++d) {
        b.push({item:a[d], index:d, is_first:d === 0, is_last:d === c - 1})
    }
    return b
};
identity = function(a) {
    return a
};
ufu = function() {
    ufuWithOptions({args:arguments})
};
ufuWithOptions = attributedFunc({suppress_stack_trace:!1, name_for_hoptoad_grouping:null, args:ATTRIBUTE_REQUIRED}, function(a) {
    var b = a.args;
    (!globals.ClientServerProfiler || !ClientServerProfiler.isTestRun()) && breakpoint();
    var c = Error(PrettyPrintUtils.stringify(b));
    c.nameForHoptoadGrouping = function() {
        return a.name_for_hoptoad_grouping !== null ? a.name_for_hoptoad_grouping : typeof b[0] === "string" ? b[0] : "Non-String description in ufu"
    };
    c.suppress_stack_trace = a.suppress_stack_trace;
    throw c;
});
pull = function(a, b) {
    return map(MochiKit.Base.itemgetter(a), b)
};
evalExpr = function(a) {
    try {
        return evalExprFast(a)
    }catch(b) {
        throw log.error(prettyProof("Failed js_code:\n" + a)), b;
    }
};
evalExprOnClient = function(a) {
    return evalExpr(a)
};
evalExprBlessed = evalExpr;
evalExprFast = function(a) {
    return eval("({x:" + a + "})").x
};
trySetProperty = function(a, b, c) {
    try {
        return a[b] = c, !0
    }catch(d) {
        return!1
    }
};
Function.prototype.bind = function(a) {
    return bind(this, a)
};
tempIndex = function(a, b) {
    var c = {};
    b.forEach(function(b) {
        c[b[a]] = b
    });
    return c
};
indent = function(a) {
    return map(function(a) {
        return a.trim() ? "  " + a : ""
    }, a.split("\n")).join("\n")
};
PrettyPrintUtils = {getPrettyInfo:function(a) {
    if(globals.SystemRegistry && SystemRegistry.isRegistered(a)) {
        return["`" + SystemRegistry.getName(a) + "`"]
    }else {
        if(globals.env && env.type_registry.isRegistered(a)) {
            return["Type `" + env.type_registry.getTypeName(a) + "`"]
        }else {
            if(typeof a === "function") {
                var b;
                try {
                    b = a.toString()
                }catch(c) {
                    b = "<un-toStringable function>"
                }
                return[b.replace(/\s+/g, " ").trim().slice(0, 100)]
            }else {
                if(typeof Node !== "undefined" && a instanceof Node) {
                    return b = ["id", "className"].filter(function(b) {
                        return a[b]
                    }).map(function(b) {
                            return b + "=" + a[b]
                        }).join(", "), [a + "[" + b + "]", ["parent:", a.parentNode]]
                }else {
                    if(a instanceof Object) {
                        if("getPrettyInfo" in a) {
                            return a.getPrettyInfo()
                        }else {
                            if(isArrayLike(a)) {
                                return["Array", a]
                            }else {
                                if(a instanceof Pointer) {
                                    return["Pointer", [a.hasAddress() ? a.address() : a.getLvalue()]]
                                }else {
                                    if(a instanceof RegExp) {
                                        return[a.toString()]
                                    }else {
                                        if(typeof a === "object") {
                                            b = a instanceof AsanaObject ? a.__type_name : "Object";
                                            var d = [];
                                            Map.forEach(a, function(b, c) {
                                                a.hasOwnProperty(b) && d.push(PrettyPrintUtils.ObjectEntry.create(b, c))
                                            });
                                            return[b, d]
                                        }else {
                                            return ufu("Well then what the hell is it?")
                                        }
                                    }
                                }
                            }
                        }
                    }else {
                        return typeof a === "object" && a !== null ? ["[Host object]"] : [JSCodeGen.escape(a)]
                    }
                }
            }
        }
    }
}, stringify:function(a) {
    for(var b = [], c = !1, d = 0;d < a.length;d++) {
        var e = prettyPrint(a[d], void 0, 1);
        e.indexOf("\n") !== -1 && (c = !0, e = e.trimRight());
        b.push(e)
    }
    return c ? concat([b[0]], b.slice(1).map(indent)).join("\n") : b.join(" ")
}, ObjectEntry:AsanaObject.subclass("ObjectEntry", {}, {constructor:function(a, b) {
    PrettyPrintUtils.ObjectEntry.superproto.constructor.call(this);
    this.key = a;
    this.value = b
}, getPrettyInfo:function() {
    return[this.key + ": ", [this.value]]
}})};
prettyPrint = function(a, b) {
    var c = Set.create(), d = function(a, f) {
        var g = "";
        if(a !== null && typeof a === "object" && c.contains(a)) {
            g += "[duplicate reference: " + localID(a) + "]"
        }else {
            c.add(a);
            var h = PrettyPrintUtils.getPrettyInfo(a);
            g += h[0];
            var i = b;
            if(a instanceof PrettyHintWrapper) {
                b = f + a.max_traversal_depth, a = a._value
            }
            a && a instanceof Object && a && !(a instanceof PrettyProofWrapper) && !a.__suppress_prettyprint_id && (g += " (" + localID(a) + ")", "global_id" in a && (g += " (global_id=" + a.global_id + ")"));
            if(h = h[1]) {
                if(b === void 0 || f < b) {
                    if(typeof h !== "object" || !("forEach" in h)) {
                        h = ["< bad array>"]
                    }
                    h.forEach(function(a) {
                        g += "\n" + indent(d(a, f + 1))
                    })
                }else {
                    g += " ..."
                }
            }
            b = i
        }
        return g
    };
    return d(a, 0)
};
Random = {MAX_UNSIGNED_INT:Math.pow(2, 32) - 1, integer:attributedFunc({min:0, max:Math.pow(2, 32) - 1, secure:!1}, function(a) {
    var b = a.min, c = a.max, a = a.secure;
    (c > Random.MAX_UNSIGNED_INT || c < 0) && ufu("Invalid bound. Random.integer only gives unsigned 32 bit values.");
    c !== Random.MAX_UNSIGNED_INT && (c += 1);
    return a ? (new (require("openssl").OpenSSL)).secureRandomInt(c - b) + b : Math.floor(Math.random() * (c - b)) + b
}), element:attributedFunc({array:ATTRIBUTE_REQUIRED, secure:!1}, function(a) {
    return a.array[Random.integer({max:a.array.length - 1, secure:a.secure})]
}), string:attributedFunc({alphabet:ATTRIBUTE_REQUIRED, length:ATTRIBUTE_REQUIRED, secure:!1}, function(a) {
    for(var b = a.alphabet, c = "", d = 0;d < a.length;++d) {
        c += b.charAt(Random.integer({max:b.length - 1, secure:a.secure}))
    }
    return c
}), id:attributedFunc({secure:!1}, function(a) {
    a = a.secure;
    return Crypto.hash(Random.integer({secure:a}) + "_" + Random.integer({secure:a}) + "_" + Random.integer({secure:a}) + "_" + Random.integer({secure:a}) + "_", {algorithm:Crypto.Algorithm.MD5, output:Crypto.Format.HEX})
})};
GRANULARITY = Math.pow(2, 30);
isInSample = function(a, b, c) {
    a = Crypto.hash((c || "") + a, {output:Crypto.Format.HEX, algorithm:Crypto.Algorithm.MD5});
    return parseInt(a.substr(0, 8), 16) % GRANULARITY < b * GRANULARITY
};
pseudoShuffle = function(a) {
    var b = Map.create();
    a.forEach(function(a) {
        b.put(a, Crypto.hash("" + a))
    });
    a.sort(function(a, d) {
        return compare(b.get(a), b.get(d))
    });
    return a
};
interpolate = function(a, b, c, d, e) {
    return(a - b) / (c - b) * (e - d) + d
};
shuffle = function(a) {
    for(var b = 0;b < a.length;b++) {
        var c = Random.integer({min:b, max:a.length - 1, secure:!1}), d = a[b];
        a[b] = a[c];
        a[c] = d
    }
    return a
};
makeRegExp = function(a) {
    if(a instanceof RegExp) {
        return a
    }
    return RegExp(a)
};
zeroPadLeft = function(a, b) {
    a = "" + a;
    return"0000000000000000".substring(0, b - a.length) + a
};
newTrackedDeferred = function(a) {
    var b = new Deferred;
    newTrackedDeferred.running_deferreds.add(b);
    var c = b._fire;
    b._fire = function() {
        newTrackedDeferred.running_deferreds.remove(b);
        c.call(b)
    };
    b.name = a;
    return b
};
newTrackedDeferred.running_deferreds = Set.create();
parseDate = function(a) {
    var b = a.match(/(\d{4})-(\d{2})-(\d{2})/), a = parseInt(b[1], 10), c = parseInt(b[2], 10) - 1, b = parseInt(b[3], 10);
    return Date.UTC(a, c, b)
};
range = function(a, b) {
    if(b === void 0) {
        var c = 0, d = a
    }else {
        c = a, d = b
    }
    for(var e = [];c < d;++c) {
        e.push(c)
    }
    return e
};
pluralize = function(a, b) {
    return b === 1 ? [b, a].join(" ") : b + " " + a + "s"
};
grammaticalList = function(a, b, c) {
    c = c === void 0 ? !0 : c;
    if(a.length < 2) {
        return a.join(" " + b + " ")
    }else {
        var d = a.slice(0, a.length - 1).join(", ");
        c && a.length > 2 && (d += ",");
        return d + " " + b + " " + a[a.length - 1]
    }
};
Number.prototype.ordinal = function() {
    return this + this.ordinalSuffix()
};
Number.prototype.ordinalSuffix = function() {
    return this % 10 === 1 && this % 100 !== 11 ? "st" : this % 10 === 2 && this % 100 !== 12 ? "nd" : this % 10 === 3 && this % 100 !== 13 ? "rd" : "th"
};
remainingAvailableStackDepth = function() {
    try {
        return 1 + remainingAvailableStackDepth()
    }catch(a) {
        return 1
    }
};
runBeforeReturning = function(a, b) {
    a instanceof Deferred ? a.addCallback(b) : b();
    return a
};
REVERT_REPLACED_GLOBALS_FUNCTION_STACK = [];
replaceMembers = function(a, b) {
    var c = Set.create(), d = {};
    Map.mapize(b).keys().sort().forEach(function(e) {
        var f = b[e], g = a, h = e.split("."), i = [];
        h.slice(0, -1).forEach(function(a) {
            i.push(a);
            g = g[a]
        });
        g === window && h.top();
        d[e] = g[h.top()];
        g[h.top()] = f;
        c.add(e)
    });
    return d
};
runWithReplacedGlobals = function(a, b) {
    var c = replaceMembers(globals, b), d = function() {
        replaceMembers(globals, c)
    };
    return runWithReplacedGlobals._is_testing_failure ? (delete runWithReplacedGlobals._is_testing_failure, a.call(this)) : (REVERT_REPLACED_GLOBALS_FUNCTION_STACK.push(d), runBeforeReturning(a.call(this), d))
};
revertAllReplacedGlobals = function() {
    for(;REVERT_REPLACED_GLOBALS_FUNCTION_STACK.length > 0;) {
        REVERT_REPLACED_GLOBALS_FUNCTION_STACK.pop()()
    }
};
__FILE__ = "luna/common/datastore/ibatch_readable.js";
IBatchReadable = Interface.create("IBatchReadable", [], {}, {batchReadableAddresses:ABSTRACT, batchReadableQueryRvalues:ABSTRACT});
__FILE__ = "luna/common/datastore/idatastore_address.js";
IDatastoreAddress = Interface.create("IDatastoreAddress", [ISerializable, IBatchReadable], {TYPE_RANK:"rank", TYPE_NAME_RANK:'"rank"', TYPE_LIST:List, TYPE_LIST_ITEM:StateObject, ELEMENT_ID_SCALAR:-1, OBJECT_ID_KV_STORE:-1, SESSION_OBJECT2_ID_PREFIX:"vs_"}, {object_id:ABSTRACT, property_name:ABSTRACT, value_type:ABSTRACT, element_id:ABSTRACT, _serialized_address:ABSTRACT, datastore:function() {
    return env.datastoreForObjectId(this.object_id)
}, serializedAddress:function() {
    return this._serialized_address
}, isSessionObject2:function() {
    return this.datastore() === env.session_store && this.object_id.startsWith(IDatastoreAddress.SESSION_OBJECT2_ID_PREFIX)
}, isProperty:function() {
    return this.value_type !== IDatastoreAddress.TYPE_LIST && this.value_type !== IDatastoreAddress.TYPE_RANK
}, isList:function() {
    return this.value_type === IDatastoreAddress.TYPE_LIST
}, isRank:function() {
    return this.value_type === IDatastoreAddress.TYPE_RANK
}, listAddress:function() {
    return RawDatastoreAddress.listAddress(this.object_id, this.property_name)
}, rankAddress:function(a) {
    return RawDatastoreAddress.rankAddress(this.object_id, this.property_name, a)
}, propertyId:function() {
    return env.type_registry.propertyIdMap().idForName(this.property_name)
}, batchReadableAddresses:function() {
    return this
}, batchReadableQueryRvalues:function() {
    return null
}, toRawJS:function() {
    var a = {object_id:this.object_id, property_name:this.property_name};
    this.isRank() ? (a.type = "item_rank", a.element_id = this.element_id) : (a.type = "property", a.value_type = serializeType(this.value_type));
    return a
}, fromRawJS:function(a) {
    if(a.type === "item_rank") {
        var b = IDatastoreAddress.TYPE_RANK, c = a.element_id
    }else {
        b = deserializeType(a.value_type), c = IDatastoreAddress.ELEMENT_ID_SCALAR
    }
    this.constructor(a.object_id, a.property_name, b, c)
}, typeNameForSerialization:function() {
    return"RawDatastoreAddress"
}, _initDatastoreAddress:function(a) {
    var b = this;
    profileWastedTimeCheaply(function() {
        b._serialized_address = a || "[" + [b.object_id, b.property_name, serializeType(b.value_type), b.element_id].join(",") + "]";
        setLocalID(b, "da_" + b._serialized_address)
    })
}, _assertValueOk:function(a) {
    if(a !== null) {
        var b;
        switch(this.value_type) {
            case Integer:
                ;
            case Timestamp:
                b = "number" === typeof a;
                break;
            case Float:
                b = "number" === typeof a;
                break;
            case Boolean:
                b = "boolean" === typeof a;
                break;
            case String:
                b = "string" === typeof a;
                break;
            case Pointer:
                b = a instanceof Pointer;
                break;
            case IDatastoreAddress.TYPE_RANK:
                b = "string" === typeof a;
                break;
            default:
                b = a instanceof StateObject && this.datastore().isObjectIdOkToReference(a.global_id)
        }
        b || ufu("illegal value for lvalue", "lvalue", this, "value", a)
    }
}});
__FILE__ = "luna/common/datastore/imutating_change.js";
IMutatingChange = Interface.create("IMutatingChange", [], {}, {mutatedAddress:ABSTRACT});
__FILE__ = "luna/common/datastore/datastore_lvalue.js";
DatastoreLvalue = Lvalue.subclass("DatastoreLvalue", [IDatastoreAddress], {}, {datastore_lvalue:SET_IN_CONSTRUCTOR, object:SET_IN_CONSTRUCTOR, object_id:SET_IN_CONSTRUCTOR, property_name:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    DatastoreLvalue.superproto.constructor.call(this);
    this.object = a;
    this.object_id = a.global_id;
    this.property_name = b;
    this.datastore_lvalue = this;
    this.setAsSafelyPeekableByAncestor();
    this._assertOkToExist()
}, value_type:ABSTRACT, element_id:ABSTRACT, datastore:function() {
    return env.datastoreForObjectId(this.object_id)
}, _assertOkToExist:function() {
    Flags.diagnostics_do_expensive_error_checking && this.isSessionObject2()
}});
__FILE__ = "luna/common/datastore/datastore_list_lvalue.js";
define("DatastoreListLvalue", DatastoreLvalue.subclass("DatastoreListLvalue", [], {MIN_RANK_SQL:"select min(binary value) as rank from okvstore_rank where object_id = ? and property_id = ? and value != '" + List.RANK_NOT_IN_LIST + "'", MAX_RANK_SQL:"select max(binary value) as rank from okvstore_rank where object_id = ? and property_id = ? and value != '" + List.RANK_NOT_IN_LIST + "'", getElementId:function(a) {
    return toValue(a).global_id
}, createQuery:function(a) {
    var b = [Query.ListFilter.create([a], 0)];
    a._allow_contain_trashed_values || b.push(Query.ScalarPropertyFilter.create(StateObject.PropertyName.TRASHED_AT, Query.Condition.eq(0)));
    return Query.create(StateObject, b, "DatastoreListLvalue " + a.serializedAddress())
}, MUTATOR_FUNCTION_NAMES:["requestClear", "requestInsertBefore", "requestInsertMultipleBefore", "requestInsertAfter", "requestInsertAtRank", "requestMoveBefore", "requestRemove"], RANK_MAX_LENGTH:128, RANK_RED_LINE:120}, {value_type:SET_IN_CONSTRUCTOR, element_id:SET_IN_CONSTRUCTOR, _query_rvalue:null, _allow_contain_trashed_values:!1, _serialized_address:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    DatastoreListLvalue.superproto.constructor.call(this, a, b);
    this.value_type = IDatastoreAddress.TYPE_LIST;
    this.element_id = IDatastoreAddress.ELEMENT_ID_SCALAR;
    this._initDatastoreAddress();
    this._name = this._serialized_address
}, containsObject:function(a) {
    return this.rankForObject(a) !== List.RANK_NOT_IN_LIST
}, rankForObject:function(a) {
    var b = this.rankLvalue(a.global_id), a = env.frp.runWithoutTrackingUnknowns(function() {
        return toValueAllowingUnknown(b)
    });
    return isKnown(a) ? a : List.RANK_NOT_IN_LIST
}, _getQueryRvalue:function() {
    if(this._query_rvalue === null) {
        var a = QueryRvalue.create(this.datastore(), DatastoreListLvalue.createQuery(this), localID(this) + "_query", List.POLICY_USE_ALPHABET).setAsSafelyPeekableByAncestor();
        env.is_server && (a = AccessControl.WrappedQueryRvalue.create(a).setAsSafelyPeekableByAncestor());
        this._query_rvalue = a
    }
    return this._query_rvalue
}, requestSet:function(a) {
    this.requestClear();
    this.requestInsertMultipleBefore(Rvalue.peekValuesArray(a), null)
}, requestClear:function() {
    var a = this;
    $v(a).forEach(function(b) {
        a.requestRemove(b)
    })
}, requestInsertBefore:function(a, b) {
    this.requestInsertMultipleBefore([a], b)
}, requestInsertMultipleBefore:function(a, b) {
    var c = this;
    if(b) {
        var d = c._getOrLoadList(), e = d.valueBeforeValueOrNull(b.global_id), f = d.rankForValueOrNull(e), g = d.rankForValueOrNull(b.global_id);
        a.forEach(function(a) {
            var b = List._rank_alphabet.bisectRanksAvoidCollision(f, g, String($v(a).global_id));
            f = b;
            return c.requestInsertAtRank(a, b)
        })
    }else {
        a.forEach(function(a) {
            c._assertValueIsInsertable(a);
            a = DatastoreListAppendOrPrependChange.create({list_pointer:Pointer.create(c), element_id:a.global_id, object_type_id:env.type_registry.getTypeId(c.object.__type), append:!0});
            env.datastore_manager.enactChange(a)
        })
    }
}, requestInsertAfter:function(a, b) {
    this._assertValueIsInsertable(a);
    if(null === b) {
        var c = DatastoreListAppendOrPrependChange.create({list_pointer:Pointer.create(this), element_id:a.global_id, object_type_id:env.type_registry.getTypeId(this.object.__type), append:!1});
        env.datastore_manager.enactChange(c)
    }else {
        c = this._getOrLoadList().valueAfterValueOrNull(b.global_id), this.requestInsertAtRank(a, this._getOrLoadList().rankToMoveBeforeValue(c, String(a.global_id)))
    }
}, requestInsertAtRank:function(a, b) {
    this._assertValueIsInsertable(a);
    var c = DatastoreListInsertAtRankChange.create({list_pointer:Pointer.create(this), element_id:a.global_id, object_type_id:env.type_registry.getTypeId(this.object.__type), rank:b});
    env.datastore_manager.enactChange(c)
}, rebalance:function() {
    var a = this._elementIdRankTuplesFromDatabase(), b = Map.create();
    this._rebalance(a, b, 0, a.size() - 1, null, null);
    env.world_store.writeValues(b)
}, _rebalance:function(a, b, c, d, e, f) {
    if(!(c > d)) {
        var g = Math.floor((c + d) / 2), h = List._rank_alphabet.bisectRanks(e, f);
        b.put(RawDatastoreAddress.rankAddress(this.object_id, this.property_name, a[g].element_id), h);
        this._rebalance(a, b, c, g - 1, e, h);
        this._rebalance(a, b, g + 1, d, h, f)
    }
}, _elementIdRankTuplesFromDatabase:function() {
    var a = env.db.createStatement("select element_id, value as rank from okvstore_rank where object_id = ? and property_id = ? and value <> '" + List.RANK_NOT_IN_LIST + "' order by binary rank asc, element_id desc");
    return env.KVStore.query(a, [this.object_id, this.propertyId()])
}, requestMoveBefore:function(a, b) {
    var c = DatastoreListLvalue.getElementId(a), c = DatastoreListSetRankChange.create({list_pointer:Pointer.create(this), element_id:c, object_type_id:env.type_registry.getTypeId(this.object.__type), rank:this._getOrLoadList().rankToMoveBeforeValue(b !== null ? b.global_id : null, String(c))});
    env.datastore_manager.enactChange(c)
}, requestRemove:function(a) {
    a = DatastoreListLvalue.getElementId(a);
    a = DatastoreListRemoveChange.create({list_pointer:Pointer.create(this), element_id:a, object_type_id:env.type_registry.getTypeId(this.object.__type)});
    env.datastore_manager.enactChange(a)
}, prependAndLimitSize:function(a, b) {
    for(this.requestInsertAfter(a, null);$v(this).size() > b;) {
        this.requestRemove($v(this).lastValueOrNull())
    }
}, setAllowContainTrashedValues:function(a) {
    this._allow_contain_trashed_values = a
}, rankLvalue:function(a) {
    this.datastore().assertObjectIdOkToReference(a);
    return this.object.rankLvalue(this.property_name, a)
}, _assertValueIsInsertable:function(a) {
    this.datastore().assertObjectIdOkToReference(a.global_id)
}, _rankLowerBound:function() {
    var a = env.KVStore.queryOne(env.db.createStatement(DatastoreListLvalue.MIN_RANK_SQL), [this.object_id, this.propertyId()]);
    return a === null ? List.RANK_MID_POINT : a.rank
}, _rankUpperBound:function() {
    var a = env.KVStore.queryOne(env.db.createStatement(DatastoreListLvalue.MAX_RANK_SQL), [this.object_id, this.propertyId()]);
    return a === null ? List.RANK_MID_POINT : a.rank
}, computeValue:function() {
    this._assertOkToExist();
    return this._getQueryRvalue()
}, getPrettyInfo:function() {
    return["DatastoreListLvalue", []]
}, batchReadableAddresses:function() {
    return null
}, batchReadableQueryRvalues:function() {
    var a = this._getQueryRvalue();
    return a instanceof AccessControl.WrappedQueryRvalue ? a.getQueryRvalue() : a
}, _getOrLoadList:function() {
    var a = this;
    return host.profiler.timeFuncDetailed("Query._getOrLoadList", function() {
        if(Flags.enable_fast_query_result_sharing && !env.query_manager.hasCompleteQueryResults(a._getQueryRvalue().queryResults())) {
            var b = List.create([], List.POLICY_USE_ALPHABET);
            a.datastore().getAllUsedAddresses().forEach(function(c) {
                if(c.isRank() && c.object_id === a.object_id && c.property_name === a.property_name) {
                    var d = a.datastore().readValue(c), c = c.element_id;
                    isKnown(d) && b.insertAtRank(c, d)
                }
            });
            return b
        }else {
            return a._getQueryRvalue().matchingObjectIds()
        }
    })
}}));
DatastoreListChange = define("DatastoreListChange", Change.subclass("DatastoreListChange", [IMutatingChange], {}, {list_pointer:ATTRIBUTE_REQUIRED, element_id:ATTRIBUTE_REQUIRED, object_type_id:ATTRIBUTE_REQUIRED, _inited:!1, taintedObjectIds:function() {
    this._init();
    return[this.list_pointer.getLvalue().object_id, this.element_id]
}, getNewObjectIds:function() {
    return[]
}, mutatedAddress:function() {
    return this._rankAddress()
}, _init:function() {
    if(!this._inited) {
        this._inited = !0;
        var a = this.list_pointer.address().object_id;
        if(Datastore.isSessionObject2Id(a)) {
            var b = env.type_registry.getTypeFromId(this.object_type_id), a = a.substring(IDatastoreAddress.SESSION_OBJECT2_ID_PREFIX.length);
            env.session_store.sessionObject2(b, a)
        }
    }
}, _rankAddress:function() {
    return this.list_pointer.address().rankAddress(this.element_id)
}, _rankLvalue:function() {
    return this.list_pointer.getLvalue().rankLvalue(this.element_id)
}, _rebalanceIfNecessary:function(a) {
    if(env.is_server && a.length > DatastoreListLvalue.RANK_RED_LINE) {
        var b = this.list_pointer.getLvalue();
        log.info("Rebalancing list", b, "because of rank", a);
        b.rebalance()
    }
}}));
DatastoreListInsertAtRankChange = define("DatastoreListInsertAtRankChange", DatastoreListChange.subclass("DatastoreListInsertAtRankChange", {}, {rank:ATTRIBUTE_REQUIRED, enact:function() {
    this._init();
    this._rankLvalue().requestSet(this.rank);
    this._rebalanceIfNecessary(this.rank)
}}));
DatastoreListAppendOrPrependChange = define("DatastoreListAppendOrPrependChange", DatastoreListChange.subclass("DatastoreListAppendOrPrependChange", {}, {append:ATTRIBUTE_REQUIRED, enact:function() {
    this._init();
    var a = this.list_pointer.getLvalue(), b = this.element_id, c = String(b);
    if(a.isCached() || !env.is_server || a.datastore() === env.session_store) {
        var d = View.runWithoutLvalueChecking(function() {
            return toValueAllowingUnknown(a)
        });
        isUnknown(d) && (d = a._getOrLoadList());
        c = isKnown(d) ? this.append ? d.rankToMoveBeforeValue(null, String(b)) : d.rankToMoveBeforeValue(d.firstValueOrNull(), String(b)) : List.RANK_MID_POINT
    }else {
        this.append ? (b = a._rankUpperBound(), c = List.rankAfterGivenRankForAlphabetPolicy(b, c)) : (b = a._rankLowerBound(), c = List.rankBeforeGivenRankForAlphabetPolicy(b, c)), Flags.diagnostics_do_expensive_error_checking && (d = $v(a))
    }
    Flags.diagnostics_do_expensive_error_checking && d.isEmpty();
    this._rankLvalue().requestSet(c);
    this._rebalanceIfNecessary(c)
}}));
DatastoreListSetRankChange = define("DatastoreListSetRankChange", DatastoreListChange.subclass("DatastoreListSetRankChange", {}, {rank:ATTRIBUTE_REQUIRED, enact:function() {
    this._init();
    this._rankLvalue().requestSet(this.rank);
    this._rebalanceIfNecessary(this.rank)
}}));
define("DatastoreListRemoveChange", DatastoreListChange.subclass("DatastoreListRemoveChange", {}, {enact:function() {
    this._init();
    this._rankLvalue().requestSet(List.RANK_NOT_IN_LIST)
}}));
__FILE__ = "luna/common/computed_lists/computed_list_helper.js";
ComputedListHelper = AsanaObject.subclass("ComputedListHelper", {}, {_list_policy:SET_IN_CONSTRUCTOR, _input_listish_x:SET_IN_CONSTRUCTOR, _onInserted:SET_IN_CONSTRUCTOR, _onMoved:SET_IN_CONSTRUCTOR, _onRemoved:SET_IN_CONSTRUCTOR, output_list:null, _poller:null, _jobs:SET_IN_CONSTRUCTOR, constructor:function(a, b, c, d, e) {
    ComputedListHelper.superproto.constructor.call(this);
    this._list_policy = a;
    this._input_listish_x = b;
    this._onInserted = c;
    this._onMoved = d;
    this._onRemoved = e
}, addRvalueJob:function(a, b, c) {
    this._jobs.push(env.frp.addRvalueJob(a, b, c))
}, getUpdatedList:function() {
    this.output_list = this.output_list || List.create([], this._list_policy);
    this._poller = this._poller || List.Poller.create(this._input_listish_x, {onInserted:this._onInserted, onMoved:this._onMoved, onRemoved:this._onRemoved});
    this._jobs = [];
    this._poller.poll();
    host.job_queue !== null ? host.job_queue.join(this._jobs) : this._jobs.forEach(function(a) {
        a.call(null)
    });
    this._jobs = null;
    toValue(this._input_listish_x);
    return this.output_list
}, onUnused:function() {
    this._poller = this.output_list = null
}});
__FILE__ = "luna/common/computed_lists/filter_rvalue.js";
FilterRvalueDatastoreListMutatorsMixin = {};
DatastoreListLvalue.MUTATOR_FUNCTION_NAMES.forEach(function(a) {
    FilterRvalueDatastoreListMutatorsMixin[a] = function() {
        var b = $L(this._listish_xvalue);
        b[a].apply(b, arguments)
    }
});
FilterRvalue = Rvalue.subclass("FilterRvalue", {create:function(a, b) {
    return FilterRvalue._create(a, b)
}, createWithRvalues:function(a, b) {
    return FilterRvalue._create(a, function(a) {
        return $rval(function() {
            return b(a)
        })
    })
}}, copyAndUpdate(FilterRvalueDatastoreListMutatorsMixin, {_listish_xvalue:SET_IN_CONSTRUCTOR, _func:SET_IN_CONSTRUCTOR, _helper:SET_IN_CONSTRUCTOR, _item_map:null, constructor:function(a, b, c) {
    var d = this;
    FilterRvalue.superproto.constructor.call(this);
    this._func = b;
    this._listish_xvalue = a;
    this._helper = ComputedListHelper.create(c || List.POLICY_ANY_RANK, a, function(a, c) {
        d._setManualInputKey(a);
        var g = FilterRvalue.FilteredItem.create(d._helper.output_list, a, c, b);
        d._helper.addRvalueJob(d, a, function() {
            g.peek()
        });
        d._setManualInputKey(null);
        d._item_map.put(a, g)
    }, function(a, b) {
        d._item_map.get(a).onMoved(b)
    }, function(a) {
        d._item_map.get(a).onRemoved();
        d._item_map.remove(a);
        d._removeManualInputKey(a)
    })
}, onUnused:function() {
    FilterRvalue.superproto.onUnused.call(this);
    this._helper.onUnused();
    this._item_map = null
}, computeValue:function() {
    if(this._item_map === null) {
        this._item_map = FastMap.create()
    }
    return this._helper.getUpdatedList()
}, _addInput:function(a, b) {
    Flags.diagnostics_do_expensive_error_checking && b !== null && !(a instanceof FilterRvalue.FilteredItem) && ufu("FilterRvalue trying to peek an rvalue. You may want to use createWithRvalues, or peek the rvalue and pass it to the non-reactive version of filter. The rvalue you peeked was", a, "Construction stack for current rvalue", Rvalue.getStackPrettyPrintable(a));
    return FilterRvalue.superproto._addInput.call(this, a, b)
}, getLvalue:function() {
    this._listish_xvalue.getLvalue();
    return this
}}));
FilterRvalue.FilteredItem = Rvalue.subclass("FilterRvalue.FilteredItem", {}, {_xvalue:SET_IN_CONSTRUCTOR, _rank:SET_IN_CONSTRUCTOR, _shown:!1, _dead:!1, constructor:function(a, b, c, d) {
    FilterRvalue.FilteredItem.superproto.constructor.call(this);
    this._output_list = a;
    this._xvalue = b;
    this._rank = c;
    this._filter_result_xvalue = d(this._xvalue)
}, computeValue:function() {
    if(this._dead) {
        return!1
    }
    var a = toValueAllowingUnknown(this._filter_result_xvalue), a = isKnown(a) && !!a;
    if(a !== this._shown) {
        a ? this._output_list.insertAtRank(this._xvalue, this._rank) : this._output_list.removeValue(this._xvalue), this._shown = a
    }
    return this._shown
}, onMoved:function(a) {
    this._rank = a;
    this._shown && this._output_list.setRankForValue(this._xvalue, this._rank)
}, onRemoved:function() {
    if(this._shown) {
        this._output_list.removeValue(this._xvalue), this._shown = !1
    }
    this._dead = !0
}});
__FILE__ = "luna/common/access_control/access_control_wrapped_query_rvalue.js";
defineNamespace("AccessControl");
AccessControl.WrappedQueryRvalue = FilterRvalue.subclass("AccessControl.WrappedQueryRvalue", {create:function(a) {
    return DIAGNOSTICS_IGNORE_ACCESS_CONTROL_AND_TRASH ? a : AccessControl.WrappedQueryRvalue._create(a)
}}, {_query_rvalue:SET_IN_CONSTRUCTOR, constructor:function(a) {
    this._query_rvalue = a;
    AccessControl.WrappedQueryRvalue.superproto.constructor.call(this, a, function(a) {
        var c = env.userOrNull();
        return c !== null ? a.isVisibleByR(c) : !0
    }, a.getRankPolicy())
}, getQueryRvalue:function() {
    return this._query_rvalue
}, matchingObjectIds:function() {
    return this._query_rvalue.matchingObjectIds()
}, getIdentifier:function() {
    return"AccessControl.WrappedQueryRvalue <" + this._query_rvalue.getIdentifier() + ">"
}});
__FILE__ = "luna/common/datastore/idatastore_observer.js";
IDatastoreObserver = Interface.create("IDatastoreObserver", [], {}, {onDatastoreValueChanged:ABSTRACT, onDatastoreValueCached:ABSTRACT, onDatastoreValueUncached:ABSTRACT, onDatastoreValueInvalidated:ABSTRACT});
__FILE__ = "luna/common/datastore/object_property_index.js";
ObjectPropertyIndex = AsanaObject.subclass("ObjectPropertyIndex", {}, {_list_address_to_element_ids_map:SET_IN_CONSTRUCTOR, _scalar_property_values_map_map:SET_IN_CONSTRUCTOR, _list_property_values_map:SET_IN_CONSTRUCTOR, _address_to_values_map:SET_IN_CONSTRUCTOR, constructor:function() {
    ObjectPropertyIndex.superproto.constructor.call(this);
    this.clear()
}, clear:function() {
    this._list_address_to_element_ids_map = MultiMap.create();
    this._scalar_property_values_map_map = Map.create();
    this._list_property_values_map = ArrayKeyedMultiMap.create();
    this._address_to_values_map = Map.create()
}, putValue:function(a, b) {
    a.isRank() ? b !== List.RANK_NOT_IN_LIST && !isUnknown(b) ? (this._list_address_to_element_ids_map.add(a.listAddress(), a.element_id), this._list_property_values_map.add([a.property_name, a.element_id], a.object_id)) : this.removeValue(a) : a.isProperty() && (this.removeValue(a), this._getOrMakeScalarPropertyValuesMap(a.property_name).add(b, a.object_id), this._address_to_values_map.put(a, b))
}, removeValue:function(a) {
    if(a.isRank()) {
        this._list_address_to_element_ids_map.remove(a.listAddress(), a.element_id), this._list_property_values_map.remove([a.property_name, a.element_id], a.object_id)
    }else {
        if(a.isProperty()) {
            var b = this._address_to_values_map.getOr(a, null);
            b !== null && (this._getOrMakeScalarPropertyValuesMap(a.property_name).remove(b, a.object_id), this._address_to_values_map.remove(a))
        }
    }
}, _getOrMakeScalarPropertyValuesMap:function(a) {
    var b = this._scalar_property_values_map_map.getOr(a, null);
    b === null && (b = MultiMap.create(), this._scalar_property_values_map_map.put(a, b));
    return b
}, _getObjectIdsForScalarPropertyValue:function(a, b, c) {
    a = this._scalar_property_values_map_map.getOr(a, null);
    if(a === null) {
        return ImmutableSet.empty_set
    }
    if(c instanceof Query.ValueCondition && c._sql_operator === "=") {
        return a.get(c._reference_value)
    }else {
        var d = Set.create();
        a.forEach(function(a, f) {
            c.propertyValueSatisfies(b, a) && f.forEach(function(a) {
                d.add(a)
            })
        });
        return d
    }
}, _getObjectIdsForListPropertyValue:function(a, b) {
    Datastore.assertIsPlausibleObjectId(b);
    return this._list_property_values_map.get([a, b])
}});
__FILE__ = "luna/common/datastore/query_results.js";
QueryResults = AsanaObject.subclass("QueryResults", {}, {_query:SET_IN_CONSTRUCTOR, _fetched_initial_results:!1, _initial_object_ids:SET_IN_CONSTRUCTOR, _changed_object_ids:SET_IN_CONSTRUCTOR, _result_list:SET_IN_CONSTRUCTOR, _datastore:SET_IN_CONSTRUCTOR, _query_rvalue:SET_IN_CONSTRUCTOR, _last_seen_rank_limit:null, _cached_hash:null, constructor:function(a, b, c, d) {
    QueryResults.superproto.constructor.call(this);
    this._query = b;
    this._query_rvalue = a;
    this._datastore = c;
    this._result_list = List.create([], d);
    this._initial_object_ids = Set.create([]);
    this._changed_object_ids = Set.create([]);
    env.query_manager.registerQueryResults(this)
}, getName:function() {
    return this._query.getName()
}, getSQL:function() {
    return this._query.getSQL(!1, !1, this._last_seen_rank_limit !== null)
}, getSqlSubstitutions:function() {
    return this._query.getSQLSubstitutions(null, this._last_seen_rank_limit)
}, getMemcacheKey:function() {
    return this._query.getMemcacheKey()
}, objectSatisfies:function(a) {
    return this._objectTypeDoesNotMatchQuery(a) ? !1 : this._query.objectSatisfies(a)
}, queryIndex:function(a) {
    Flags.enable_fast_query_result_sharing && !env.is_server && ufu("Not supposed to call queryIndex on the client");
    return this._query.queryIndex(a)
}, hash:function() {
    return this._cached_hash
}, getReferencedObjectIds:function() {
    return this._query.getReferencedObjectIds()
}, addressDependencies:function(a) {
    return this._query.addressDependencies(a)
}, onNewlyConfirmed:function() {
    env.frp.addDirtyRvalueIfUsed(this._query_rvalue)
}, unregister:function() {
    env.query_manager.unregisterQueryResults(this);
    this._datastore.markQueryResultsUnused(this)
}, generateSubscriptionTopics:function() {
    return this._query.generateSubscriptionTopics()
}, isNeededOnClient:function() {
    return this._query_rvalue.isNeededOnClient()
}, mustRunQuery:function() {
    return!this._fetched_initial_results
}, hasIsInListFilter:function(a) {
    return this._query.hasIsInListFilter(a)
}, considerInitialResults:function(a) {
    this._initial_object_ids.addAll(a);
    this._fetched_initial_results = !0;
    env.frp.addDirtyRvalueIfUsed(this._query_rvalue)
}, considerChangedObjectId:function(a) {
    this._objectTypeDoesNotMatchQuery(a) || (this._changed_object_ids.add(a), env.frp.addDirtyRvalueIfUsed(this._query_rvalue))
}, updateAndReturnObjectIdsList:function(a) {
    var b = this;
    if(env.is_server && this._query._server_matching_object_r !== null) {
        return $v(this._query._server_matching_object_r)
    }
    var c = List.Rank.compare(b._last_seen_rank_limit, a) !== 0;
    if(c || this._cached_hash === null) {
        var d = this._cached_hash;
        this._updateHash(a);
        env.query_manager.updateQueryResultsHash(this, d)
    }
    this._last_seen_rank_limit = a;
    Rvalue.runWithinAssertNoPeeks(function() {
        if(!b._fetched_initial_results || c) {
            b._fetched_initial_results = !1, b._initial_object_ids = Set.create([]), b._changed_object_ids.clear(), b._datastore.runQuery(b)
        }
        b._processObjectIds()
    });
    return b._result_list
}, cachedObjectIdsList:function() {
    return this._result_list
}, _objectTypeDoesNotMatchQuery:function(a) {
    a = env.datastoreForObjectId(a).readValue(RawDatastoreAddress.typeIdAddress(a));
    return isKnown(a) && !this._query.objectType().isSuperclassOf(env.type_registry.getTypeFromId(a))
}, _updateHash:function(a) {
    var b = a !== null, a = a instanceof List.MultiKeyRank ? Serializer.serialize(a) : a;
    this._cached_hash = this._query.toHash(b) + ";" + a
}, _processObjectId:function(a, b) {
    var c = b || this._query.objectSatisfies(a) ? this._query.getRankOf(a, this._datastore) : List.RANK_NOT_IN_LIST;
    if(this._last_seen_rank_limit !== null && c !== List.RANK_NOT_IN_LIST && List.Rank.compare(c, this._last_seen_rank_limit) !== -1) {
        c = List.RANK_NOT_IN_LIST
    }
    var d = this._result_list.rankForValueOr(a, List.RANK_NOT_IN_LIST);
    c === List.RANK_NOT_IN_LIST ? d !== List.RANK_NOT_IN_LIST && (this._result_list.removeValue(a), Flags.diagnostics_verbose_query_manager && log.info("Candidate object " + a + " removed")) : d === List.RANK_NOT_IN_LIST ? (this._result_list.insertAtRank(a, c), Flags.diagnostics_verbose_query_manager && log.info("Candidate object " + a + " added")) : List.Rank.compare(c, d) !== 0 && (this._result_list.setRankForValue(a, c), Flags.diagnostics_verbose_query_manager && log.info("Candidate object " + a +
        " moved"))
}, _processObjectIds:function() {
    var a = this;
    host.profiler.timeFuncDetailed("QueryResults._processObjectIds", function() {
        var b;
        b = !1;
        if(a._initial_object_ids !== null) {
            if(a._result_list.size() > 0) {
                var c = Set.create([]);
                a._result_list.forEach(function(b) {
                    a._initial_object_ids.contains(b) || c.add(b)
                });
                c.forEach(function(b) {
                    a._result_list.removeValue(b)
                })
            }
            a._initial_object_ids.forEach(function(c) {
                Flags.diagnostics_verbose_query_manager && !b && (console.groupCollapsed("Processing " + a._initial_object_ids.size() + " initial objects for query " + a.hash()), b = !0);
                a._processObjectId(c, !0)
            });
            a._initial_object_ids = null
        }
        b = !1;
        var d = [];
        a._changed_object_ids.forEach(function(c) {
            var f = function() {
                Flags.diagnostics_verbose_query_manager && !b && (console.groupCollapsed("Processing " + a._changed_object_ids.size() + " candidate objects for query " + a.hash()), b = !0);
                a._processObjectId(c, !1)
            };
            host.job_queue === null ? f() : d.push(host.job_queue.addJob("QueryResults._processObjectId", f))
        });
        host.job_queue !== null && host.job_queue.join(d);
        a._changed_object_ids.clear();
        Flags.diagnostics_verbose_query_manager && b && console.groupEnd()
    })
}});
__FILE__ = "luna/common/datastore/query_rvalue.js";
QueryRvalue = Rvalue.subclass("QueryRvalue", [IBatchReadable], {}, {_query:SET_IN_CONSTRUCTOR, _query_results:null, _rank_policy:SET_IN_CONSTRUCTOR, _datastore:SET_IN_CONSTRUCTOR, _computed_list_helper:null, _rank_limit_x:SET_IN_CONSTRUCTOR, constructor:function(a, b, c, d, e) {
    QueryRvalue.superproto.constructor.call(this);
    this._query = b;
    this._datastore = a;
    this.setName(c);
    this._rank_policy = d || List.POLICY_ANY_RANK;
    this._rank_limit_x = e || null
}, getRankPolicy:function() {
    return this._rank_policy
}, getQuery:function() {
    return this._query
}, computeValue:function() {
    var a = this, b;
    host.profiler.timeFuncDetailed("Query.computeValue", function() {
        b = a.matchingObjectIds();
        var c = env.is_server || Flags.diagnostics_check_handler_lvalues;
        if(a._computed_list_helper === null) {
            a._computed_list_helper = ComputedListHelper.create(a._rank_policy, b, function(b, e) {
                c && (a._removeManualInputKey(b), a._setManualInputKey(b), a._addDependencies(b), a._setManualInputKey(null));
                a._computed_list_helper.output_list.insertAtRank(env.datastoreObjectNoPeekWithoutAC(b), e)
            }, function(b, c) {
                a._computed_list_helper.output_list.setRankForValue(env.datastoreObjectNoPeekWithoutAC(b), c)
            }, function(b) {
                c && a._removeManualInputKey(b);
                a._computed_list_helper.output_list.removeValue(env.datastoreObjectNoPeekWithoutAC(b))
            })
        }
        a._computed_list_helper.getUpdatedList()
    });
    return env.query_manager.hasCompleteQueryResults(a.queryResults()) ? (DIAGNOSTICS_LOG_COMPUTED_QUERIES && isKnown(b) && log.debug("Query computed as known", a._query_results.hash()), a._computed_list_helper !== null && a._computed_list_helper.output_list.suppressModificationsReset(!1), a._computed_list_helper.output_list) : (DIAGNOSTICS_LOG_COMPUTED_QUERIES && log.debug("Query computed as UNKNOWN because of incomplete results", a._query.toHash()), a._computed_list_helper !== null && a._computed_list_helper.output_list.suppressModificationsReset(!0),
        UnknownValue.Loading.create(a, null))
}, onUnused:function() {
    QueryRvalue.superproto.onUnused.call(this);
    if(this._query_results !== null) {
        this._query_results.unregister(), this._query_results = null
    }
    if(this._computed_list_helper !== null) {
        this._computed_list_helper.onUnused(), this._computed_list_helper = null
    }
}, matchingObjectIds:function() {
    var a = $v(this._rank_limit_x);
    return this.queryResults().updateAndReturnObjectIdsList(a)
}, queryResults:function() {
    if(this._query_results === null) {
        this._query_results = QueryResults.create(this, this._query, this._datastore, this._rank_policy)
    }
    return this._query_results
}, datastore:function() {
    return this._datastore
}, _addDependencies:function(a) {
    var b = this;
    env.frp.runWithoutTrackingUnknowns(function() {
        b._lvalueDependencies(a).forEach(function(a) {
            a.peekAllowingUnknown()
        })
    })
}, _lvalueDependencies:function(a) {
    var b = [], c = function(a) {
        typeof a === "function" ? a().forEach(c) : b.push(a.datastore().lvalueForAddress(a))
    };
    this._query.addressDependencies(a).forEach(c);
    return b
}, batchReadableAddresses:function() {
    return null
}, batchReadableQueryRvalues:function() {
    return this._query._server_matching_object_r === null ? this : null
}});
__FILE__ = "luna/common/datastore/raw_datastore_address.js";
RawDatastoreAddress = define("RawDatastoreAddress", AsanaObject.subclass("RawDatastoreAddress", [IDatastoreAddress], {fromAddress:function(a) {
    return a instanceof RawDatastoreAddress ? a : RawDatastoreAddress.create(a.object_id, a.property_name, a.value_type, a.element_id, a._serialized_address)
}, createFromSerializedAddress:function(a) {
    var b = a.split(/[\[\]\,]/), c = parseInt(b[1], 10), d = b[2], e = deserializeType(b[3]), b = parseInt(b[4], 10);
    return RawDatastoreAddress.create(c, d, e, b, a)
}, propertyAddress:function(a, b, c) {
    return this.create(a, b, c, IDatastoreAddress.ELEMENT_ID_SCALAR)
}, rankAddress:function(a, b, c) {
    return this.create(a, b, IDatastoreAddress.TYPE_RANK, c)
}, listAddress:function(a, b) {
    return this.create(a, b, IDatastoreAddress.TYPE_LIST, IDatastoreAddress.ELEMENT_ID_SCALAR)
}, typeIdAddress:function(a) {
    return this.propertyAddress(a, StateObject.PropertyName.TYPE_ID, Integer)
}, trashedAtAddress:function(a) {
    return this.propertyAddress(a, StateObject.PropertyName.TRASHED_AT, Timestamp)
}}, {object_id:SET_IN_CONSTRUCTOR, property_name:SET_IN_CONSTRUCTOR, value_type:SET_IN_CONSTRUCTOR, element_id:SET_IN_CONSTRUCTOR, _serialized_address:SET_IN_CONSTRUCTOR, constructor:function(a, b, c, d, e) {
    RawDatastoreAddress.superproto.constructor.call(this);
    this.object_id = a;
    this.property_name = b;
    this.value_type = c;
    this.element_id = d;
    this._initDatastoreAddress(e)
}, getPrettyInfo:function() {
    return["RawDatastoreAddress"]
}}));
__FILE__ = "luna/common/datastore/type_id_or_unknown_rvalue.js";
TypeIdOrUnknownRvalue = Rvalue.subclass("TypeIdOrUnknownRvalue", [IBatchReadable, IDatastoreObserver], {}, {_datastore:SET_IN_CONSTRUCTOR, _type_id_address:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    TypeIdOrUnknownRvalue.superproto.constructor.call(this);
    this._datastore = a;
    this._type_id_address = RawDatastoreAddress.typeIdAddress(b);
    this.setAsSafelyPeekableByAncestor()
}, _onPeeked:function(a, b, c) {
    env.datastore_address_observer.subscribeToAddress(this._type_id_address, this);
    TypeIdOrUnknownRvalue.superproto._onPeeked.call(this, a, b, c)
}, onUnused:function() {
    env.datastore_address_observer.unsubscribeFromAddress(this._type_id_address, this);
    return TypeIdOrUnknownRvalue.superproto.onUnused.call(this)
}, computeValue:function() {
    return this._datastore.readValue(this._type_id_address)
}, onDatastoreValueChanged:function() {
    env.frp.addDirtyRvalueIfUsed(this)
}, onDatastoreValueCached:function() {
}, onDatastoreValueUncached:function() {
    env.frp.addDirtyRvalueIfUsed(this)
}, onDatastoreValueInvalidated:noop, batchReadableAddresses:function() {
    return this._type_id_address
}, batchReadableQueryRvalues:function() {
    return null
}});
__FILE__ = "luna/common/datastore/state_object_or_unknown_rvalue.js";
StateObjectOrUnknownRvalue = Rvalue.subclass("StateObjectOrUnknownRvalue", [IBatchReadable], {}, {_datastore:SET_IN_CONSTRUCTOR, _type_id_or_unknown_r:SET_IN_CONSTRUCTOR, _type_id_address:SET_IN_CONSTRUCTOR, _trashed_at_address:SET_IN_CONSTRUCTOR, _allow_trashed:SET_IN_CONSTRUCTOR, constructor:function(a, b, c) {
    StateObjectOrUnknownRvalue.superproto.constructor.call(this);
    this._datastore = a;
    this._type_id_or_unknown_r = this._datastore.typeIdOrUnknownR(b);
    this._type_id_address = RawDatastoreAddress.typeIdAddress(b);
    this._trashed_at_address = RawDatastoreAddress.trashedAtAddress(b);
    this._allow_trashed = c || !1;
    this.setAsSafelyPeekableByAncestor()
}, computeValue:function() {
    var a = this._type_id_address.object_id;
    this._allow_trashed || this._datastore.readValues([this._type_id_address, this._trashed_at_address]);
    var b = toValueAllowingUnknown(this._type_id_or_unknown_r);
    if(isKnown(b)) {
        a = this._datastore.object(a);
        if(a instanceof UnknownValue.AccessDenied) {
            return a
        }
        if(this._allow_trashed) {
            return a
        }
        var c = a.datastoreLvalueForProperty(StateObject.PropertyName.TRASHED_AT).peekAllowingUnknown();
        return c === 0 ? a : isKnown(c) ? UnknownValue.DoesNotExist.create(b, null) : c
    }else {
        return b
    }
}, batchReadableAddresses:function() {
    return this._allow_trashed ? this._type_id_address : [this._type_id_address, this._trashed_at_address]
}, batchReadableQueryRvalues:function() {
    return null
}});
__FILE__ = "luna/common/new_serialize.js";
Serializer = AsanaObject.subclass("Serializer", {Source:{REFERENCE:"R", SYSTEM_REGISTRY:"SR", TYPE_REGISTRY:"TR", STATE_OBJECT:"SO", POJO:"PJ", CUSTOM:"C"}, Key:{SOURCE:"S", ID:"I", CLASS_NAME:"C", DATA:"D", REFERENCE_ID:"R"}, serialize:function(a) {
    var b = Serializer.create();
    return JSON.stringify(b.freeze(a))
}, serializeToEvalable:function(a) {
    a = Serializer.serialize(a);
    a = a.replace(/(scr)(ipt)/ig, '$1"+"$2').replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
    return"(function() {return Deserializer.create().thaw(" + a + ");})()"
}}, {_added_objects:SET_IN_CONSTRUCTOR, _reference_counter:0, constructor:function() {
    Serializer.superproto.constructor.call(this);
    this._added_objects = Map.create()
}, freeze:function(a) {
    try {
        if(a instanceof Object) {
            if(this._added_objects.containsKey(a)) {
                var b = this._added_objects.get(a);
                b[Serializer.Key.REFERENCE_ID] === void 0 && (b[Serializer.Key.REFERENCE_ID] = this._reference_counter++);
                var c = {};
                c[Serializer.Key.SOURCE] = Serializer.Source.REFERENCE;
                c[Serializer.Key.ID] = b[Serializer.Key.REFERENCE_ID]
            }else {
                SystemRegistry.isRegistered(a) ? (c = {}, c[Serializer.Key.SOURCE] = Serializer.Source.SYSTEM_REGISTRY, c[Serializer.Key.ID] = SystemRegistry.getName(a)) : a instanceof StateObject ? (c = {}, c[Serializer.Key.SOURCE] = Serializer.Source.STATE_OBJECT, c[Serializer.Key.ID] = a.global_id) : a instanceof AsanaObject || Interface.instanceImplements(a, ISerializable) ? (c = {}, this._added_objects.put(a, c), c[Serializer.Key.SOURCE] = Serializer.Source.CUSTOM, c[Serializer.Key.CLASS_NAME] = a.typeNameForSerialization(),
                    c[Serializer.Key.DATA] = a.toRawJS(this)) : (c = {}, c[Serializer.Key.SOURCE] = Serializer.Source.POJO, c[Serializer.Key.DATA] = this.pojoToRawJS(a))
            }
            return c
        }else {
            return a
        }
    }catch(d) {
        throw log.error("exception while trying to serialize value", prettyHint(a, 0)), d;
    }
}, pojoToRawJS:function(a) {
    var b = {}, c;
    for(c in a) {
        c !== "__localid" && (b[c] = this.freeze(a[c]))
    }
    return b
}});
Deserializer = AsanaObject.subclass("Deserializer", {deserialize:function(a, b) {
    var c = Deserializer.create(b);
    try {
        var d = JSON.parse(a)
    }catch(e) {
        a === "" ? ufu("Error when attempting to deserialize the empty string.", e) : ufu("Error when deserializing", a, e)
    }
    return c.thaw(d)
}}, {_added_objects:SET_IN_CONSTRUCTOR, treat_missing_datastore_objects_as_unknown:!1, constructor:function(a) {
    Deserializer.superproto.constructor.call(this);
    this._added_objects = FastMap.create();
    a && updateWithAttributes(this, a)
}, thaw:function(a) {
    if(a instanceof Object) {
        switch(a[Serializer.Key.SOURCE]) {
            case Serializer.Source.REFERENCE:
                return this._added_objects.containsKey(a[Serializer.Key.ID]) || ufu("object #" + a[Serializer.Key.ID] + " hasn't been reconstructed yet.  You are probably deserializing in a different order than you serialized."), this._added_objects.get(a[Serializer.Key.ID]);
            case Serializer.Source.SYSTEM_REGISTRY:
                return SystemRegistry.get(a[Serializer.Key.ID]);
            case Serializer.Source.TYPE_REGISTRY:
                return env.type_registry.getType(a[Serializer.Key.ID]);
            case Serializer.Source.STATE_OBJECT:
                return a = a[Serializer.Key.ID], this.treat_missing_datastore_objects_as_unknown ? env.datastoreForObjectId(a).objectOrUnknownWithoutAC(a) : env.datastoreForObjectId(a).objectWithoutAC(a);
            case Serializer.Source.CUSTOM:
                var b = new (SystemRegistry.get(a[Serializer.Key.CLASS_NAME]));
                a[Serializer.Key.REFERENCE_ID] !== void 0 && this._added_objects.put(a[Serializer.Key.REFERENCE_ID], b);
                b.fromRawJS(a[Serializer.Key.DATA], this);
                return b;
            case Serializer.Source.POJO:
                return this.pojoFromRawJS(a[Serializer.Key.DATA]);
            default:
                ufu("Unknown source: " + a[Serializer.Key.SOURCE])
        }
    }else {
        return a
    }
}, pojoFromRawJS:function(a) {
    var b = {}, c;
    for(c in a) {
        b[c] = this.thaw(a[c])
    }
    return b
}});
__FILE__ = "luna/common/serialize.js";
serializeToEvalable = Serializer.serializeToEvalable;
serializeType = function(a) {
    return a === IDatastoreAddress.TYPE_RANK ? IDatastoreAddress.TYPE_NAME_RANK : StateObject.isSuperclassOf(a) && a !== StateObject ? env.type_registry.getTypeName(a) : SystemRegistry.getName(a)
};
deserializeType = function(a) {
    return a === IDatastoreAddress.TYPE_NAME_RANK ? IDatastoreAddress.TYPE_RANK : SystemRegistry.has(a) ? SystemRegistry.get(a) : env.type_registry.getType(a)
};
__FILE__ = "luna/common/datastore/datastore_cache.js";
DatastoreCache = AsanaObject.subclass("DatastoreCache", {}, {datastore:null, readValues:ABSTRACT, cacheValues:ABSTRACT, getQueriesResults:ABSTRACT, cacheQueriesResults:ABSTRACT, writeValues:ABSTRACT, startTransaction:ABSTRACT, onBeforeCommit:ABSTRACT, commit:ABSTRACT, rollback:ABSTRACT, removeValues:ABSTRACT});
__FILE__ = "luna/common/datastore/datastore_cache_memory.js";
DatastoreCacheMemory = DatastoreCache.subclass("DatastoreCacheMemory", {VALUE_NOT_CACHED:makeUniqueValue("VALUE_NOT_CACHED")}, {_store:SET_IN_CONSTRUCTOR, _property_index:SET_IN_CONSTRUCTOR, constructor:function(a) {
    DatastoreCacheMemory.superproto.constructor.call(this);
    this._property_index = a ? ObjectPropertyIndex.create() : null;
    this.clear()
}, clear:function() {
    this._store = Map.create()
}, forEachValue:function(a) {
    this._store.forEach(a)
}, isValueCached:function(a) {
    return this._store.containsKey(a)
}, dump:function() {
    this._store.forEach(function(a, b) {
        log.debug(a, " (" + typeof a + "): ", b)
    })
}, datastoreValueMap:function() {
    return this._store.clone()
}, readValues:function(a) {
    var b = this, c = Map.create();
    a.forEach(function(a) {
        b._store.containsKey(a) && c.put(a, b._store.get(a))
    });
    return c
}, cacheValues:function(a) {
    var b = this;
    a.forEach(function(a, d) {
        b.datastore.assertKey(a);
        b._store.put(RawDatastoreAddress.fromAddress(a), d);
        b._property_index !== null && b._property_index.putValue(a, d)
    })
}, readValue:function(a, b) {
    var c = this._store.getOr(a, void 0);
    return c === void 0 ? b === void 0 ? UnknownValue.Loading.create(a, null) : b : c
}, getQueriesResults:function(a) {
    var b = this, c = Map.create();
    b._property_index !== null && a.forEach(function(a) {
        c.put(a, a.queryIndex(b.datastore))
    });
    return c
}, cacheQueriesResults:noop, writeValues:function(a) {
    this.cacheValues(a)
}, startTransaction:noop, onBeforeCommit:noop, commit:noop, rollback:noop, removeValues:function(a) {
    var b = this;
    a.forEach(function(a) {
        b._store.remove(a);
        b._property_index !== null && b._property_index.removeValue(a)
    })
}});
__FILE__ = "luna/common/access_control.js";
defineNamespace("AccessControl");
update(AccessControl, {isVisibleOnlyToUser:function(a) {
    return function(b) {
        var c = this.getX(a).peekAllowingUnknown();
        return isKnown(c) && b === c
    }
}, isWriteableOnlyByUser:function(a) {
    return function(b, c) {
        var d = b.getX(a).peekAllowingUnknown();
        return isKnown(d) && c === d
    }
}, isWriteableOnlyIfNewOrByUser:function(a) {
    return function(b, c) {
        if(b.isNew()) {
            return!0
        }
        var d = b.getX(a).peekAllowingUnknown();
        return isKnown(d) && equals(c, d)
    }
}});
__FILE__ = "luna/common/datastore/datastore_scalar_lvalue.js";
DatastoreScalarLvalue = define("DatastoreScalarLvalue", DatastoreLvalue.subclass("DatastoreScalarLvalue", {}, {requestSet:function(a) {
    var b = this;
    b._assertValueOk(a);
    if(!env.is_server) {
        var c = Datastore.valueForDatastoreValue(b.value_type, b.datastore().readValue(b));
        if(equals(c, a)) {
            return
        }
    }
    var d;
    d = b.property_name === StateObject.PropertyName.TYPE_ID ? TypeIdValueChange : UserActionContext.get().isRecording() ? MaybeUndoableSetValueChange : DatastoreScalarSetValueChange;
    c = function() {
        env.datastore_manager.enactChange(d.create({address:b, new_value:a}))
    };
    b.untimely ? env.datastore_manager.runUntimelyFunc(c) : c()
}, recentlyChangedNotReactive:function() {
    if(!env.datastore_manager._recently_changed_l_values) {
        return!1
    }
    return env.datastore_manager._recently_changed_l_values.contains(this.datastore_lvalue)
}, recentlyReceivedNotReactive:function() {
    if(!env.datastore_manager._recently_received_l_values) {
        return!1
    }
    return env.datastore_manager._recently_received_l_values.contains(this.datastore_lvalue)
}, recentlyLocallyChangedNotReactive:function() {
    if(!env.datastore_manager._recently_locally_changed_l_values) {
        return!1
    }
    return env.datastore_manager._recently_locally_changed_l_values.contains(this.datastore_lvalue)
}, value_type:SET_IN_CONSTRUCTOR, element_id:SET_IN_CONSTRUCTOR, server_only:SET_IN_CONSTRUCTOR, _default_value_or_func:SET_IN_CONSTRUCTOR, _serialized_address:SET_IN_CONSTRUCTOR, preloaded:SET_IN_CONSTRUCTOR, untimely:SET_IN_CONSTRUCTOR, constructor:function(a, b, c, d, e, f, g) {
    DatastoreScalarLvalue.superproto.constructor.call(this, a, b);
    this.value_type = c;
    this.element_id = d;
    this._initDatastoreAddress();
    this._name = this._serialized_address;
    this._default_value_or_func = e;
    this.preloaded = f;
    this.server_only = a.getProperty(b).server_only;
    this.untimely = g;
    this._setAsExemptFromPeekConsistencyChecks()
}, newSetValueUndoableChange:function(a, b) {
    this._assertValueOk(b);
    var c;
    switch(this.value_type) {
        case Integer:
            ;
        case Timestamp:
            c = IntValueUndoableChange;
            break;
        case Float:
            c = FloatValueUndoableChange;
            break;
        case Boolean:
            c = BooleanValueUndoableChange;
            break;
        case String:
            c = TextValueUndoableChange;
            break;
        case IDatastoreAddress.TYPE_RANK:
            c = TextValueUndoableChange;
            break;
        case Pointer:
            ufu("Pointer? I barely know her!\nNo, really, I didn't expect to be undoing pointer changes.");
            break;
        default:
            c = StateObjectValueUndoableChange
    }
    return this.datastore().createStateObject(c, {pointer:Pointer.create(this), old_value:a, new_value:b})
}, computeValue:function() {
    var a = this;
    this._assertOkToExist();
    env.counters.increment("datastore.num_dslvalues_computed");
    Flags.diagnostics_log_computed_dslvalues && log.info(prettyProof("  " + prettyPrint(this, 0)));
    var b = a.datastore();
    a.getCachedValue() === void 0 && b.markAddressUsed(a);
    var c = b.readValue(a);
    a._getState().datastore_value = c;
    env.is_server && b._addresses_changed_this_request.add(a);
    if(a._default_value_or_func !== void 0 && a.object._shouldUseDefaultValueInsteadOfDatastoreValue(c)) {
        if(!isA(a._default_value_or_func, Function)) {
            return a._default_value_or_func
        }
        c = $rval(function() {
            return a._default_value_or_func.call(a.object)
        }).peekAllowingUnknownWithoutDependencies();
        isUnknown(c) || (b = Datastore.datastoreValueForValue(a.value_type, c), a.object.datastore.writeBack(a, b));
        return c
    }
    if(isUnknown(c)) {
        return c
    }
    if(StateObject.isSuperclassOf(a.value_type) && c !== Datastore.OBJECT_ID_NULL) {
        var b = RawDatastoreAddress.typeIdAddress(c), d = RawDatastoreAddress.trashedAtAddress(c), e = b.datastore(), d = e.readValues([b, d]).get(b);
        return isKnown(d) ? e.objectWithoutAC(c) : (toValueAllowingUnknown(e.typeIdOrUnknownR(c)), d.__type.create(b, null))
    }
    a.property_name === StateObject.PropertyName.TYPE_ID && isKnown(c) && !a.object.inUse() && a.object._onInUse();
    return Datastore.valueForDatastoreValue(a.value_type, c)
}, onUnused:function() {
    var a = this, b = a.datastore();
    profileClientWastedTimeCheaply(function() {
        b.markAddressUnused(a)
    });
    env.is_server && b._addresses_changed_this_request.add(a);
    a.property_name === StateObject.PropertyName.TYPE_ID && isKnown(this.getCachedValue()) && a.object._onUnused();
    return DatastoreScalarLvalue.superproto.onUnused.call(a)
}, _isUsed:function(a) {
    return this.preloaded && env.is_server && this.object.inUse() ? !0 : DatastoreScalarLvalue.superproto._isUsed.call(this, a)
}, _onBecameDirty:function(a) {
    env.is_server && this.preloaded && this.object.isNeededOnClient() && !StateObject.isSuperclassOf(this.value_type) && this.datastore().scheduleLvalueForPreloading(this);
    DatastoreScalarLvalue.superproto._onBecameDirty.call(this, a)
}, _onNeededOnClientChanged:function(a) {
    DatastoreScalarLvalue.superproto._onNeededOnClientChanged.call(this, a);
    a && this.server_only && ufu("property should never be needed on the client", this);
    env.is_server && this.property_name === StateObject.PropertyName.TYPE_ID && (a ? this.object._onNeededOnClient() : this.object._onUnneededOnClient());
    this.datastore()._addresses_changed_this_request.add(this)
}, onDatastoreValueChanged:function(a, b, c) {
    Datastore.areDatastoreValuesEqual(this._getState().datastore_value, c) || env.frp.addDirtyRvalueIfUsed(this)
}, onDatastoreValueUncached:function() {
    this.isCached() && env.frp.addDirtyRvalueIfUsed(this)
}, getPrettyInfo:function() {
    return["DatastoreScalarLvalue", [this.getCachedXvalue()]]
}}));
DatastoreScalarSetValueChange = define("DatastoreScalarSetValueChange", Change.subclass("DatastoreScalarSetValueChange", [IMutatingChange], {}, {address:ATTRIBUTE_REQUIRED, new_value:ATTRIBUTE_REQUIRED, enact:function() {
    env.datastoreForObjectId(this.address.object_id).writeValues(Map.create([[this.address, Datastore.datastoreValueForValue(this.address.value_type, this.new_value)]]))
}, getNewObjectIds:function() {
    return[]
}, taintedObjectIds:function() {
    var a = Set.create();
    Interface.instanceImplements(this.address, IDatastoreAddress) && (a.add(this.address.object_id), this.address.isRank() ? ufu("rank lvalues should not be set by top-level changes") : this.new_value instanceof StateObject && a.add(this.new_value.global_id));
    return a.values()
}, mutatedAddress:function() {
    return this.address
}, mutatedValue:function() {
    return this.new_value
}, amendMutatedValue:function(a) {
    this.new_value = a
}}));
define("TypeIdValueChange", DatastoreScalarSetValueChange.subclass("TypeIdValueChange", {}, {getNewObjectIds:function() {
    return[this.address.object_id]
}}));
define("MaybeUndoableSetValueChange", DatastoreScalarSetValueChange.subclass("MaybeUndoableSetValueChange", {}, {enact:function() {
    var a = this.address, b = this.new_value, c = a.datastore(), d = !1, e;
    if(UserActionContext.get().isRecording() && c !== env.session_store) {
        e = Datastore.valueForDatastoreValue(a.value_type, c.readValue(a));
        if(equals(b, e)) {
            return
        }
        if(a.value_type === IDatastoreAddress.TYPE_RANK && isUnknown(e)) {
            e = List.RANK_NOT_IN_LIST
        }
        d = isKnown(e)
    }
    d && env.is_server ? UserActionContext.get().addChange(c.lvalueForAddress(a).newSetValueUndoableChange(e, b)) : MaybeUndoableSetValueChange.superproto.enact.call(this)
}}));
__FILE__ = "luna/common/datastore/datastore_unique_key_manager.js";
DatastoreUniqueKeyManager = AsanaObject.subclass("DatastoreUniqueKeyManager", {}, {_unique_key_to_objects:SET_IN_CONSTRUCTOR, constructor:function() {
    DatastoreUniqueKeyManager.superproto.constructor.call(this);
    this._unique_key_to_objects = ArrayKeyedMap.create()
}, registerObject:function(a) {
    for(var b = a.__type.unique_keys, c = 0;c < b.length;c++) {
        this._unique_key_to_objects.put(this._keyFromDatastoreObjectAndPropertyNames(a, b[c]), a)
    }
}, unregisterObject:function(a) {
    for(var b = a.__type.unique_keys, c = 0;c < b.length;c++) {
        this._unique_key_to_objects.checkedRemove(this._keyFromDatastoreObjectAndPropertyNames(a, b[c]))
    }
}, objectByUniqueKeyOrNull:function(a, b) {
    var c = env.userOrNull(), d = this.objectByUniqueKeyOrNullWithoutAC(a, b);
    return d === null || c === null || d.isVisibleBy(c) ? d : UnknownValue.AccessDenied.create(d.typeIdLvalue(), null)
}, objectByUniqueKeyOrNullWithoutAC:function(a, b) {
    var c = EvaluationContext.getTopRvalue();
    c && c._setAsExemptFromPeekConsistencyChecks();
    return this._unique_key_to_objects.getOr(this._keyFromTypeAndKeyValueObj(a, b), null)
}, _keyFromDatastoreObjectAndPropertyNames:function(a, b) {
    var c = [a.__type], d = [];
    d.pushAll(b);
    d.sort();
    c.pushAll(d);
    d.forEach(function(b) {
        c.push(a.datastore.readValue(a.datastoreLvalueForProperty(b)))
    });
    return c
}, _keyFromTypeAndKeyValueObj:function(a, b) {
    var c = [a], d = [], e;
    for(e in b) {
        d.push(e)
    }
    d.sort();
    c.pushAll(d);
    d.forEach(function(d) {
        c.push(Datastore.datastoreValueForValue(a.getProperty(d).type, b[d]))
    });
    return c
}});
__FILE__ = "luna/common/datastore/query_condition.js";
Query.Condition = AsanaObject.subclass("Query.Condition", {exists:Memoize.memoizeFew("Query.Condition.exists", function() {
    return Query.ExistsCondition.create()
}), eq:function(a) {
    return Query.ValueCondition.create(typeof a === "string" ? "= binary" : "=", a, function(a, c) {
        return equals(a, c)
    })
}, ieq:function(a) {
    return Query.ValueCondition.create("= ", a, function(a, c) {
        return equals(a.toLowerCase(), c.toLowerCase())
    })
}, ne:function(a) {
    return Query.ValueCondition.create("!=", a, function(a, c) {
        return!equals(a, c)
    })
}, gt:function(a) {
    return Query.ValueCondition.create(">", a, function(a, c) {
        return a > c
    })
}, lt:function(a) {
    return Query.ValueCondition.create("<", a, function(a, c) {
        return a < c
    })
}, ge:function(a) {
    return Query.ValueCondition.create(">=", a, function(a, c) {
        return a >= c
    })
}, le:function(a) {
    return Query.ValueCondition.create("<=", a, function(a, c) {
        return a <= c
    })
}, or:function(a) {
    return Query.MultiValueCondition.create(a)
}}, {attachType:ABSTRACT, propertyValueSatisfies:ABSTRACT, getSQL:ABSTRACT, appendSQLSubstitutions:ABSTRACT, addReferencedObjectIds:ABSTRACT, toShortString:ABSTRACT, toHash:ABSTRACT, supportsIndex:function() {
    return!1
}, getIndexSQL:function() {
    ufu("condition doesn't support custom indexes")
}, getIndexSQLSubstitutions:function() {
    ufu("condition doesn't support custom indexes")
}, getPrettyInfo:function() {
    return[this.__type_name + " " + this.toShortString(), []]
}});
__FILE__ = "luna/common/datastore/query_exists_condition.js";
Query.ExistsCondition = Query.Condition.subclass("Query.ExistsCondition", {}, {propertyValueSatisfies:function(a, b) {
    if(isUnknown(b)) {
        return!1
    }
    return b !== void 0
}, attachType:function() {
}, getSQL:function() {
    return null
}, appendSQLSubstitutions:function() {
}, addReferencedObjectIds:function(a, b) {
    return b
}, toShortString:function() {
    return"exists"
}, toHash:function() {
    return"E"
}});
__FILE__ = "luna/common/datastore/query_value_condition.js";
Query.ValueCondition = Query.Condition.subclass("Query.ValueCondition", {}, {_sql_operator:SET_IN_CONSTRUCTOR, _reference_value:SET_IN_CONSTRUCTOR, _compare:SET_IN_CONSTRUCTOR, constructor:function(a, b, c) {
    Query.ValueCondition.superproto.constructor.call(this);
    this._sql_operator = a;
    this._reference_value = b;
    this._compare = c
}, attachType:function(a) {
    this._reference_value = Datastore.datastoreValueForValue(a, this._reference_value)
}, propertyValueSatisfies:function(a, b) {
    if(isUnknown(b)) {
        return!1
    }
    if(b === void 0 || b === null) {
        return!1
    }
    return this._compare(b, this._reference_value)
}, getSQL:function(a, b) {
    if(b === Pointer) {
        ufu("filtering on pointers is not supported")
    }else {
        return a + ".value " + this._sql_operator + " ?"
    }
}, getIndexSQL:function(a) {
    return a + " " + this._sql_operator + " ?"
}, getIndexSQLSubstitutions:function() {
    return[this._reference_value]
}, supportsIndex:function() {
    return!0
}, appendSQLSubstitutions:function(a) {
    a.push(this._reference_value)
}, addReferencedObjectIds:function(a, b) {
    this._sql_operator === "=" && StateObject.isSuperclassOf(a) && this._reference_value !== Datastore.OBJECT_ID_NULL && b.add(this._reference_value);
    return b
}, toShortString:function() {
    return this._sql_operator + " " + this._reference_value
}, toHash:function() {
    var a = [];
    this.appendSQLSubstitutions(a);
    return[this._sql_operator, ",", a.join(",")].join("")
}});
__FILE__ = "luna/common/datastore/query_multi_value_condition.js";
Query.MultiValueCondition = Query.Condition.subclass("Query.MultiValueCondition", {}, {_conditions:SET_IN_CONSTRUCTOR, constructor:function(a) {
    Flags.diagnostics_do_expensive_error_checking && a.forEach(function() {
    });
    Query.ValueCondition.superproto.constructor.call(this);
    this._conditions = a
}, attachType:function(a) {
    this._conditions.forEach(function(b) {
        b.attachType(a)
    })
}, propertyValueSatisfies:function(a, b) {
    if(isUnknown(b)) {
        return!1
    }
    for(var c = 0;c < this._conditions.length;c++) {
        if(this._conditions[c].propertyValueSatisfies(a, b)) {
            return!0
        }
    }
    return!1
}, getSQL:function(a, b) {
    return"(" + this._conditions.map(methodcaller("getSQL", a, b)).join(" or ") + ")"
}, getIndexSQL:function(a) {
    return"(" + this._conditions.map(methodcaller("getIndexSQL", a)).join(" or ") + ")"
}, getIndexSQLSubstitutions:function() {
    return this._conditions.map(methodcaller("getIndexSQLSubstitutions"))
}, supportsIndex:function() {
    return!0
}, appendSQLSubstitutions:function(a) {
    this._conditions.forEach(function(b) {
        b.appendSQLSubstitutions(a)
    })
}, addReferencedObjectIds:function(a, b) {
    this._conditions.forEach(function(c) {
        c.addReferencedObjectIds(a, b)
    });
    return b
}, toShortString:function() {
    return this._conditions.map(methodcaller("toShortString")).join(" or ")
}, toHash:function() {
    return this._conditions.map(methodcaller("toHash")).join(" or ")
}});
__FILE__ = "luna/common/datastore/query_filter.js";
Query.Filter = AsanaObject.subclass("Query.Filter", {DOES_NOT_ORDER:-1}, {order_priority:SET_IN_CONSTRUCTOR, constructor:function(a) {
    Query.Filter.superproto.constructor.call(this);
    this.order_priority = a !== void 0 ? a : Query.Filter.DOES_NOT_ORDER
}, attach:function() {
}, getMatchingObjectIds:ABSTRACT, objectSatisfies:function(a) {
    var b = this;
    env.datastoreForObjectId(a).readValue(RawDatastoreAddress.typeIdAddress(a));
    var c = [], d = [], e = function(a) {
        typeof a === "function" ? a().forEach(e) : b instanceof Query.AbstractListFilter || (a.datastore() === env.world_store ? c.push(a) : d.push(a))
    };
    this.addressDependencies(a).forEach(e);
    var f = !1, g = function(a, b) {
        f || a.readValues(b).forEachUntil(function(a, b) {
            if(isUnknown(b)) {
                throw f = !0, IIterable.STOP;
            }
        })
    };
    g(env.world_store, c);
    g(env.session_store, d);
    return!f && this._objectSatisfies(a)
}, orders:function() {
    return this.order_priority >= 0
}, getPrettyInfo:function() {
    return[this.toHash()]
}, _objectSatisfies:ABSTRACT, providesUniqueRanks:ABSTRACT, getSQLObjectIDColumnName:function() {
    return"object_id"
}, addReferencedObjectIds:ABSTRACT, toHash:ABSTRACT, subscriptionTopics:ABSTRACT, tableSuffixes:ABSTRACT, getSQL:ABSTRACT, getRankSQL:function() {
    ufu("Not implemented")
}, getIndexSQL:function() {
    ufu("this filter doesn't support indexed queries")
}, getSQLSubstitutions:ABSTRACT, getRankOf:ABSTRACT, addressDependencies:ABSTRACT});
__FILE__ = "luna/common/datastore/query_abstract_list_filter.js";
Query.AbstractListFilter = Query.Filter.subclass("AbstractListFilter", {}, {_list_addresses:SET_IN_CONSTRUCTOR, _min_rank:SET_IN_CONSTRUCTOR, _max_rank:SET_IN_CONSTRUCTOR, constructor:function(a, b, c, d) {
    Query.AbstractListFilter.superproto.constructor.call(this, b);
    a.forEach(function() {
    });
    this._list_addresses = a;
    this._min_rank = c || null;
    this._max_rank = d || null
}, _getRankOf:function(a) {
    for(var b = null, c = 0;c < this._list_addresses.length;c++) {
        if(b = this._list_addresses[c].rankAddress(a), b = Datastore.valueForDatastoreValue(b.value_type, b.datastore().readValue(b)), isKnown(b)) {
            if(b !== List.RANK_NOT_IN_LIST) {
                break
            }
        }else {
            b = List.RANK_NOT_IN_LIST
        }
    }
    return b
}, _listAddressesAreCompatibleWithObjectId:function(a) {
    return this._list_addresses.all(function(b) {
        return!(env.datastoreForObjectId(b.object_id) === env.world_store && env.datastoreForObjectId(a) !== env.world_store)
    })
}, addressDependencies:function(a) {
    return this._list_addresses.map(methodcaller("rankAddress", a))
}, getSQLSubstitutions:function() {
    var a = this, b = [];
    a._list_addresses.forEach(function(c) {
        b.push(c.object_id);
        b.push(c.propertyId());
        a._min_rank !== null && b.push(a._min_rank);
        a._max_rank !== null && b.push(a._max_rank)
    });
    return b
}, _getListConditionsSql:function(a) {
    var b = this, c = this._list_addresses.map(function() {
        var c = a + "object_id = ? and " + a + "property_id = ? and " + a + "value != '" + List.RANK_NOT_IN_LIST + "'";
        b._min_rank !== null && (c += " and " + a + " value >= ?");
        b._max_rank !== null && (c += " and " + a + " value <= ?");
        return c
    });
    return c.length === 1 ? c[0] : "((" + c.join(") OR (") + "))"
}, addReferencedObjectIds:function(a) {
    this._list_addresses.forEach(function(b) {
        a.add(b.object_id)
    });
    return a
}, toHash:function() {
    var a = [this.__type_name, this._list_addresses.map(methodcaller("serializedAddress")).join(",")];
    this._min_rank !== null && a.push("min:" + this._min_rank);
    this._max_rank !== null && a.push("max:" + this._max_rank);
    return a.join(",")
}});
__FILE__ = "luna/common/datastore/query_list_filter.js";
Query.ListFilter = Query.AbstractListFilter.subclass("ListFilter", {}, {constructor:function(a, b, c, d) {
    Query.ListFilter.superproto.constructor.call(this, a, b, c, d)
}, getMatchingObjectIds:function(a) {
    var b = this, c = Set.create();
    this._list_addresses.forEach(function(d) {
        a._list_address_to_element_ids_map.get(d).forEach(function(a) {
            b._min_rank !== null && b.getRankOf(a) < b._min_rank || b._max_rank !== null && b.getRankOf(a) > b._max_rank || c.add(a)
        })
    });
    return c
}, _objectSatisfies:function(a) {
    a = this._getRankOf(a);
    return a !== List.RANK_NOT_IN_LIST && (this._min_rank === null || a >= this._min_rank) && (this._max_rank === null || a <= this._max_rank)
}, providesUniqueRanks:function() {
    return!0
}, getRankOf:function(a) {
    return this._getRankOf(a)
}, subscriptionTopics:function() {
    return this._list_addresses.map(function(a) {
        return QueryManager.topicForListFilter(a.object_id, a.property_name)
    })
}, tableSuffixes:function() {
    return["rank"]
}, getSQLObjectIDColumnName:function() {
    return"element_id"
}, getSQL:function(a) {
    return this._getListConditionsSql(a[0] + ".")
}, getRankSQL:function(a) {
    return"BINARY " + a[0] + ".value"
}});
__FILE__ = "luna/common/datastore/query_list_property_filter.js";
Query.ListPropertyFilter = Query.Filter.subclass("ListPropertyFilter", {}, {_value_object_id:SET_IN_CONSTRUCTOR, _list_name:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    Query.ListPropertyFilter.superproto.constructor.call(this);
    this._value_object_id = b;
    this._list_name = a
}, providesUniqueRanks:function() {
    return!1
}, getRankOf:function() {
    ufu("not implemented")
}, addReferencedObjectIds:function(a) {
    a.add(this._value_object_id);
    return a
}, subscriptionTopics:function() {
    return QueryManager.topicForListPropertyFilter(this._list_name, this._value_object_id)
}, tableSuffixes:function() {
    return["rank"]
}, getMatchingObjectIds:function(a) {
    return a._getObjectIdsForListPropertyValue(this._list_name, this._value_object_id)
}, _objectSatisfies:function(a) {
    a = RawDatastoreAddress.rankAddress(a, this._list_name, this._value_object_id);
    a = Datastore.valueForDatastoreValue(a.value_type, a.datastore().readValue(a));
    return isKnown(a) && a !== List.RANK_NOT_IN_LIST
}, getSQL:function(a) {
    return a[0] + ".property_id = ? and " + a[0] + ".element_id = ? and " + a[0] + ".value != '" + List.RANK_NOT_IN_LIST + "'"
}, getSQLSubstitutions:function() {
    return[env.type_registry.propertyIdMap().idForName(this._list_name), this._value_object_id]
}, addressDependencies:function(a) {
    return[RawDatastoreAddress.rankAddress(a, this._list_name, this._value_object_id)]
}, toHash:function() {
    return[this.__type_name, "[", this._value_object_id, ",", this._list_name, "]"].join("")
}});
__FILE__ = "luna/common/datastore/query_negative_list_filter.js";
Query.NegativeListFilter = Query.AbstractListFilter.subclass("NegativeListFilter", {}, {constructor:function(a) {
    Query.NegativeListFilter.superproto.constructor.call(this, a)
}, getMatchingObjectIds:function() {
    ufu("NegativeListFilter cannot generate matches")
}, _objectSatisfies:function(a) {
    return this._getRankOf(a) === List.RANK_NOT_IN_LIST
}, providesUniqueRanks:function() {
    return!1
}, getRankOf:function() {
    ufu("NegativeListFilter cannot rank matches")
}, getSQLObjectIDColumnName:function() {
    ufu("NegativeListFilter cannot provide object IDs from rows")
}, subscriptionTopics:function() {
    return[]
}, tableSuffixes:function() {
    return[]
}, getSQL:function(a, b) {
    return b + " not in (SELECT element_id FROM okvstore_rank WHERE " + this._getListConditionsSql("") + ")"
}});
__FILE__ = "luna/common/datastore/query_referenced_object_filter.js";
Query.ReferencedObjectFilter = Query.Filter.subclass("ReferencedObjectFilter", {}, {_field_name:SET_IN_CONSTRUCTOR, _field_type:null, _filters:SET_IN_CONSTRUCTOR, _ordering_filters:SET_IN_CONSTRUCTOR, _add_object_id_to_rank:SET_IN_CONSTRUCTOR, constructor:function(a, b, c, d) {
    Query.ReferencedObjectFilter.superproto.constructor.call(this, c);
    this._field_name = a;
    this._filters = b;
    this._ordering_filters = this._filters.filter(function(a) {
        return a.order_priority !== Query.Filter.DOES_NOT_ORDER
    }).sort(function(a, b) {
            return compare(a.order_priority, b.order_priority)
        });
    this._add_object_id_to_rank = d || !1
}, attach:function(a) {
    var b = a.getProperty(this._field_name);
    this._filters.forEach(function(a) {
        a.attach(b.type)
    });
    this._field_type = b.type
}, getMatchingObjectIds:function() {
    ufu("Query.ReferencedObjectFilter.getMatchingObjectIds is not implemented (yet)")
}, addressDependencies:function(a) {
    var b = this, c = RawDatastoreAddress.propertyAddress(a, this._field_name, this._field_type);
    return[c, function() {
        var a = c.datastore().readValue(c);
        return MochiKit.Base.flattenArray(b._filters.map(function(b) {
            return b.addressDependencies(a)
        }))
    }]
}, _objectSatisfies:function(a) {
    var a = RawDatastoreAddress.propertyAddress(a, this._field_name, this._field_type), b = a.datastore().readValue(a);
    return this._filters.all(function(a) {
        return a.objectSatisfies(b)
    })
}, getRankOf:function(a) {
    var a = RawDatastoreAddress.propertyAddress(a, this._field_name, this._field_type), b = a.datastore().readValue(a), a = this._ordering_filters.map(function(a) {
        return a.getRankOf(b)
    });
    this._add_object_id_to_rank && a.push(b);
    return List.Rank.concat(a)
}, providesUniqueRanks:function() {
    return this._filters.any(function(a) {
        return a.providesUniqueRanks()
    }) || this._add_object_id_to_rank
}, addReferencedObjectIds:function(a) {
    return MochiKit.Base.flattenArray(this._filters.map(function(b) {
        return b.addReferencedObjectIds(a)
    }))
}, toHash:function() {
    return[this.__type_name, "[", this._field_name, ",", serializeType(this._field_type), ",", this._filters.map(function(a) {
        return a.toHash()
    }).join("#")].join("")
}, subscriptionTopics:function() {
    return[]
}, tableSuffixes:function() {
    return MochiKit.Base.flattenArguments([getDatabaseType(this._field_type)], this._filters.map(function(a) {
        return a.tableSuffixes()
    }))
}, getSQLSubstitutions:function() {
    return MochiKit.Base.flattenArray(this._filters.map(function(a) {
        return a.getSQLSubstitutions()
    }))
}, _mapFiltersWithPrefixes:function(a, b) {
    var c = 1;
    return this._filters.map(function(d) {
        var e = d.tableSuffixes(), f = a.slice(c, c + e.length);
        c += e.length;
        return b(f, d)
    })
}, getSQL:function(a) {
    var b = a[0] + ".value";
    return this._mapFiltersWithPrefixes(a, function(a, d) {
        var e = d.getSQL(a, b);
        a.length > 0 && (e += [" AND ", b, " = ", a[0], ".", d.getSQLObjectIDColumnName()].join(""));
        return e
    }).join(" AND ")
}, getRankSQL:function(a) {
    var b = this._mapFiltersWithPrefixes(a, function(a, b) {
        return b.order_priority === -1 ? [-1, ""] : [b.order_priority, b.getRankSQL(a)]
    }).sort(function(a, b) {
            return compare(a[0], b[0])
        }).map(function(a) {
            return a[1]
        }).filter(function(a) {
            return a !== ""
        });
    this._add_object_id_to_rank && b.push(a[0] + ".value");
    return b
}});
__FILE__ = "luna/common/datastore/query_rank_generators.js";
Query.NegateRankGenerator = AsanaObject.subclass("Query.NegateRankGenerator", {}, {constructor:function() {
    Query.NegateRankGenerator.superproto.constructor.call(this)
}, computeRank:function(a) {
    return-a
}, rankSql:function(a) {
    return"-" + a + "value"
}});
Query.ZeroToMaxNumberRankGenerator = AsanaObject.subclass("Query.ZeroToMaxNumberRankGenerator", {}, {constructor:function() {
    Query.ZeroToMaxNumberRankGenerator.superproto.constructor.call(this)
}, computeRank:function(a) {
    return a > 0 ? a : Number.MAX_INT_VALUE
}, rankSql:function(a) {
    return"IF(" + a + "value = 0, " + Number.MAX_INT_VALUE + ", " + a + "value)"
}});
Query.ToUpperCaseRankGenerator = AsanaObject.subclass("Query.ToUpperCaseRankGenerator", {}, {constructor:function() {
    Query.ToUpperCaseRankGenerator.superproto.constructor.call(this)
}, computeRank:function(a) {
    return a.toUpperCase().substr(0, 50)
}, rankSql:function(a) {
    return"UPPER(SUBSTR(" + a + "value, 1, 50))"
}});
__FILE__ = "luna/common/datastore/query_scalar_property_filter.js";
Query.ScalarPropertyFilter = Query.Filter.subclass("ScalarPropertyFilter", {}, {_name:SET_IN_CONSTRUCTOR, _value_type:null, _condition:SET_IN_CONSTRUCTOR, _rank_generator:SET_IN_CONSTRUCTOR, constructor:function(a, b, c, d) {
    Query.ScalarPropertyFilter.superproto.constructor.call(this, c);
    this._name = a;
    this._condition = b;
    this._rank_generator = d || null
}, attach:function(a) {
    Query.ScalarPropertyFilter.superproto.attach.call(this, a);
    this._value_type = a.getProperty(this._name).type;
    this._condition.attachType(this._value_type)
}, getMatchingObjectIds:function(a) {
    return a._getObjectIdsForScalarPropertyValue(this._name, this._value_type, this._condition)
}, _objectSatisfies:function(a) {
    var b = RawDatastoreAddress.propertyAddress(a, this._name, this._value_type), a = env.datastoreForObjectId(a).readValue(b);
    this._value_type === Boolean && (a = Datastore.datastoreValueForValue(Boolean, a));
    return this._condition.propertyValueSatisfies(this._value_type, a)
}, providesUniqueRanks:function() {
    return!1
}, getRankOf:function(a) {
    var b = RawDatastoreAddress.propertyAddress(a, this._name, this._value_type), a = env.datastoreForObjectId(a).readValue(b);
    return this._rank_generator !== null ? this._rank_generator.computeRank(a) : this._value_type === String ? a.substring(0, 50) : a
}, subscriptionTopics:function() {
    var a = this, b = Set.create([]);
    this.addReferencedObjectIds(b);
    return b.map(function(b) {
        return QueryManager.topicForStateObjectProperty(b, a._name)
    })
}, tableSuffixes:function() {
    return[getDatabaseType(this._value_type)]
}, getSQL:function(a) {
    var b = this._condition.getSQL(a[0], this._value_type);
    return a[0] + ".property_id = ?" + (b === null ? "" : " and " + b)
}, getIndexSQL:function(a) {
    return this._condition.getIndexSQL(a)
}, getIndexSQLSubstitutions:function() {
    return this._condition.getIndexSQLSubstitutions()
}, getRankSQL:function(a) {
    return this._rank_generator ? this._rank_generator.rankSql(a[0] + ".") : this._value_type === String ? "binary SUBSTR(" + a[0] + ".value, 1, 50)" : a[0] + ".value"
}, getSQLSubstitutions:function() {
    var a = [env.type_registry.propertyIdMap().idForName(this._name)];
    this._condition.appendSQLSubstitutions(a);
    return a
}, addressDependencies:function(a) {
    Datastore.assertIsPlausibleObjectId(a);
    return[RawDatastoreAddress.propertyAddress(a, this._name, this._value_type)]
}, propertyName:function() {
    return this._name
}, addReferencedObjectIds:function(a) {
    this._condition.addReferencedObjectIds(this._value_type, a)
}, toHash:function() {
    return[this.__type_name, "[", this._name, ",", serializeType(this._value_type), ",", this._condition.toHash(), "]"].join("")
}});
__FILE__ = "luna/common/datastore/datastore.js";
Datastore = AsanaObject.subclass("Datastore", {OBJECT_ID_NULL:-1, datastoreValueForValue:function(a, b) {
    if(!isUnknown(b)) {
        if(a === Boolean) {
            return b ? 1 : 0
        }else {
            if(StateObject.isSuperclassOf(a)) {
                return b === null ? Datastore.OBJECT_ID_NULL : b.global_id
            }
        }
    }
    return b
}, valueForDatastoreValue:function(a, b) {
    if(!isUnknown(b)) {
        if(a === Boolean) {
            return!!b
        }else {
            if(StateObject.isSuperclassOf(a)) {
                return b === Datastore.OBJECT_ID_NULL ? null : env.datastoreObjectNoPeekWithoutAC(b)
            }
        }
    }
    return b
}, isDatastoreValue:function(a, b) {
    if(arguments.length < 2) {
        return a !== void 0 && (a === null || typeof a !== "object") && typeof a !== "boolean"
    }
    if(a === null && !StateObject.isSuperclassOf(b)) {
        return!0
    }
    if(isUnknown(a)) {
        return!0
    }else {
        if(b === Boolean) {
            return a === 0 || a === 1
        }else {
            if(b === Integer) {
                return typeof a === "number"
            }else {
                if(b === Float) {
                    return typeof a === "number"
                }else {
                    if(b === Timestamp) {
                        return typeof a === "number"
                    }else {
                        if(b === String || b === IDatastoreAddress.TYPE_RANK) {
                            return typeof a === "string"
                        }else {
                            if(b === Pointer) {
                                return a instanceof Pointer
                            }else {
                                if(StateObject.isSuperclassOf(b)) {
                                    return a === Datastore.OBJECT_ID_NULL ? !0 : typeof a === "number" && parseInt(a, 10) === a || typeof a === "string"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}, kvStoreAddress:function(a) {
    return RawDatastoreAddress.create(IDatastoreAddress.OBJECT_ID_KV_STORE, a, String, IDatastoreAddress.ELEMENT_ID_SCALAR)
}, assertIsPlausibleObjectId:function() {
}, areDatastoreValuesEqual:function(a, b) {
    return a === b || isUnknown(a) && isUnknown(b) && a.__type === b.__type
}, isSessionObject2Id:function(a) {
    return env.datastoreForObjectId(a) === env.session_store && a.startsWith(IDatastoreAddress.SESSION_OBJECT2_ID_PREFIX)
}}, {name:SET_IN_CONSTRUCTOR, _caches:SET_IN_CONSTRUCTOR, _datastore_cache_in_memory:SET_IN_CONSTRUCTOR, _all_used_addresses:SET_IN_CONSTRUCTOR, _all_unused_addresses:SET_IN_CONSTRUCTOR, _all_unused_queries:SET_IN_CONSTRUCTOR, _observers:SET_IN_CONSTRUCTOR, _state_objects:SET_IN_CONSTRUCTOR, _generation:0, _original_secondary_cache_read_methods:void 0, _transaction_depth:0, _has_failed_transaction:!1, _read_only_mode_depth:0, unique_key_manager:SET_IN_CONSTRUCTOR, _object_ids_to_index:SET_IN_CONSTRUCTOR,
    constructor:function(a, b) {
        var c = this;
        Datastore.superproto.constructor.call(c);
        c.name = b;
        c._all_used_addresses = Set.create();
        c._all_unused_addresses = Set.create();
        c._all_unused_queries = Set.create();
        c._caches = a;
        c._state_objects = Map.create();
        c._observers = Set.create();
        c._caches.forEach(function(a) {
            a.datastore = c
        });
        c._datastore_cache_in_memory = a[0];
        c.unique_key_manager = DatastoreUniqueKeyManager.create();
        c._object_ids_to_index = Set.create([])
    }, _getCreationTime:function() {
        return env.clock.now()
    }, _maybeMarkObjectForReindexing:function(a) {
        var b = this, c = b.readValue(RawDatastoreAddress.typeIdAddress(a.object_id)), c = env.type_registry.getTypeFromId(c);
        Map.forEach(c._indexes, function(c, e) {
            e.hasProperty(a.property_name) && b._object_ids_to_index.add(a.object_id)
        })
    }, _updateIndexes:function() {
        var a = this.readValues(this._object_ids_to_index.map(function(a) {
            return RawDatastoreAddress.typeIdAddress(a)
        }));
        Map.forEach(a, function(a, c) {
            if(isKnown(c)) {
                var d = env.type_registry.getTypeFromId(c);
                Map.forEach(d._indexes, function(c, d) {
                    d.updateIndex(env.KVStore._connection, a.object_id);
                    env.datastore_manager._active_indexes.add(d)
                })
            }
        });
        this._object_ids_to_index.clear()
    }, createStateObject:function(a, b) {
        var c;
        "global_id" in b ? (c = b.global_id, delete b.global_id) : c = env.world_store === this ? env.global_id_provider.reserveId() : env.type_registry.getTypeName(a) + "-" + env.global_id_provider.reserveId();
        return this._createStateObjectWithId(a, c, b)
    }, objectNoPeekWithoutAC:function(a) {
        a = this._objectOrUnknown(a);
        if(a instanceof UnknownValue.DoesNotExist) {
            throw new ValueIsUnknownError(a, !0);
        }
        return a
    }, objectWithoutAC:function(a) {
        a = this.objectNoPeekWithoutAC(a);
        $v(a.typeIdLvalue());
        return a
    }, object:function(a) {
        return this._accessCheckedDatastoreObject(this.objectWithoutAC(a))
    }, objects:function(a) {
        var b = this;
        return b.objectsWithoutAC(a).map(function(a) {
            return b._accessCheckedDatastoreObject(a)
        })
    }, sessionObject2:function(a, b) {
        var c = IDatastoreAddress.SESSION_OBJECT2_ID_PREFIX + b, d = this._state_objects.getOr(c, null);
        if(d === null) {
            d = a._create(), d.global_id = c, d.datastore = this, this._state_objects.put(c, d)
        }
        d._usage_rvalue.peek();
        return d
    }, objectsWithoutAC:ABSTRACT, objectOrUnknownWithoutAC:function(a) {
        return this._objectOrUnknown(a)
    }, objectOrUnknownForApi:function(a) {
        return this._objectOrUnknown(a)
    }, objectOrUnknown:function(a) {
        a = this.objectOrUnknownWithoutAC(a);
        return isKnown(a) ? this._accessCheckedDatastoreObject(a) : a
    }, _accessCheckedDatastoreObject:function(a) {
        var b = env.userOrNull();
        return b && !a.isVisibleBy(b) ? UnknownValue.AccessDenied.create(null, null) : a
    }, objectOrUnknownR:function(a) {
        return StateObjectOrUnknownRvalue.create(this, a)
    }, typeIdOrUnknownR:function(a) {
        return TypeIdOrUnknownRvalue.create(this, a)
    }, _objectOrUnknown:function(a) {
        this.assertObjectIdOkToContain(a);
        var b = this._state_objects.find(a);
        if(b === null) {
            var c = this.readValue(RawDatastoreAddress.typeIdAddress(a));
            if(env.is_server && Fiber.current !== Fiber.main && (b = this._state_objects.find(a), b !== null)) {
                return b
            }
            if(isUnknown(c)) {
                return c
            }
            b = env.type_registry.getTypeFromId(c)._create();
            b.global_id = a;
            b.datastore = this;
            this._state_objects.put(a, b)
        }
        return b
    }, _createStateObjectWithId:function(a, b, c) {
        var d = this;
        env.counters.increment("datastore.num_objects_created");
        return UserActionContext.get().runWithoutRecording(function() {
            var e = env.type_registry.getTypeId(a);
            env.datastore_manager.enactChange(TypeIdValueChange.create({address:RawDatastoreAddress.typeIdAddress(b), new_value:e}));
            var f = d._getCreationTime(), g = d.objectWithoutAC(b), h = {};
            h[StateObject.PropertyName.CREATED_AT] = f;
            h[StateObject.PropertyName.TRASHED_BY] = null;
            h[StateObject.PropertyName.TRASHED_AT] = 0;
            if(g.hasProperty("__modification_time")) {
                h.__modification_time = f
            }
            Map.forEach(h, function(a, b) {
                g.getXvalue(a).requestSet(b)
            });
            h[StateObject.PropertyName.TYPE_ID] = e;
            var i = Map.create();
            g.getProperties().forEach(function(a) {
                if(c[a.key_name] === void 0 && h[a.key_name] === void 0 && a.type !== List) {
                    a = g.getX(a.key_name);
                    if(a instanceof StateObjectWrappedLvalue) {
                        a = a.datastore_lvalue
                    }
                    i.put(a, UnknownValue.DoesNotExist.create(a, null))
                }
            });
            d._datastore_cache_in_memory.writeValues(i);
            env.datastore_manager.registerUnsetValues(i);
            Map.forEach(c, function(a, b) {
                g.getXvalue(a).requestSet(b)
            });
            env.datastore_manager.enactChange(DatastoreCreateStateObjectChange.create({object_id:g.global_id}));
            return g
        })
    }, addObserver:function(a) {
        this._observers.add(a)
    }, markQueryResultsUnused:function(a) {
        this._all_unused_queries.add(a)
    }, markAddressUsed:function(a) {
        this.assertObjectIdOkToContain(a.object_id);
        this._all_unused_addresses.remove(a);
        this._all_used_addresses.add(a)
    }, markAddressUnused:function(a) {
        this.assertObjectIdOkToContain(a.object_id);
        this._all_used_addresses.remove(a);
        this._all_unused_addresses.add(a)
    }, _trackAddress:function(a) {
        a.object_id !== IDatastoreAddress.OBJECT_ID_KV_STORE && (this.assertObjectIdOkToContain(a.object_id), this._all_used_addresses.contains(a) || this._all_unused_addresses.add(a))
    }, removeObserver:function(a) {
        this._observers.remove(a)
    }, getAllUsedAddresses:function() {
        return this._all_used_addresses
    }, inMemoryCacheSize:function() {
        return this._datastore_cache_in_memory.datastoreValueMap().size()
    }, clearAllUnusedValues:function() {
        this._getAndClearAllUnusedAddresses();
        this._clearAllUnusedQueries()
    }, removeAllUnusedValues:function() {
        this.removeValues(this._getAndClearAllUnusedAddresses().filter(function(a) {
            return!a.isSessionObject2()
        }));
        this._clearAllUnusedQueries()
    }, forEachCachedValue:function(a) {
        this._datastore_cache_in_memory.forEachValue(a)
    }, isValueCached:function(a) {
        return this._datastore_cache_in_memory.isValueCached(a)
    }, runInBatches:ABSTRACT, isBatching:ABSTRACT, runInTransaction:function(a) {
        this._transaction_depth++;
        this._transaction_depth === 1 && this._startTransaction();
        var b;
        try {
            b = a(), this._transaction_depth === 1 && this._commit(), this._transaction_depth--
        }catch(c) {
            throw this._transaction_depth === 1 && this._rollback(), this._transaction_depth--, this._has_failed_transaction = !0, c;
        }
        return b
    }, isInTransaction:function() {
        return this._transaction_depth > 0
    }, hasFailedTransaction:function() {
        return this._has_failed_transaction
    }, clearFailedTransaction:function() {
        this._has_failed_transaction = !1
    }, _startTransaction:function() {
        for(var a = 0;a < this._caches.length;a++) {
            this._caches[a].startTransaction()
        }
    }, _commit:function() {
        for(var a = this._caches.length - 1;a >= 0;a--) {
            this._caches[a].onBeforeCommit()
        }
        this._updateIndexes();
        for(a = this._caches.length - 1;a >= 0;a--) {
            this._caches[a].commit()
        }
    }, _rollback:function() {
        for(var a = this._caches.length - 1;a >= 0;a--) {
            this._caches[a].rollback()
        }
        this._object_ids_to_index.clear()
    }, _getAndClearAllUnusedAddresses:function() {
        var a = this._all_unused_addresses;
        this._all_unused_addresses = Set.create();
        return a
    }, _clearAllUnusedQueries:function() {
        env.is_server && this._pubsub_manager !== null && this._pubsub_manager.unsubscribeQueries(this._all_unused_queries);
        this._all_unused_queries = Set.create()
    }, runQuery:ABSTRACT, readValue:ABSTRACT, readValueFromCache:function(a) {
        return this._datastore_cache_in_memory.readValue(a)
    }, lockForUpdate:ABSTRACT, readValues:ABSTRACT, peekXvaluesAndStateObjectScalars:ABSTRACT, peekStateObjectProperties:ABSTRACT, peekXvaluesAndStateObjectScalarsWithoutDependencies:ABSTRACT, _cacheValues:ABSTRACT, writeValues:function(a) {
        var b = this;
        b._read_only_mode_depth > 0 && ufu("Datastore is read-only, cannot write values", a);
        b._generation++;
        env.counters.increment("datastore.num_dslvalues_written", a.size());
        var c = FastMap.create();
        b._observers.forEach(function(d) {
            a.forEach(function(a, f) {
                var g = b._datastore_cache_in_memory.readValue(a);
                d.onDatastoreValueChanged(b, a, f, g);
                c.put(a, g)
            })
        });
        a.forEach(function(a) {
            b.assertObjectIdOkToContain(a.object_id);
            b._trackAddress(a);
            env.is_server && b._pubsub_manager !== null && b._pubsub_manager.queueInvalidation(a)
        });
        this._caches.forEach(methodcaller("writeValues", a, c));
        a.forEach(function(a) {
            a.object_id !== IDatastoreAddress.OBJECT_ID_KV_STORE && env.world_store === b && env.is_server && b._maybeMarkObjectForReindexing(a)
        })
    }, writeBack:function(a, b) {
        this._datastore_cache_in_memory.writeValues(Map.create([[a, b]]));
        this._trackAddress(a)
    }, generation:function() {
        return this._generation
    }, _uncacheValues:function(a) {
        var b = this;
        b._observers.forEach(function(c) {
            a.forEach(function(a) {
                var e = b._datastore_cache_in_memory.readValue(a);
                c.onDatastoreValueUncached(b, a, e)
            })
        });
        this._caches.forEach(function(b) {
            b.removeValues(a)
        })
    }, removeValues:function(a) {
        env.is_server && this._pubsub_manager !== null && this._pubsub_manager.unsubscribeAddresses(a);
        this._uncacheValues(a)
    }, lvalueForAddress:function(a) {
        var b = this._lvalueForAddressIfObjectKnown(a);
        b === null && ufu("Could not get lvalue for address", a);
        return b
    }, _lvalueForAddressIfObjectKnown:function(a) {
        var b = this._objectOrUnknown(a.object_id);
        return isKnown(b) ? b.datastoreLvalueForAddress(a) : null
    }, runInReadOnlyMode:function(a) {
        this._read_only_mode_depth++;
        var b;
        try {
            b = a()
        }finally {
            this._read_only_mode_depth--
        }
        return b
    }, assertKey:function() {
    }, assertDoesNotBlockOnDatastore:ABSTRACT, assertNoSecondaryCacheReads:ABSTRACT, suppressNoSecondaryCacheReadAssertions:ABSTRACT, assertObjectIdOkToReference:function() {
    }, isObjectIdOkToReference:function(a) {
        a = typeof a;
        if(this.name === "world_store") {
            return"number" === a
        }else {
            if(this.name === "session_store") {
                return a === "number" || a === "string" && !a.startsWith(IDatastoreAddress.SESSION_OBJECT2_ID_PREFIX)
            }
        }
    }, assertObjectIdOkToContain:function() {
    }, isObjectIdOkToContain:function(a) {
        a = typeof a;
        if(this.name === "world_store") {
            return"number" === a
        }else {
            if(this.name === "session_store") {
                return"string" === a
            }
        }
    }, _peekStateObjectProperties:function(a, b) {
        var c = this;
        $rval(function() {
            var d = function() {
                return{dslvalues_for_batch:[], next_batch_data:Map.create()}
            }, e = d();
            c._prepareStateObjectPropertyBatchPhase(e, a, b);
            for(var f = function(a, b) {
                var d = b.shift(), e = b.map($v).filter(function(a) {
                    return a !== null && isKnown(a)
                });
                c._prepareStateObjectPropertyBatchPhase(g, e, d[0] instanceof Array ? d[0] : d)
            };e.dslvalues_for_batch.length > 0;) {
                var g = d();
                c.peekXvaluesAndStateObjectScalars(e.dslvalues_for_batch, []);
                e.next_batch_data.forEach(f);
                e = g
            }
        }).becomeWatch().peek()
    }, _prepareStateObjectPropertyBatchPhase:function(a, b, c) {
        var d = a.dslvalues_for_batch, e = a.next_batch_data;
        b.forEach(function(a) {
            c.forEach(function(b) {
                if(typeof b === "string") {
                    var c = a.getXvalue(b)
                }else {
                    if(b instanceof Array) {
                        var i = b.clone(), b = i.shift(), c = a.getXvalue(b);
                        e.setDefault(b, [i]).push(c)
                    }else {
                        ufu("Invalid property spec", b, typeof b)
                    }
                }
                d.push(c)
            })
        })
    }, downstreamSyncInfo:ABSTRACT, summarizeContents:function() {
        var a = this, b = Map.create(), c = 0;
        a.forEachCachedValue(function(d) {
            d = a.object(d.object_id).__type_name + "/" + d.property_name;
            b.incrementCount(d);
            c++
        });
        log.info("Total lvalues", c);
        b.keys().sort(compare).forEach(function(a) {
            log.info(a, b.get(a))
        })
    }});
DatastoreCreateStateObjectChange = define("DatastoreCreateStateObjectChange", Change.subclass("DatastoreCreateStateObjectChange", {}, {object_id:ATTRIBUTE_REQUIRED, enact:function() {
    var a = env.datastoreObjectWithoutAC(this.object_id);
    if(env.is_server) {
        a.onServerCreate()
    }
}, taintedObjectIds:function() {
    return[this.object_id]
}}));
UndoUserActionChange = define("UndoUserActionChange", Change.subclass("UndoUserActionChange", {}, {user_action:ATTRIBUTE_REQUIRED, enact:function() {
    env.is_server && (this.user_action.changes().peekValuesArray().forEachReverse(function(a) {
        a.requestUndo()
    }), env.setLastUndoableUserAction(null))
}, taintedObjectIds:function() {
    return[this.user_action.global_id]
}}));
define("StartUserActionContextChange", Change.subclass("StartUserActionContextChange", {}, {user_action:ATTRIBUTE_REQUIRED, enact:function() {
    UserActionContext.get()._start(this.user_action)
}, taintedObjectIds:function() {
    return[]
}}));
__FILE__ = "luna/common/object_bundle.js";
ObjectBundle = AsanaObject.subclass("ObjectBundle", {createFromString:function(a) {
    return ObjectBundle.create(JSON.parse(a))
}, createFromStateObject:function(a) {
    return ObjectBundle._createFromObject(a, function(a) {
        return a.global_id
    }, function(a) {
        return a.getProperties().filter(function(c) {
            c = a.getV(c.key_name);
            return isKnown(c)
        }).map(function(c) {
                var d = c.key_name, e = a.getV(d);
                return c.key_name === StateObject.PropertyName.TYPE_ID ? ObjectBundle._getTypeNameProperty(e) : {name:d, type:c.type, value:c.type === List ? e.peekValuesArray() : e}
            })
    })
}, createFromRawObject:function(a) {
    return ObjectBundle._createFromObject(a, function(a) {
        return localID(a)
    }, function(a) {
        var c = env.type_registry.getTypeFromId(a.__type_id);
        return Map.mapEntries(a, function(a, b) {
            if(a === StateObject.PropertyName.TYPE_ID) {
                return ObjectBundle._getTypeNameProperty(b)
            }else {
                var f = c.getProperty(a);
                f === null && ufu("No property in type", a, c);
                return{name:a, type:f.type, value:b}
            }
        })
    })
}, createStateObjectAsRawObject:function(a, b) {
    var c = {__type_id:env.type_registry.getTypeId(a), __creation_time:env.clock.now(), __trashed_at:0, __trashed_by:null};
    Map.forEach(b, function(b, e) {
        a.getProperty(b) || ufu("Currently state objects can contain only properties defined in their superstructs. " + b + " is not one of them.");
        c[b] = e
    });
    return c
}, _createFromObject:function(a, b, c) {
    var d = {};
    ObjectBundle._addObject(a, b, c, d, Set.create());
    return ObjectBundle.create(d)
}, _getTypeNameProperty:function(a) {
    return{name:"__type_name", type:String, value:env.type_registry.typeIdMap().nameForId(a)}
}, _addObject:function(a, b, c, d, e) {
    var f = e.isEmpty(), g = b(a);
    if(!e.contains(g)) {
        e.add(g);
        var h = {};
        if(f) {
            h.__is_root = !0
        }
        d[g] = h;
        var i = function(f, g) {
            if(f === Pointer) {
                return ufu("Cannot export pointers", a)
            }else {
                if(f === List) {
                    return g.map(function(a) {
                        return ObjectBundle._addObject(a, b, c, d, e)
                    })
                }else {
                    if(StateObject.isSuperclassOf(f)) {
                        if(g === null) {
                            return g
                        }
                        return ObjectBundle._addObject(g, b, c, d, e)
                    }else {
                        return g
                    }
                }
            }
        };
        c(a).forEach(function(a) {
            h[a.name] = i(a.type, a.value)
        });
        return g
    }
}}, {_repr:SET_IN_CONSTRUCTOR, _allowed_types:SET_IN_CONSTRUCTOR, constructor:function(a) {
    ObjectBundle.superproto.constructor.call(this);
    this._repr = a;
    this._allowed_types = Set.create([TestRun, TestRunJso, TestRunSession, FetchTestRunJsoSession, ProfilerReport, ProfilerEvent, Exception, ExceptionReport, FileCoverageReport])
}, _allowExtraTypes:function(a) {
    this._allowed_types.addAll(a)
}, exportToString:function() {
    return JSON.stringify(this._repr)
}, importToDatastore:function() {
    var a = [];
    this._recreateObjects({createObject:function(b) {
        b = env.world_store.createStateObject(b, {});
        a.push(b);
        return b
    }, setScalarProperty:function(a, c, d) {
        a.getRvalue(c).requestSet(d)
    }, setListProperty:function(a, c, d) {
        var e = a.getRvalue(c);
        d.forEach(function(a) {
            e.requestInsertBefore(a, null)
        })
    }, onRootObject:function() {
    }});
    return a
}, getRootRawObject:function() {
    var a = [];
    this._recreateObjects({createObject:function(a) {
        return ObjectBundle.createStateObjectAsRawObject(a, {})
    }, setScalarProperty:function(a, c, d) {
        a[c] = d
    }, setListProperty:function(a, c, d) {
        a[c] = [];
        d.forEach(function(d) {
            a[c].push(d)
        })
    }, onRootObject:function(b) {
        a.push(b)
    }});
    return a[0]
}, _recreateObjects:function(a) {
    var b = Map.create();
    Map.forEach(this._repr, function(c, d) {
        var e = env.type_registry.getType(d.__type_name), e = a.createObject(e);
        b.put("" + c, e)
    });
    Map.forEach(this._repr, function(c, d) {
        var e = b.get(c), f = env.type_registry.getType(d.__type_name);
        Map.forEach(d, function(c, h) {
            if(c !== "__type_name") {
                if(c === "__is_root") {
                    a.onRootObject(e)
                }else {
                    var i = f.getProperty(c);
                    i === null && ufu("Attempt to recreate object of type", d.__type_name, "with unknown property", c);
                    i.type === List ? a.setListProperty(e, c, h.map(function(a) {
                        return b.get("" + a)
                    })) : StateObject.isSuperclassOf(i.type) ? a.setScalarProperty(e, c, h === null ? null : b.get("" + h)) : a.setScalarProperty(e, c, h)
                }
            }
        })
    })
}});
__FILE__ = "luna/common/model/idescribable.js";
IDescribable = Interface.create("IDescribable", [], {}, {describe:ABSTRACT});
__FILE__ = "luna/common/model/inavigatable.js";
INavigatable = Interface.create("INavigatable", [], {}, {navigationTarget:ABSTRACT, navigationContextForUser:function() {
    return this.navigationTarget().navigationContextForUser()
}, getPermalink:function(a) {
    a = a instanceof DomainUser ? a : a.domainUserForDomain(this.domain());
    return this.getPermalinkForContextList(this.getContextListUserCanSee(a), a)
}, getPermalinkForCurrentUser:function() {
    return this.getPermalinkForContextList(this.getContextListUserCanSee(env.user().domainUserForDomain(this.domain())))
}, getContextListUserCanSee:function(a) {
    assertInstanceof(a, DomainUser);
    var b = this.navigationTarget().navigationContextForUser(a.user()).list;
    b || (b = a.getV("task_list"));
    return b
}, getPermalinkForContextList:function(a, b) {
    var c = {};
    if(env.is_server && b && !b.user().isClaimed()) {
        c.du = b.global_id;
        var d = DomainInvite.findForDomainUser(b);
        d === null ? host.recordWarning("No invite found for dark user", b.global_id) : c.invite = d.key()
    }
    return URI.create({scheme:"https", hostname:Flags.secure_web_host_port, path:AsanaHelpers.renderTaskPath(a, this).split("/").slice(1), query:c}).stringify()
}});
__FILE__ = "luna/common/model/ihas_profile_image.js";
IHasProfileImage = Interface.create("IHasProfileImage", [], {}, {profileImageVersionR:rvalueProperty("IHasProfileImage.profileImageVersionR", function() {
    var a = this;
    return serverComputedValue(a.global_id + ":profileImageVersion", function() {
        if(a._profileImageIsVisible(env.userOrNull())) {
            return a.profileImageVersionNoAC()
        }
        return null
    })
}), profileImageVersionNoAC:function() {
    return this.getV(this._profileImageVersionPropertyName())
}, profileImageVersion:function() {
    return $v(this.profileImageVersionR())
}, setProfileImageVersion:function(a) {
    return this.getX(this._profileImageVersionPropertyName()).requestSet(a)
}, hasProfileImage:function() {
    return this.profileImageVersion() !== null
}, profileIconUrl128:function() {
    return this._profileImageUrl("128x128", "png")
}, profilePhotoUrlHuge:function() {
    return this._profileImageUrl("huge", "jpeg")
}, profilePhotoUrlLarge:function() {
    return this._profileImageUrl("60x60", "png")
}, profilePhotoUrlMedium:function() {
    return this._profileImageUrl("36x36", "png")
}, profilePhotoUrlSmall:function() {
    return this._profileImageUrl("21x21", "png")
}, profilePhotoUrlInbox:function() {
    return this._profileImageUrl("27x27", "png")
}, _profileImageUrl:function(a, b) {
    return"https://s3.amazonaws.com/" + Flags.photos_s3_bucket_name + "/" + this.global_id + "." + this.profileImageVersion() + "_" + a + "." + b
}, _profileImageIsVisible:ABSTRACT, _profileImageVersionPropertyName:ABSTRACT});
__FILE__ = "luna/common/model/association.js";
defineNamespace("Association");
update(Association, {hasMany:attributedValueFunc({name:ATTRIBUTE_REQUIRED, type_name:ATTRIBUTE_REQUIRED, list_property_name:null, scalar_property_name:null}, function(a) {
    var b = Memoize.memoizeInThis(a.name, function() {
        return QueryBuilder.queryForObjects(globals[a.type_name]).where(a.list_property_name ? QueryBuilder.listProperty(a.list_property_name).contains(this) : QueryBuilder.scalarProperty(a.scalar_property_name).eq(this)).getQueryRvalue(a.name).setAsSafelyPeekableByAncestor()
    });
    return function() {
        return $v(b.apply(this, arguments))
    }
}), hasOne:attributedValueFunc({name:ATTRIBUTE_REQUIRED, type_name:ATTRIBUTE_REQUIRED, property_name:ATTRIBUTE_REQUIRED, property_type:null}, function(a) {
    var b = Memoize.memoizeInThis(a.name, function() {
        return QueryBuilder.queryForObjects(globals[a.type_name]).where(QueryBuilder.scalarProperty(a.property_name).eq(this)).getQueryRvalue(a.name).setAsSafelyPeekableByAncestor()
    });
    return function() {
        return $v(b.apply(this, arguments)).firstValueOrNull()
    }
})});
__FILE__ = "luna/common/model/trash.js";
TrashObjectChange = define("TrashObjectChange", Change.subclass("TrashObjectChange", {}, {object:ATTRIBUTE_REQUIRED, enact:function() {
    var a = this.object;
    if(env.is_server) {
        a.onBeforeTrashedOnServer()
    }
    a.getX(StateObject.PropertyName.TRASHED_AT).requestSet(env.clock.now());
    a.getX(StateObject.PropertyName.TRASHED_BY).requestSet(env.user());
    if(env.is_server) {
        a.onAfterTrashedOnServer()
    }
}, taintedObjectIds:function() {
    return[this.object.global_id]
}}));
__FILE__ = "luna/common/model/session_object.js";
SessionObject = define("SessionObject", StateObject.subclass("SessionObject", {}, {storeName:function() {
    return"session_store"
}, touch:computedProperty("SessionObject.touch", function() {
    var a = this;
    a.getProperties().forEach(function(b) {
        var c = b.key_name;
        a._shouldTouchProperty(b) && (b = a.getX(c).peekAllowingUnknown(), b instanceof SessionObject ? b.touch() : b instanceof List && b.forEach(function(a) {
            a instanceof SessionObject && a.touch()
        }))
    });
    return null
}), _computeIsVisibleBy:function() {
    return!0
}, _shouldTouchProperty:function() {
    return!0
}}));
__FILE__ = "luna/common/model/luna_app.js";
LunaApp = AsanaObject.subclass("LunaApp", {}, {config:ATTRIBUTE_REQUIRED, console_type:null, resources:null, init_function:null, newSession:ATTRIBUTE_REQUIRED, newTestWorld:null, ui_function:ATTRIBUTE_REQUIRED, onClientInit:noop, renderFragment:null, renderTitle:null, onFragmentChange:null, onWorkflowStep:null, addInfoToLogEvent:noop, onBeforeEnactAction:noop, appForApi:function() {
    return null
}, constructor:function(a) {
    LunaApp.superproto.constructor.call(this);
    updateWithAttributes(this, a)
}});
__FILE__ = "apps/asana/asana_access_control.js";
defineNamespace("Asana.AccessControl");
update(Asana.AccessControl, {isVisibleOnlyToCreatorDu:function(a) {
    var b = this.creatorDuL().peekAllowingUnknown();
    return isKnown(b) && b.user() === a
}, domainPropertyIsWriteable:function(a, b, c) {
    if(b.hasAdminWritePrivilege()) {
        return!0
    }
    c = $v(c);
    return a.isNew() ? c instanceof Domain && (c.isNew() || c.isGlobal() || c.hasActiveUser(b)) : c === null
}, itemsPropertyIsWriteable:function(a, b, c, d) {
    if(d instanceof Task && equals(d.getV("domain"), a.getV("domain"))) {
        return!0
    }
    return!1
}, itemListAssigneePropertyIsWriteable:function(a, b, c) {
    b = $v(c);
    return b === null ? a.isNew() : a.isNew() && b.isNew()
}, commentParentObjectPropertyIsWriteable:function(a, b, c) {
    b = $v(c);
    return a.isNew() ? b instanceof AsanaStateObject : b === null
}, creatorDUPropertyIsWriteable:function(a, b, c) {
    c = $v(c);
    assertInstanceof(c, DomainUser);
    return a.isNew() && c !== null && (c.user() === b || c.isNew())
}, followersDUPropertyIsWriteable:function(a, b, c, d) {
    return d instanceof DomainUser
}, domainUserTaskListIsWriteable:function(a, b, c) {
    return a.isNew() && equals($v(c).getV("domain"), a.getV("domain"))
}, domainUserIsGuestIsWriteable:function(a, b, c) {
    if(!a.isNew() && a.initialValue("is_guest") === $v(c)) {
        return!0
    }
    if(!a.networkMembershipIsOkay()) {
        return!1
    }
    if(a.user() === b) {
        if(a.isNew()) {
            return!0
        }
        a = a.initialValue("is_guest");
        if(a === !1 || a instanceof UnknownValue.DoesNotExist) {
            return!0
        }
        return $v(c)
    }
    if(a.isNew() && a.domain().isGlobal() && !$v(c)) {
        return!0
    }
    return b.domainUserForDomain(a.domain()).isInternal() ? !0 : $v(c) && (a.isNew() || !a.initialValue("active"))
}, domainUserActiveIsWriteable:function(a, b, c) {
    if(!a.isNew() && equals(a.user(), b)) {
        return a.initialValue("active")
    }
    if(!a.networkMembershipIsOkay()) {
        return!1
    }
    if(a.domain().isNew() || b.hasAdminWritePrivilege()) {
        return!0
    }
    if(a.domain().isGlobal() && $v(c)) {
        return!0
    }
    if(b.domainUserForDomain(a.domain()).isGuest()) {
        return a.isGuest() && $v(c)
    }
    return!0
}, domainUserPreferenceIsWriteable:function(a, b) {
    return a.user() === b
}, domainUserLastNotificationForBatchingIsWriteable:function(a, b) {
    return a.isNew() || a.domain().hasActiveUser(b)
}, domainUserNotificationVerifiedEmailIsWriteable:function(a, b, c) {
    c = $v(c);
    if(c !== null && c.user() !== a.user()) {
        return!1
    }
    return a.isNew() || a.user() === b
}, domainInviteActiveIsWriteable:function(a, b) {
    return a.userIsActiveInDomain(b)
}, writeableByAdmin:function(a, b) {
    return b.hasAdminWritePrivilege()
}, domainWriteable:function(a, b) {
    return b.hasAdminWritePrivilege() || a.isNew()
}, domainIsGlobalWriteable:function(a, b, c) {
    return a.isNew() && !$v(c)
}, domainNetworkIsWriteable:function(a, b, c) {
    if(a.isGlobal()) {
        return!1
    }
    var d = a.isNew() ? null : a.initialValue("network");
    if(d !== null && !d.admins().contains(b)) {
        return!1
    }
    var e = $v(c);
    return e === null ? !0 : !b.domainUserForDomain(a).isGuest() && a.usersModel().allObjects().all(function(a) {
        return a.isGuest() || a.user().networks().contains(e)
    })
}, writeableByAdminOrFullMemberOrWhenNew:function(a, b) {
    if(b.hasAdminWritePrivilege() || a.isNew()) {
        return!0
    }else {
        var c = b.domainUserForDomainOrNull(a);
        return!a.isGlobal() && c && c.isInternal()
    }
}, writeableByNetworkAdmin:function(a, b) {
    return a.admins().contains(b)
}, networkAdminsIsWriteable:function(a, b, c, d) {
    return a.admins().contains(b) ? $v(d) !== b : $v(d) === b && $v(c) === List.RANK_NOT_IN_LIST
}, userPasswordStateIsWriteable:function(a, b, c) {
    c = $v(c);
    return a.isNew() && c === User.PasswordState.NEVER_SET_NEW_USER || a === b && c === User.PasswordState.OK
}, userCreatorPropertyIsWriteable:function(a, b, c) {
    return a.isNew() && $v(c) === null
}, emailVerificationWorkflowUserIsWriteable:function(a, b, c) {
    return a.isNew() && $v(c) === b
}, emailVerificationWorkflowPropertyIsWriteable:function(a, b) {
    return a.isNew() || a.getV("user") === b
}, commentDraftTextIsWriteable:function(a, b) {
    return a.creatorDu().user() === b
}, verifiedEmailTaskCreationDomainUserIsWriteable:function(a, b, c) {
    c = $v(c);
    if(c !== null && c.user() !== b) {
        return!1
    }
    return a.isNew() || a.user() === b
}, notificationNeedsBatchDeliveryDuIsWriteable:function(a, b) {
    return a.isNew() || a.recipient().user() === b
}});
__FILE__ = "apps/asana/model/iitem_list.js";
IItemList = Interface.create("IItemList", [], {}, {_createItem:function(a) {
    this instanceof Task && logEvent({name:"SubtaskCreation", parent:this});
    return Task.create({creator_du:a, domain:this.getV("domain"), name:""})
}, insertNewBefore:function(a, b) {
    var c = this._createItem(a);
    this.insertBefore(c, b);
    return c
}, insertNewAfter:function(a, b) {
    assertInstanceof(a, DomainUser);
    var c = this._createItem(a);
    this.insertAfter(c, b);
    return c
}, onBeforeInsert:function(a) {
    var b = this;
    a instanceof Task && View.runWithoutLvalueChecking(function() {
        return!b.getX("items").containsObject(a)
    }) && b.addInsertionStories(a)
}, insert:function(a) {
    this.insertAfter(a, null)
}, insertBefore:function(a, b) {
    this.onBeforeInsert(a);
    this.getX("items").requestInsertBefore(a, b)
}, insertAfter:function(a, b) {
    this.onBeforeInsert(a);
    this.getX("items").requestInsertAfter(a, b)
}, isProject:ABSTRACT, isRegularProject:ABSTRACT, addInsertionStories:ABSTRACT, barsX:Memoize.memoizeInThis("Pot.barsX", function() {
    var a = QueryBuilder.queryForObjects(Task);
    a.where(QueryBuilder.isInList(this.getX("items")).orders(!0));
    a.where(QueryBuilder.scalarProperty("completed").eq(0));
    a.where(QueryBuilder.scalarProperty("task_type").eq(Task.TaskType.BAR));
    return a.getQueryRvalue("Pot.barsX").setAsSafelyPeekableByAncestor()
}), loadedBarsX:function() {
    var a = this.barsX().peekAllowingUnknown();
    return isKnown(a) ? this.barsX() : []
}, barForPriorityGroupOrNull:function(a) {
    var b = this, c, d;
    View.runWithoutLvalueChecking(function() {
        c = b.getX("items").containsObject(a);
        d = b.isProject()
    });
    return d ? c ? $v(b.barsX()).valueBeforeRankOrNull(b.getX("items").rankForObject(a)) : null : null
}, queueChangedItemsForReindexing:function(a) {
    a.forEach(function(a) {
        a.property_name === "items" && env.world_store.queueObjectIdForReindexing(a.element_id)
    })
}, newTasks:computedProperty("newTasks", function(a) {
    var b = QueryBuilder.queryForObjects(Task).where(QueryBuilder.isInList(this.getX("items")).orders(), QueryBuilder.scalarProperty("completed").eq(0), QueryBuilder.scalarProperty("schedule_status").eq(Task.ScheduleStatus.NEW)), a = a ? b.fetchNthObjectRank(null, a) : void 0;
    return b.getQueryRvalue("newTasks", a)
}), todayTasks:computedProperty("todayTasks", function(a) {
    var b = QueryBuilder.queryForObjects(Task).where(QueryBuilder.isInList(this.getX("items")).orders(), QueryBuilder.scalarProperty("completed").eq(0), QueryBuilder.scalarProperty("schedule_status").eq(Task.ScheduleStatus.TODAY)), a = a ? b.fetchNthObjectRank(null, a) : void 0;
    return b.getQueryRvalue("todayTisks", a)
}), tasksWithIncompleteSubtasks:computedProperty("tasksWithIncompleteSubtasks", function() {
    return QueryBuilder.queryForObjects(Task).where(QueryBuilder.isInList(this.getX("items")).orders(), QueryBuilder.scalarProperty("num_incomplete_subtasks").gt(0)).getQueryRvalue("tasksWithIncompleteSubtasks")
}), tasksDueSoon:computedProperty("tasksDueSoon", function(a, b) {
    var c = QueryBuilder.scalarProperty("due_date");
    if(a === void 0 || a === null) {
        c.ge(0)
    }else {
        var d = env.clock.nowDate().add(a, Date.Units.DAYS);
        c.lt(d.getTime())
    }
    c = QueryBuilder.queryForObjects(Task).where(QueryBuilder.isInList(this.getX("items")), QueryBuilder.scalarProperty("completed").eq(0), c.orders());
    d = b ? c.fetchNthObjectRank(null, b) : void 0;
    return c.getQueryRvalue("tasksDueSoon", d)
})});
__FILE__ = "apps/shared/asana_helpers.js";
AsanaHelpers = {asanaResources:function() {
    return[env.userOrNull() !== null && ExperimentalFeature.enabled("forest_background") ? "apps/asana/css/themes/forest.scss" : "apps/asana/css/themes/classic.scss"]
}, DATASTORE_STALE_MS:Date.MILLISECONDS_PER_MINUTE, renderTaskPath:function(a, b) {
    return"/0/" + (typeof a === "number" ? a : a.global_id) + "/" + (b === null ? "" : typeof b === "number" ? b : b.global_id)
}, renderInboxPath:function(a, b, c) {
    a = "/0/" + INBOX_NAME.toLowerCase() + "/" + a.global_id;
    b !== null && (a += "/" + b.global_id);
    c !== null && (b = c.story(), a += "/" + b.global_id);
    return a
}, renderSpinner:function() {
    return DIV({"class":"spinner"}, ["Loading..."])
}, renderLink:function(a, b) {
    return A(update({tabindex:-1, onclick:function() {
        return Node.JUST_DEFAULT
    }}, b), [a])
}, renderExternalLink:function(a, b, c) {
    return AsanaHelpers.renderLink(a, update({href:b, target:"_blank"}, c))
}, renderObjectLink:attributedFunc({object:ATTRIBUTE_REQUIRED, navigator:ATTRIBUTE_OPTIONAL, current_user:ATTRIBUTE_OPTIONAL, label:ATTRIBUTE_OPTIONAL, class_name:""}, function(a) {
    var b = a.object, c = a.navigator || env.realAppSession();
    if(b === null) {
        return SPAN({color:"#555", "class":a.class_name}, ["Asana"])
    }
    var d = a.current_user || env.user(), e = a.label === void 0 ? b.describe() : a.label;
    if(b instanceof DomainUser && !b.active()) {
        return e
    }
    if(!isA(b, INavigatable) || c.isNavigatedTo(b) || b.isTrashed()) {
        return e
    }
    return A({href:b.navigationTarget().getPermalink(d), "class":a.class_name, onclick:function(a) {
        if(a.hasMetaOrCtrl() || a.shiftKey) {
            return Node.JUST_DEFAULT
        }
        c.navigateTo(b, !1);
        return Node.STOP
    }}, [e])
}), hypertextTokenFunc:function(a) {
    var b = AsanaHelpers.objectFromUrlOrNull(a);
    return b !== null && isA(b, IDescribable) && isA(b, INavigatable) ? knownReturnValueOrDefault(function() {
        return{preload:function() {
            env.realAppSession().touchForSetCurrentList();
            b.navigationTarget().navigationContextForUser(env.user())
        }, label:b instanceof ItemList && b.isUserTaskList() ? b.assignee().name() : b.describe(), onclick:function(a) {
            a.hasMetaOrCtrl() || a.shiftKey ? window.openAsync(a.target.href) : env.realAppSession().navigateTo(b, !0);
            return Node.STOP
        }}
    }, null) : null
}, renderToken:attributedFunc({parent_view:ATTRIBUTE_REQUIRED, object:ATTRIBUTE_REQUIRED, onRemove:ATTRIBUTE_REQUIRED, onClicked:ATTRIBUTE_REQUIRED, name_x:ATTRIBUTE_REQUIRED, extra_classes:"", extra_element_for_token:"", tooltip:null, photos_ok:!0, remove_text:"Remove", label_nodes:null}, function(a) {
    var b = a.object instanceof User || a.object instanceof DomainUser, c = b && a.photos_ok;
    if(c) {
        var d = a.parent_view.createView(PhotoView, {who:a.object instanceof DomainUser ? a.object.user() : a.object, size:PhotoView.Size.SMALL, show_initials:!1, silhouette_class:"no-photo"})
    }
    return SPAN([SPAN({"class":"token " + (b ? "user_token " : "") + a.extra_classes, title:a.name_x, tooltip:a.tooltip}, [c ? d.render() : "", A({tabindex:"-1", onclick:function() {
        a.onClicked();
        return Node.STOP
    }, "class":"token_name"}, a.label_nodes !== null ? a.label_nodes : [a.name_x]), a.extra_element_for_token, A({tabindex:"-1", onclick:function() {
        a.onRemove();
        return Node.STOP
    }, onmousedown:a.onRemove, tooltip:a.remove_text, "class":"token_x", innerHTML:"&nbsp;"})]), " "])
}), renderInlineLoadingIndicator:function(a) {
    return DIV({"class":"inline-loading-indicator"}, [DIV({"class":"loader-dot loader-dot1"}, []), DIV({"class":"loader-dot loader-dot2"}, []), DIV({"class":"loader-dot loader-dot3"}, []), DIV({"class":"loader-text"}, [a.firstUnknownValue().user_text])])
}, renderLoadingIndicator:function(a, b, c) {
    a = {"class":"loading-indicator"};
    b && update(a, b);
    return DIV(a, [DIV({"class":"loader-dot loader-dot1"}, []), DIV({"class":"loader-dot loader-dot2"}, []), DIV({"class":"loader-dot loader-dot3"}, []), DIV({"class":"loader-text"}, [c || "Loading..."])])
}, renderWithinInlineLoadingBoundary:function(a) {
    return Node.createLoadingBoundaryLiveNodeR("DIV", {"class":"loading-boundary", children:a}, function(a) {
        return AsanaHelpers.renderInlineLoadingIndicator(a)
    })
}, renderWithinLoadingBoundary:function(a, b, c) {
    return Node.createLoadingBoundaryLiveNodeR(a, {"class":"loading-boundary", children:b}, function(a) {
        return AsanaHelpers.renderLoadingIndicator(a, c)
    })
}, renderWithinHiddenLoadingBoundary:function(a, b) {
    return Node.createLoadingBoundaryLiveNodeR(a, {"class":"loading-boundary", children:b}, function() {
        return SPAN({"class":"content-hidden-while-loading"})
    })
}, createItem:function(a) {
    a = Map.objectFromMappedValues(updateWithDefaults(a, {type:ATTRIBUTE_REQUIRED, creator:ATTRIBUTE_REQUIRED, name:"", domain:ATTRIBUTE_REQUIRED}), toValue);
    if(a.type === "ItemList") {
        return assertInstanceof(a.creator, DomainUser), ItemList.create({creator_du:a.creator, domain:a.domain})
    }else {
        if(a.type === "Domain") {
            return assertInstanceof(a.creator, User), Domain.create({name:a.name, creator:a.creator})
        }else {
            if(a.type === "Task") {
                return assertInstanceof(a.creator, DomainUser), Task.create({creator_du:a.creator, name:a.name, domain:a.domain})
            }else {
                ufu("Unknown type", a.type)
            }
        }
    }
}, deleteItems:function(a, b) {
    var c = b || function(a) {
        return a instanceof Task ? (a.trash(), !0) : !1
    }, d = a.isEmpty() ? null : a.first();
    a.size() === 1 && d instanceof Task && d.name() === "" && !d.hasMetadata() || UserActionContext.get().start(env.world_store.createStateObject(DeleteAsanaStateObjectAction, {creator:env.user(), objects:a.toArray()}));
    var e = Set.create();
    a.forEach(function(a) {
        c(a) && e.add(a)
    });
    return e
}, createTaskInPot:attributedFunc({creator_du:ATTRIBUTE_REQUIRED, name:"", description:"", pot:ATTRIBUTE_REQUIRED, domain:ATTRIBUTE_REQUIRED}, function(a) {
    a = copyAndUpdate(a, {pots:[a.pot]});
    delete a.pot;
    return AsanaHelpers.createTaskInPots(a)
}), createTaskInPots:attributedFunc({creator_du:ATTRIBUTE_REQUIRED, name:"", description:"", pots:ATTRIBUTE_REQUIRED, domain:ATTRIBUTE_REQUIRED, due_date:null, recurrence_type:0, recurrence_parameter:0}, function(a) {
    var b = AsanaHelpers.createItem({type:"Task", creator:a.creator_du, name:a.name, domain:a.domain});
    a.description && b.setDescription(a.description);
    a.due_date && b.setDueDate(Day.fromLocalMidnightTimestamp(a.due_date), a.creator_du);
    AsanaHelpers.setRecurrenceForTask(b, a.recurrence_type, a.recurrence_parameter);
    a.pots.forEach(function(c) {
        c.isUserTaskList() && b.assignTo(c, a.creator_du);
        c.isUserTaskList() ? c.appendItems(b) : c.insertAfter(b, null)
    });
    return b
}), setRecurrenceForTask:function(a, b, c) {
    a.setRecurrenceType(Task.RecurrenceTypes[b]);
    a.setRecursDaysAfterCompletion(null);
    a.setRecursMonthlyOnDay(null);
    a.setRecursWeeklyOnDay(null);
    a.setRecursYearlyOnDay(null);
    switch(Task.RecurrenceTypes[b]) {
        case Task.RecurrenceType.PERIODICALLY:
            a.setRecursDaysAfterCompletion(c);
            break;
        case Task.RecurrenceType.WEEKLY:
            a.setRecursWeeklyOnDay(c);
            break;
        case Task.RecurrenceType.MONTHLY:
            a.setRecursMonthlyOnDay(c);
            break;
        case Task.RecurrenceType.YEARLY:
            a.setRecursYearlyOnDay(c)
    }
}, getRecurrenceParameterForTask:function(a) {
    switch(a.recurrenceType()) {
        case Task.RecurrenceType.PERIODICALLY:
            return a.recursDaysAfterCompletion();
        case Task.RecurrenceType.WEEKLY:
            return a.recursWeeklyOnDay();
        case Task.RecurrenceType.MONTHLY:
            return a.recursMonthlyOnDay();
        case Task.RecurrenceType.YEARLY:
            return a.recursYearlyOnDay();
        default:
            return 0
    }
}, getShortenedName:function(a) {
    a = a.trim();
    return a.indexOf("@") !== -1 ? a.replace(/@.*$/, "@...") : a.indexOf(" ") === -1 ? a : a.substring(0, a.indexOf(" ")) + " " + a.substr(a.lastIndexOf(" ") + 1, 1)
}, getInitials:function(a) {
    a = a.trim();
    return a.indexOf("@") !== -1 ? a.charAt(0) + "@" : a.indexOf(" ") === -1 ? a.substring(0, 2) : a.charAt(0) + a.charAt(a.lastIndexOf(" ") + 1)
}, renderStructuredMessage:function(a, b, c) {
    for(var d = [], b = Map.mapize(b), e = /%{(\w+)}/g, f = e.exec(a), g = 0, h = function(a) {
        (typeof a !== "string" || a.length > 0) && d.push(a)
    };f !== null;) {
        h(a.substring(g, f.index)), g = f.index + f[0].length, f = b.get(f[1]), h(c(f)), f = e.exec(a)
    }
    h(a.substring(g));
    return d
}, describeAction:function(a, b) {
    var c = a.formatString(), d = Map.create([["u", a.getV("creator")]]), e = a.placeholderMap();
    e !== null && d.update(e);
    return SPAN({"class":"action-desc"}, AsanaHelpers.renderStructuredMessage(c, d, function(a) {
        return typeof a === "string" ? a : SPAN({"class":"objref"}, [AsanaHelpers.renderObjectLink({object:a, current_user:b})])
    }))
}, renderUndoWindow:function(a) {
    var b = env.lastUndoableUserActionOrNull();
    if(b !== null && b.useGenericUndoDisplay()) {
        env.scheduleUndoWindowTimeout();
        env.world_store.peekXvaluesAndStateObjectScalars([b.getX("changes")], [b]);
        env.world_store.peekXvaluesAndStateObjectScalars([], b.getV("changes").peekValuesArray());
        var c = "";
        b.isUndoable() && (c = UserActionContext.get().isUndoing() ? DIV({id:"undo_message", "class":"text_button"}, ["(Undoing...)"]) : A({"class":"text_button", onclick:function() {
            UserActionContext.get().requestUndo()
        }}, ["Undo"]));
        var d = DIV({}, [DIV({id:"undo_close_box", "class":"close-box", onclick:function() {
            UserActionContext.get().requestClearUndo()
        }}, []), DIV({id:"undo_success_icon", "class":"left-icon"}, []), AsanaHelpers.describeAction(b, env.user()), c]);
        return DIV({id:"undo", "class":"dismissable-overlay", style:{left:$rval(function() {
            return(a.width() - d.dimensions.width()) / 2
        })}}, [d])
    }
    return""
}, parallelizeList:function(a) {
    return!env.is_server || a instanceof Rvalue ? a : $rval(function() {
        return a
    })
}, renderLunaChrome:function(a) {
    var b = function() {
        alertAsync("This can occur either because you're not connected to the Internet or because our servers are temporarily having problems.  While disconnected, you can continue to use Asana, but your changes are not being saved.  Once you re-establish a connection to the server, all changes you've made will be saved and everything will be fine, but if your browser crashes in the meantime, you will lose your changes.")
    };
    env.world_store.peekXvaluesAndStateObjectScalars([], env.user().flagSettings().toArray());
    var c = $v(a).syncErrorMessage();
    if(c) {
        var d = [DIV({"class":"primary-explanation"}, ["Disconnected from the server"])], e = [];
        if(c === Datastore.Manager.Client.DISCONNECTED_ERROR_MESSAGE) {
            var f = null, c = $rval(function() {
                f !== null && clearInterval(f);
                var b = $v(a).nextSyncTime(), c = Math.round((b - env.clock.now()) / 1E3);
                if(!env.user().hasFlag("enable_try_now_on_disconnect") || c < 0) {
                    return DIV({"class":"reconnect-explanation"}, ["Trying to reconnect..."])
                }else {
                    var d = function() {
                        var a = Math.round((b - env.clock.now()) / 1E3);
                        return a > 0 ? "Trying to reconnect in " + a + "s..." : "Trying to reconnect..."
                    }, e = SPAN({"class":"time-remaining"}, [d()]);
                    f = safeInterval(function() {
                        c = Math.round((b - env.clock.now()) / 1E3);
                        var a = document.getElementById("disconnected_retry_button");
                        c <= 0 ? (e.firstChild.nodeValue = d(), clearInterval(f), a.style.visibility = "hidden") : (e.firstChild.nodeValue = d(), a.style.visibility = "visible")
                    }, 100);
                    return DIV({"class":"reconnect-explanation"}, [e, SPAN({id:"disconnected_retry_button", "class":"tooltip-button button reconnect-button", onclick:function() {
                        env.datastore_manager.requestSyncWhileServerOverloaded()
                    }}, [SPAN({"class":"button-text"}, ["Try Now"])])])
                }
            });
            d.push(c)
        }else {
            e.push(SPAN({"class":"message"}, [c]))
        }
        e.push(A({onclick:b, "class":"explain_link"}, ["What's going on?"]));
        d.push(DIV({"class":"secondary-explanation"}, e));
        b = DIV({id:"error_message_box"}, d)
    }else {
        b = ""
    }
    return DIV([b])
}, playVideoInPopup:function(a) {
    window.openAsync("/app/help_videos?" + (a || ""), "help_videos", "width=1024,height=613,status=0,toolbar=0,menubar=0")
}, stylizedHtmlFromPlainText:function(a, b) {
    return Format.stylizedHtmlFromPlainText(a, AsanaHelpers._makeLinkFunc(b))
}, linkifyFromPlainText:function(a, b) {
    return Format.linkify(escapeHTML(a), AsanaHelpers._makeLinkFunc(b))
}, _makeLinkFunc:function(a) {
    return function(b) {
        var c = Format.truncateWithEllipsesHTML(b, 35), d = b.match(AsanaHelpers.getAsanaLinkRegex());
        if(d !== null) {
            var e = parseInt(d[3], 10), f = toValueAllowingUnknown(env.world_store.objectOrUnknownR(e));
            if(isKnown(f) && (f instanceof Task || f instanceof Pot)) {
                if(f = f.linkName(), isKnown(f) && f && (c = escapeHTML(f), a)) {
                    return d = "return AsanaHelpers.onClickAsanaLinkWrapped(event, " + parseInt(d[2], 10) + ", " + e + ");", '<a href="' + b + '" onclick="javascript:' + d + '">' + c + "</a>"
                }
            }
        }
        d = b.match(AsanaHelpers.attachmentLinkRegex());
        if(d !== null && (d = parseInt(d[2], 10), d = toValueAllowingUnknown(env.world_store.objectOrUnknownR(d)), isKnown(d))) {
            return c = escapeHTML(d.name()), '<a href="' + b + '" class="attachment-link-to-file" tabindex="-1" target="_blank">' + c + "</a>"
        }
        return'<a href="' + b + '" target="_blank" onclick="event.stopPropagation();">' + c + "</a>"
    }
}, onClickAsanaLinkWrapped:function(a, b, c) {
    return Node.wrappedHandler({method:"AsanaHelpers.onClickAsanaLinkWrapped"}, function() {
        return Node.updateEventForHandlerReturnValue(a, AsanaHelpers.onClickAsanaLink(a, b, c))
    })(a)
}, onClickAsanaLink:function(a, b, c) {
    return a.ctrlKey || a.metaKey || a.shiftKey ? Node.JUST_DEFAULT : (env.startNavigating(!0), a = AsanaHelpers.renderTaskPath(b, c), env.datastore_manager.enactChange(FragmentChange.create({fragment:a})), Node.STOP)
}, onClickExternalLink:function(a, b) {
    window.openAsync(b)
}, hostPortsToMatchForRegex:function() {
    return[Flags.insecure_web_host_port, Flags.secure_web_host_port, "beta.asana.com", "app.asana.com"]
}, getAsanaLinkRegex:function(a) {
    if(!AsanaHelpers._ASANA_LINK_RE_RAW) {
        AsanaHelpers._ASANA_LINK_RE_RAW = "https?://(" + AsanaHelpers.hostPortsToMatchForRegex().join("|") + ")(?:/#)?/0/(?:" + INBOX_NAME.toLowerCase() + "/)?(\\d+)/(\\d+)(?:/\\d+)?"
    }
    if(a === !0) {
        if(!AsanaHelpers._ASANA_LINK_RE_GLOBAL) {
            AsanaHelpers.ASANA_LINK_RE_GLOBAL = RegExp(AsanaHelpers._ASANA_LINK_RE_RAW, "g")
        }
        return AsanaHelpers.ASANA_LINK_RE_GLOBAL
    }else {
        if(!AsanaHelpers._ASANA_LINK_RE) {
            AsanaHelpers._ASANA_LINK_RE = RegExp("^" + AsanaHelpers._ASANA_LINK_RE_RAW + "$")
        }
        return AsanaHelpers._ASANA_LINK_RE
    }
}, attachmentLinkRegex:function() {
    if(!AsanaHelpers._ATTACHMENT_LINK_RE) {
        AsanaHelpers._ATTACHMENT_LINK_RE = RegExp("^https?://(" + AsanaHelpers.hostPortsToMatchForRegex().join("|") + ")/app/asana/-/download_asset\\?asset_id=(\\d+)")
    }
    return AsanaHelpers._ATTACHMENT_LINK_RE
}, objectFromUrlOrNull:function(a) {
    return(a = a.match(AsanaHelpers.getAsanaLinkRegex())) ? (a = parseInt(a[3], 10), a = env.world_store.objectOrUnknownR(a).peekAllowingUnknown(), isKnown(a) ? a : null) : null
}, getAsanaObject:function(a) {
    var b = a.match(AsanaHelpers.getAsanaLinkRegex());
    if(b !== null) {
        var c = parseInt(b[2], 10), d = parseInt(b[3], 10), e = {};
        e.pot_id = c;
        e.item_id = d;
        e.label_html_r = $rval(function() {
            var b = toValueAllowingUnknown(env.world_store.objectOrUnknownR(d));
            if(isKnown(b) && (b = b.getValueAllowingUnknown("name"), isKnown(b) && b)) {
                return escapeHTML(b)
            }
            return a
        })
    }
    return e
}, extractReferencedDomainUsers:function(a) {
    var b = [], a = a.match(AsanaHelpers.getAsanaLinkRegex(!0));
    a !== null && a.forEach(function(a) {
        var d = a.match(AsanaHelpers.getAsanaLinkRegex());
        if(d !== null) {
            var a = parseInt(d[2], 10), d = parseInt(d[3], 10), e = env.world_store.objectOrUnknownR(a).peekAllowingUnknown();
            a === d && isKnown(e) && e.isUserTaskList() && b.push(e.assignee())
        }
    });
    return b
}, isClientDatastoreStale:computedProperty("AsanaHelpers.isClientDatastoreStale", function() {
    var a = $v(env.frp.chronometer.approximate_time_lvalue), b = $v(env.datastore_manager.last_successful_sync_time_lvalue);
    if(b === null) {
        return!1
    }
    return a - b > AsanaHelpers.DATASTORE_STALE_MS
}), onWorkflowStep:function(a, b, c, d) {
    isUnknown(b) ? WorkflowProgressDialogView.show({workflow:null, action:c, result:d}) : b.alterInitialSessionAfterPageLoadStep(a, c, d)
}, startGenericUserAction:attributedFunc({message:ATTRIBUTE_REQUIRED}, function(a) {
    UserActionContext.get().start(env.world_store.createStateObject(GenericUserAction, {creator:env.user(), message:a.message}))
}), renderDueDate:function(a, b) {
    if(a === null) {
        return""
    }
    var c = a.getDaysPastToday(), d = "";
    b && (c <= 0 ? d = "overdue" : c <= 2 && (d = "due_soon"));
    return SPAN({"class":"grid_due_date " + d}, [a.strftime("%!d")])
}, renderPots:function(a, b, c) {
    var d, e = a;
    a.size() > 2 && !c && (e = a.slice(0, 2), d = a.slice(2));
    a = e.map(function(a) {
        var d = a.name(), e = c ? d : MochiKit.Text.truncate(d, 15, "...");
        return A({"class":"token tag", tooltip:"Click to view all tasks in " + d, tooltip_delay:500, onclick:function() {
            b ? b(a) : env.realAppSession().setCurrentListWithoutResettingSelection(a)
        }}, [e])
    });
    d && a.push(SPAN({"class":"tag_overflow", tooltip:d.map(function(a) {
        return a.name()
    }).join(", ")}, ["..."]));
    return a
}, classForWorkspaceIcon:function(a) {
    var b = a.isFor();
    return a.isGlobal() ? "personal-icon" : b === "PERSONAL_HOUSEHOLD" ? "home-icon" : b === Domain.NullValue || b === null ? "" : b === "BUSINESS" || b === "NONPROFIT" ? "work-icon" : b === "SCHOOL" ? "school-icon" : b === "CLUB_TEAM" ? "club-icon" : b === "OTHER" ? "other-icon" : (host.recordWarning("Unknown value for is_for", b), "work-icon")
}, renderBigFeedStoryHeader:function(a, b, c) {
    c = Date.create(c);
    return DIV({"class":"story-header"}, [DIV({"class":"story-date"}, [c.describeShortRelativeToToday()]), DIV({"class":"user-photo feed-photo-large"}, [b === null ? "" : a.createView(PhotoView, {who:b.user(), size:PhotoView.Size.LARGE, show_initials:!1, domain_user:b, namespace:c, silhouette_class:"no-photo"}).render()]), DIV({"class":"user-name"}, [b !== null ? b.name() : "Asana"])])
}, renderSmallStory:function(a, b, c) {
    return DIV({"class":"small-story"}, [DIV({"class":"story-icon"}), DIV({"class":"story-content"}, [SPAN({"class":"user-name"}, [a !== null ? a.name() : "Asana"]), " ", SPAN({"class":"story-text"}, [b]), " ", SPAN({"class":"story-date"}, [Date.create(c).describeShortRelativeToToday()])])])
}};
__FILE__ = "luna/temp/asana_state_object.js";
MULTIPLE_VALUES = makeUniqueValue("MULTIPLE_VALUES");
AsanaStateObject = StateObject.subclass("AsanaStateObject", [], {property_descs:{creator_du:{type:StateObject, isWriteableBy:Asana.AccessControl.creatorDUPropertyIsWriteable}, followers_du:{type:List, track_initial_value:!0, api_info:{field_name:"follower"}, isWriteableBy:Asana.AccessControl.followersDUPropertyIsWriteable}, comments:{type:PlaceholderType}}, multiPropertyValue:function(a, b) {
    var c = void 0;
    Rvalue.forEachValue(a, function(a) {
        if(b in a) {
            if(a = a[b](), c === void 0) {
                c = a
            }else {
                if(!equals(c, a)) {
                    return c = MULTIPLE_VALUES, IIterable.STOP
                }
            }
        }
    });
    return c
}}, {followers:function() {
    return $v(this.followersR())
}, _followerIsActive:function(a) {
    return a.active()
}, followersR:Memoize.memoizeInThis("followersR", function() {
    var a = this;
    return $rval(function() {
        var b = a.getX("followers_du");
        return FilterRvalue.create(b, function(b) {
            return $rval(function() {
                assertInstanceof(b, DomainUser);
                return a._followerIsActive(b)
            }, "AsanaObject.followersR.filter")
        }).setAsSafelyPeekableByAncestor()
    }, "AsanaObject.followersR").setAsSafelyPeekableByAncestor()
}), hasFollower:function(a) {
    return this.followers().contains(a)
}, addFollower:function(a, b) {
    var c = $v(a);
    this.hasFollower(c) || (this.addStoryOfSubtype(AddedFollowerComment, {creator_du:b, follower_du:c}), b.addContact(c), this.addFollowerWithoutStory(c))
}, addFollowerWithoutStory:function(a) {
    a = $v(a);
    this.followersDuL().requestInsertBefore(a, null)
}, removeFollower:function(a) {
    a = $v(a);
    this.followersDuL().requestRemove(a)
}, toggleFollower:function(a, b) {
    this.hasFollower(a) ? this.removeFollower(a) : this.addFollower(a, b)
}, uriPathToFollowOrUnfollow:function(a, b) {
    var c = this.followUriHash(a, b);
    return"/-/follow?item_id=" + this.global_id + "&follow=" + (b ? 1 : 0) + "&hash=" + c
}, followUriHash:function(a, b) {
    return Crypto.hash(Flags.salt + a.global_id + (b ? 1 : 0), {algorithm:Crypto.Algorithm.MD5, output:Crypto.Format.HEX})
}, addComment:function(a) {
    var b = a.creator_du;
    b !== null && (assertInstanceof(b, DomainUser), this.addFollowerWithoutStory(a.creator_du));
    b = CommentStory;
    if(a.comment_type !== void 0) {
        b = a.comment_type, delete a.comment_type
    }
    return this.addStoryOfSubtype(b, a)
}, addStoryOfSubtype:function(a, b) {
    b.parent_object = this;
    if(!b.source) {
        b.source = env.isMobile() ? Story.Source.MOBILE : Story.Source.WEB
    }
    return a.create(b)
}, onStoryCreatedOnServer:noop, onStoryTrashedOnServer:noop, storiesR:Memoize.memoizeInThis("storiesR", function() {
    return QueryBuilder.queryForObjects(Story).where(QueryBuilder.scalarProperty("parent_object").eq(this), QueryBuilder.scalarProperty("__creation_time").orders()).getQueryRvalue("AsanaStateObject.stories").setAsSafelyPeekableByAncestor()
}), feedStoriesR:Memoize.memoizeInThis("feedStoriesR", function() {
    return FilterRvalue.create(this.storiesR(), function(a) {
        return!(a instanceof ProjectShareStory) && !(a instanceof AddedFollowerComment)
    }).setAsSafelyPeekableByAncestor()
}), _commentDraftsForDomainUserR:Memoize.memoizeInThis("commentDraftsForDomainUserR", function(a) {
    return QueryBuilder.queryForObjects(CommentDraft).where(QueryBuilder.scalarProperty("parent_object").eq(this), QueryBuilder.scalarProperty("creator_du").eq(a), QueryBuilder.scalarProperty("__creation_time").orders()).getQueryRvalue("AsanaStateObject.commentDraftsForDomainUserR").setAsSafelyPeekableByAncestor()
}), currentCommentDraftForDomainUserOrNull:computedProperty("currentCommentDraftForDomainUserOrNull", function(a) {
    return $v(this._commentDraftsForDomainUserR(a)).firstValueOrNull()
}), stories:function() {
    return $v(this.storiesR())
}, comments:function() {
    return this.stories().filter(function(a) {
        return a instanceof CommentStory
    })
}, creator:function() {
    var a = this.getV("creator_du");
    a !== null && assertInstanceof(a, DomainUser);
    return a
}, creatorOrUnknown:function() {
    return toValueAllowingUnknown(this.getX("creator_du"))
}, creatorName:function() {
    var a = this.creator();
    return a ? a.name() : "Asana"
}, isBar:function() {
    return!1
}, onAfterCommit:function(a) {
    AsanaStateObject.superproto.onAfterCommit.call(this, a);
    env.is_server && this.isImplOf(IItemList) && this.queueChangedItemsForReindexing(a)
}});
__FILE__ = "luna/temp/luna_model.js";
FlagSetting = StateObject.subclass("FlagSetting", {property_descs:{name:{type:String}}}, {_computeIsVisibleBy:function() {
    return!0
}, _computeIsWriteableBy:function(a) {
    return a.hasAdminWritePrivilege()
}});
FlagSetting.create = attributedValueFunc({name:ATTRIBUTE_REQUIRED}, function(a) {
    return env.world_store.createStateObject(FlagSetting, {name:a.name})
});
StateObjectPlaceholder = SessionObject.subclass("StateObjectPlaceholder", {property_descs:{name:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}}}, {_computeIsVisibleBy:function() {
    return!0
}, toString:function() {
    var a = this.nameL(), a = Datastore.valueForDatastoreValue(a.value_type, a.datastore().readValue(a));
    return isKnown(a) ? a : "Unnamed StateObjectPlaceholder"
}, _getPrettyInfoHeadline:function() {
    return this.toString()
}});
globals.UndoableChange = StateObject.subclass("UndoableChange", {}, {requestDo:ABSTRACT, requestUndo:ABSTRACT});
globals.UserAction = StateObject.subclass("UserAction", {property_descs:{changes:{type:List}, creator:{type:StateObject}}}, {formatString:ABSTRACT, placeholderMap:ABSTRACT, isUndoable:function() {
    return!1
}, useGenericUndoDisplay:function() {
    return!0
}, _computeIsVisibleBy:AccessControl.isVisibleOnlyToUser("creator")});
DeleteAsanaStateObjectAction = UserAction.subclass("DeleteAsanaStateObjectAction", {property_descs:{objects:{type:List, allow_trashed_values:!0}}}, {isUndoable:function() {
    return!0
}, formatString:function() {
    return"%{object_description} deleted"
}, placeholderMap:function() {
    var a = this.getV("objects"), b = a.firstValueOrNull();
    return Map.create([["object_description", a.size() === 1 && b.name().length > 0 ? b : a.size() > 1 ? a.size() + " items" : "1 item"]])
}});
UndoableListChange = UndoableChange.subclass("UndoableListChange", {property_descs:{object:{type:StateObject, allow_trashed_values:!0}, list_pointer:{type:Pointer}}}, {_computeIsVisibleBy:function(a) {
    return this.getV("object")._computeIsVisibleBy(a)
}});
UndoableListRemoveChange = UndoableListChange.subclass("UndoableListRemoveChange", {old_rank:{type:String}}, {requestDo:function() {
    this.getV("list_pointer").getLvalue().requestRemove(this.getV("object"))
}, requestUndo:function() {
    this.getV("list_pointer").getLvalue().requestInsertAtRank(this.getV("object"), this.getV("old_rank"))
}});
UndoableListRankChange = UndoableListChange.subclass("UndoableListRankChange", {property_descs:{old_rank:{type:String}, new_rank:{type:String}}}, {requestDo:function() {
    this.getV("list_pointer").getLvalue().requestInsertAtRank(this.getV("object"), this.getV("new_rank"))
}, requestUndo:function() {
    this.getV("list_pointer").getLvalue().requestInsertAtRank(this.getV("object"), this.getV("old_rank"))
}});
UndoableListAppendOrPrependChange = UndoableListChange.subclass("UndoableListAppendOrPrependChange", {property_descs:{old_rank:{type:String}, append:{type:Boolean}}}, {requestDo:function() {
    env.datastore_manager.enactChange(DatastoreListAppendOrPrependChange.create({list_pointer:this.getV("list_pointer"), element_id:this.getV("object").global_id, object_type_id:env.type_registry.getTypeId(this.getV("object").__type), append:this.getV("append")}))
}, requestUndo:function() {
    this.getV("list_pointer").getLvalue().requestInsertAtRank(this.getV("object"), this.getV("old_rank"))
}});
defineValueUndoableChange = function(a, b) {
    globals[b] = UndoableChange.subclass(b, {property_descs:{pointer:{type:Pointer}, old_value:{type:a}, new_value:{type:a}}}, {requestDo:function() {
        this.getV("pointer").getLvalue().requestSet(this.getV("new_value"))
    }, requestUndo:function() {
        this.getV("pointer").getLvalue().requestSet(this.getV("old_value"))
    }, _computeIsVisibleBy:function(a) {
        var b = this.getV("pointer").getLvalue();
        return env.datastoreForObjectId(b.object_id).objectWithoutAC(b.object_id).isVisibleBy(a)
    }})
};
defineValueUndoableChange(Integer, "IntValueUndoableChange");
defineValueUndoableChange(Float, "FloatValueUndoableChange");
defineValueUndoableChange(Boolean, "BooleanValueUndoableChange");
defineValueUndoableChange(String, "TextValueUndoableChange");
defineValueUndoableChange(StateObject, "StateObjectValueUndoableChange");
__FILE__ = "apps/asana/announcements.js";
Announcements = {MAINTENANCES:{0:null, 1:null, 2:null, 3:null, 4:null, 5:null, 6:null}};
update(Announcements, {getNewUserDefaults:function() {
    var a = function(a) {
        for(var c = 0;;++c) {
            if(a[c] === void 0) {
                return c
            }
        }
    };
    return{current_announcement:a(Announcements.topbarAnnouncements()), current_dialog_announcement:a(Announcements.dialogAnnouncements()), current_maintenance:0}
}, getAnnouncementNumber:function(a, b) {
    for(var c = b;a[c] === null;) {
        ++c
    }
    return c
}, _renderLearnMore:function(a) {
    return DIV([AsanaHelpers.renderExternalLink("Learn more", a)])
}, _renderMailingListPrompt:function() {
    return $v(env.user().getV("opted_in_to_mailing_list")) ? "" : DIV([BR(), INPUT({id:"opt_in_to_mailing_list", "class":"checkbox-opt-in", data_type:"boolean"}), LABEL({"for":"opt_in_to_mailing_list"}, [" Email me about new features"])])
}, _shouldShowPremiumPermissionsDialog:function() {
    return env.user().domains().any(function(a) {
        if(!a.isGlobal()) {
            return a.usersModel().numObjects() > 15 || env.user().domainUserForDomain(a).interestedInPremiumPermissions()
        }
        return!1
    })
}, topbarAnnouncements:function() {
    return{0:null, 1:null, 2:null, 3:null, 4:null, 5:null, 6:null, 7:null, 8:null, 9:null, 10:null, 11:null, 12:null, 13:null, 14:null, 15:null, 16:null, 17:null, 18:null, 19:null, 20:null, 21:null, 22:null, 23:null, 24:null, 25:null, 26:null, 27:function() {
        return[SPAN({style:"color: red;"}, ["New!"]), " We just launched subtasks. ", AsanaHelpers.renderExternalLink("Read the blog post announcement here.", "http://blog.asana.com/2012/10/introducing-asana-subtasks/")]
    }}
}, dialogAnnouncements:function() {
    return{0:null, 1:null, 2:null, 3:null, 4:null, 5:null, 6:null, 7:null, 8:null, 9:null, 10:null, 11:null, 12:null}
}});
__FILE__ = "apps/asana/model/survey.js";
Survey = {INITIAL_SURVEY_DELAY:2 * Date.MILLISECONDS_PER_DAY, SUBSEQUENT_SURVEY_DELAY:6 * Date.MILLISECONDS_PER_WEEK, DISPLAY_TIME:Date.MILLISECONDS_PER_WEEK};
SurveyResponse = AsanaStateObject.subclass("SurveyResponse", {property_descs:{responder:{type:AsanaStateObject}, start_time:{type:Integer}, stop_time:{type:Integer}, num_questions_answered:{type:Integer}, how_likely_are_you_to_recommend_asana:{type:Integer}, free_response:{type:String}}, create:attributedValueFunc({responder:ATTRIBUTE_REQUIRED, start_time:ATTRIBUTE_REQUIRED}, function(a) {
    update(a, {stop_time:null, num_questions_answered:0, how_likely_are_you_to_recommend_asana:null, free_response:""});
    return env.world_store.createStateObject(SurveyResponse, a)
})}, {_computeIsVisibleBy:function(a) {
    return a === this.getX("responder").peekAllowingUnknown()
}, expirationTime:function() {
    return this.startTime() + Survey.DISPLAY_TIME
}, shouldBeReplaced:function() {
    return $v(env.frp.chronometer.approximate_time_lvalue) > this.expirationTime()
}, newSurveyStartTime:function() {
    var a = $v(env.frp.chronometer.approximate_time_lvalue), a = Math.ceil((a - this.expirationTime()) / Survey.SUBSEQUENT_SURVEY_DELAY);
    return this.expirationTime() + Survey.SUBSEQUENT_SURVEY_DELAY * a - Survey.DISPLAY_TIME
}});
__FILE__ = "luna/common/model/iworkflow.js";
IWorkflow = Interface.create("IWorkflow", [], {Result:{SUCCESS:"SUCCESS", ACCESS_DENIED:"ACCESS_DENIED", BAD_WORKFLOW:"BAD_WORKFLOW", INACTIVE:"INACTIVE", EXPIRED:"EXPIRED"}}, {broadcast:ABSTRACT, step:ABSTRACT, alterInitialSessionAfterPageLoadStep:ABSTRACT, nonce:ABSTRACT, createNewNonce:ABSTRACT});
define("BroadcastWorkflowChange", Change.subclass("BroadcastWorkflowChange", {}, {workflow:ATTRIBUTE_REQUIRED, enact:function() {
    env.is_server && this.workflow.broadcast()
}, taintedObjectIds:function() {
    return[this.workflow.global_id]
}}));
__FILE__ = "apps/asana/model/email_verification_workflow.js";
EmailVerificationWorkflow = StateObject.subclass("EmailVerificationWorkflow", [IWorkflow], {DEFAULT_EXPIRATION_PERIOD_MS:7 * Date.MILLISECONDS_PER_DAY, Result:{USER_EXISTS:"USER_EXISTS"}, Action:{VERIFY:"verify", CANCEL:"cancel"}, property_descs:{user:{type:StateObject, isWriteableBy:Asana.AccessControl.emailVerificationWorkflowUserIsWriteable}, nonce:{type:String, isWriteableBy:Asana.AccessControl.emailVerificationWorkflowPropertyIsWriteable}, new_email:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE},
    completed_at:{type:Timestamp, isWriteableBy:Asana.AccessControl.emailVerificationWorkflowPropertyIsWriteable}, cancelled_at:{type:Timestamp, isWriteableBy:Asana.AccessControl.emailVerificationWorkflowPropertyIsWriteable}, expires_at:{type:Timestamp, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}}, create:attributedValueFunc({user:ATTRIBUTE_REQUIRED, new_email:ATTRIBUTE_REQUIRED, nonce:"", completed_at:0, cancelled_at:0, expires_at:0}, function(a) {
    if(a.expires_at === 0) {
        a.expires_at = env.clock.now() + EmailVerificationWorkflow.DEFAULT_EXPIRATION_PERIOD_MS
    }
    return env.world_store.createStateObject(EmailVerificationWorkflow, a)
})}, {step:function(a, b) {
    var c = this._resultIfUsedBy(a, b);
    if(c === IWorkflow.Result.SUCCESS) {
        if(b === EmailVerificationWorkflow.Action.VERIFY) {
            this.getX("completed_at").requestSet(env.clock.now());
            var d = this.newEmail(), e = VerifiedEmail.findByEmailOnServerWithoutAC(d);
            e === null ? VerifiedEmail.create({ve_user:a, ve_email:d}) : assertEquals(e.user(), a)
        }else {
            this.getX("cancelled_at").requestSet(env.clock.now())
        }
        a.setPropertyBlessed("email_verification_workflow", null)
    }
    return c
}, alterInitialSessionAfterPageLoadStep:function(a, b, c) {
    c === IWorkflow.Result.SUCCESS && b === EmailVerificationWorkflow.Action.VERIFY ? AccountDialogView.show({user:env.user(), selected_tab:AccountDialogTabs.EMAIL_NOTIFICATIONS}) : WorkflowProgressDialogView.show({workflow:this, action:b, result:c})
}, broadcast:function() {
    if(env.is_server) {
        var a = this.getV("user"), b = this.getV("new_email"), c = EmailTemplate.create({template_name:"email_verification_email", template_data:{name:a.name(), new_email:b, support_email:"support@asana.com", verify_link:this._verificationLink(), cancel_link:this._cancellationLink()}}).render();
        update(c, {to_address:EmailAddress.create(b, a.name())});
        EmailMessage.create(c).scheduleDelivery()
    }else {
        env.datastore_manager.enactChange(BroadcastWorkflowChange.create({workflow:this}))
    }
}, isOutstanding:function() {
    return this.completedAt() === 0 && this.expiresAt() >= env.clock.now()
}, isCompleted:function() {
    return this.completedAt() !== 0
}, isCancelled:function() {
    return this.cancelledAt() !== 0
}, isActive:function() {
    return!this.isCompleted() && !this.isCancelled()
}, createNewNonce:function() {
    var a = Random.id({secure:!0});
    this.getX("nonce").requestSet(a);
    return a
}, _verificationLink:function() {
    return ServerUrl.workflowUrlForApp("asana", this.global_id, EmailVerificationWorkflow.Action.VERIFY)
}, _cancellationLink:function() {
    return ServerUrl.workflowUrlForApp("asana", this.global_id, EmailVerificationWorkflow.Action.CANCEL)
}, _resultIfUsedBy:function(a, b) {
    if(!equals(a, this.getV("user"))) {
        return IWorkflow.Result.ACCESS_DENIED
    }
    if(b === EmailVerificationWorkflow.Action.VERIFY) {
        var c = this.newEmail(), d = VerifiedEmail.findByEmailOnServerWithoutAC(c);
        if(d !== null) {
            return c = d.userL().peekAllowingUnknown(), isUnknown(c) || c !== a ? EmailVerificationWorkflow.Result.USER_EXISTS : IWorkflow.Result.SUCCESS
        }
        c = User.findByEmailOnServerWithoutAC(c);
        if(c !== null) {
            return c !== a ? EmailVerificationWorkflow.Result.USER_EXISTS : IWorkflow.Result.SUCCESS
        }
        if(this.getV("expires_at") <= env.clock.now()) {
            return IWorkflow.Result.EXPIRED
        }
    }
    if(!this.isActive()) {
        return IWorkflow.Result.INACTIVE
    }
    return IWorkflow.Result.SUCCESS
}, _computeIsVisibleBy:function(a) {
    return equals(a, this.getX("user").peekAllowingUnknown())
}});
__FILE__ = "apps/asana/model/verified_email.js";
VerifiedEmail = StateObject.subclass("VerifiedEmail", {property_descs:{ve_user:{type:StateObject, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, ve_email:{type:String, indexed:!0, isWriteableBy:StateObject.Property.READ_ONLY}, task_creation_domain_user:{type:StateObject, isWriteableBy:Asana.AccessControl.verifiedEmailTaskCreationDomainUserIsWriteable, default_value:null}}, create:attributedValueFunc({ve_user:ATTRIBUTE_REQUIRED, ve_email:ATTRIBUTE_REQUIRED}, function(a) {
    var b = a.ve_email;
    delete a.ve_email;
    VerifiedEmail.findByEmailOnServerWithoutAC(b) !== null && host.recordWarning("Trying to create a VerifiedEmail with an email that already exists. Assign to moskov when I show up.", b);
    a = env.world_store.createStateObject(VerifiedEmail, a);
    a.setEmail(b);
    return a
}), findAllByEmailOnServerWithoutAC:function(a) {
    assert(a !== null && a !== void 0, "Email must not be null or undefined");
    if(a === "") {
        return null
    }
    with(QueryBuilder) {
        a = queryForObjects(VerifiedEmail).usingIndex(VerifiedEmail.getIndexByName("VerifiedEmail.ve_email")).where(scalarProperty("ve_email").ieq(a).orders()).withoutAccessControl().allowUnscoped().getQueryRvalue("verified email with email address")
    }
    return $v(a)
}, findByEmailOnServerWithoutAC:function(a) {
    var b = VerifiedEmail.findAllByEmailOnServerWithoutAC(a);
    if(b === null) {
        return null
    }
    b.size() > 1 ? (host.recordWarning("More than one VerifiedEmail with the same email. Assign to moskov when I show up.", a), a = b.findXvalueWithLowestGlobalId()) : a = b.firstValueOrNull();
    b = env.userOrNull();
    b !== null && a !== null && a.isVisibleBy(b);
    return a
}}, {user:function() {
    return this.veUser()
}, userL:function() {
    return this.veUserL()
}, email:function() {
    return this.veEmail()
}, emailL:function() {
    return this.veEmailL()
}, serverOnlyEmailR:rvalueProperty("serverOnlyEmailR", function() {
    var a = this;
    return serverComputedValue(a.global_id + ":serverOnlyEmail", function() {
        if(a.user().personalInformationIsVisible(env.userOrNull())) {
            return a.email()
        }
        return UnknownValue.AccessDenied.create(null, null)
    })
}), serverOnlyEmail:function() {
    return $v(this.serverOnlyEmailR())
}, setEmail:function(a) {
    this.setPropertyBlessed("ve_email", a)
}, setTaskCreationDomainUser:function(a) {
    this.taskCreationDomainUserL().requestSet(a)
}, onBeforeTrashedOnServer:function() {
    var a = this, b = a.user().verifiedEmails(!0).find(function(b) {
        return b !== a
    });
    b === null && ufu("The user would be left with no verified emails.", a.user());
    a.user().emailNoAC() === a.email() && a.user().setEmailBlessed(b.email());
    QueryBuilder.queryForObjects(DomainUser).where(QueryBuilder.scalarProperty("notification_verified_email").eq(this)).withoutAccessControl().getQueryRvalue("DomainUsers for VerifiedEmail.onBeforeTrashedOnServer").setAsSafelyPeekableByAncestor().peek().forEach(function(a) {
        a.setPropertyBlessed("notification_verified_email", null)
    })
}, _computeIsVisibleBy:AccessControl.isVisibleOnlyToUser("ve_user"), _areTrashPropertiesWriteableBy:function() {
    return!0
}});
__FILE__ = "luna/common/model/user.js";
FlagSystem.defineString({name:"photos_s3_bucket_name", help:"s3 bucket for photos", send_to_client:!0});
User = StateObject.subclass("User", [IDescribable, INavigatable, IHasProfileImage], {PasswordState:{NEVER_SET_OLD_USER:"NEVER_SET_OLD_USER", NEVER_SET_NEW_USER:"NEVER_SET_NEW_USER", OK:"OK", RESET_BY_OTK:"RESET_BY_OTK", NOT_SET_GOOGLE_AUTH:"NOT_SET_GOOGLE_AUTH"}, MONSTER_FB_ID:-1, CreationSource:{GRANDFATHERED:"GRANDFATHERED", OOTCOW:"OOTCOW", GUEST_INVITE:"GUEST_INVITE", PERSONAL_PROJECTS:"PERSONAL_PROJECTS", DOMAIN_INVITE:"DOMAIN_INVITE", WORKSPACE_LINK_INVITE:"WORKSPACE_LINK_INVITE", SHARE_LINK_INVITE:"SHARE_LINK_INVITE",
    SIGNUP:"SIGNUP", TESTING:"TESTING", SIGNUP_GOOGLE_AUTH:"SIGNUP_GOOGLE_AUTH"}, PRIVATE_USER_NAME:"Private User", property_descs:{name:{type:String, server_only:!0, indexed:!0, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE}, email:{type:String, server_only:!0, indexed:!0, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, facebook_id:{type:Integer, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, password_state:{type:String, isWriteableBy:Asana.AccessControl.userPasswordStateIsWriteable},
    is_claimed:{type:Boolean, isWriteableBy:StateObject.Property.READ_ONLY}, claimed_time:{type:Timestamp, default_value:null, isWriteableBy:StateObject.Property.READ_ONLY}, creation_source:{type:String, default_value:"GRANDFATHERED", isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, small_pic_url:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE}, superuser:{type:Boolean, isWriteableBy:function(a, b, c) {
        return $v(c) === !1
    }, track_initial_value:!0}, admin:{type:Boolean, isWriteableBy:function(a, b, c) {
        return a.isNew() && !$v(c) || b.hasAdminWritePrivilege() && b !== a
    }, track_initial_value:!0}, personal_domain:{type:AsanaStateObject, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, flag_settings:{type:List, isWriteableBy:function(a, b) {
        return b.hasAdminWritePrivilege()
    }}, email_verification_workflow:{type:EmailVerificationWorkflow, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE}, last_session_creation_time:{type:Integer, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, show_welcome_dialog:{type:Boolean, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE}, show_manage_workspace_dialog:{type:Boolean, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE, default_value:!1}, current_announcement:{type:Integer,
        isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE}, current_dialog_announcement:{type:Integer, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE}, current_maintenance:{type:Integer, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE}, current_survey_response:{type:AsanaStateObject, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE}, last_emailed_time:{type:Timestamp, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, domain_users:{type:List},
    automatically_opt_in_to_mailing_list_once_past_tos:{type:Boolean, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE, default_value:!1}, opted_in_to_mailing_list:{type:Boolean, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE}, subscribed_to_mailing_list:{type:Boolean, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, unsubscribed_from_mailing_list:{type:Boolean, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE, default_value:!1}, manage_workspace_link_is_hidden:{type:Boolean,
        isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE}, open_in_three_pane:{type:Boolean, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE, default_value:!1}, show_videos_in_bottom_bar:{type:Boolean, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE, default_value:!0}, merged_into_user:{type:AsanaStateObject, default_value:null}, need_to_send_second_day_email:{type:Boolean, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE, default_value:!1},
    recents:{type:List, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF}, local_timezone:{type:String, default_value:"America/Los_Angeles", isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE}, country_code:{type:String, default_value:"US", isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE}, profile_photo_version:{type:String, server_only:!0, default_value:null}, tour_step:{type:String, default_value:null, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE},
    story_created_3_of_7_days:{type:Timestamp, default_value:null}, dismissed_new_workspace_ad:{type:Boolean, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE, default_value:!1}, global_domain_ad_state:{type:String, default_value:"VISIBLE", isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE}, ios_app_rating_status:{type:String, default_value:null, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE}, ios_app_previous_use_day:{type:String, default_value:null,
        isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE}, ios_app_distinct_days_used:{type:Integer, default_value:0, isWriteableBy:StateObject.Property.WRITEABLE_BY_SELF_OR_ON_CREATE}}, create:attributedValueFunc({name:"", email:ATTRIBUTE_REQUIRED, facebook_id:0, admin:!1, superuser:!1, creation_source:ATTRIBUTE_REQUIRED, show_welcome_dialog:!0, show_manage_workspace_dialog:!0, password:null, automatically_opt_in_to_mailing_list_once_past_tos:!0, opted_in_to_mailing_list:!1, manage_workspace_link_is_hidden:!1,
    open_in_three_pane:!1, email_verification_workflow:null, flag_settings:[], need_to_send_second_day_email:!0}, function(a) {
    update(a, {small_pic_url:"", last_session_creation_time:null, last_emailed_time:null, password_state:User.PasswordState.NEVER_SET_NEW_USER});
    var b = a.password;
    delete a.password;
    delete a.is_claimed;
    update(a, Announcements.getNewUserDefaults());
    var a = env.world_store.createStateObject(User, a), c = SurveyResponse.create({responder:a, start_time:env.clock.now() + Survey.INITIAL_SURVEY_DELAY + Random.integer({max:Survey.SUBSEQUENT_SURVEY_DELAY})});
    a.getX("current_survey_response").requestSet(c);
    b !== null && a.setPassword(b);
    a.setPropertyBlessed("is_claimed", !1);
    Domain._globalDomainOrNull() === null && Domain.resetGlobalDomain();
    Domain.globalDomain().addFullMember(a);
    return a
}), createOrReturnExisting:function(a) {
    var b = a.email, c = processHandler(function() {
        return User.create(a)
    }), d = User.findByEmailOnServerWithoutAC(b);
    d || ufu("Did not find a user with the matching email even though we just created one", b);
    if(d !== c) {
        return processHandler(function() {
            c.removePersonalInformation()
        }), d
    }
    return c
}, findByEmailOnServerWithAC:function(a) {
    var b = User.findByEmailOnServerWithoutAC(a);
    if(b === null) {
        return null
    }else {
        var c = b.allDomainUsers().filter(function(b) {
            return b.emailNoAC() === a
        }).map(function(a) {
                return a.domain()
            });
        return b.personalInformationIsVisible(env.userOrNull(), c) ? b : null
    }
}, findByName:function(a) {
    return $v(QueryBuilder.queryForObjects(User).usingIndex(User.getIndexByName("User.name")).where(QueryBuilder.scalarProperty("name").eq(a)).getQueryRvalue("User.findByName"))
}, findByEmailOnServerWithoutAC:function(a) {
    assert(a !== null && a !== void 0, "Email must not be null or undefined");
    if(a === "") {
        return null
    }
    var b = VerifiedEmail.findByEmailOnServerWithoutAC(a);
    if(b !== null) {
        a = List.create([toValueAllowingUnknown(b.userL().datastore_lvalue)])
    }else {
        with(QueryBuilder) {
            a = queryForObjects(User).usingIndex(User.getIndexByName("User.email")).where(scalarProperty("email").ieq(a).orders()).withoutAccessControl().allowUnscoped().getQueryRvalue("user with email address")
        }
        a = $v(a);
        Flags.do_expensive_error_checking && a.forEachValue(function() {
        })
    }
    var c = env.userOrNull();
    c !== null && a.forEachValue(function(a) {
        a.isVisibleBy(c)
    });
    if(a.size() > 1) {
        return a.findXvalueWithLowestGlobalId()
    }
    return a.firstValueOrNull()
}, findMonster:function() {
    var a = QueryBuilder.queryForObjects(User).where(QueryBuilder.scalarProperty("facebook_id").eq(User.MONSTER_FB_ID).orders()).allowUnscoped().allowUnindexed().getQueryRvalue("looking for monster");
    return $v(a).firstValueOrNull()
}, parseFirstName:function(a) {
    return a.split(/[ @]/)[0]
}, DELETED_USER_EMAIL:"deleteduser@asana.com"}, {_users_blessed_to_contact:SET_IN_CONSTRUCTOR, constructor:function() {
    User.superproto.constructor.call(this);
    this._users_blessed_to_contact = Set.create()
}, canonicalUser:function() {
    for(var a = this, b = OSet.create([a]);a.mergedIntoUser() !== null;) {
        a = a.mergedIntoUser(), b.contains(a) && ufu("Merged user cycle - needs repair!", b), b.add(a)
    }
    return a
}, firstName:function() {
    return User.parseFirstName(this.name())
}, _networkEmailDomainsR:function() {
    var a = QueryBuilder.scalarProperty("ned_email_domain"), b = $v(this.verifiedEmailsR(!0)), b = Set.create(b.map(function(a) {
        return Format.emailDomain(a.veEmail())
    }));
    b.add(Format.emailDomain(this.email()));
    assertEq(!1, b.isEmpty());
    b.forEach(function(b, d) {
        d > 0 && a.or();
        a.eq(b)
    });
    return QueryBuilder.queryForObjects(NetworkEmailDomain).usingIndex(NetworkEmailDomain.getIndexByName("NetworkEmailDomain.ned_email_domain")).where(a.orders()).allowUnscoped().getQueryRvalue("User.networkEmailDomainsR")
}, _networkIds:serverComputedProperty("User.networkIds", function() {
    var a = this._networkEmailDomainsR().setAsSafelyPeekableByAncestor();
    return Set.create($v(a).map(function(a) {
        return a.network().global_id
    }))
}), networks:function() {
    return Set.create($v(this._networkIds()).map(function(a) {
        return env.world_store.object(a)
    }))
}, networksRequiringCredentials:function() {
    var a = this;
    return Set.create(a.networks().filter(function(b) {
        return b.requireSsoEvenIfYouArentInNetworkWorkspaces() || a.activeDomainUsers().any(function(a) {
            return a.domain().network() === b
        })
    }))
}, networkMembershipIsOkay:function() {
    return this.activeDomainUsers().all(function(a) {
        return a.networkMembershipIsOkay()
    })
}, hasSuperuserReadPrivilege:function() {
    return this.getV("superuser")
}, hasSuperuserWritePrivilege:function() {
    return this.initialValue("superuser")
}, hasAdminReadPrivilege:function() {
    return this.getV("admin")
}, hasAdminWritePrivilege:function() {
    return this.initialValue("admin")
}, hasActiveDomainNoAC:serverComputedPropertyAllowingUnknown("hasActiveDomainNoAC", function() {
    return $v(this.activeDomainUsersR(!0)).size() > 0
}), activeDomainUsersR:Memoize.memoizeInThis("User._activeDomainUsersR", function(a) {
    var a = a || !1, b = QueryBuilder.queryForObjects(DomainUser).where(QueryBuilder.isInList(this.getX("domain_users")).orders(), QueryBuilder.scalarProperty("user").eq(this), QueryBuilder.scalarProperty("active").eq(!0));
    a && (b = b.withoutAccessControl());
    return b.getQueryRvalue("User.activeDomainUsersR").setAsSafelyPeekableByAncestor()
}), _allDomainUsersR:Memoize.memoizeInThis("User.allDomainUsersR", function() {
    return QueryBuilder.queryForObjects(DomainUser).where(QueryBuilder.isInList(this.getX("domain_users")).orders(), QueryBuilder.scalarProperty("user").eq(this)).getQueryRvalue("User.allDomainUsersR").setAsSafelyPeekableByAncestor()
}), domainUsers:function() {
    ufu("Use either allDomainUsers or activeDomainUsers")
}, allDomainUsersR:function() {
    return this._allDomainUsersR()
}, allDomainUsers:function() {
    return $v(this._allDomainUsersR())
}, activeDomainUsers:function() {
    return $v(this.activeDomainUsersR())
}, domains:computedProperty("User.domains", function() {
    return List.create(this.activeDomainUsers().map(function(a) {
        return a.domain()
    }))
}), taskList:function(a) {
    return a.getDomainUser(this).getV("task_list")
}, domainUserForDomainOrNull:function(a) {
    var b = this;
    return View.runWithoutLvalueChecking(function() {
        return a.findDomainUser(b)
    })
}, domainUserForDomain:function(a) {
    return this.domainUserForDomainOrNull(a)
}, defaultDomainUser:function() {
    return this.domainUserForDomain(this.defaultDomain())
}, makeDomainDefault:function(a) {
    a = this.domainUserForDomain(a);
    this.domainUsersL().requestInsertAfter(a, null)
}, hasNonPersonalWorkspace:function() {
    return this.domains().any(function(a) {
        return!a.isGlobal()
    })
}, maybeAddRecent:function(a) {
    if(!(a === null || isUnknown(a) || isUnknown(a.domainOrUnknown()))) {
        var b = this.domainUserForDomainOrNull(a.domain());
        if(b && a.assignee() !== b) {
            var c = a;
            a.assignee() && (c = a.assignee());
            b.addRecent(c)
        }
    }
}, createFirstDomain:function() {
    var a = Domain.create({name:"Your Company's Name", activated:!1, is_work_domain:!0});
    a.addUser({user:this, notification_verified_email:this.defaultVerifiedEmailOrNull(), is_guest:!1});
    return a
}, defaultDomain:function() {
    return this.domains().firstValueOrNull()
}, setTaskCreationDomainUserForAllVerifiedEmails:function(a) {
    this.verifiedEmails().forEachValue(function(b) {
        b.setTaskCreationDomainUser(a)
    })
}, defaultTaskList:function() {
    return this.taskList(this.defaultDomain())
}, claim:function() {
    this.isClaimed() ? host.recordWarningOnce("Users should only be claimed once. Contact Alex.") : (this.setPropertyBlessed("is_claimed", !0), this.setPropertyBlessed("claimed_time", $v(env.frp.chronometer.approximate_time_lvalue)));
    var a = this.emailNoAC(), b = VerifiedEmail.findByEmailOnServerWithoutAC(a);
    b !== null ? b.user() !== this && host.recordWarning("Trying to claim a user, but email is the verified email of someone else", a, "user: " + this.global_id) : this.createInitialVerifiedEmail(a);
    this.setAutomaticallyOptInToMailingListOncePastTos(!0)
}, acceptTos:function() {
    env.datastore_manager.enactChange(AcceptTosChange.create({user:this}))
}, scheduleSecondDayEmail:function() {
    if(this.needToSendSecondDayEmail()) {
        var a = SecondDayEmailRemoteJob.create({user_id:this.global_id}), b = Flags.enable_send_second_day_email_now ? Date.MILLISECONDS_PER_MINUTE : Date.MILLISECONDS_PER_DAY;
        env.remote_job_store.addJob(a, env.clock.now() + b);
        logEvent({name:"SecondDayEmail-UserClaimed", user:this, opted_in_to_mailing_list:this.optedInToMailingList()})
    }
}, setOptedInToMailingList:function(a) {
    this.getX("opted_in_to_mailing_list").requestSet(a);
    a ? env.remote_job_store.addJob(SubscribeUserToMailingListRemoteJob.create({user_id:this.global_id}), env.clock.now()) : env.remote_job_store.addJob(UnsubscribeUserFromMailingListRemoteJob.create({user_id:this.global_id}))
}, setPassword:function(a, b, c) {
    a = PasswordChange.create({user:this, current_password:b || null, status_lvalue_pointer:c ? Pointer.create(c) : null, new_password:a});
    env.datastore_manager.enactChange(a)
}, needsToSetPassword:function() {
    return this.passwordState() !== User.PasswordState.OK && this.passwordState() !== User.PasswordState.NOT_SET_GOOGLE_AUTH
}, personalInformationIsVisible:function(a, b) {
    var c = this;
    if(a === null || a === c) {
        return!0
    }
    var d = [];
    if(a.domains().any(function(e) {
        if(b !== void 0 && !b.contains(e)) {
            return!1
        }
        if(e.isGlobal()) {
            return d.push(e), !1
        }else {
            var g = e.findDomainUser(a), h = e.findDomainUser(c);
            return h !== null && (!g.isGuest() || !h.isGuest()) ? !0 : (d.push(e), !1)
        }
    })) {
        return!0
    }
    var e = !1;
    d.forEach(function(b) {
        var d = b.findDomainUser(a), b = b.findDomainUser(c);
        if(d !== null && b !== null) {
            if(d.hasContact(b)) {
                throw e = !0, IIterable.STOP;
            }
            var h = [];
            d.activeProjectMemberships().forEach(function(a) {
                a = a.projectOrUnknown();
                a instanceof UnknownValue.AccessDenied || (assertThat(Matcher.isInstanceOf(Pot), a), a.isProject() && h.push(a))
            });
            var i = [];
            b.activeProjectMemberships().forEach(function(a) {
                a = a.projectOrUnknown();
                a instanceof UnknownValue.AccessDenied || (assertThat(Matcher.isInstanceOf(Pot), a), a.isProject() && i.push(a))
            });
            if(ImmutableSet.intersection(h, i).size() > 0) {
                throw e = !0, IIterable.STOP;
            }
        }
    });
    if(e) {
        return!0
    }
    if(a.hasSuperuserReadPrivilege()) {
        return!0
    }
    return!1
}, emailR:rvalueProperty("User.emailR", function() {
    var a = this;
    return serverComputedValue(a.global_id + ":email", function() {
        if(a.personalInformationIsVisible(env.userOrNull())) {
            return a.getV("email")
        }
        return UnknownValue.AccessDenied.create(null, null)
    })
}), emailNoAC:function() {
    return this.getV("email")
}, email:function() {
    return $v(this.emailR())
}, emailL:function() {
    ufu("emailL is disabled until further notice. use setEmail() instead")
}, setEmail:function(a) {
    this.getX("email").requestSet(a);
    env.datastore_manager.enactChange(IndexContactsChange.create({domain_users:[], users:[this]}))
}, setEmailBlessed:function(a) {
    this.setPropertyBlessed("email", a);
    env.datastore_manager.enactChange(IndexContactsChange.create({domain_users:[], users:[this]}))
}, nameR:rvalueProperty("User.nameR", function() {
    var a = this;
    return serverComputedValue(a.global_id + ":name", function() {
        if(a.personalInformationIsVisible(env.userOrNull())) {
            return a.getV("name")
        }
        return User.PRIVATE_USER_NAME
    })
}), nameNoAC:function() {
    return this.getV("name")
}, name:function() {
    return $v(this.nameR())
}, adminOnlyName:serverComputedPropertyAllowingUnknown("User.adminOnlyName", function() {
    var a = env.userOrNull();
    return!a || a.hasAdminReadPrivilege() ? this.nameNoAC() : this.name()
}), nameL:function() {
    ufu("nameL is disabled until further notice. use setName() instead")
}, setName:function(a) {
    this.getX("name").requestSet(a);
    env.datastore_manager.enactChange(IndexContactsChange.create({domain_users:[], users:[this]}))
}, setNotificationAndTaskCreationEmails:function(a) {
    $v(this.allDomainUsersR()).forEachValue(function(b) {
        b.setNotificationVerifiedEmail(a)
    })
}, createInitialVerifiedEmail:function(a) {
    VerifiedEmail.create({ve_user:this, ve_email:a})
}, hasFakeEmail:function() {
    return["noreply@asana.com", "deleteduser@asana.com", ""].indexOf(this.email()) !== -1 || this.email().contains("duplicateemailwithuser+")
}, verifiedEmailsForNetwork:function(a) {
    var b = a.emailDomains();
    return $v(this.verifiedEmailsR()).filter(function(a) {
        a = a.email();
        return b.contains(Format.emailDomain(a))
    })
}, defaultVerifiedEmailOrNull:function() {
    if(this.mergedIntoUser() !== null) {
        return null
    }
    return VerifiedEmail.findByEmailOnServerWithoutAC(this.emailNoAC())
}, profilePhotoVersionR:function() {
    return this.profileImageVersionR()
}, profilePhotoVersionNoAC:function() {
    return this.profileImageVersionNoAC()
}, profilePhotoVersion:function() {
    return this.profileImageVersion()
}, profilePhotoVersionL:function() {
    ufu("profilePhotoVersionL disabled. Use setProfilePhotoVersion() instead.")
}, _profileImageIsVisible:function(a) {
    return this.personalInformationIsVisible(a)
}, _profileImageVersionPropertyName:function() {
    return"profile_photo_version"
}, verifiedEmails:function(a) {
    return $v(this.verifiedEmailsR(a))
}, verifiedEmailsR:Memoize.memoizeInThis("verifiedEmailsR", function(a) {
    var b = QueryBuilder.queryForObjects(VerifiedEmail).where(QueryBuilder.scalarProperty("ve_user").eq(this).orders());
    a && b.withoutAccessControl();
    return b.getQueryRvalue("verified emails with user").setAsSafelyPeekableByAncestor()
}), latestNpsOrNull:function() {
    return this.currentSurveyResponse().howLikelyAreYouToRecommendAsana()
}, hasFlag:function(a) {
    return this.flagSettings().any(function(b) {
        return b.name() === a
    })
}, onNewSession:function() {
    if(this.currentSurveyResponse().shouldBeReplaced()) {
        var a = SurveyResponse.create({responder:this, start_time:this.currentSurveyResponse().newSurveyStartTime()});
        this.currentSurveyResponseL().requestSet(a)
    }
}, isNDayActive:function(a) {
    return env.clock.now() - this.lastSessionCreationTime() < a * Date.MILLISECONDS_PER_DAY
}, isNWeeksOld:function(a) {
    return env.clock.now() - this.getV("__creation_time") > a * Date.MILLISECONDS_PER_WEEK
}, shouldShowNewUserCommentPrompt:function() {
    return!this.isClaimed() || env.clock.now() - this.claimedTime() < 1 * Date.MILLISECONDS_PER_DAY
}, mayUseProduct:function() {
    return this.global_id % 100 < Flags.allow_percentage_of_users
}, merge:function(a) {
    var b = this;
    a.setMergedIntoUser(this);
    a.verifiedEmails().forEachValue(function(a) {
        a.setVeUser(b)
    });
    a.getV("domain_users").forEachValue(function(a) {
        var d = a.domain();
        (d = b.domainUserForDomainOrNull(d)) ? (!d.active() && a.active() && d.reactivate(!0), d.merge(a)) : a.setUser(b)
    });
    a.removePersonalInformation();
    a.removeActiveLogins();
    logAuditEvent({name:"MergeUser", from_domain_user:a, to_domain_user:this})
}, removePersonalInformation:function() {
    this.setName("Deleted User");
    this.setEmail(User.DELETED_USER_EMAIL);
    this.verifiedEmails().forEachValue(function(a) {
        a.setEmail(User.DELETED_USER_EMAIL)
    })
}, isDeletedUser:serverComputedPropertyAllowingUnknown("User.isDeletedUser", function() {
    return this.emailNoAC() === User.DELETED_USER_EMAIL
}), globalDomainUserOrNull:function() {
    var a = this.activeDomainUsers().filter(function(a) {
        return a.active() && a.domain().isGlobal()
    });
    return a.length === 0 ? null : a[0]
}, globalDomainUser:function() {
    return this.globalDomainUserOrNull()
}, activeLoginsR:Memoize.memoizeInThis("activeLoginsR", function() {
    return QueryBuilder.queryForObjects(Login).where(QueryBuilder.scalarProperty("user").eq(this).orders(), QueryBuilder.scalarProperty("expiry").ge(env.clock.now())).getQueryRvalue("activeLoginsR")
}), removeActiveLogins:function() {
    $v(this.activeLoginsR()).forEach(function(a) {
        a.setExpiry(0)
    })
}, blessUserForContact:function(a) {
    return this._users_blessed_to_contact.add(a)
}, isBlessedToContact:function(a) {
    return this._users_blessed_to_contact.contains(a) || a === this
}, _computeIsVisibleBy:function() {
    return!0
}, describe:function() {
    return this.name()
}, navigationTarget:function() {
    return this.domainUserForDomain(env.realAppSession().activeDomain()).taskList()
}, apiSettings:Association.hasOne({name:"ApiSettings", type_name:"ApiSettings", property_name:"user"}), isInPremiumDomain:function() {
    var a = this.domains();
    env.world_store.peekStateObjectProperties(a, ["free_to_premium_upgrade_time"]);
    return null !== a.find(function(a) {
        return a.freeToPremiumUpgradeTime() > 0
    })
}, firstNewlyPremiumDomainOrNull:function() {
    var a = this.lastSessionCreationTime(), b = this.domains();
    env.world_store.peekStateObjectProperties(b, ["free_to_premium_upgrade_time"]);
    return b.find(function(b) {
        return a < b.freeToPremiumUpgradeTime() && b.billingOwner() !== null && b.billingOwner().user() !== env.user()
    })
}, onBeforeChangeProperty:function(a, b) {
    User.superproto.onBeforeChangeProperty.call(this, a, b);
    a.property_name === "name" && env.is_server && QueryBuilder.queryForObjects(DomainUser).where(QueryBuilder.scalarProperty("user").eq(this)).getQueryRvalue().peek().forEachValue(function(a) {
        a.getX("_user_name_sort_key").requestSet(b)
    })
}, shouldShowNewWorkspaceTour:function() {
    return ExperimentalFeature.enabled("new_workspace_tour", this) && this.creationSource() === User.CreationSource.SIGNUP_GOOGLE_AUTH
}, banned:function() {
    var a = this.global_id.toString();
    return ClusterConfig.data().bannedUserIdMap(a, !1)
}});
define("PasswordRequiredAccountsChange", Change.subclass("PasswordRequiredAccountsChange", {}, {user:ATTRIBUTE_REQUIRED, current_password:ATTRIBUTE_REQUIRED, currentPasswordIsCorrectOrNotRequired:function() {
    var a = this.user;
    return a.needsToSetPassword() || env.server_auth.identity_providers.password.checkUserPassword(a, this.current_password)
}}));
define("PasswordChange", PasswordRequiredAccountsChange.subclass("PasswordChange", {}, {new_password:ATTRIBUTE_REQUIRED, status_lvalue_pointer:ATTRIBUTE_REQUIRED, enact:function() {
    var a = AccountDialogState.UpdateStatus.PENDING;
    if(env.is_server) {
        this.currentPasswordIsCorrectOrNotRequired() ? env.server_auth.identity_providers.password.isNewPasswordValid(this.new_password) ? (env.server_auth.identity_providers.password.setUserPassword(this.user, this.new_password), this.status_lvalue_pointer !== null && this.status_lvalue_pointer.getLvalue().object.hide()) : a = AccountDialogState.UpdateStatus.PASSWORD_SET_FAILURE : a = AccountDialogState.UpdateStatus.CURRENT_PASSWORD_INCORRECT
    }
    this.status_lvalue_pointer !== null && this.status_lvalue_pointer.getLvalue().requestSet(a)
}, taintedObjectIds:function() {
    var a = [this.user.global_id];
    this.status_lvalue_pointer !== null && a.push(this.status_lvalue_pointer.address().object_id);
    return a
}}));
define("EmailChange", PasswordRequiredAccountsChange.subclass("EmailChange", {}, {new_email:ATTRIBUTE_REQUIRED, domain_user:null, status_lvalue_pointer:ATTRIBUTE_REQUIRED, enact:function() {
    var a = this, b = a.user, c = AccountDialogState.UpdateStatus.PENDING;
    if(env.is_server) {
        var d = a.new_email, c = function() {
            if(!a.currentPasswordIsCorrectOrNotRequired()) {
                return AccountDialogState.UpdateStatus.CURRENT_PASSWORD_INCORRECT
            }
            if(!Format.EMAIL_RE.test(d)) {
                return AccountDialogState.UpdateStatus.EMAIL_NOT_VALID
            }
            var c = VerifiedEmail.findByEmailOnServerWithoutAC(d);
            if(c) {
                return c = c.getX("ve_user").peekAllowingUnknown(), c === b ? AccountDialogState.UpdateStatus.EMAIL_ALREADY_ADDED : AccountDialogState.UpdateStatus.EMAIL_IN_USE
            }
            if((c = User.findByEmailOnServerWithoutAC(d)) && c !== b) {
                return AccountDialogState.UpdateStatus.EMAIL_IN_USE
            }
            return null
        }();
        if(c === AccountDialogState.UpdateStatus.EMAIL_ALREADY_ADDED) {
            c = AccountDialogState.UpdateStatus.HIDDEN, b.setPropertyBlessed("email", d)
        }else {
            if(c === null) {
                var c = AccountDialogState.UpdateStatus.HIDDEN, e = EmailVerificationWorkflow.create({user:b, new_email:d});
                b.emailVerificationWorkflowL().requestSet(e);
                e.broadcast()
            }
        }
    }
    this.status_lvalue_pointer !== null && this.status_lvalue_pointer.getLvalue().requestSet(c)
}, taintedObjectIds:function() {
    var a = [this.user.global_id];
    this.status_lvalue_pointer !== null && a.push(this.status_lvalue_pointer.address().object_id);
    return a
}}));
define("AcceptTosChange", Change.subclass("AcceptTosChange", {}, {user:ATTRIBUTE_REQUIRED, enact:function() {
    if(env.is_server) {
        var a = this.user;
        a.automaticallyOptInToMailingListOncePastTos() && (a.setOptedInToMailingList(!0), a.scheduleSecondDayEmail(), a.setAutomaticallyOptInToMailingListOncePastTos(!1))
    }
}, taintedObjectIds:function() {
    return[this.user.global_id]
}}));
__FILE__ = "apps/asana/model/registration.js";
Registration = StateObject.subclass("Registration", {InviteUiSource:{LEFT_MENU:"left_menu", NPS_SURVEY:"nps", LINK:"link", NUX:"nux", SHARE_ASANA_BUTTON:"share_asana"}, property_descs:{key:{type:String, server_only:!0, indexed:!0, isWriteableBy:StateObject.Property.READ_ONLY}, created_user:{type:User}, invited_name:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, invited_email:{type:String, indexed:!0, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, access_link_clicked:{type:Boolean,
    default_value:!1, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, creator:{type:User}, invite_ui_source:{type:String, default_value:"left_menu", isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, invite_ui_type:{type:String, default_value:"single", isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, inviter_nps:{type:Integer, default_value:null, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, invite_message:{type:String, default_value:"", isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE},
    is_custom_invite_message:{type:Boolean, default_value:!1, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}}, findByKey:function(a) {
    return $v(QueryBuilder.queryForObjects(Registration).usingIndex(Registration.getIndexByName("Registration.key")).where(QueryBuilder.scalarProperty("key").eq(a)).getOneObjectNonReactive("registration by key"))
}}, {onServerCreate:function() {
    var a = toValueAllowingUnknown(this.keyL());
    isUnknown(a) || ufu("The registration key must be set on the server");
    this.setPropertyBlessed("key", Random.id({secure:!0}));
    this._afterOnServerCreate()
}, _afterOnServerCreate:noop, urlForHandler:function(a) {
    return URI.create({scheme:"https", hostname:Flags.secure_web_host_port, path:["app", "asana", "-", a], query:{invite:this.key()}}).stringify()
}, scheduleSignupEmail:function(a) {
    this.scheduleInvitedUserEmail("AsanaSignup-Sent", EmailTemplate.create({template_name:"signup_email", template_data:{register_url:this.urlForHandler("register"), access_link:"https://" + Flags.secure_web_host_port, forgot_password_link:"https://" + Flags.secure_web_host_port + "/-/forgot_password", user_is_claimed:a}}).render());
    logEvent({name:"AsanaSignup-Enqueued", invited_email:this.invitedEmail(), invited_name:this.invitedName()})
}, claimedUser:function() {
    return this.createdUser()
}, isCancelled:function() {
    return!1
}, _renderGreeting:function() {
    var a = this.getV("invited_name"), b = User.parseFirstName(a);
    return this.getV("invited_email") === a ? "Hi!" : "Hi " + b + "!"
}, scheduleInvitedUserEmail:function(a, b, c) {
    var d = this.getV("creator"), d = d ? d.name() + " via Asana" : null, d = c ? ServerEmailUtils.noReplyInvitesAddress(d) : ServerEmailUtils.noReplyAddress(d);
    EmailMessage.create(update(b, {from_address:d, to_address:EmailAddress.create(this.getV("invited_email"), this.getV("invited_name")), message_id:this.global_id, reply_to_email:null, use_invites_email:c, event_name:a, extra_event_attributes:{invite:this.global_id}})).scheduleDelivery(!0)
}, recordAccessLinkClicked:function() {
    var a = this.accessLinkClickedL();
    $v(a) || (this._recordAccessLinkClicked(), a.requestSet(!0))
}, _recordAccessLinkClicked:ABSTRACT, userCreationSource:ABSTRACT, runBeforeLogin:noop});
__FILE__ = "luna/common/log_event.js";
FlagSystem.defineBool({name:"log_events_to_console", help:"Log events in logEvents() to console in addition to server logs", default_value:!1, is_feature:!0});
EventLogger = AsanaObject.subclass("EventLogger", {_addExperimentInfo:function(a) {
    if(a.experiment_flags === void 0) {
        a.experiment_flags = {}, env.userOrNull() !== null && env.userOrNull() === a.user && Experiment.experiments_by_subject_type.get(Experiment.SubjectType.CurrentUser).forEach(function(b) {
            try {
                return View.runWithoutLvalueChecking(function() {
                    var c = b.variant(a.user);
                    a.experiment_flags[b.name] = c
                })
            }catch(c) {
                if(!(c instanceof ValueIsUnknownError)) {
                    throw c;
                }
            }
        })
    }
}, _addContext:function(a) {
    EventLogger._addAppName(a);
    EventLogger._addClientAppOnServer(a);
    EventLogger._addSession(a);
    EventLogger._addUser(a);
    EventLogger._addUserDetailsOnServer(a);
    EventLogger._addExperimentInfo(a);
    EventLogger._addAppDetails(a);
    EventLogger._transformObjectsToIds(a)
}, _addClientAppOnServer:function(a) {
    if(env.is_server && a.client_app === void 0) {
        a.client_app = env.clientAppOrNull()
    }
}, _addUser:function(a) {
    if(a.user === void 0) {
        a.user = env.userOrNull()
    }
}, _addSession:function(a) {
    if(a.session === void 0) {
        a.session = env.lunaSession()
    }
}, _addUserDetailsOnServer:function(a) {
    if(env.is_server) {
        var b = a.user || env.userOrNull();
        isA(b, Number) && (b = env.datastoreObjectWithoutAC(a.user));
        if(b !== null) {
            a.is_dark = b.isClaimed() ? 0 : 1, a.user_creation_source = b.creationSource()
        }
    }
}, _addAppName:function(a) {
    if(a.app_name === void 0) {
        a.app_name = env.appName()
    }
}, _addAppDetails:function(a) {
    if(env.runningApp() !== null) {
        var b = env.runningApp().lunaApp();
        b && b.addInfoToLogEvent(a)
    }
}, _transformObjectsToIds:function(a) {
    for(var b in a) {
        var c = a[b];
        if(c instanceof StateObject) {
            a[b] = c.global_id
        }
    }
}}, {_buffered_events:SET_IN_CONSTRUCTOR, _scribe_client:null, _config_hash:null, buffer_events:SET_IN_CONSTRUCTOR, constructor:function(a) {
    EventLogger.superproto.constructor.call(this);
    this._buffered_events = [];
    this.buffer_events = a
}, flushBufferedEvents:function() {
    var a = this;
    this._buffered_events.forEach(function(b) {
        a._logToScribe(b)
    });
    this._buffered_events = []
}, _bufferEvent:function(a) {
    this._buffered_events.push(a)
}, _logEvent:function(a) {
    this.buffer_events ? this._bufferEvent(a) : this._logToScribe(a)
}, _logToScribe:function(a) {
    var b = this, c = function() {
        var c = host.file_system.findFile("/var/asana-config/instance_config/instance_id");
        if(c.exists()) {
            a.instance_id = c.read()
        }
        a.host = host.hostname();
        a.timestamp = env.clock.now();
        var c = MochiKit.Base.serializeJSON(a), e = b.scribeClient();
        try {
            e.log(a.category, c)
        }catch(f) {
            log.error("Scribe log failed", f.toString())
        }
    };
    Rvalue.peeksDisallowed() ? c() : Rvalue.runWithinAssertNoPeeks(c)
}, scribeClient:function() {
    var a = ClusterConfig.config().hash();
    if(this._config_hash === a && this._scribe_client !== null) {
        return this._scribe_client
    }
    var b = ClusterConfig.data().scribed().host() || "127.0.0.1", c = ClusterConfig.data().scribed().port() || 1463;
    try {
        return this._scribe_client = (new (require("scribe").Scribe)).connect(b, c), this._config_hash = a, this._scribe_client
    }catch(d) {
        return log.error("Scribe connect failed", b, c, d), null
    }
}});
logEvent = function(a) {
    if(a.category === void 0) {
        a.category = "event"
    }
    a.category === "event" && !a.name && ufu("Must give each event a name", a);
    EventLogger._addContext(a);
    env.is_server ? env.event_logger._logEvent(a) : (Flags.log_events_to_console && log.info("logEvent: " + a.name, a), env.datastore_manager.runUntimelyFunc(function() {
        env.datastore_manager.enactChange(LogEventChange.create({serialized_event:serializeEvent(a)}))
    }))
};
logChangeEvent = function(a) {
    env.event_logger._logEvent({category:"change", change:a})
};
logErrorEvent = function(a) {
    a.name = "ErrorNotification";
    a.category = "error";
    EventLogger._addAppName(a);
    runAllowingEventLoggingInTransaction(function() {
        env.event_logger._logEvent(a);
        env.event_logger.flushBufferedEvents()
    })
};
logAuditEvent = function(a) {
    a.category = "audit";
    logEvent(a)
};
serializeEvent = function(a) {
    return MochiKit.Base.serializeJSON(a)
};
LogEventChange = define("LogEventChange", Change.subclass("LogEventChange", {}, {required_on_server:!1, serialized_event:ATTRIBUTE_REQUIRED, enact:function() {
    var a = this;
    profileWastedTime("LogEventChange.enact", function() {
        if(env.is_server) {
            var b = JSON.parse(a.serialized_event);
            EventLogger._addUserDetailsOnServer(b);
            env.event_logger._logEvent(b)
        }
    })
}, taintedObjectIds:function() {
    return[]
}}));
runAllowingEventLoggingInTransaction = function(a) {
    var b = env._allow_event_logging_in_transaction;
    try {
        return env._allow_event_logging_in_transaction = !0, a()
    }finally {
        env._allow_event_logging_in_transaction = b
    }
};
__FILE__ = "apps/asana/model/asana_invite.js";
AsanaInvite = Registration.subclass("AsanaInvite", {property_descs:{active:{type:Boolean, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}}, create:attributedValueFunc({creator:ATTRIBUTE_REQUIRED, invited_name:ATTRIBUTE_REQUIRED, invited_email:ATTRIBUTE_REQUIRED, invite_ui_source:ATTRIBUTE_REQUIRED, invite_ui_type:ATTRIBUTE_REQUIRED, inviter_nps:null, invite_message:null, is_custom_invite_message:!1}, function(a) {
    return env.world_store.createStateObject(AsanaInvite, {created_user:null, creator:a.creator, invited_email:a.invited_email, invited_name:a.invited_name, invite_ui_source:a.invite_ui_source, invite_ui_type:a.invite_ui_type, inviter_nps:a.inviter_nps, invite_message:a.invite_message, is_custom_invite_message:a.is_custom_invite_message, active:!0})
})}, {logEvent:function(a, b) {
    var c = {name:"AsanaInvite-" + a, invite:this, creator:this.creator(), inviting_user:this.creator(), invited_email:this.invitedEmail(), invited_name:this.invitedName(), invite_ui_source:this.inviteUiSource(), inviter_nps:this.inviterNps(), invite_ui_type:this.inviteUiType(), is_custom_invite_message:this.isCustomInviteMessage()};
    b && update(c, b);
    logEvent(c)
}, userCreationSource:function() {
    return User.CreationSource.OOTCOW
}, _computeIsVisibleBy:function(a) {
    return this.getX("creator").peekAllowingUnknown() === a
}, _afterOnServerCreate:function() {
    var a = this.getV("invited_email");
    (a = User.findByEmailOnServerWithoutAC(a)) && a.isClaimed() ? this.scheduleExistingUserEmail() : this.scheduleInviteEmail()
}, scheduleExistingUserEmail:function() {
    var a = this.getV("creator");
    this.getV("invited_email");
    this.getV("invited_name");
    this.scheduleInvitedUserEmail("AsanaInvite-Sent", EmailTemplate.create({template_name:"existing_user_beta_notification_email", template_data:{greeting:this._renderGreeting(), inviter_name:a.name(), access_link:"https://" + Flags.secure_web_host_port}}).renderTextEmail())
}, scheduleInviteEmail:function() {
    var a = this.getV("creator");
    this.scheduleInvitedUserEmail("AsanaInvite-Sent", EmailTemplate.create({template_name:"invited_to_beta_access_email", template_data:{subject:this._getSubject(a), headline:{emphasis_part:"Do Great Things.", regular_part:""}, subline:"Asana is the shared task list for your team. The place to plan, organize, and stay in sync.", cta:"Accept invitation", registration_link:this.urlForHandler("register"), invite_message:this.inviteMessage(), tracking_image_url:ServerUrl.emailTrackingImageUrl(this.global_id,
        ServerUrl.EmailTypeToTrackId.ASANA_INVITE)}}).render(), !0);
    this.logEvent("Enqueued")
}, _getSubject:function(a) {
    return a.firstName() + " wants you to join Asana"
}, _recordAccessLinkClicked:function() {
    this.logEvent("Clicked")
}, runBeforeLogin:function(a, b) {
    b && (this.setCreatedUser(a), this.logEvent("Accepted", {created_user:a}), a.hasNonPersonalWorkspace() || a.createFirstDomain(), this.creator().globalDomainUser().addContact(a.globalDomainUser(), this.invited_email))
}});
AsanaInvite.BatchChange = define("AsanaInvite.BatchChange", Change.subclass("AsanaInvite.BatchChange", {}, {email_addresses:ATTRIBUTE_REQUIRED, invite_message:ATTRIBUTE_REQUIRED, invite_ui_source:ATTRIBUTE_REQUIRED, invite_ui_type:ATTRIBUTE_REQUIRED, inviter_nps:ATTRIBUTE_REQUIRED, is_custom_invite_message:!1, enact:function() {
    env.is_server && (env.remote_job_store.addJob(BatchedInviteRemoteJob.create({inviting_user:env.user(), email_addresses:this.email_addresses, invite_ui_source:this.invite_ui_source, invite_ui_type:this.invite_ui_type, inviter_nps:this.inviter_nps, invite_message:this.invite_message, is_custom_invite_message:this.is_custom_invite_message}), env.clock.now()), logEvent({name:"AsanaInvite-InvitedBatch", creator:env.user(), inviting_user:env.user(), invite_ui_source:this.invite_ui_source, invite_ui_type:this.invite_ui_type,
        inviter_nps:this.inviter_nps, num_contacts:this.email_addresses.size(), is_custom_invite_message:this.is_custom_invite_message}))
}, taintedObjectIds:function() {
    return[]
}}));
__FILE__ = "luna/common/computed_lists/limit_list_rvalue.js";
LimitListRvalue = Rvalue.subclass("LimitListRvalue", {createWithCountLimit:function(a, b) {
    return LimitListRvalue._create(a, b, !1)
}, createWithRankLimit:function(a, b) {
    return LimitListRvalue._create(a, b, !0)
}}, copyAndUpdate(FilterRvalueDatastoreListMutatorsMixin, {_listish_xvalue:SET_IN_CONSTRUCTOR, _output_list:null, _poller:SET_IN_CONSTRUCTOR, _limit_x:SET_IN_CONSTRUCTOR, _candidate_list:SET_IN_CONSTRUCTOR, constructor:function(a, b, c) {
    LimitListRvalue.superproto.constructor.call(this);
    this._listish_xvalue = a;
    this._limit_x = b;
    this._is_rank_limited = c
}, computeValue:function() {
    var a = this, b = $v(this._listish_xvalue);
    if(this._output_list === null) {
        this._output_list = b.emptyClone(), this._candidate_list = b.emptyClone(), this._poller = List.Poller.create(this._listish_xvalue, {onInserted:function(b, d) {
            a._candidate_list.insertAtRank(b, d)
        }, onMoved:function(b, d) {
            a._output_list.contains(b) ? a._output_list.setRankForValue(b, d) : a._candidate_list.setRankForValue(b, d)
        }, onRemoved:function(b) {
            a._output_list.contains(b) ? a._output_list.removeValue(b) : a._candidate_list.removeValue(b)
        }})
    }
    this._poller.poll();
    this._expand();
    return this._output_list
}, onUnused:function() {
    LimitListRvalue.superproto.onUnused.call(this);
    this._poller = this._candidate_list = this._output_list = null
}, _expand:function() {
    if(this._is_rank_limited) {
        for(var a = $v(this._limit_x);!this._candidate_list.isEmpty() && List.Rank.compare(this._candidate_list.rankAtIndex(0), a) < 0;) {
            b = this._candidate_list.valueAtIndex(0), this._output_list.insertAtRank(b, this._candidate_list.rankAtIndex(0)), this._candidate_list.removeValue(b)
        }
        for(;!this._output_list.isEmpty() && List.Rank.compare(this._output_list.rankAtIndex(this._output_list.size() - 1), a) >= 0;) {
            b = this._output_list.rankAtIndex(this._output_list.size() - 1), c = this._output_list.lastValueOrNull(), this._candidate_list.insertAtRank(c, b), this._output_list.removeValue(c)
        }
    }else {
        for(a = $v(this._limit_x);!this._candidate_list.isEmpty() && (this._output_list.size() < a || List.Rank.compare(this._output_list.rankAtIndex(this._output_list.size() - 1), this._candidate_list.rankAtIndex(0)) === 1);) {
            var b = this._candidate_list.valueAtIndex(0);
            this._output_list.insertAtRank(b, this._candidate_list.rankAtIndex(0));
            this._candidate_list.removeValue(b);
            if(this._output_list.size() > a) {
                var b = this._output_list.rankAtIndex(this._output_list.size() - 1), c = this._output_list.lastValueOrNull();
                this._candidate_list.insertAtRank(c, b);
                this._output_list.removeValue(c)
            }
        }
    }
}}));
__FILE__ = "luna/common/datastore/count_query_results.js";
CountQueryResults = AsanaObject.subclass("CountQueryResults", {}, {}, {_query:SET_IN_CONSTRUCTOR, _datastore:SET_IN_CONSTRUCTOR, _query_rvalue:SET_IN_CONSTRUCTOR, _cached_result:null, constructor:function(a, b, c) {
    CountQueryResults.superproto.constructor.call(this);
    this._query = b;
    this._datastore = c;
    this._query_rvalue = a;
    env.query_manager.registerQueryResults(this)
}, getName:function() {
    return this._query.getName()
}, getSQL:function() {
    return"SELECT COUNT(1) AS result FROM (" + this._query.getSQL(!1, !1, !1) + ") AS t"
}, getSqlSubstitutions:function() {
    return this._query.getSQLSubstitutions(null, null)
}, getMemcacheKey:function() {
    var a = this._query.getMemcacheKey();
    return a !== null ? a + "!COUNT" : null
}, queryIndex:function() {
    ufu("WAT?")
}, hash:function() {
    return null
}, getReferencedObjectIds:function() {
    return this._query.getReferencedObjectIds()
}, addressDependencies:function(a) {
    return this._query.addressDependencies(a)
}, onNewlyConfirmed:function() {
    ufu("WAT?")
}, mustRunQuery:function() {
    return this._cached_result === null
}, unregister:function() {
    env.query_manager.unregisterQueryResults(this);
    this._datastore.markQueryResultsUnused(this)
}, generateSubscriptionTopics:function() {
    return this._query.generateSubscriptionTopics()
}, isNeededOnClient:function() {
    return!1
}, considerInitialResults:function(a) {
    this._cached_result = a[0];
    env.frp.addDirtyRvalueIfUsed(this._query_rvalue)
}, considerChangedObjectId:function(a) {
    if(this._datastore.isObjectIdOkToContain(a) && (a = env.datastoreForObjectId(a).readValue(RawDatastoreAddress.typeIdAddress(a)), !isUnknown(a) && this._query.objectType().isSuperclassOf(env.type_registry.getTypeFromId(a)))) {
        this._cached_result = null, env.frp.addDirtyRvalueIfUsed(this._query_rvalue)
    }
}, update:function() {
    this._cached_result === null && this._datastore.runQuery(this);
    return this._cached_result
}});
__FILE__ = "luna/common/datastore/count_query_rvalue.js";
CountQueryRvalue = Rvalue.subclass("CountQueryRvalue", {}, {_query:SET_IN_CONSTRUCTOR, _query_results:null, _datastore:SET_IN_CONSTRUCTOR, constructor:function(a, b, c) {
    CountQueryRvalue.superproto.constructor.call(this);
    this._query = b;
    this._datastore = a;
    this.setName(c)
}, batchReadableAddresses:function() {
    return null
}, batchReadableQueryRvalues:function() {
    return this
}, computeValue:function() {
    var a = this;
    return host.profiler.timeFuncDetailed("CountQuery.computeValue", function() {
        return a.queryResults().update()
    })
}, onUnused:function() {
    CountQueryRvalue.superproto.onUnused.call(this);
    if(this._query_results !== null) {
        this._query_results.unregister(), this._query_results = null
    }
}, queryResults:function() {
    if(this._query_results === null) {
        this._query_results = CountQueryResults.create(this, this._query, this._datastore)
    }
    return this._query_results
}});
__FILE__ = "luna/common/datastore/query_builder.js";
QueryBuilder = AsanaObject.subclass("QueryBuilder", {queryForObjects:function(a) {
    return QueryBuilder.create(a)
}, isNotOfType:function(a) {
    return QueryBuilder.scalarProperty(StateObject.PropertyName.TYPE_ID).ne(env.type_registry.getTypeId($v(a)))
}, scalarProperty:function(a) {
    return QueryBuilder.ScalarPropertyBuilder.create(toValue(a))
}, listProperty:function(a) {
    return QueryBuilder.SingleListPropertyBuilder.create(toValue(a))
}, referencedObject:function(a, b) {
    return QueryBuilder.ReferencedObjectBuilder.create(a, b)
}, isInList:function(a) {
    return QueryBuilder.InListBuilder.create(a)
}, isNotInList:function(a) {
    return QueryBuilder.NotInListBuilder.create(a)
}}, {_object_type:SET_IN_CONSTRUCTOR, _memcache_key:null, _index:null, _server_matching_objects_r:null, _enforce_access_control:SET_IN_CONSTRUCTOR, _allow_unscoped:!1, _allow_unindexed:!1, constructor:function(a) {
    QueryBuilder.superproto.constructor.call(this);
    this._filter_builders = [];
    this._enforce_access_control = env.is_server;
    this._suppress_trashed_objects = !0;
    this._object_type = a
}, where:function() {
    this._filter_builders.pushAll($A(arguments).filter(function(a) {
        return a !== null
    }));
    return this
}, setServerMatchingObjectsR:function(a) {
    this._server_matching_objects_r = a;
    return this
}, withMemcacheKey:function(a) {
    this._memcache_key = a;
    return this
}, withoutAccessControl:function() {
    this._enforce_access_control = !1;
    return this
}, matchTrashedObjects:function() {
    this._suppress_trashed_objects = !1;
    return this
}, usingIndex:function(a) {
    this._index = a;
    return this
}, allowUnscoped:function() {
    this._allow_unscoped = !0;
    return this
}, allowUnindexed:function() {
    this._allow_unindexed = !0;
    return this
}, _getQuery:function(a) {
    var b = this._filter_builders.map(function(a) {
        return a._getFilter()
    });
    this._suppress_trashed_objects && b.push(Query.ScalarPropertyFilter.create(StateObject.PropertyName.TRASHED_AT, Query.Condition.eq(0)));
    return Query.create(this._object_type, b, a, {memcache_key:this._memcache_key, index:this._index, server_matching_objects_r:this._server_matching_objects_r, allow_unscoped:this._allow_unscoped, allow_unindexed:this._allow_unindexed})
}, getQueryRvalue:function(a, b) {
    var c = this._getQuery(a), c = QueryRvalue.create(env.world_store, c, a, List.POLICY_ANY_RANK, b);
    return this._enforce_access_control ? AccessControl.WrappedQueryRvalue.create(c) : c
}, getOneObjectNonReactive:function(a) {
    assert(env.is_server);
    EvaluationContext.getTopRvalue() !== null && host.recordWarning("getOneObjectNonReactive is called inside an rvalue computation");
    a = this._getQuery(a).fetchNthObjectId(null, 0);
    return a === null ? null : env.datastoreObject(a)
}, getCountRvalue:function(a) {
    var b = this._getQuery(a);
    return CountQueryRvalue.create(env.world_store, b, a)
}, fetchNthObjectRank:function(a, b) {
    return this._getQuery("nth_rank").fetchNthObjectRank(a, b)
}});
QueryBuilder.FilterBuilder = AsanaObject.subclass("QueryBuilder.FilterBuilder", {}, {_getFilter:ABSTRACT});
QueryBuilder.ScalarPropertyBuilder = QueryBuilder.FilterBuilder.subclass("QueryBuilder.ScalarPropertyBuilder", {}, {constructor:function(a) {
    QueryBuilder.ScalarPropertyBuilder.superproto.constructor.call(this);
    this._property_name = a;
    this._order_priority = Query.Filter.DOES_NOT_ORDER;
    this._rank_generator = null;
    this._conditions = [];
    this._after_or = !0
}, exists:function() {
    return this
}, eq:function(a) {
    return this._makeValueCondition(Query.Condition.eq, a)
}, ieq:function(a) {
    return this._makeValueCondition(Query.Condition.ieq, a)
}, ne:function(a) {
    return this._makeValueCondition(Query.Condition.ne, a)
}, lt:function(a) {
    return this._makeValueCondition(Query.Condition.lt, a)
}, gt:function(a) {
    return this._makeValueCondition(Query.Condition.gt, a)
}, le:function(a) {
    return this._makeValueCondition(Query.Condition.le, a)
}, ge:function(a) {
    return this._makeValueCondition(Query.Condition.ge, a)
}, or:function() {
    this._after_or = !0;
    return this
}, orders:function(a) {
    a = $v(a);
    return this.ordersWithPriority(a || a === void 0 ? 0 : Query.Filter.DOES_NOT_ORDER)
}, ordersWithPriority:function(a) {
    this._order_priority = $v(a);
    return this
}, rankGenerator:function(a) {
    this._rank_generator = a;
    return this
}, _getFilter:function() {
    this._conditions.length === 0 && this._conditions.push(function() {
        return Query.Condition.exists()
    });
    return Query.ScalarPropertyFilter.create(this._property_name, this._conditions.length === 1 ? this._conditions[0]() : Query.MultiValueCondition.create(this._conditions.map(function(a) {
        return a()
    })), this._order_priority, this._rank_generator)
}, _makeValueCondition:function(a, b) {
    var c = toValue(b);
    this._conditions.push(function() {
        return a(c)
    });
    this._after_or = !1;
    return this
}});
QueryBuilder.ListPropertyBuilder = QueryBuilder.FilterBuilder.subclass("QueryBuilder.ListPropertyBuilder", {}, {constructor:function() {
    QueryBuilder.FilterBuilder.superproto.constructor.call(this);
    this._object = null
}, contains:function(a) {
    this._object = toValue(a);
    return this
}});
QueryBuilder.SingleListPropertyBuilder = QueryBuilder.ListPropertyBuilder.subclass("QueryBuilder.SingleListPropertyBuilder", {}, {_list_name:SET_IN_CONSTRUCTOR, constructor:function(a) {
    QueryBuilder.SingleListPropertyBuilder.superproto.constructor.call(this);
    this._list_name = a
}, _getFilter:function() {
    return Query.ListPropertyFilter.create(this._list_name, this._object.global_id)
}});
QueryBuilder.InListBuilder = QueryBuilder.FilterBuilder.subclass("QueryBuilder.InListBuilder", {}, {constructor:function(a) {
    QueryBuilder.InListBuilder.superproto.constructor.call(this);
    this._list_rvalues = [a];
    this._max_rank = this._min_rank = null;
    this._order_priority = Query.Filter.DOES_NOT_ORDER
}, orders:function(a) {
    a = $v(a);
    return this.ordersWithPriority(a || a === void 0 ? 0 : Query.Filter.DOES_NOT_ORDER)
}, ordersWithPriority:function(a) {
    this._order_priority = $v(a);
    return this
}, rankGe:function(a) {
    this._min_rank = a;
    return this
}, rankLe:function(a) {
    this._max_rank = a;
    return this
}, _getFilter:function() {
    for(var a = [], b = 0;b < this._list_rvalues.length;b++) {
        var c = this._list_rvalues[b].getLvalue();
        a.push(c)
    }
    return Query.ListFilter.create(a, this._order_priority, this._min_rank, this._max_rank)
}});
QueryBuilder.NotInListBuilder = QueryBuilder.FilterBuilder.subclass("QueryBuilder.NotInListBuilder", {}, {constructor:function(a) {
    QueryBuilder.NotInListBuilder.superproto.constructor.call(this);
    this._list_rvalue = a
}, _getFilter:function() {
    var a = this._list_rvalue.getLvalue();
    return Query.NegativeListFilter.create([a])
}});
QueryBuilder.ReferencedObjectBuilder = QueryBuilder.FilterBuilder.subclass("QueryBuilder.ReferencedObjectBuilder", {}, {_property_name:SET_IN_CONSTRUCTOR, _filters:SET_IN_CONSTRUCTOR, _order_priority:Query.Filter.DOES_NOT_ORDER, _add_object_id:!1, constructor:function(a, b) {
    QueryBuilder.ReferencedObjectBuilder.superproto.constructor.call(this);
    this._property_name = a;
    this._filters = b
}, orders:function(a) {
    this._order_priority = a || a === void 0 ? 0 : Query.Filter.DOES_NOT_ORDER;
    return this
}, addObjectId:function(a) {
    this._add_object_id = a;
    return this
}, _getFilter:function() {
    return Query.ReferencedObjectFilter.create(this._property_name, this._filters.filter(function(a) {
        return a !== null
    }).map(function(a) {
            return a._getFilter()
        }), this._order_priority, this._add_object_id)
}});
__FILE__ = "luna/common/datastore/session_object2.js";
SessionObject2 = SessionObject.subclass("SessionObject2", {UsageRvalue:Rvalue.subclass("SessionObject2.UsageRvalue", {}, {_session_object2:SET_IN_CONSTRUCTOR, constructor:function(a) {
    SessionObject2.UsageRvalue.superproto.constructor.call(this);
    this._session_object2 = a;
    this.setAsSafelyPeekableByAncestor()
}, computeValue:function() {
    return null
}, onUnused:function() {
    SessionObject2.UsageRvalue.superproto.onUnused.call(this);
    this._session_object2 instanceof LunaSessionState || this._session_object2.datastore._state_objects.checkedRemove(this._session_object2.global_id)
}})}, {_usage_rvalue:SET_IN_CONSTRUCTOR, view:null, constructor:function() {
    SessionObject2.superproto.constructor.call(this);
    this._usage_rvalue = SessionObject2.UsageRvalue.create(this)
}, reset:function() {
    env.datastore_manager.enactChange(ClearViewStateWithPrefixChange.create({prefix:this.globalName()}))
}, globalName:function() {
    return this.global_id.substring(IDatastoreAddress.SESSION_OBJECT2_ID_PREFIX.length)
}, clearField:function(a) {
    env.datastore_manager.enactChange(SessionObject2ClearFieldChange.create({global_id:this.global_id, property_name:a}))
}, _shouldTouchProperty:function(a) {
    return a.key_name.startsWith("__") ? !1 : SessionObject2.superproto._shouldTouchProperty.call(this, a)
}, _shouldUseDefaultValueInsteadOfDatastoreValue:function(a) {
    return isUnknown(a)
}});
define("SessionObject2ClearFieldChange", Change.subclass("SessionObject2ClearFieldChange", {}, {global_id:ATTRIBUTE_REQUIRED, property_name:ATTRIBUTE_REQUIRED, enact:function() {
    var a = [], b = this;
    env.session_store.forEachCachedValue(function(c) {
        c.object_id === b.global_id && c.property_name === b.property_name && a.push(c)
    });
    env.session_store.removeValues(a)
}, taintedObjectIds:function() {
    return[]
}}));
__FILE__ = "luna/common/rank_paged_list.js";
RankPagedList = AsanaObject.subclass("RankPagedList", {_State:SessionObject2.subclass("RankPagedList._State", {property_descs:{current_limit_rank_string:{type:String, default_value:function() {
    return env.is_server ? this.rank_paged_list._initialRankLimit() : UnknownValue.Loading.create(null, null)
}}, num_outstanding_requests:{type:Integer, default_value:0}}}, {rank_paged_list:null})}, {_name:SET_IN_CONSTRUCTOR, _query_builder:SET_IN_CONSTRUCTOR, _initial_number_to_load:SET_IN_CONSTRUCTOR, _delay_until_page_loads:SET_IN_CONSTRUCTOR, constructor:function(a, b, c, d) {
    RankPagedList.superproto.constructor.call(this);
    this._name = a;
    this._query_builder = b;
    this._initial_number_to_load = c;
    this._delay_until_page_loads = d === !0
}, resetState:function() {
    this._state().reset()
}, limitedListR:rvalueProperty("limitedListR", function() {
    if(this._delay_until_page_loads && env.lunaSessionState().pageIsLoading()) {
        return List.create()
    }
    return this._query_builder.getQueryRvalue(this._name, this.currentLimitR())
}), advance:function(a) {
    if(this.hasMoreData()) {
        var b = this._state();
        b.setNumOutstandingRequests(b.numOutstandingRequests() + 1);
        env.datastore_manager.enactChange(RankPagedList.AdvanceRankChange.create({paged_list_name:this._name, advance_by:a}))
    }
}, hasMoreData:function() {
    var a = toValueAllowingUnknown(this.currentLimitR());
    return isUnknown(a) || a !== null
}, hasOutstandingRequest:function() {
    return isUnknown(toValueAllowingUnknown(this.currentLimitR())) || this._state().numOutstandingRequests() > 0
}, currentLimitR:rvalueProperty("currentLimitR", function() {
    var a = this._state().currentLimitRankString();
    return Deserializer.deserialize(a)
}), _state:function() {
    var a = env.session_store.sessionObject2(RankPagedList._State, this._name);
    a.rank_paged_list = this;
    return a
}, _initialRankLimit:function() {
    return Serializer.serialize(this._query_builder.fetchNthObjectRank(null, this._initial_number_to_load))
}});
RankPagedList.AdvanceRankChange = define("RankPagedList.AdvanceRankChange", Change.subclass("RankPagedList.AdvanceRankChange", {}, {}, {paged_list_name:ATTRIBUTE_REQUIRED, advance_by:ATTRIBUTE_REQUIRED, enact:function() {
    if(env.is_server) {
        var a = env.session_store.sessionObject2(RankPagedList._State, this.paged_list_name), b = Deserializer.deserialize(a.currentLimitRankString());
        a.rank_paged_list !== null && a.setCurrentLimitRankString(Serializer.serialize(a.rank_paged_list._query_builder.fetchNthObjectRank(b, this.advance_by - 1)));
        a.setNumOutstandingRequests(a.numOutstandingRequests() - 1)
    }
}, taintedObjectIds:function() {
    return[]
}}));
__FILE__ = "luna/common/model/paged_object_model_helper.js";
PagedObjectModelHelper = AsanaObject.subclass("PagedObjectModelHelper", [], {}, {constructor:attributedFunc({name:ATTRIBUTE_REQUIRED, all_objects_query:ATTRIBUTE_REQUIRED, rank_paged_list:ATTRIBUTE_REQUIRED, hide_queries_from_client:!1, numObjects:null}, function(a) {
    var b = this;
    PagedObjectModelHelper.superproto.constructor.call(this);
    var c = a.name, d = a.all_objects_query.getQueryRvalue(c + "|query");
    b._all_objects_r = a.hide_queries_from_client ? b._hideQueryFromClient(c + "|query", d) : d;
    b._rank_paged_list = a.rank_paged_list;
    var e = env.is_server ? a.all_objects_query.getCountRvalue(c + "|query_count") : null;
    b._num_objects_r = $rval(function() {
        var b = a.numObjects !== null ? a.numObjects() : null;
        if(b !== null) {
            return b
        }
        return serverComputedValue(c + "|all_objects_count", function() {
            return $v(e)
        })
    });
    var f = a.hide_queries_from_client ? b._hideQueryFromClient(c + "|limited_objects", b._rank_paged_list.limitedListR()) : b._rank_paged_list.limitedListR();
    b._limited_objects_r = $rval(function() {
        $v(b.numObjectsR());
        return $v(f)
    }, c + "|limited_objects")
}), allObjectsR:function() {
    return this._all_objects_r
}, limitedObjectsR:function() {
    return this._limited_objects_r
}, numObjectsR:function() {
    return this._num_objects_r
}, canLoadMoreNow:function() {
    return this._rank_paged_list.hasMoreData() && !this.isLoadingNow()
}, isLoadingNow:function() {
    return this._rank_paged_list.hasOutstandingRequest()
}, loadMore:function(a) {
    this.canLoadMoreNow() && this._rank_paged_list.advance(a)
}, reset:function() {
    this._rank_paged_list.resetState()
}, _hideQueryFromClient:function(a, b) {
    var c = $rval(function() {
        return serverComputedValue(a + "|server", function() {
            return $v(b).map(function(a) {
                return a.global_id
            })
        })
    }, a + "|object_ids"), d = List.create([], List.POLICY_ANY_RANK);
    return $rval(function() {
        var a = $v(c).map(function(a) {
            return $o(a)
        });
        d.mutateToMatch(a);
        return d
    }, a + "|result_ids")
}});
__FILE__ = "luna/common/model/ipaged_object_model.js";
IPagedObjectModel = Interface.create("IPagedObjectModel", [], {}, {allObjects:function() {
    return $v(this.allObjectsR())
}, allObjectsR:ABSTRACT, limitedObjects:function() {
    return $v(this.limitedObjectsR())
}, limitedObjectsR:ABSTRACT, numObjects:function() {
    return $v(this.numObjectsR())
}, numObjectsR:ABSTRACT, canLoadMoreNow:ABSTRACT, isLoadingNow:ABSTRACT, loadMore:ABSTRACT, reset:ABSTRACT});
__FILE__ = "luna/common/model/domain_users_model.js";
DomainUsersModel = AsanaObject.subclass("DomainUsersModel", [IPagedObjectModel], {}, {_helper:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    DomainUsersModel.superproto.constructor.call(this);
    var c = "domain_users_model|" + a.global_id + "|" + (b === void 0 ? "all" : b ? "guests" : "members"), d = this._activeDomainUsersQuery(a, b), e = RankPagedList.create(c, d, Domain.POTS_TO_LOAD_INITIALLY, !0);
    this._helper = PagedObjectModelHelper.create({name:c, all_objects_query:d, rank_paged_list:e, hide_queries_from_client:!0, numObjects:function() {
        return a.isNew() && !env.is_server ? a.domainUsers().filter(function(a) {
            return b !== void 0 && a.isGuest() !== b ? !1 : a.active
        }).size() : null
    }})
}, allObjectsR:function() {
    return this._helper.allObjectsR()
}, limitedObjectsR:function() {
    return this._helper.limitedObjectsR()
}, numObjectsR:function() {
    return this._helper.numObjectsR()
}, isLoadingNow:function() {
    return this._helper.isLoadingNow()
}, canLoadMoreNow:function() {
    return this._helper.canLoadMoreNow()
}, loadMore:function(a) {
    this._helper.loadMore(a)
}, reset:function() {
    this._helper.reset()
}, _activeDomainUsersQuery:function(a, b) {
    return QueryBuilder.queryForObjects(DomainUser).where(QueryBuilder.isInList(a.getX("domain_users")), QueryBuilder.scalarProperty("domain").eq(a), QueryBuilder.scalarProperty("active").eq(!0), b !== void 0 ? QueryBuilder.scalarProperty("is_guest").eq(b) : null, QueryBuilder.scalarProperty("_user_name_sort_key").orders().rankGenerator(Query.ToUpperCaseRankGenerator.create()))
}});
__FILE__ = "luna/common/model/network_email_domain.js";
NetworkEmailDomain = StateObject.subclass("NetworkEmailDomain", {property_descs:{network:{type:StateObject, isWriteableBy:StateObject.Property.READ_ONLY}, ned_email_domain:{type:String, indexed:!0, isWriteableBy:StateObject.Property.READ_ONLY}}, create:attributedFunc({network:ATTRIBUTE_REQUIRED, email_domain:ATTRIBUTE_REQUIRED}, function(a) {
    var b = a.email_domain;
    delete a.email_domain;
    var c = "example@" + b;
    Format.emailDomain(c) !== b && ufu("Poorly formed email domain. We won't match email addresses.", b, c);
    a.ned_email_domain = b;
    return env.world_store.createStateObject(NetworkEmailDomain, a)
})}, {_computeIsVisibleBy:function() {
    return!0
}, _areTrashPropertiesWriteableBy:function() {
    return!0
}, emailDomain:function() {
    return this.nedEmailDomain()
}});
__FILE__ = "luna/common/model/network.js";
Network = StateObject.subclass("Network", [IDescribable], {property_descs:{name:{type:String, isWriteableBy:Asana.AccessControl.writeableByNetworkAdmin}, admins:{type:List, isWriteableBy:Asana.AccessControl.networkAdminsIsWriteable}, require_sso_even_if_you_arent_in_network_workspaces:{type:Boolean, isWriteableBy:Asana.AccessControl.writeableByNetworkAdmin, default_value:!0}}, create:attributedFunc({name:ATTRIBUTE_REQUIRED, email_domains:ATTRIBUTE_REQUIRED, require_sso_even_if_you_arent_in_network_workspaces:!0,
    admins:[]}, function(a) {
    var b = a.email_domains;
    delete a.email_domains;
    var c = env.world_store.createStateObject(Network, a);
    b.forEach(function(a) {
        NetworkEmailDomain.create({network:c, email_domain:a})
    });
    return c
})}, {_computeIsVisibleBy:function() {
    return!0
}, _areTrashPropertiesWriteableBy:function(a) {
    return Asana.AccessControl.writeableByNetworkAdmin(this, a)
}, describe:function() {
    return this.name()
}, networkEmailDomainsR:Memoize.memoizeInThis("Network.networkEmailDomainsR", function() {
    return QueryBuilder.queryForObjects(NetworkEmailDomain).where(QueryBuilder.scalarProperty("network").eq(this).orders()).getQueryRvalue("Network.networkEmailDomainsR").setAsSafelyPeekableByAncestor()
}), networkEmailDomains:function() {
    return $v(this.networkEmailDomainsR())
}, emailDomains:computedProperty("Network.emailDomains", function() {
    return Set.create(this.networkEmailDomains().map(function(a) {
        return a.emailDomain()
    }))
}), ownsEmail:function(a) {
    return this.emailDomains().contains(Format.emailDomain(a))
}, credentialsAreValid:function(a) {
    var b = this;
    return a.any(function(a) {
        return a.provider === IdentityProvider.Credential.PROVIDERS.GOOGLE && b.ownsEmail(a.email_address)
    })
}, domainsR:Memoize.memoizeInThis("domainsR", function() {
    return QueryBuilder.queryForObjects(Domain).where(QueryBuilder.scalarProperty("network").eq(this).orders()).getQueryRvalue("Network.domainsR").setAsSafelyPeekableByAncestor()
}), deprovisionUser:function(a, b) {
    this.adminsL().requestRemove(a);
    b && env.datastore_manager.enactChange(RemoveNetworkEmailsFromUserChange.create({network:this, user:a}));
    env.datastore_manager.enactChange(RemoveUserFromNetworkWorkspacesChange.create({network:this, user:a}))
}, onBeforeTrashedOnServer:function() {
    $v(this.domainsR()).forEach(function(a) {
        a.setPropertyBlessed("network", null)
    });
    this.networkEmailDomains().forEach(function(a) {
        a.trash()
    })
}});
define("RemoveNetworkEmailsFromUserChange", Change.subclass("RemoveNetworkEmailsFromUserChange", {}, {user:ATTRIBUTE_REQUIRED, network:ATTRIBUTE_REQUIRED, enact:function() {
    var a = this;
    if(env.is_server) {
        var b = {name:"RemoveNetworkEmailsFromUserChange", removed_verified_emails:[], successful:!1};
        try {
            env.user() === null || a.network.admins().contains(env.user()) ? (QueryBuilder.queryForObjects(VerifiedEmail).where(QueryBuilder.scalarProperty("ve_user").eq(a.user).orders()).withoutAccessControl().getQueryRvalue("verified emails with user for RemoveNetworkEmailsFromUserChange").setAsSafelyPeekableByAncestor().peek().forEach(function(b) {
                a.network.ownsEmail(b.email()) && b.trash()
            }), b.successful = !0) : ufu("User is not an admin of the network", env.user(), a.network)
        }finally {
            logAuditEvent(b)
        }
    }
}, taintedObjectIds:function() {
    return[this.network.global_id, this.user.global_id]
}}));
define("RemoveUserFromNetworkWorkspacesChange", Change.subclass("RemoveUserFromNetworkWorkspacesChange", {}, {user:ATTRIBUTE_REQUIRED, network:ATTRIBUTE_REQUIRED, enact:function() {
    var a = this;
    if(env.is_server) {
        var b = {name:"RemoveUserFromNetworkWorkspacesChange", deactivated_domain_users:[], successful:!1};
        try {
            env.user() === null || a.network.admins().contains(env.user()) ? (QueryBuilder.queryForObjects(DomainUser).where(QueryBuilder.isInList(a.user.domainUsersL()).orders(), QueryBuilder.scalarProperty("user").eq(a.user), QueryBuilder.scalarProperty("active").eq(!0)).withoutAccessControl().getQueryRvalue("DomainUsers to possibly deactivate in RemoveUserFromNetworkWorkspacesChange").setAsSafelyPeekableByAncestor().peek().forEach(function(c) {
                $v(c.domainL().datastore_lvalue).network() === a.network && (b.deactivated_domain_users.push(c.global_id), DeactivateDomainUserChange.deactivateDomainUserOnServer(c, !0))
            }), b.successful = !0) : ufu("User is not an admin of the network", env.user(), a.network)
        }finally {
            logAuditEvent(b)
        }
    }
}, taintedObjectIds:function() {
    return[this.network.global_id, this.user.global_id]
}}));
__FILE__ = "luna/common/model/idomain_specific.js";
IDomainSpecific = Interface.create("IDomainSpecific", [], {}, {domain:ABSTRACT, deleteInUserAction:function() {
    var a = env.lunaSession().appSession();
    a instanceof TestRunSession && (a = a.getV("real_session"));
    var b = this.domain(), c = a.getV("current_list");
    equals(c, this) && a.setCurrentList(env.user().taskList(b));
    UserActionContext.get().start(env.world_store.createStateObject(RemoveFromListAction, {creator:env.user(), object:this, parent:b}));
    this.trash()
}});
__FILE__ = "luna/common/model/ibillable_domain_user_group.js";
IBillableDomainUserGroup = Interface.create("IBillableDomainUserGroup", [], {}, {name:ABSTRACT, isPremium:ABSTRACT, numMembersCountingAgainstUserLimit:ABSTRACT, userLimit:ABSTRACT, billingOwner:ABSTRACT, billingPlan:ABSTRACT, usersModel:ABSTRACT, guestsModel:ABSTRACT, fullMembersModel:ABSTRACT, domain:ABSTRACT, addFullMember:ABSTRACT, addGuest:ABSTRACT, removeUser:ABSTRACT, isBillingOwner:function(a) {
    return this.billingOwner() === a.domainUserForDomainOrNull(this.domain())
}, numSpacesLeft:function() {
    return this.userLimit() - this.numMembersCountingAgainstUserLimit()
}, canInviteMoreUsers:computedProperty("canInviteMoreUsers", function() {
    return this.domain().isGlobal() || this.numSpacesLeft() > 0 || !this.billingPlan().isUserLimitHard()
})});
__FILE__ = "apps/asana/model/billing_plan_registry.js";
BillingPlanRegistry = {plans:[], definePlan:function(a) {
    this.plans.push(BillingPlanRegistry.Plan.create(update({order:this.plans.length + 1}, a)))
}, planByCode:function(a) {
    var b = this.plans.find(function(b) {
        return b.code === a
    });
    assert(b, "Plan with code " + a + " is not defined");
    return b
}, promotedFreePlans:function() {
    return this._promotedPlans().filter(function(a) {
        return a.isFree()
    })
}, promotedPremiumPlans:function() {
    return this._promotedPlans().filter(function(a) {
        return!a.isFree()
    })
}, _promotedPlans:function() {
    return this.plans.filter(function(a) {
        return a.is_promoted
    })
}, recommendedPlan:function(a) {
    for(var b = 0;b < this.plans.length;b++) {
        if(this.plans[b] === a) {
            for(a = b + 1;a < this.plans.length;a++) {
                if(this.plans[a].is_promoted) {
                    return this.plans[a]
                }
            }
            return null
        }
    }
}};
BillingPlanRegistry.Plan = AsanaObject.subclass("BillingPlanRegistry.Plan", {}, {monthly_price:ATTRIBUTE_REQUIRED, user_limit:ATTRIBUTE_REQUIRED, code:ATTRIBUTE_REQUIRED, order:ATTRIBUTE_REQUIRED, is_promoted:!0, constructor:attributedConstructorAfterSuper(AsanaObject, noop), hasPremiumFeatures:function() {
    return this.code !== null
}, isUserLimitHard:function() {
    return!0
}, guestsCountTowardsUsersLimit:function() {
    return this.isFree()
}, numUsersCountingAgainstLimit:function(a) {
    return this.guestsCountTowardsUsersLimit() ? a.usersModel().numObjects() : a.usersModel().numObjects() - a.guestsModel().numObjects()
}, isFree:function() {
    return this.monthly_price == 0
}, isPremium:function() {
    return!this.isFree()
}, name:function() {
    return this.isFree() ? "Standard workspace plan" : "Premium workspace - " + this.user_limit + " users"
}});
BillingPlanRegistry.definePlan({monthly_price:0, user_limit:30, code:null});
BillingPlanRegistry.definePlan({monthly_price:100, user_limit:30, code:"premium30"});
BillingPlanRegistry.definePlan({monthly_price:300, user_limit:50, code:"premium50"});
BillingPlanRegistry.definePlan({monthly_price:550, user_limit:75, code:"premium75"});
BillingPlanRegistry.definePlan({monthly_price:800, user_limit:100, code:"premium100"});
BillingPlanRegistry.definePlan({monthly_price:1300, user_limit:150, code:"premium150", is_promoted:!1});
BillingPlanRegistry.definePlan({monthly_price:1800, user_limit:200, code:"premium200", is_promoted:!1});
BillingPlanRegistry.definePlan({monthly_price:2300, user_limit:250, code:"premium250", is_promoted:!1});
BillingPlanRegistry.definePlan({monthly_price:2800, user_limit:300, code:"premium300", is_promoted:!1});
BillingPlanRegistry.definePlan({monthly_price:1, user_limit:100, code:"student100", is_promoted:!1});
__FILE__ = "luna/common/model/domain.js";
Domain = StateObject.subclass("Domain", [IDescribable, INavigatable, IBillableDomainUserGroup], {POTS_TO_LOAD_PER_PORTION:50, POTS_TO_LOAD_INITIALLY:10, GLOBAL_DOMAIN_ID_KEY:"apps|domain:global_domain_id", property_descs:{creator:{type:StateObject, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, name:{type:String, preloaded:!0, indexed:!0, isWriteableBy:Asana.AccessControl.writeableByAdminOrFullMemberOrWhenNew, api_info:{field_name:"name"}}, description:{type:String, isWriteableBy:Asana.AccessControl.writeableByAdminOrFullMemberOrWhenNew},
    network:{type:StateObject, default_value:null, isWriteableBy:Asana.AccessControl.domainNetworkIsWriteable, track_initial_value:!0}, domain_users:{type:List}, lists:{type:List}, domain_feature_settings:{type:String, default_value:"", preloaded:!0}, real_size:{type:Integer, isWriteableBy:Asana.AccessControl.domainWriteable}, is_work_domain:{type:Boolean, isWriteableBy:Asana.AccessControl.domainWriteable}, was_pitched:{type:Boolean, isWriteableBy:Asana.AccessControl.domainWriteable}, is_friend:{type:Boolean,
        isWriteableBy:Asana.AccessControl.domainWriteable}, was_referred:{type:Boolean, isWriteableBy:Asana.AccessControl.domainWriteable}, size_cap:{type:Integer, isWriteableBy:Asana.AccessControl.domainWriteable}, activated:{type:Boolean, isWriteableBy:Asana.AccessControl.writeableByAdminOrFullMemberOrWhenNew}, is_for:{type:String, isWriteableBy:Asana.AccessControl.writeableByAdminOrFullMemberOrWhenNew}, invite_key:{type:String, default_value:"", isWriteableBy:Asana.AccessControl.writeableByAdminOrFullMemberOrWhenNew},
    org_name:{type:String, isWriteableBy:Asana.AccessControl.writeableByAdminOrFullMemberOrWhenNew}, website:{type:String, isWriteableBy:Asana.AccessControl.writeableByAdminOrFullMemberOrWhenNew}, org_size:{type:String, isWriteableBy:Asana.AccessControl.writeableByAdminOrFullMemberOrWhenNew}, billing_owner:{type:StateObject, isWriteableBy:function(a, b, c) {
        return a.initialValue("billing_owner") === b.domainUserForDomain(a) && $v(c) !== null && isA($v(c), DomainUser)
    }, default_value:null, track_initial_value:!0}, premium_plan_name:{type:String, isWriteableBy:StateObject.Property.READ_ONLY, default_value:null}, payment_card_type:{type:String, server_only:!0, isWriteableBy:StateObject.Property.READ_ONLY, default_value:null}, payment_card_last_digits:{type:String, server_only:!0, isWriteableBy:StateObject.Property.READ_ONLY, default_value:null}, free_to_premium_upgrade_time:{type:Integer, isWriteableBy:StateObject.Property.READ_ONLY, default_value:null}, duplicated_from:{type:StateObject,
        default_value:null}}, NullValue:"NULL", IsFor:{BUSINESS:"Business", NONPROFIT:"Nonprofit", SCHOOL:"School", PERSONAL_HOUSEHOLD:"Household", CLUB_TEAM:"Club/Team", OTHER:"Other"}, OrgSize:{NULL:"---", ONETOFIVE:"1 - 5", SIXTOTEN:"6 - 10", ELEVENTOTWENTY:"11 - 20", TWENTYONETOFIFTY:"21 - 50", FIFTYONETOONEHUNDRED:"51 - 100", ONEHUNDREDONETOONETHOUSAND:"101 - 1000", ONETHOUSANDONETOTENTHOUSAND:"1001 - 10000", TENTHOUSANDPLUS:"10000+"}, DEFAULT_SIZE_CAP:30, NO_SIZE_CAP:-1, create:attributedValueFunc({creator:null,
    name:"", description:"", real_size:0, is_work_domain:!1, was_pitched:!1, is_friend:!1, was_referred:!1, size_cap:void 0, activated:!0, is_for:"BUSINESS", org_name:null, website:null, org_size:"NULL", domain_feature_settings:"", network:null, duplicated_from:null}, function(a) {
    a.creator !== null && assertInstanceof(a.creator, User);
    if(a.size_cap === void 0) {
        a.size_cap = Domain.DEFAULT_SIZE_CAP
    }
    a = env.world_store.createStateObject(Domain, a);
    if(!env.is_server) {
        a._was_just_created_on_the_client = !0
    }
    return a
}), _globalDomainIdOrNull:function() {
    var a = env.world_store.readKvString(Domain.GLOBAL_DOMAIN_ID_KEY, null);
    return a === null ? null : parseInt(a, 10)
}, _globalDomainOrNull:function() {
    var a = Domain._globalDomainIdOrNull();
    return a === null ? null : $o(a)
}, globalDomain:function() {
    var a = Domain._globalDomainOrNull();
    assertNe(null, a);
    return a
}, resetGlobalDomain:function() {
    var a = Domain.create({name:"Personal Projects"});
    env.world_store.writeKvString(Domain.GLOBAL_DOMAIN_ID_KEY, "" + a.global_id)
}, findByName:function(a) {
    return $v(QueryBuilder.queryForObjects(Domain).usingIndex(Domain.getIndexByName("Domain.name")).where(QueryBuilder.scalarProperty("name").eq(a)).getQueryRvalue("Domain.findByName"))
}}, {apiModel:Memoize.memoizeInThis("Task.apiModel", function() {
    var a = this;
    return Api.Model.create({name:function() {
        return"workspace"
    }, hasChangeEvents:function() {
        return!0
    }, objectId:function() {
        return a.global_id
    }, objectTypeId:function() {
        return env.type_registry.getTypeId(a.__type)
    }})
}), usersR:Memoize.memoizeInThis("usersR", function() {
    return computed_lists.mapInRvalues(this.getX("domain_users"), function(a) {
        return $v(a).user()
    }).setAsSafelyPeekableByAncestor()
}), numSpacesLeftInDomain:function() {
    return this.sizeCap() - this.numMembersCountingAgainstUserLimit()
}, numMembersCountingAgainstUserLimit:function() {
    return this.billingPlan().numUsersCountingAgainstLimit(this)
}, _isGlobal:serverComputedProperty("Domain.isGlobal", function() {
    return this.global_id === Domain._globalDomainIdOrNull()
}), _was_just_created_on_the_client:!1, isGlobal:function() {
    if(this._was_just_created_on_the_client) {
        return!1
    }
    return this._isGlobal()
}, canInviteMoreUsers:computedProperty("canInviteMoreUsers", function() {
    return this.isGlobal() || this.numSpacesLeftInDomain() > 0 || !this.sizeCapIsHard()
}), createItemList:function(a) {
    assertEquals(void 0, a.domain);
    assertInstanceof(a.creator_du, DomainUser);
    a = ItemList.create(update(a, {domain:this}));
    this.addPot(a);
    return a
}, removeList:function(a) {
    this.removePot($v(a))
}, hasActiveUser:computedProperty("hasActiveUser", function(a) {
    a = this.findDomainUser($v(a));
    return a !== null && a.active()
}), isUserDeprovisioned:function(a) {
    a = this.findDomainUser($v(a));
    return a !== null ? !a.active() : !1
}, forEachDomainUser:function(a) {
    return this.getV("domain_users").forEachValue(function(b) {
        a(b)
    })
}, addFullMember:function(a) {
    return this.addUser({user:a, notification_verified_email:null, is_guest:!1})
}, addGuest:function(a) {
    return this.addUser({user:a, notification_verified_email:null, is_guest:!0})
}, addUser:attributedValueFunc({user:ATTRIBUTE_REQUIRED, notification_verified_email:ATTRIBUTE_REQUIRED, is_guest:ATTRIBUTE_REQUIRED}, function(a) {
    var b = a.user;
    b.mergedIntoUserOrUnknown() !== null && ufu("Refusing to add an already-merged user to domain. Triage to Jack.\nUser: " + b.global_id + " Domain: " + this.global_id);
    var c = this.findDomainUser(b);
    c ? (a.is_guest !== c.isGuest() && c.setIsGuest(a.is_guest), c.active() || c.reactivate()) : (c = DomainUser.create({domain:this, user:b, notification_verified_email:a.notification_verified_email, is_guest:a.is_guest}), this.isGlobal() || this.domainUsersL().requestInsertBefore(c, null), a = b.activeDomainUsers().lastValueOrNull(), a !== null && a.domain().isGlobal() ? b.domainUsersL().requestInsertBefore(c, a) : b.domainUsersL().requestInsertBefore(c, null));
    env.datastore_manager.enactChange(ActivateDomainUserChange.create({domain_user:c, domain:this}));
    return c
}), relevantDomainUsers:function(a) {
    return env.user().domainUserForDomain(this).relevantDomainUsers(a)
}, relevantDomainUsersR:rvalueProperty("Domain.relevantDomainUsersR", function(a) {
    return List.create(this.relevantDomainUsers(a))
}), relevantDomainUsersSortedByName:function(a) {
    a = this.relevantDomainUsers(a);
    a.sortBy(function(a) {
        return a.name()
    });
    return a
}, addTestUser:function(a) {
    return this.addFullMember(a)
}, removeUser:function(a) {
    this.getDomainUser($v(a)).deactivate()
}, usersModel:computedProperty("usersModel", function() {
    return DomainUsersModel.create(this)
}), guestsModel:computedProperty("guestsModel", function() {
    return DomainUsersModel.create(this, !0)
}), fullMembersModel:computedProperty("fullMembersModel", function() {
    return DomainUsersModel.create(this, !1)
}), getActiveDomainInvitesR:Memoize.memoizeInThis("Domain.getActiveDomainInvitesR", function() {
    return QueryBuilder.queryForObjects(DomainInvite).where(QueryBuilder.scalarProperty("invite_domain").eq(this), QueryBuilder.scalarProperty("active").eq(!0).orders()).getQueryRvalue("Domain.getActiveDomainInvitesQueryR").setAsSafelyPeekableByAncestor()
}), lists:function() {
    return this.getV("lists")
}, listsL:function() {
    return this.getX("lists")
}, setLists:function(a) {
    return this.setLists(a)
}, sortedLists:function() {
    return QueryBuilder.queryForObjects(Pot).where(QueryBuilder.isInList(this.getX("lists")), QueryBuilder.scalarProperty("name").orders()).getQueryRvalue("Domain.sortedLists")
}, getDomainUser:function(a) {
    var b = this.findDomainUser(a);
    b === null && ufu("User not in domain", a, this);
    return b
}, isActiveUser:function(a) {
    a = this.findDomainUser(a);
    return a !== null && a.active()
}, findDomainUser:function(a) {
    if(this.isGlobal()) {
        return a.globalDomainUserOrNull()
    }
    var b = this._domainUserQuery(a).peekAllowingUnknown();
    if(!isUnknown(b)) {
        return b.isEmpty() ? null : b.firstValueOrNull()
    }
    return(!env.is_server && this.isNew() ? this.getV("domain_users") : this.usersModel().limitedObjects()).find(function(b) {
        var d = b.datastoreLvalueForProperty("user");
        return env.datastoreForObjectId(b).readValue(d) === a.global_id ? (d.peek(), !0) : !1
    })
}, _domainUserQuery:rvalueProperty("_domainUserQuery", function(a) {
    return QueryBuilder.queryForObjects(DomainUser).where(QueryBuilder.isInList(this.getX("domain_users")), QueryBuilder.scalarProperty("user").eq(a).orders()).getQueryRvalue("Domain._domainUserQuery")
}), allProjectsL:Memoize.memoizeInThis("Domain.allProjectsL", function(a) {
    return FilterRvalue.create(this.getX("lists"), function(b) {
        return $rval(function() {
            var c = $v(b);
            return c.getV("is_project") && (!c.getV("is_archived") || a)
        })
    }).setAsSafelyPeekableByAncestor()
}), allTagsR:Memoize.memoizeInThis("Domain.allTagsR", function() {
    return FilterRvalue.create(this.getX("lists"), function(a) {
        return $rval(function() {
            return!$v(a).getV("is_project")
        })
    }).setAsSafelyPeekableByAncestor()
}), addPot:function(a) {
    this.isGlobal() || this.listsL().requestInsertBefore(a, null)
}, removePot:function(a) {
    this.isGlobal() || this.litsL().requestRemove(a)
}, potIdsForSearch:function() {
    var a = Set.create(), b = env.userOrNull();
    if(b !== null) {
        var c = this.getDomainUser(b);
        c.activeProjectMemberships().forEach(function(b) {
            b = b.projectOrUnknown();
            b instanceof UnknownValue || a.add(b.global_id)
        });
        var d = QueryBuilder.scalarProperty("team"), e = !1;
        c.canSeePublicData() && (d.or().eq(null), e = !0);
        c.fullTeams().forEach(function(a) {
            d.or().eq(a);
            e = !0
        });
        e && (c = QueryBuilder.queryForObjects(Pot).where(QueryBuilder.isInList(this.getX("lists")).orders(), d, QueryBuilder.scalarProperty("is_archived").eq(!1), QueryBuilder.scalarProperty("is_project").eq(!0), b.hasSuperuserReadPrivilege() ? null : QueryBuilder.scalarProperty("is_public_to_workspace").eq(!0)), b = c._getQuery().getSQL(!1, !1, !1), c = c._getQuery().getSQLSubstitutions(null, null), a.addAll(env.KVStore.query(env.db.createStatement(b), c).map(function(a) {
            return a.result
        })))
    }
    return a.values()
}, _favoritesForCurrentUser:function(a, b) {
    var c = this;
    return $rval(function() {
        var d = env.userOrNull(), d = d !== null ? c.getDomainUser(d) : null;
        return d === null ? List.create([]) : FilterRvalue.create(d.favoritesL(), function(c) {
            return $rval(function() {
                var d = $v(c);
                return d instanceof Pot && d.getV("is_project") === a && (!d.getV("is_archived") || b)
            })
        })
    })
}, _state:function() {
    return env.session_store.sessionObject2(Domain.State, "domain_state_" + this.global_id)
}, _domain_features:void 0, _parsedDomainFeatures:function(a) {
    var b = this;
    if(!b._domain_features || a) {
        a = this.datastoreLvalueForProperty("domain_feature_settings"), b._domain_features = Set.create(), a = env.world_store.readValue(a), a instanceof UnknownValue.DoesNotExist || a.split(",").forEach(function(a) {
            FeatureFlags.get().exists(a) && FeatureFlags.get().scope(a) === FlagSystem.Scope.DOMAIN && b._domain_features.add(a)
        }), b._domain_features.addAll(FeatureFlags.get().getEnabledFeatureNames(!0))
    }
    return b._domain_features
}, hasFeature:function(a) {
    return this._parsedDomainFeatures().contains("enable_" + a)
}, hasFeatureReactive:computedProperty("hasFeatureReactive", function(a) {
    this.domainFeatureSettings();
    return this._parsedDomainFeatures(!0).contains("enable_" + a)
}), addFeature:function(a) {
    var b = Set.create().addAll(this.domainFeatureSettings().split(","));
    b.add("enable_" + a);
    this.setDomainFeatureSettings(b.join(","))
}, removeFeature:function(a) {
    var b = Set.create().addAll(this.domainFeatureSettings().split(","));
    b.remove("enable_" + a);
    this.setDomainFeatureSettings(b.join(","))
}, hasPremiumPermissions:function() {
    return this.isGlobal() || this.hasFeatureReactive("premium_permissions") || this.isPremium()
}, enablePremiumPermissions:function() {
    this.addFeature("premium_permissions")
}, isFullyLoaded:function() {
    return isKnown(this.getX("activated").peekAllowingUnknown())
}, shouldHideTeamHierarchyFromUser:computedProperty("shouldHideTeamHiearchy", function(a) {
    if(!ExperimentalFeature.enabled("expose_teams", this)) {
        return!0
    }
    a = a.domainUserForDomain(this);
    return this.teams().size() === 1 && this.teams().first().name() === this.name() && a.teams().size() === 1
}), _computeIsVisibleBy:function(a) {
    if(this.isGlobal()) {
        return!0
    }
    var b = this._findDomainUserForUserForAC(a);
    if(b !== null && b.active()) {
        return!0
    }
    return a.hasAdminReadPrivilege()
}, _findDomainUserForUserForAC:function(a) {
    var b = this;
    return a.getV("domain_users").findValueOrNull(function(a) {
        var d = a.datastoreLvalueForProperty("domain");
        return env.datastoreForObjectId(a).readValue(d) === b.global_id
    })
}, onServerCreate:function() {
    logEvent({name:"WorkspaceCreation", created_domain:this, creator:this.getV("creator")})
}, describe:function() {
    return this.name()
}, navigationTarget:function() {
    return env.user().domainUserForDomain(this).taskList()
}, domain:function() {
    return this
}, billingAccountCode:serverComputedProperty("billingAccountCode", function() {
    var a = "domain-" + this.global_id;
    host.getEnvVar("CONFIG") === "sand" && (a = "sand-" + Crypto.hash(host.getEnvVar("ASANA_GIT_EMAIL")) + "-" + a);
    return a
}), billingPlan:function() {
    return BillingPlanRegistry.planByCode(this.premiumPlanName())
}, isPremium:function() {
    return this.billingPlan().isPremium()
}, sizeCap:function() {
    return this.userLimit()
}, userLimit:function() {
    var a = this.getV("size_cap");
    return a === Domain.NO_SIZE_CAP ? this.billingPlan().user_limit : a
}, sizeCapIsHard:function() {
    return this.billingPlan().isUserLimitHard()
}, paymentCardType:serverComputedProperty("paymentCardType", function() {
    return this.getV("payment_card_type")
}), paymentCardLastDigits:serverComputedProperty("paymentCardLastDigits", function() {
    return this.getV("payment_card_last_digits")
}), canDowngradeToPlan:function(a) {
    return a.numUsersCountingAgainstLimit(this) <= a.user_limit
}, teamsR:Memoize.memoizeInThis("teamsR", function() {
    return QueryBuilder.queryForObjects(Team).where(QueryBuilder.scalarProperty("team_domain").eq(this), QueryBuilder.scalarProperty("__creation_time").orders()).getQueryRvalue("Domain.teams").setAsSafelyPeekableByAncestor()
}), teams:function() {
    return $v(this.teamsR())
}, allowProjectsWithNullTeam:function() {
    return this.isGlobal() || this.teams().size() === 0
}, onlyTeam:function() {
    assertEq(!1, this.allowProjectsWithNullTeam());
    assertEq(1, this.teams().size());
    return this.teams().first()
}, potentialNetworks:function() {
    if(this.network() !== null) {
        return[this.network()]
    }else {
        var a = null;
        this.fullMembersModel().allObjects().forEach(function(b) {
            if(a === null) {
                a = b.user().networks()
            }else {
                var c = b.user().networks();
                a.forEach(function(b) {
                    c.contains(b) || a.remove(b)
                })
            }
            if(a.isEmpty()) {
                throw IIterable.STOP;
            }
        });
        a.add(null);
        return a
    }
}, setNetwork:function(a) {
    env.datastore_manager.enactChange(SetDomainNetworkChange.create({domain:this, network:a}))
}, updateProperties:attributedFunc({name:ATTRIBUTE_OPTIONAL, is_for:ATTRIBUTE_OPTIONAL, network:ATTRIBUTE_OPTIONAL, org_name:ATTRIBUTE_OPTIONAL, website:ATTRIBUTE_OPTIONAL, org_size:ATTRIBUTE_OPTIONAL, activated:ATTRIBUTE_OPTIONAL}, function(a) {
    a.name !== void 0 && this.setName(a.name);
    a.is_for !== void 0 && this.setIsFor(a.is_for);
    a.network !== void 0 && this.setNetwork(a.network);
    a.org_name !== void 0 && this.setOrgName(a.org_name);
    a.website !== void 0 && this.setWebsite(a.website);
    a.org_size !== void 0 && this.setOrgSize(a.org_size);
    a.activated !== void 0 && this.setActivated(a.activated)
})});
Domain.State = SessionObject2.subclass("Domain.State", {property_descs:{number_of_domain_users_loaded:{type:Integer, default_value:Domain.POTS_TO_LOAD_INITIALLY}}}, {});
SetDomainNetworkChange = define("SetDomainNetworkChange", Change.subclass("SetDomainNetworkChange", {}, {domain:ATTRIBUTE_REQUIRED, network:ATTRIBUTE_REQUIRED, enact:function() {
    var a = this.network;
    this.domain.networkL().requestSet(a);
    env.is_server && a !== null && this.domain.usersModel().allObjects().forEach(function(b) {
        var c = b.user(), d = $v(b.notificationVerifiedEmailL().datastore_lvalue), d = d === null ? c.emailNoAC() : d.email();
        a.ownsEmail(d) || (a.ownsEmail(c.emailNoAC()) ? b.setPropertyBlessed("notification_verified_email", null) : (c = b.user().verifiedEmailsR(!0), c = $v(c).find(function(b) {
            return a.ownsEmail(b.email())
        }), c !== null ? b.setPropertyBlessed("notification_verified_email", c) : b.isGuest() || host.recordWarning("Couldn't find an in-network address for full member.", b, a)))
    })
}, taintedObjectIds:function() {
    var a = [this.domain.global_id];
    this.network !== null && a.push(this.network.global_id);
    return a
}}));
__FILE__ = "apps/asana/computed_model/computed_model.js";
ComputedModel = AsanaObject.subclass("ComputedModel", {}, {constructor:function(a) {
    ComputedModel.superproto.constructor.call(this);
    updateWithAttributes(this, a)
}});
__FILE__ = "apps/asana/computed_model/inbox_thread.js";
InboxThread = ComputedModel.subclass("InboxThread", {StoryLevel:{ASSIGNED:90, COMPLETE:80, COMMENT:70, INCOMPLETE:60, COMPLETE_THEN_INCOMPLETE:59, REASSIGNED:55, UNASSIGNED:50, ASSIGNED_THEN_UNASSIGNED:49, DATE_CHANGE:40, ATTACHMENT:30, ADD_TO_POT:20, PROJECT_SHARE:15, FOLLOW:10, UNKNOWN:0}, rankWithinGroup:function(a) {
    a = a.story();
    return a.getV("__creation_time") + "." + a.global_id
}}, {thread_object:ATTRIBUTE_REQUIRED, group_timestamp:ATTRIBUTE_REQUIRED, unread:ATTRIBUTE_REQUIRED, notifications_r:ATTRIBUTE_REQUIRED, constructor:function(a) {
    InboxThread.superproto.constructor.call(this, a)
}, id:function() {
    return this.thread_object.global_id + ":" + (this.unread ? "unread" : "read")
}, firstNotification:function() {
    return this.visibleNotifications().first()
}, lastNotification:ABSTRACT, notificationBeforeNotificationOrNull:ABSTRACT, notificationAfterNotificationOrNull:ABSTRACT, onSelectNotification:function() {
    this.visibleNotifications();
    this.markVisibleNotificationsInThreadAsRead()
}, markVisibleNotificationsInThreadAsRead:function() {
    this.visibleNotifications().forEach(function(a) {
        a.recipient().inbox().markAsRead(a)
    })
}, rank:function() {
    return-this.visibleNotifications().last().getV("__creation_time")
}, visibleNotifications:function() {
    var a = $v(this.notifications_r);
    assertNe(0, a.size(), "Empty notifications_r for InboxThread", this.id());
    return a
}, mostImportantStoryLevel:computedProperty("mostImportantStoryLevel", function() {
    var a = this, b = a.visibleNotifications().maxValue(function(b, d) {
        if(a.storyLevelForStory(b.story()) > a.storyLevelForStory(d.story())) {
            return b
        }
        return d
    });
    return a.storyLevelForStory(b.story())
}), storyLevelForStory:function(a) {
    var b;
    if(a instanceof TaskAssignedComment) {
        b = a.parentObject().getAssigneeOrNull();
        var c = a.assigneeDu();
        b = isUnknown(c) || c === null || env.user() !== c.user() ? InboxThread.StoryLevel.REASSIGNED : b !== null && b.user() === env.user() ? InboxThread.StoryLevel.ASSIGNED : InboxThread.StoryLevel.ASSIGNED_THEN_UNASSIGNED
    }else {
        b = a instanceof TaskCompletedComment ? a.parentObject().isCompleted() ? InboxThread.StoryLevel.COMPLETE : InboxThread.StoryLevel.COMPLETE_THEN_INCOMPLETE : InboxThread.StoryTypeToLevelMap[a.typeName()]
    }
    if(b === void 0) {
        return host.recordWarning("Could not figure out a level for the story. Tell Bella.", prettyHint(a, 1)), InboxThread.StoryLevel.UNKNOWN
    }
    return b
}});
InboxThread.StoryTypeToLevelMap = {Comment:InboxThread.StoryLevel.COMMENT, TaskUncompletedComment:InboxThread.StoryLevel.INCOMPLETE, TaskUnassignedComment:InboxThread.StoryLevel.UNASSIGNED, TaskDueDateChangedStory:InboxThread.StoryLevel.DATE_CHANGE, AddAttachmentStory:InboxThread.StoryLevel.ATTACHMENT, TaskAddedToListComment:InboxThread.StoryLevel.ADD_TO_POT, ProjectShareStory:InboxThread.StoryLevel.PROJECT_SHARE, AddedFollowerComment:InboxThread.StoryLevel.FOLLOW};
__FILE__ = "apps/asana/computed_model/item_list_inbox_thread.js";
ItemListInboxThread = InboxThread.subclass("ItemListInboxThread", {}, {id:function() {
    return this.thread_object.global_id + ":" + this.group_timestamp + ":" + (this.unread ? "unread" : "read")
}, _state:function() {
    return env.session_store.sessionObject2(ItemListInboxThread.State, "pot_inbox_group_" + this.unread + "_" + this.thread_object.global_id + "_" + this.group_timestamp)
}, maxNotificationsToShow:function() {
    return this._state().maxNotificationsToShow()
}, loadMoreNotifications:function() {
    this._state().setMaxNotificationsToShow(this.maxNotificationsToShow() + 10)
}, lastNotification:function() {
    var a = this.visibleNotifications();
    if(a.size() > this.maxNotificationsToShow()) {
        return a.atIndex(this.maxNotificationsToShow() - 1)
    }
    return a.last()
}, notificationBeforeNotificationOrNull:function(a) {
    return this.visibleNotifications().valueBeforeValueOrNull(a)
}, notificationAfterNotificationOrNull:function(a) {
    var b = this.visibleNotifications(), a = b.valueAfterValueOrNull(a);
    return!a || b.indexOfValue(a) >= this.maxNotificationsToShow() ? null : a
}, onSelectNotification:function(a) {
    a.recipient().inbox().markAsRead(a)
}});
ItemListInboxThread.State = SessionObject2.subclass("ItemListInboxThread.State", {property_descs:{max_notifications_to_show:{type:Integer, default_value:3}}}, {});
__FILE__ = "apps/asana/computed_model/item_inbox_thread.js";
ItemInboxThread = InboxThread.subclass("ItemInboxThread", {}, {firstNotification:function() {
    return this.visibleNotifications().first()
}, lastNotification:function() {
    return this.firstNotification()
}, notificationBeforeNotificationOrNull:function() {
    return null
}, notificationAfterNotificationOrNull:function() {
    return null
}, visibleNotifications:function() {
    var a = this, b = $v(a.notifications_r);
    assertNe(0, b.size(), "Empty notifications_r for ItemInboxThread", this.id());
    var c = b.filter(function(b) {
        return!a._hideNotification(b)
    });
    assertNe(0, c.size(), "Empty visibleNotifications for ItemInboxThread", this.id(), "hidden_notifications:", b.map(function(a) {
        return a.global_id
    }));
    return c
}, _hideNotification:function(a) {
    return a.story() instanceof TaskAddedToListComment
}, isAllRead:function() {
    return this.visibleNotifications().any(function(a) {
        return!a.isUnread()
    })
}});
__FILE__ = "luna/common/computed_lists/multi_dict.js";
MultiDict = AsanaObject.subclass("MultiDict", {KeyAndRank:AsanaObject.subclass("MultiDict.KeyAndRank", {}, {constructor:function(a, b) {
    MultiDict.superproto.constructor.call(this);
    this.key = a;
    this.rank = b
}})}, {constructor:function(a, b) {
    MultiDict.superproto.constructor.call(this);
    this._master_rvalue = MultiDict._MasterRvalue.create(a, b)
}, keys:function() {
    toValue(this._master_rvalue);
    return this._master_rvalue._key_list
}, values:function(a) {
    toValue(this._master_rvalue);
    return(a = this._master_rvalue._key_to_value_list_map.find(a)) ? a : List.EMPTY_LIST
}, masterRvalue:function() {
    return this._master_rvalue
}});
MultiDict._MasterRvalue = Rvalue.subclass("MultiDict._MasterRvalue", {}, {_input_values_listish:SET_IN_CONSTRUCTOR, _input_item_to_mapped_item_map:SET_IN_CONSTRUCTOR, _func:SET_IN_CONSTRUCTOR, _key_to_value_list_map:SET_IN_CONSTRUCTOR, _manual_input_key_to_function:SET_IN_CONSTRUCTOR, _key_list:null, _poller:null, _compute_count:0, constructor:function(a, b) {
    MultiDict._MasterRvalue.superproto.constructor.call(this);
    this._func = b;
    this._input_values_listish = a;
    this._input_item_to_mapped_item_map = Map.create();
    this._key_to_value_list_map = Map.create();
    this._manual_input_key_to_function = host.job_queue !== null ? Map.create() : null
}, onUnused:function() {
    MultiDict._MasterRvalue.superproto.onUnused.call(this);
    this._poller = this._key_list = null;
    this._input_item_to_mapped_item_map = Map.create();
    this._key_to_value_list_map = Map.create()
}, computeValue:function() {
    var a = this;
    this._key_list = this._key_list || List.create([], List.POLICY_USE_ALPHABET);
    $v(this._input_values_listish);
    this._poller = this._poller || List.Poller.create(this._input_values_listish, {onInserted:function(b, d) {
        a._setManualInputKey(b);
        var e = MultiDict._MappedItem.create(a, b, d, a._func(b));
        host.job_queue !== null ? a._manual_input_key_to_function.put(b, function() {
            e.peekAllowingUnknown()
        }) : e.peekAllowingUnknown();
        a._setManualInputKey(null);
        a._input_item_to_mapped_item_map.put(b, e)
    }, onMoved:function(b, d) {
        a._input_item_to_mapped_item_map.get(b).onMoved(d)
    }, onRemoved:function(b) {
        a._input_item_to_mapped_item_map.get(b).onRemoved();
        a._input_item_to_mapped_item_map.remove(b);
        host.job_queue !== null && a._manual_input_key_to_function.remove(b);
        a._removeManualInputKey(b)
    }});
    this._poller._verbose = !0;
    this._poller.poll();
    if(host.job_queue !== null) {
        var b = a._manual_input_key_to_function.mapEntries(function(b, d) {
            return env.frp.addRvalueJob(a, b, d)
        });
        host.job_queue.join(b);
        a._manual_input_key_to_function.clear()
    }
    return this._compute_count++
}, _getOrMakeKeyValueList:function(a) {
    if(this._key_to_value_list_map.containsKey(a)) {
        return this._key_to_value_list_map.get(a)
    }else {
        var b = List.create([], List.POLICY_ANY_RANK);
        this._key_to_value_list_map.put(a, b);
        this._key_list.append(a);
        return b
    }
}, _assignKeyToItem:function(a, b, c) {
    this._getOrMakeKeyValueList(a).insertAtRank(b, c)
}, _unassignKeyFromItem:function(a, b) {
    var c = this._key_to_value_list_map.get(a);
    c.removeValue(b);
    c.size() === 0 && (this._key_to_value_list_map.remove(a), this._key_list.removeValue(a))
}, _moveItem:function(a, b, c) {
    this._key_to_value_list_map.get(a).setRankForValue(b, c)
}, _addInput:function(a, b) {
    b !== null && !(a instanceof MultiDict._MappedItem) && ufu("MultiDict item trying to peek", a);
    return MultiDict._MasterRvalue.superproto._addInput.call(this, a, b)
}});
MultiDict._MappedItem = Rvalue.subclass("MultiDict._MappedItem", {}, {constructor:function(a, b, c, d) {
    MultiDict._MappedItem.superproto.constructor.call(this);
    this._master = a;
    this._value = b;
    this._rank = c;
    this._last_key = UnknownValue.DoesNotExist.create(this, null);
    this._last_rank = UnknownValue.DoesNotExist.create(this, null);
    this._use_input_list_rank = !0;
    this._key_and_rank_xvalue = d;
    this._input_item_to_mapped_item_map = this._poller = null
}, computeValue:function() {
    var a = toValueAllowingUnknown(this._key_and_rank_xvalue);
    Rvalue.isListish(a) ? this._updateWithMultipleKeys(a) : this._updateWithSingleKey(a);
    return a
}, onMoved:function(a) {
    this._rank = a;
    Rvalue.isListish(this.getCachedXvalue()) ? this._input_item_to_mapped_item_map.forEach(function(b, c) {
        c.onMoved(a)
    }) : this._isPresent() && this._use_input_list_rank && this._master._moveItem(this._last_key, this._value, this._rank)
}, onRemoved:function() {
    Rvalue.isListish(this.getCachedXvalue()) ? this._input_item_to_mapped_item_map.forEach(function(a, b) {
        b.onRemoved()
    }) : this._isPresent() && this._master._unassignKeyFromItem(this._last_key, this._value)
}, _updateWithMultipleKeys:function() {
    var a = this;
    if(this._poller === null) {
        this.onRemoved(), this._input_item_to_mapped_item_map = Map.create(), this._poller = List.Poller.create(this._key_and_rank_xvalue, {onInserted:function(b) {
            a._setManualInputKey(b);
            var c = MultiDict._MappedItem.create(a._master, a._value, a._rank, b);
            c.peekAllowingUnknown();
            a._setManualInputKey(null);
            a._input_item_to_mapped_item_map.put(b, c)
        }, onMoved:noop, onRemoved:function(b) {
            a._input_item_to_mapped_item_map.get(b).onRemoved();
            a._input_item_to_mapped_item_map.remove(b);
            a._removeManualInputKey(b)
        }})
    }
    this._poller.poll()
}, _updateWithSingleKey:function(a) {
    if(this._poller !== null) {
        this.onRemoved(), this._input_item_to_mapped_item_map = this._poller = null, this._last_key = UnknownValue.DoesNotExist.create(this.getName() + ":last_key", null), this._last_rank = UnknownValue.DoesNotExist.create(this.getName() + ":last_rank", null)
    }
    var b;
    a instanceof MultiDict.KeyAndRank ? (b = a.key, a = a.rank, this._use_input_list_rank = !1) : (b = a, a = this._rank, this._use_input_list_rank = !0);
    b !== this._last_key ? (this._isPresent() && this._master._unassignKeyFromItem(this._last_key, this._value), this._last_key = b, this._isPresent() && this._master._assignKeyToItem(b, this._value, a)) : a !== this._last_rank && this._isPresent() && this._master._moveItem(b, this._value, a);
    this._last_rank = a
}, _isPresent:function() {
    return isKnown(this._last_key)
}});
__FILE__ = "apps/asana/computed_model/inbox.js";
INBOX_NAME = "Inbox";
Inbox = ComputedModel.subclass("Inbox", {INITIAL_COUNT:10, INCREMENT_COUNT:20, _rankForNotification:function(a) {
    return List.MultiKeyRank.create([-a.getV("__creation_time"), a.global_id])
}}, {domain_user:ATTRIBUTE_REQUIRED, _unread_to_notifications_by_thread_key:SET_IN_CONSTRUCTOR, _unread_to_sorted_thread_notifications_r:SET_IN_CONSTRUCTOR, constructor:function(a) {
    var b = this;
    Inbox.superproto.constructor.call(b, a);
    b.isEnabled();
    b._unread_to_notifications_by_thread_key = {};
    b._unread_to_sorted_thread_notifications_r = {};
    a = function(a) {
        b._unread_to_notifications_by_thread_key[a] = MultiDict.create(b.filteredNotificationsR(a), function(d) {
            return $rval(function() {
                var e = b._threadKeyForNotificationAndUnread(d, a), f = InboxThread.rankWithinGroup(d);
                return MultiDict.KeyAndRank.create(e, f)
            })
        });
        b._unread_to_sorted_thread_notifications_r[a] = computed_lists.sort(b.threadKeysR(a), function(d) {
            var e = b._unread_to_notifications_by_thread_key[a].values(d);
            return d.is_list_thread ? -e.last().getV("__creation_time") : -e.findLast(function(a) {
                return!a.isFilteredFromTaskThread()
            }).getV("__creation_time")
        })
    };
    a(!0);
    a(!1)
}, _state:function() {
    return this.domain_user.inboxState()
}, touch:function() {
    var a = this._state();
    env.world_store.peekXvaluesAndStateObjectScalarsWithoutDependencies([a.formerlyUnreadNotificationsL(), a.newFollowupThreadsL(), a.newFollowupNotificationsL()], [])
}, isEnabled:computedProperty("Inbox.isEnabled", function() {
    var a = this;
    return serverComputedValue(a.domain_user.global_id + ":inbox.isEnabled", function() {
        var b = env.cluster_config.data().inbox().allowPercentageOfUsers();
        return a.domain_user.user().global_id % 100 < b
    })
}), _threadKeyForNotificationAndUnread:function(a, b) {
    var c = null, d = a.story(), e = d.parentObject(), f = d instanceof TaskListStory;
    f ? (d = d.indirectObject(), c = this._timestampBoundaryForNotification(a, b)) : d = e;
    return this._threadKeyForObjectAndTimestamp(d, c, f)
}, _timestampBoundaryForNotification:function(a, b) {
    var c = b ? this._state().loadedUnreadTimestampIncrements().split(":") : this._state().loadedReadTimestampIncrements().split(":");
    if(c.length < 2) {
        return 0
    }
    for(var d = a.getV("__creation_time"), e = 0;e < c.length - 1;e++) {
        if(d >= c[e]) {
            return c[e]
        }
    }
    return 0
}, _threadKeyForObjectAndTimestamp:Memoize.memoizeInThis("_threadKeyForObjectAndTimestamp", function(a, b, c) {
    return{thread_object:a, timestamp:b, is_list_thread:c}
}), threadForNotification:function(a) {
    var b = this._state().formerlyUnreadNotificationsL().containsObject(a) || a.isUnread();
    return this.threadForThreadKeyAndUnread(this._threadKeyForNotificationAndUnread(a, b), b)
}, threadKeysR:rvalueProperty("Inbox_threadKeysR", function(a) {
    return this._unread_to_notifications_by_thread_key[a].keys()
}), threadForThreadKeyAndUnread:Memoize.memoizeInThis("threadForThreadKeyAndUnread", function(a, b) {
    var c = this, d = a.thread_object;
    return(a.is_list_thread ? ItemListInboxThread : ItemInboxThread).create({thread_object:d, group_timestamp:a.timestamp, unread:b, notifications_r:$rval(function() {
        if(a.is_list_thread) {
            return c._unread_to_notifications_by_thread_key[b].values(a)
        }
        if(b && c._state().newFollowupThreadsL().containsObject(d)) {
            return c._unread_to_notifications_by_thread_key[b].values(a)
        }
        if(b) {
            var e = $v(c._unreadNotificationsForThreadR(d));
            return c.domain_user.isFollowingUpOnThreadObject(d) && e.isEmpty() || e.all(function(a) {
                return a.isFilteredFromTaskThread()
            }) ? (e = $v(c._lastNotificationForThreadObjectR(d)), assert(e, "No last notification, but can't show an empty inbox thread", prettyHint(a, 2), "Unread:", b, "Notifications: ", c._unread_to_notifications_by_thread_key[b].values(a).map(function(a) {
                return a.global_id
            })), [e]) : (assert(!e.isEmpty(), "Unread notifications empty, but can't show an empty inbox thread ", prettyHint(a, 2), "Unread: ", b, "Notifications: ", c._unread_to_notifications_by_thread_key[b].values(a).map(function(a) {
                return a.global_id
            })), e)
        }else {
            var e = c._unread_to_notifications_by_thread_key[b].values(a), f = e.findLast(function(a) {
                return!a.isFilteredFromTaskThread()
            });
            assertNe(void 0, f, "No read notification found for thread_key", prettyHint(a, 2), "notifications: ", e.map(function(a) {
                return a.global_id
            }));
            return[f]
        }
    })})
}), threadsR:rvalueProperty("threadsR", function(a) {
    var b = this;
    return computed_lists.sort(computed_lists.map(b._sortedThreadNotificationsForSectionR(a), function(c) {
        return b.threadForThreadKeyAndUnread(c, a)
    }), function(a) {
        return a.rank()
    })
}), isUnreadEmpty:computedProperty("isUnreadEmpty", function() {
    return!this.hasMoreUnreadNotificationsToLoad() && this.threadsR(!0).peek().isEmpty()
}), hasNeverReceivedNotifications:function() {
    return this.domain_user.lastNotificationCreationTime() === 0
}, _sortedThreadNotificationsForSectionR:function(a) {
    var b = this;
    if(a) {
        return b._unread_to_sorted_thread_notifications_r[!0]
    }
    return FilterRvalue.createWithRvalues(b._unread_to_sorted_thread_notifications_r[!1], function(a) {
        return a.is_list_thread || b._unread_to_notifications_by_thread_key[!0].values(a).isEmpty()
    })
}, firstFeedGroupOrNull:function() {
    var a = $v(this.threadsR(!0));
    return a.size() > 0 ? a.first() : $v(this.threadsR(!1)).firstValueOrNull()
}, lastFeedGroupOrNull:function() {
    var a = $v(this.threadsR(!1));
    return a.size() > 0 ? a.last() : $v(this.threadsR(!0)).lastValueOrNull()
}, feedGroupAfterFeedGroupOrNull:function(a) {
    var b = $v(this.threadsR(!0));
    return b.contains(a) ? (a = b.valueAfterValueOrNull(a)) ? a : $v(this.threadsR(!1)).firstValueOrNull() : $v(this.threadsR(!1)).valueAfterValueOrNull(a)
}, feedGroupBeforeFeedGroupOrNull:function(a) {
    var b = $v(this.threadsR(!1));
    return b.contains(a) ? (a = b.valueBeforeValueOrNull(a)) ? a : $v(this.threadsR(!0)).lastValueOrNull() : $v(this.threadsR(!0)).valueBeforeValueOrNull(a)
}, firstNotificationOrNull:function() {
    var a = this.firstFeedGroupOrNull();
    return a ? a.firstNotification() : null
}, lastNotificationOrNull:function() {
    var a = this.lastFeedGroupOrNull();
    return a ? a.lastNotification() : null
}, notificationAfterNotificationOrNull:function(a) {
    var b = this.threadForNotification(a);
    if(!b) {
        return null
    }
    if(a = b.notificationAfterNotificationOrNull(a)) {
        return a
    }
    return(b = this.feedGroupAfterFeedGroupOrNull(b)) ? b.firstNotification() : null
}, notificationBeforeNotificationOrNull:function(a) {
    var b = this.threadForNotification(a);
    if(!b) {
        return null
    }
    if(a = b.notificationBeforeNotificationOrNull(a)) {
        return a
    }
    return(b = this.feedGroupBeforeFeedGroupOrNull(b)) ? b.lastNotification() : null
}, _notificationsR:rvalueProperty("_notificationsR", function(a) {
    var b;
    b = a ? this._state().minUnreadTimestamp() : this._state().minReadTimestamp();
    if(!b || !this.isEnabled()) {
        return List.create([])
    }
    return a ? (b = QueryBuilder.queryForObjects(Notification).usingIndex(Notification.getIndexByName("domain_user_feed")).where(QueryBuilder.scalarProperty("recipient").eq(this.domain_user), QueryBuilder.scalarProperty("unread").eq(a), QueryBuilder.scalarProperty("__creation_time").ge(b).orders().rankGenerator(Query.NegateRankGenerator.create())).getQueryRvalue("Unread Notifications"), a = this._lastNotificationsForFollowupR(), MergedListRvalue.createAllowingDuplicates(b, a)) : (a = QueryBuilder.queryForObjects(Notification).usingIndex(Notification.getIndexByName("domain_user_feed")).where(QueryBuilder.scalarProperty("recipient").eq(this.domain_user),
        QueryBuilder.scalarProperty("unread").eq(!0), QueryBuilder.scalarProperty("__creation_time").le(this.domain_user.feedMarkAllAsReadTime()), QueryBuilder.scalarProperty("__creation_time").ge(b).orders().rankGenerator(Query.NegateRankGenerator.create())).getQueryRvalue("Older than Mark All as Read Notifications"), b = QueryBuilder.queryForObjects(Notification).usingIndex(Notification.getIndexByName("domain_user_feed")).where(QueryBuilder.scalarProperty("recipient").eq(this.domain_user), QueryBuilder.scalarProperty("unread").eq(!1),
        QueryBuilder.scalarProperty("__creation_time").ge(b).orders().rankGenerator(Query.NegateRankGenerator.create())).getQueryRvalue("Explicitly Read Notifications"), MergedListRvalue.create(a, b))
}), _storiesForThreadObjectR:rvalueProperty("_storiesForThreadObjectR", function(a) {
    return QueryBuilder.queryForObjects(Story).where(QueryBuilder.scalarProperty("parent_object").eq(a).orders()).getQueryRvalue("StoriesForThreadObject")
}), _allNotificationsForThreadObjectR:rvalueProperty("_allNotificationsForThreadObjectR", function(a) {
    var b = QueryBuilder.scalarProperty("story");
    $v(this._storiesForThreadObjectR(a)).forEach(function(a) {
        b.or().eq(a)
    });
    return QueryBuilder.queryForObjects(Notification).where(b, QueryBuilder.scalarProperty("recipient").eq(this.domain_user), QueryBuilder.scalarProperty("__creation_time").orders().rankGenerator(Query.NegateRankGenerator.create())).getQueryRvalue("all notifications for a thread object")
}), _lastNotificationForThreadObjectR:rvalueProperty("_lastNotificationForThreadObjectR", function(a) {
    return $v(this._allNotificationsForThreadObjectR(a)).first() || null
}), _actuallyUnreadNotificationsForThreadR:rvalueProperty("_actuallyUnreadNotificationsForThreadR", function(a) {
    var b = QueryBuilder.scalarProperty("story");
    $v(this._storiesForThreadObjectR(a)).forEach(function(a) {
        b.or().eq(a)
    });
    return QueryBuilder.queryForObjects(Notification).where(b, QueryBuilder.scalarProperty("recipient").eq(this.domain_user), QueryBuilder.scalarProperty("unread").eq(!0), QueryBuilder.scalarProperty("__creation_time").gt(this.domain_user.feedMarkAllAsReadTime()).orders()).getQueryRvalue("NotificationsToShow")
}), _unreadNotificationsForThreadR:rvalueProperty("_unreadNotificationsForThreadR", function(a) {
    var b = this, c = LatestKnownRvalue.create(b._actuallyUnreadNotificationsForThreadR(a)), d = FilterRvalue.createWithRvalues(b._state().formerlyUnreadNotificationsL(), function(b) {
        return b.story().parentObject() === a
    }), d = computed_lists.sort(d, function(a) {
        return List.MultiKeyRank.create([a.getV("__creation_time"), a.global_id])
    }), c = MergedListRvalue.createAllowingDuplicates(c, d);
    return FilterRvalue.createWithRvalues(c, function(a) {
        return b.showNotificationInSection(!0, a)
    })
}), _lastNotificationsForFollowupR:rvalueProperty("_lastNotificationsForFollowupR", function() {
    var a = this, b = List.create([], List.POLICY_ANY_RANK);
    a.domain_user.tasksMarkedForFollowup().forEach(function(c) {
        if(!a._state().isThreadObjectFormerlyUnread(c) && !a._state().newFollowupThreadsL().containsObject(c) && (c = $v(a._lastNotificationForThreadObjectR(c)), c !== null)) {
            var d = c.creationTime();
            a._state().hasMoreUnreadToLoad() && d < a._state().minUnreadTimestamp() || b.insertAtRank(c, Inbox._rankForNotification(c))
        }
    });
    return b
}), filteredNotificationsR:rvalueProperty("filteredNotificationsR", function(a) {
    var b = this, c = this._notificationsR(a), d = c;
    a && (d = computed_lists.sort(b._state().formerlyUnreadNotificationsL(), Inbox._rankForNotification), d = MergedListRvalue.createAllowingDuplicates(c, d), c = computed_lists.sort(b._state().newFollowupNotificationsL(), Inbox._rankForNotification), d = MergedListRvalue.createAllowingDuplicates(d, c));
    return FilterRvalue.createWithRvalues(d, function(c) {
        return b.showNotificationInSection(a, c)
    })
}), showNotificationInSection:function(a, b) {
    if(!b.active()) {
        return!1
    }
    if(!a && this._state().formerlyUnreadNotificationsL().containsObject(b)) {
        return!1
    }
    if(!a && b.isUnread()) {
        return!1
    }
    if(a && !b.isUnread() && !this._state().formerlyUnreadNotificationsL().containsObject(b)) {
        return!1
    }
    return!0
}, unreadNotificationsR:function() {
    return this.filteredNotificationsR(!0)
}, readNotificationsR:function() {
    return this.filteredNotificationsR(!1)
}, hasNewNotifications:function() {
    return this.domain_user.lastNotificationCreationTime() > this.domain_user.lastInteractedWithNotificationFeedTime()
}, markAllAsRead:function() {
    this.archiveReadNotifications();
    var a;
    a = env.clock.now();
    this.domain_user.setFeedMarkAllAsReadTime(a);
    env.datastore_manager.enactChange(InboxSetTimestampToMarkAllAsRead.create({domain_user:this.domain_user, mark_all_as_read_time:a}))
}, markAsRead:function(a) {
    a.isUnread() && (a.setUnread(!1), this.keepNotificationUnreadGrouping(a))
}, hasUnreadNotifications:function() {
    var a = this;
    return $v(this.unreadNotificationsR()).any(function(b) {
        return!a.domain_user.isFollowingUpOnThreadObject(b.story().parentObject())
    })
}, hasItemsToArchive:function() {
    return!this._state().formerlyUnreadNotifications().isEmpty()
}, archiveReadNotifications:function() {
    this._state().formerlyUnreadNotificationsL().requestClear();
    this._state().setHasMoreReadToLoad(!0)
}, clearReadItems:function() {
    this.archiveReadNotifications();
    this._state().setIsShowingReadItems(!1);
    this._state().updateMinReadTimestamp(null)
}, showReadItems:function() {
    this._state().setIsShowingReadItems(!0)
}, keepNotificationUnreadGrouping:function(a) {
    this._state().formerlyUnreadNotificationsL().requestInsertBefore(a, null)
}, addToNewFollowupThreads:function(a, b) {
    !b.isUnreadIgnoringFollowup() && !this._state().formerlyUnreadNotificationsL().containsObject(b) && (this._state().newFollowupThreadsL().requestInsertBefore(a, null), this._state().newFollowupNotificationsL().requestInsertBefore(b, null))
}, followupOnThreadObject:function(a, b) {
    var c = this;
    c.domain_user.isFollowingUpOnThreadObject(a) || c.addToNewFollowupThreads(a, b.last());
    b.forEach(function(a) {
        c.keepNotificationUnreadGrouping(a);
        a.setUnread(!1)
    });
    c.domain_user.toggleThreadObjectForFollowUp(a)
}, reset:function(a) {
    a = a || Inbox.INITIAL_COUNT;
    this._state().formerlyUnreadNotificationsL().requestClear();
    this._state().newFollowupThreadsL().requestClear();
    this._state().newFollowupNotificationsL().requestClear();
    this._state().updateMinUnreadTimestamp(null);
    this._state().setHasMoreUnreadToLoad(!0);
    this._state().setMaxUnreadTimestampLoadedInPagination(0);
    this._state().setIsShowingReadItems(!1);
    this._state().updateMinReadTimestamp(null);
    this._state().setHasMoreReadToLoad(!0);
    this._loadMoreNotifications(a)
}, isShowingReadItems:function() {
    return this._state().isShowingReadItems()
}, loadingMoreNotifications:function() {
    return this._state().isLoadingMore()
}, numNotificationsLoaded:function() {
    return $v(this._notificationsR(!0)).size() + $v(this._notificationsR(!1)).size()
}, numNotificationsInFeed:function() {
    return $v(this.filteredNotificationsR(!0)).size() + $v(this.filteredNotificationsR(!1)).size()
}, hasMoreUnreadNotificationsToLoad:function() {
    return this._state().hasMoreUnreadToLoad()
}, hasMoreNotificationsToLoad:function() {
    return this._state().hasMoreUnreadToLoad() || this._state().isShowingReadItems() && this._state().hasMoreReadToLoad()
}, _loadMoreNotifications:function(a) {
    this.isEnabled() && env.datastore_manager.enactChange(InboxLoadMoreChange.create({domain_user:this.domain_user, increment_count:a}))
}, maybeLoadMoreNotifications:function(a) {
    a = a || Inbox.INCREMENT_COUNT;
    return!this.loadingMoreNotifications() && this.hasMoreNotificationsToLoad() ? (this._loadMoreNotifications(a), !0) : !1
}, maxCreationTime:function() {
    return this._state().maxCreationTime()
}, isNotificationUnread:function(a) {
    return this.unreadNotificationsR().peek().contains(a) && a.isUnread()
}, _nextTimestampStatement:Memoize.memoizeInThis("_nthNotificationTimestampStatement", function() {
    var a = "SELECT int_3 FROM " + Notification.getIndexByName("domain_user_feed").tableName() + " WHERE index_id = ? AND int_1 = ? AND int_2 = ? AND int_3 < ? ORDER BY int_2 DESC, object_id DESC LIMIT ?";
    return env.db.createStatement(a)
}), nextTimestampAndHasMore:function(a, b, c) {
    var d = Notification.getIndexByName("domain_user_feed"), e = this._nextTimestampStatement(), f = env.KVStore.query(e, [d.indexId(), Datastore.datastoreValueForValue(DomainUser, this.domain_user), Datastore.datastoreValueForValue(Boolean, a), Datastore.datastoreValueForValue(Timestamp, b), c]), g = f.length, h = f.length === 0 ? b : f.last().int_3, i = f.length === 0 ? b : f.first().int_3;
    if(a && h <= this.domain_user.feedMarkAllAsReadTime()) {
        return[this.domain_user.feedMarkAllAsReadTime(), !1, b]
    }
    a || (i = 0, a = env.KVStore.query(e, [d.indexId(), Datastore.datastoreValueForValue(DomainUser, this.domain_user), Datastore.datastoreValueForValue(Boolean, !0), Datastore.datastoreValueForValue(Timestamp, Math.min(b, this.domain_user.feedMarkAllAsReadTime())), c]), a.length !== 0 && (g += a.length, h = f.length === 0 ? a.last().int_3 : g >= c ? Math.max(f.last().int_3, a.last().int_3) : Math.min(f.last().int_3, a.last().int_3)));
    return[h, g >= c, i]
}});
Inbox.State = SessionObject2.subclass("Inbox.State", {property_descs:{min_unread_timestamp:{type:Integer, default_value:null}, min_read_timestamp:{type:Integer, default_value:null}, is_loading_more:{type:Boolean, default_value:!1}, has_more_unread_to_load:{type:Boolean, default_value:!0}, has_more_read_to_load:{type:Boolean, default_value:!0}, is_showing_read_items:{type:Boolean, default_value:!1}, max_unread_timestamp_loaded_in_pagination:{type:Integer, default_value:0}, formerly_unread_notifications:{type:List},
    new_followup_threads:{type:List}, new_followup_notifications:{type:List}, loaded_unread_timestamp_increments:{type:String, default_value:""}, loaded_read_timestamp_increments:{type:String, default_value:""}}}, {setMinUnreadTimestamp:function() {
    ufu("Use updateMinUnreadTimestamp() instead")
}, setMinReadTimestamp:function() {
    ufu("Use updateMinReadTimestamp() instead")
}, updateMinUnreadTimestamp:function(a) {
    this.minUnreadTimestampL().requestSet(a);
    var b = this.loadedUnreadTimestampIncrementsL();
    a !== null ? b.requestSet($v(b) + a + ":") : b.requestSet("")
}, updateMinReadTimestamp:function(a) {
    this.minReadTimestampL().requestSet(a);
    var b = this.loadedReadTimestampIncrementsL();
    a !== null ? b.requestSet($v(b) + a + ":") : b.requestSet("")
}, isThreadObjectFormerlyUnread:function(a) {
    return this.formerlyUnreadNotifications().any(function(b) {
        return b.story().parentObject() === a
    })
}});
InboxLoadMoreChange = define("InboxLoadMoreChange", Change.subclass("InboxLoadMoreChange", {}, {domain_user:ATTRIBUTE_REQUIRED, increment_count:ATTRIBUTE_REQUIRED, enact:function() {
    var a = this.domain_user.inboxState();
    a.setIsLoadingMore(!0);
    if(env.is_server) {
        var b = this.domain_user.inbox();
        if(a.hasMoreUnreadToLoad()) {
            var c = a.minUnreadTimestamp() ? a.minUnreadTimestamp() : env.clock.now(), d = b.nextTimestampAndHasMore(!0, c, this.increment_count), c = d[0], e = d[1], d = d[2];
            a.updateMinUnreadTimestamp(c);
            a.setHasMoreUnreadToLoad(e);
            a.maxUnreadTimestampLoadedInPagination() === 0 && a.setMaxUnreadTimestampLoadedInPagination(d)
        }
        !a.hasMoreUnreadToLoad() && a.hasMoreReadToLoad() && a.isShowingReadItems() && (c = a.minReadTimestamp() ? a.minReadTimestamp() : env.clock.now(), d = b.nextTimestampAndHasMore(!1, c, this.increment_count), c = d[0], e = d[1], a.updateMinReadTimestamp(c), a.setHasMoreReadToLoad(e));
        a.setIsLoadingMore(!1)
    }
}, taintedObjectIds:function() {
    return[this.domain_user.global_id]
}}));
InboxSetTimestampToMarkAllAsRead = define("InboxSetTimestampToMarkAllAsRead", Change.subclass("InboxSetTimestampToMarkAllAsRead", {}, {domain_user:ATTRIBUTE_REQUIRED, mark_all_as_read_time:ATTRIBUTE_REQUIRED, enact:function() {
    var a = this.domain_user.inboxState();
    if(env.is_server) {
        var b = a.minUnreadTimestampL();
        $v(b) < this.mark_all_as_read_time && (b.requestSet(this.mark_all_as_read_time), a.setHasMoreUnreadToLoad(!1))
    }
}, taintedObjectIds:function() {
    return[this.domain_user.global_id]
}}));
__FILE__ = "apps/asana/model/igroup_access.js";
IGroupAccess = Interface.create("IGroupAccess", [], {}, {canSeePublicData:ABSTRACT, canAdminAccess:ABSTRACT});
__FILE__ = "luna/common/model/domain_pots_model.js";
DomainPotsModel = AsanaObject.subclass("DomainPotsModel", {}, {_domain_user:SET_IN_CONSTRUCTOR, _team:SET_IN_CONSTRUCTOR, _team_membership:SET_IN_CONSTRUCTOR, _is_project:SET_IN_CONSTRUCTOR, _is_global:SET_IN_CONSTRUCTOR, _pots_paged_list:SET_IN_CONSTRUCTOR, _limited_pots_r:SET_IN_CONSTRUCTOR, _limited_pots_including_archived_r:SET_IN_CONSTRUCTOR, constructor:attributedFunc({domain_user:ATTRIBUTE_REQUIRED, is_project:ATTRIBUTE_REQUIRED, team:void 0, initial_pots_to_load:ATTRIBUTE_REQUIRED, delay_until_page_loads:!1},
    function(a) {
        DomainPotsModel.superproto.constructor.call(this);
        this._domain_user = a.domain_user;
        this._team = a.team;
        this._team_membership = a.team === void 0 || a.team === null ? a.team : a.domain_user.teamMembershipForTeamOrNull(a.team);
        this._is_project = a.is_project;
        if(this._is_global = a.domain_user.domain().isGlobal()) {
            var b = this._membershipsQuery(!1);
            this._pots_paged_list = RankPagedList.create("domain_pots_model|" + a.domain_user.global_id + "|" + a.is_project + "|" + a.team, b, a.initial_pots_to_load, a.delay_until_page_loads);
            this._limited_pots_r = this._membershipsToProjectsR(this._pots_paged_list.limitedListR())
        }else {
            b = this._publicPotsQuery(!1), this._pots_paged_list = RankPagedList.create("domain_pots_model|" + a.domain_user.global_id + "|" + a.is_project + "|" + a.team, b, a.initial_pots_to_load, a.delay_until_page_loads), this._limited_pots_r = MergedListRvalue.createAllowingDuplicates(this._pots_paged_list.limitedListR(), this._memberPots(this._pots_paged_list.currentLimitR(), !1))
        }
        if(a.is_project) {
            this._limited_pots_including_archived_r = this._is_global ? this._memberPots(this._pots_paged_list.currentLimitR(), !0) : MergedListRvalue.createAllowingDuplicates(this._publicPotsQuery(!0).getQueryRvalue("pots_including_archived", this._pots_paged_list.currentLimitR()), this._memberPots(this._pots_paged_list.currentLimitR(), !0))
        }
    }), reset:function() {
    this._pots_paged_list.resetState()
}, allKnownPotsR:Memoize.memoizeInThis("allKnownPotsR", function(a) {
    var b = this;
    return MergedListRvalue.createAllowingDuplicates(computed_lists.sort(this.limitedPotsR(a), function(a) {
        return a.global_id
    }), computed_lists.sort($rval(function() {
        return b._domain_user.favorites().filter(function(a) {
            return a instanceof Pot && a.isProject() === b._is_project && (b._team === void 0 || a.team() === b._team)
        })
    }), function(a) {
        return a.global_id
    })).setAsSafelyPeekableByAncestor()
}), limitedPotsR:function(a) {
    return a ? this._limited_pots_including_archived_r : this._limited_pots_r
}, canLoadMoreNow:function() {
    return this._pots_paged_list.hasMoreData() && !this.isLoadingNow()
}, isLoadingNow:function() {
    return this._pots_paged_list.hasOutstandingRequest()
}, loadMore:function(a) {
    this.canLoadMoreNow() && this._pots_paged_list.advance(a)
}, _publicPotsQuery:function(a) {
    return QueryBuilder.queryForObjects(Pot).where(QueryBuilder.isInList(this._domain_user.domain().listsL()).orders(this._is_project), this._team === void 0 ? null : QueryBuilder.scalarProperty("team").eq(this._team), QueryBuilder.scalarProperty("is_project").eq(this._is_project), QueryBuilder.scalarProperty("is_public_to_workspace").eq(!0), a ? null : QueryBuilder.scalarProperty("is_archived").eq(!1), this._is_project ? null : QueryBuilder.scalarProperty("name").orders(!0).rankGenerator(Query.ToUpperCaseRankGenerator.create()))
}, _memberPots:function(a, b) {
    return this._membershipsToProjectsR(this._membershipsQuery(b).getQueryRvalue("paginated_memberships", a))
}, _membershipsToProjectsR:function(a) {
    a = FilterRvalue.create(MapRvalue.createWithRvalues(a, function(a) {
        return a.projectOrUnknown()
    }, !0), isKnown);
    if(this._is_project && !this._is_global) {
        var b = this._domain_user.domain();
        return computed_lists.sort(a, function(a) {
            return b.listsL().rankForObject(a)
        })
    }else {
        return a
    }
}, _membershipsQuery:function(a) {
    var b = this._domain_user.domain();
    return QueryBuilder.queryForObjects(ProjectMembership).where(QueryBuilder.scalarProperty("member").eq(this._domain_user), QueryBuilder.scalarProperty("active").eq(!0), this._team === void 0 ? null : QueryBuilder.scalarProperty("team_membership").eq(this._team_membership), QueryBuilder.referencedObject("project", [!this._is_global ? QueryBuilder.isInList(b.listsL()).orders(this._is_project) : QueryBuilder.scalarProperty("domain").eq(b), QueryBuilder.scalarProperty("is_project").eq(this._is_project),
        QueryBuilder.scalarProperty("__trashed_at").eq(0), a ? null : QueryBuilder.scalarProperty("is_archived").eq(!1), this._is_project ? null : QueryBuilder.scalarProperty("name").orders(!0).rankGenerator(Query.ToUpperCaseRankGenerator.create())]).orders(!this._is_global).addObjectId(!this._is_project && !this._is_global))
}});
__FILE__ = "apps/asana/model/team_memberships_model.js";
TeamMembershipsModel = AsanaObject.subclass("TeamMembershipsModel", [IPagedObjectModel], {}, {_helper:SET_IN_CONSTRUCTOR, constructor:attributedFunc({team:ATTRIBUTE_REQUIRED, limited_access_filter:null, initial_team_memberships_to_load:8, delay_until_page_loads:!1}, function(a) {
    TeamMembershipsModel.superproto.constructor.call(this);
    var b = a.team, c = "team_memberships_model|" + b.global_id + "|" + (a.limited_access_filter === null ? "all" : a.limited_access_filter ? "guests" : "members"), b = this._teamMembershipsQuery(b, a.limited_access_filter), a = RankPagedList.create(c, b, a.initial_team_memberships_to_load, a.delay_until_page_loads);
    this._helper = PagedObjectModelHelper.create({name:c, all_objects_query:b, rank_paged_list:a})
}), limitedMembers:function() {
    return this.usersModel().limitedObjects()
}, usersModel:Memoize.memoizeInThis("TeamMembershipsModel.usersModel", function() {
    return TeamMembershipsModel.DomainUsersModel.create(this)
}), allObjectsR:function() {
    return this._helper.allObjectsR()
}, limitedObjectsR:function() {
    return this._helper.limitedObjectsR()
}, numObjectsR:function() {
    return this._helper.numObjectsR()
}, isLoadingNow:function() {
    return this._helper.isLoadingNow()
}, canLoadMoreNow:function() {
    return this._helper.canLoadMoreNow()
}, loadMore:function(a) {
    this._helper.loadMore(a)
}, reset:function() {
    this._helper.reset()
}, _teamMembershipsQuery:function(a, b) {
    return QueryBuilder.queryForObjects(TeamMembership).where(QueryBuilder.scalarProperty("team").eq(a).orders(), b !== null ? QueryBuilder.scalarProperty("limited_access").eq(b) : null)
}});
TeamMembershipsModel.DomainUsersModel = AsanaObject.subclass("TeamMembershipsModel.DomainUsersModel", [IPagedObjectModel], {}, {_team_memberships_model:SET_IN_CONSTRUCTOR, constructor:function(a) {
    TeamMembershipsModel.DomainUsersModel.superproto.constructor.call(this);
    this._team_memberships_model = a
}, allObjectsR:computedProperty("TeamMembershipsModel_DomainUsersModel_allObjectsR", function() {
    return $v(this._team_memberships_model.allObjectsR()).map(function(a) {
        return a.member()
    })
}), limitedObjectsR:computedProperty("TeamMembershipsModel_DomainUsersModel_limitedObjectsR", function() {
    return $v(this._team_memberships_model.limitedObjectsR()).map(function(a) {
        return a.member()
    })
}), numObjectsR:function() {
    return this._team_memberships_model.numObjectsR()
}, isLoadingNow:function() {
    return this._team_memberships_model.isLoadingNow()
}, canLoadMoreNow:function() {
    return this._team_memberships_model.canLoadMoreNow()
}, loadMore:function(a) {
    this._team_memberships_model.loadMore(a)
}, reset:function() {
    this._team_memberships_model.reset()
}});
__FILE__ = "apps/asana/model/team.js";
Team = StateObject.subclass("Team", [IDescribable, IBillableDomainUserGroup], {property_descs:{creator_du:{type:StateObject, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, name:{type:String, preloaded:!0, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, team_domain:{type:StateObject, isWriteableBy:Asana.AccessControl.domainPropertyIsWriteable, track_initial_value:!0, preloaded:!0}}, create:attributedFunc({creator_du:ATTRIBUTE_REQUIRED, domain:ATTRIBUTE_REQUIRED, name:""}, function(a) {
    assertEq(a.creator_du.domain(), a.domain);
    a.team_domain = a.domain;
    delete a.domain;
    var b = env.world_store.createStateObject(Team, a);
    b.addTeamMember({domain_user:a.creator_du, limited_access:!1});
    return b
})}, {_computeIsVisibleBy:function(a) {
    var b = this.teamDomainOrUnknown();
    if(!isKnown(b)) {
        return!1
    }
    return b.isVisibleBy(a)
}, addTeamMember:attributedValueFunc({domain_user:ATTRIBUTE_REQUIRED, limited_access:ATTRIBUTE_REQUIRED}, function(a) {
    var b = this.membershipForDomainUserOrNull(a.domain_user);
    b !== null ? b.limitedAccess() && !a.limited_access && b.setLimitedAccess(!1) : b = TeamMembership.create({team:this, member:a.domain_user, limited_access:a.limited_access});
    return b
}), removeTeamMember:function(a) {
    a = this.membershipForDomainUserOrNull(a);
    a !== null && a.trash()
}, hasTeamMember:function(a) {
    return this.membershipForDomainUserOrNull(a) !== null
}, domain:function() {
    return this.teamDomain()
}, teamMemberships:Association.hasMany({name:"teamMemberships", type_name:"TeamMembership", scalar_property_name:"team"}), allMembershipsModel:computedProperty("allMembershipsModel", function() {
    return TeamMembershipsModel.create({team:this, limited_access_filter:null, delay_until_page_loads:!0})
}), fullMembershipsModel:computedProperty("fullMembershipsModel", function() {
    return TeamMembershipsModel.create({team:this, limited_access_filter:!1, delay_until_page_loads:!0})
}), limitedMembershipsModel:computedProperty("limitedMembershipsModel", function() {
    return TeamMembershipsModel.create({team:this, limited_access_filter:!0, initial_team_memberships_to_load:0, delay_until_page_loads:!0})
}), membershipForDomainUserOrNull:function(a) {
    return this.teamMemberships().find(function(b) {
        return b.member() === a
    }, null, null)
}, membershipForDomainUser:function(a) {
    return this.membershipForDomainUserOrNull(a)
}, isPremium:function() {
    return this.domain().isPremium()
}, numMembersCountingAgainstUserLimit:function() {
    return this.domain().numMembersCountingAgainstUserLimit()
}, userLimit:function() {
    return this.domain().userLimit()
}, billingOwner:function() {
    return this.domain().billingOwner()
}, billingPlan:function() {
    return this.domain().billingPlan()
}, addFullMember:function(a) {
    a = this.domain().addFullMember(a);
    this.addTeamMember({domain_user:a, limited_access:!1});
    return a
}, addGuest:function(a) {
    a = this.domain().addGuest(a);
    this.addTeamMember({domain_user:a, limited_access:!0});
    return a
}, removeUser:function(a) {
    this.domain().removeUser(a);
    this.removeTeamMember(a.domainUserForDomain(this.domain()))
}, usersModel:computedProperty("usersModel", function() {
    return this.allMembershipsModel().usersModel()
}), guestsModel:computedProperty("guestsModel", function() {
    return this.limitedMembershipsModel().usersModel()
}), fullMembersModel:computedProperty("fullMembersModel", function() {
    return this.fullMembershipsModel().usersModel()
}), describe:function() {
    return this.name()
}});
__FILE__ = "luna/common/model/inavigation_target.js";
INavigationTarget = Interface.create("INavigationTarget", [], {}, {navigationContextForUser:ABSTRACT});
__FILE__ = "apps/asana/model/ishared_with_link.js";
ISharedWithLink = Interface.create("ISharedWithLink", [], {isValidLink:function(a, b) {
    var c = env.world_store.objectOrUnknown(a);
    if(!c || isUnknown(c)) {
        return log.error("ISharedWithLink: No object found corresponding to id", a), !1
    }
    if(!Interface.instanceImplements(c, ISharedWithLink)) {
        return log.error("ISharedWithLink: Object", c.global_id, "does not implement ISharedWithLink"), !1
    }
    if(isUnknown(c.shareLinkSaltOrUnknown())) {
        return log.warn("ISharedWithLink: Object", c.global_id, "does not yet have a share link salt"), !1
    }
    if(c._shareLinkSignature() !== b) {
        return log.warn("ISharedWithLink: Object", c.global_id, "signature does not match"), !1
    }
    return!0
}}, {onNavigateToSharedWithLink:ABSTRACT, onLoginAfterNavigateToSharedWithLink:ABSTRACT, resetShareLinkSalt:function() {
    env.datastore_manager.enactChange(ISharedWithLink.ResetShareLinkSaltChangeObject.create({shareable_object:this}))
}, ensureHasShareLinkSalt:function() {
    isUnknown(this.shareLinkSaltOrUnknown()) && this.resetShareLinkSalt()
}, shareLink:serverComputedPropertyAllowingUnknown("inviteLink", function() {
    var a = ISharedWithLink.ShareData.create(this.global_id, this._shareLinkSignature(), env.user().global_id);
    return URI.create({scheme:"https", hostname:Flags.secure_web_host_port, path:["-", "share"], query:{s:a.serialize()}}).stringify()
}), _shareLinkSignature:function() {
    assert(env.is_server);
    return Crypto.hash(Flags.salt + this.shareLinkSalt() + this.global_id, {algorithm:Crypto.Algorithm.SHA256, output:Crypto.Format.CUSTOM, output_custom_alphabet:Crypto.URL_FRIENDLY_ALPHABET})
}});
ISharedWithLink.ResetShareLinkSaltChangeObject = define("ISharedWithLink.ResetShareLinkSaltChangeObject", Change.subclass("ISharedWithLink.ResetShareLinkSaltChangeObject", {}, {shareable_object:ATTRIBUTE_REQUIRED, enact:function() {
    if(env.is_server) {
        var a = this.shareable_object;
        a.setShareLinkSalt(KeyGenerator.generateObjectSpecificKey(a.global_id, 32))
    }
}, taintedObjectIds:function() {
    return[this.shareable_object.global_id]
}}));
ISharedWithLink.ShareData = AsanaObject.subclass("ISharedWithLink.ShareData", {deserialize:function(a) {
    return a ? (a = a.split("-"), ISharedWithLink.ShareData.create(ISharedWithLink.ShareData._safeParseInt(a[0]), a[1] || "", ISharedWithLink.ShareData._safeParseInt(a[2]))) : (log.warn("ISharedWithLink.ShareData : Invalid share link", a), ISharedWithLink.ShareData.create(-1, "", -1))
}, _safeParseInt:function(a) {
    try {
        return parseInt(a, 10)
    }catch(b) {
        return-1
    }
}}, {constructor:function(a, b, c) {
    ISharedWithLink.ShareData.superproto.constructor.call(this);
    this.object_id = a;
    this.signature = b;
    this.user_id = c
}, serialize:function() {
    return[this.object_id, this.signature, this.user_id].join("-")
}, isValid:function() {
    return ISharedWithLink.isValidLink(this.object_id, this.signature)
}});
__FILE__ = "luna/common/model/pot.js";
FlagSystem.defineInt({name:"project_deleted_email_delay", default_value:6E4, help:"Number of milliseconds to wait before sending a project deleted email after the actionw as taken."});
Pot = ItemList = AsanaStateObject.subclass("ItemList", [IDescribable, IItemList, INavigatable, INavigationTarget, IDomainSpecific, ISharedWithLink], {GLOBAL_DOMAIN_MAX_MEMBER_COUNT:30, property_descs:{__modification_time:{type:Timestamp, default_value:0}, name:{type:String, preloaded:!0, api_info:{field_name:"name"}}, description:{type:String, api_info:{field_name:"notes"}}, is_project:{type:Boolean, preloaded:!0}, is_archived:{type:Boolean, preloaded:!0}, is_public_to_workspace:{type:Boolean, preloaded:!0,
    track_initial_value:!0}, is_shared_with_link:{type:Boolean, default_value:!1}, share_link_salt:{type:String}, perma_name:{type:String}, items:{type:List, isWriteableBy:Asana.AccessControl.itemsPropertyIsWriteable, preloaded:!1, track_initial_value:!0, api_info:{field_name:"task"}}, domain:{type:Domain, isWriteableBy:Asana.AccessControl.domainPropertyIsWriteable, preloaded:!0, track_initial_value:!0, api_info:{field_name:"workspace", is_parent:!0}}, team:{type:Team, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE,
    preloaded:!0}, assignee:{type:AsanaStateObject, isWriteableBy:Asana.AccessControl.itemListAssigneePropertyIsWriteable, preloaded:!0}, archive_time:{type:Timestamp}, member_count:{type:Integer, default_value:0}}, create:attributedFunc({creator_du:ATTRIBUTE_REQUIRED, name:"", description:"", is_project:!0, is_archived:!1, items:[], followers_du:null, assignee:null, domain:ATTRIBUTE_REQUIRED, is_public_to_workspace:!0, perma_name:"", archive_time:0, team:null}, function(a) {
    a.assignee !== null && assertInstanceof(a.assignee, DomainUser);
    var b = a.creator_du;
    if(b !== null) {
        if(assertInstanceof(b, DomainUser), assertEquals(b.domain(), a.domain), a.followers_du === null) {
            a.followers_du = [b]
        }
    }else {
        if(a.followers_du === null) {
            a.followers_du = []
        }
    }
    b = a.domain;
    a.team === null && !b.allowProjectsWithNullTeam() && a.assignee === null && a.is_project === !0 && ufu("No team provided for pot when required");
    b = env.world_store.createStateObject(Pot, update(a, {is_public_to_workspace:a.is_public_to_workspace}));
    b.isUserTaskList() || b.giveMembershipToAllFollowers();
    a.team !== null && assertEq(a.domain, a.team.domain());
    a.domain.isGlobal() && b.setIsPublicToWorkspace(!1);
    logEvent({name:b.isUserTaskList() ? "UserTaskListCreation" : a.is_project ? "ProjectCreation" : "TagCreation", pot:b.global_id});
    return b
})}, {apiModel:Memoize.memoizeInThis("Pot.apiModel", function() {
    var a = this;
    return Api.Model.create({name:function() {
        return a.assignee() ? "user" : "project"
    }, hasChangeEvents:function() {
        return a.isProject()
    }, objectId:function() {
        return a.assignee() ? a.assignee().user().global_id : a.global_id
    }, objectTypeId:function() {
        return env.type_registry.getTypeId(a.assignee() ? a.assignee().user().__type : a.__type)
    }, addChangeEventData:function(b) {
        b.workspace = {id:a.domain().global_id}
    }})
}), projectMembershipsR:Memoize.memoizeInThis("projectMembershipsR", function() {
    return QueryBuilder.queryForObjects(ProjectMembership).where(QueryBuilder.scalarProperty("project").eq(this).orders()).getQueryRvalue("Pot.projectMemberships").setAsSafelyPeekableByAncestor()
}), membershipForDomainUserOrNull:function(a) {
    var b = null;
    $v(this.projectMembershipsR()).forEachValue(function(c) {
        if(c.member() === a) {
            throw b = c, IIterable.STOP;
        }
    });
    return b
}, potIdsForTasksNonReactive:function(a, b) {
    var c = Map.create();
    a === void 0 && (a = []);
    b === void 0 && (b = !1);
    var d = env.type_registry.propertyIdMap().idForName("items"), e = env.type_registry.propertyIdMap().idForName("completed"), f = env.type_registry.propertyIdMap().idForName("assignee"), g = env.type_registry.propertyIdMap().idForName(StateObject.PropertyName.TRASHED_AT), h = env.type_registry.propertyIdMap().idForName(StateObject.PropertyName.TYPE_ID), i = env.type_registry.getTypeId(Pot), j = b ? 0 : this.archiveTime(), e = "SELECT pots.object_id as pot_id, COUNT(*) as count FROM " + ["okvstore_rank AS tasks",
        "okvstore_int AS trashed", "okvstore_int AS archived", "okvstore_rank AS pots", "okvstore_int AS pot_type", "okvstore_int AS pot_trashed", "okvstore_state_object AS pot_atm"].concat(a.map(function(a) {
        return"okvstore_rank as filter_" + a
    })).join(" STRAIGHT_JOIN ") + " WHERE " + ["tasks.object_id = " + this.global_id, "tasks.property_id = " + d, "tasks.value <> '" + List.RANK_NOT_IN_LIST + "'", "trashed.object_id = tasks.element_id", "trashed.property_id = " + g, "trashed.value = 0", "archived.object_id = tasks.element_id", "archived.property_id = " + e, "(archived.value = 0 OR archived.value >= " + j + ")", "pots.element_id = tasks.element_id", "pots.property_id = " + d, "pots.value <> '" + List.RANK_NOT_IN_LIST + "'", "pot_type.object_id = pots.object_id",
        "pot_type.property_id = " + h, "pot_type.value = " + i, "pot_trashed.object_id = pots.object_id", "pot_trashed.property_id = " + g, "pot_trashed.value = 0", "pot_atm.object_id = pots.object_id", "pot_atm.property_id = " + f, "pot_atm.value = " + Datastore.OBJECT_ID_NULL].concat(a.map(function(a) {
        return["filter_" + a + ".object_id = " + a, "filter_" + a + ".element_id = tasks.element_id", "filter_" + a + ".property_id = " + d, "filter_" + a + ".value <> '" + List.RANK_NOT_IN_LIST + "'"].join(" AND ")
    })).join(" AND ") + " AND pots.object_id <> " + this.global_id + " GROUP BY pot_id";
    env.KVStore.query(env.db.createStatement(e), []).forEach(function(a) {
        c.put(a.pot_id, a.count)
    });
    return c
}, isInGlobalWorkspace:function() {
    return this.domain().isGlobal()
}, hasProjectMember:function(a) {
    a = this.membershipForDomainUserOrNull(a);
    return a !== null && a.isActive()
}, giveMembershipToAllFollowers:function() {
    var a = this;
    a.followersDu().forEachValue(function(b) {
        a._addProjectMemberNoContact(b, !0)
    })
}, insert:function(a) {
    this.onBeforeInsert(a);
    this.getX("items").requestInsertAfter(a, null)
}, isUserTaskList:function() {
    var a = this.assigneeOrUnknown();
    if(isKnown(a)) {
        return a !== null
    }else {
        if(a instanceof UnknownValue.DoesNotExist) {
            return!0
        }else {
            throw ValueIsUnknownError(a);
        }
    }
}, isUsersATM:function(a) {
    return this.isUserTaskList() && this.assignee().user() === a
}, isRegularProject:function() {
    return this.isProject() && !this.isUserTaskList()
}, isTag:function() {
    return!this.isProject()
}, addInsertionStories:function(a) {
    if(this.isUserTaskList()) {
        var b = this.assignee(), c = env.user().domainUserForDomain(this.domain());
        c !== b && a.addStoryOfSubtype(TaskAssignedComment, {creator_du:c, assignee_du:b, prev_assignee_du:null})
    }else {
        a.addStoryOfSubtype(TaskAddedToListComment, {creator_du:env.user().domainUserForDomain(this.domain()), indirect_object:this})
    }
}, name:function() {
    var a = this.getV("assignee");
    a !== null && assertInstanceof(a, DomainUser);
    var b = env.userOrNull();
    if(a === null) {
        return this.getV("name")
    }else {
        var c = this.domain().isGlobal() ? "Personal Tasks" : this.domain().name() + " Tasks", d = a.firstName();
        return b === a.user() ? d ? d + Vocab.APOSTROPHE + "s " + c : "My " + c : d ? d + Vocab.APOSTROPHE + "s " + c : a.email() + Vocab.APOSTROPHE + "s " + c
    }
}, nameL:function() {
    this.getV("assignee") !== null && ufu("Can not set the name of Assigned-To-Me Lists");
    return this.getX("name")
}, setName:function(a) {
    this.getV("assignee") !== null && ufu("Can not set the name of Assigned-To-Me Lists");
    return this.getX("name").requestSet(a)
}, nameX:function() {
    return this.getV("assignee") ? this.name() : this.nameL()
}, linkName:function() {
    var a = this.assigneeOrUnknown();
    if(isKnown(a) && a !== null) {
        return a.user().name()
    }
    return this.name()
}, getContextListUserCanSee:function() {
    return this
}, appendItems:function(a) {
    var b = this;
    isArrayLike(a) ? a.forEach(function(a) {
        b.getX("items").requestInsertBefore(a, null)
    }) : b.getX("items").requestInsertBefore(a, null)
}, _followerIsActive:function(a) {
    if(!a.active()) {
        return!1
    }
    if(this.isUserTaskList()) {
        return!0
    }
    return this.hasProjectMember(a)
}, addFollowerWithoutStory:function(a) {
    Pot.superproto.addFollowerWithoutStory.call(this, a);
    !this.isUserTaskList() && !this.hasProjectMember($v(a)) && this._addProjectMemberNoContact($v(a))
}, makePrivateToCurrentUser:function() {
    this.makePrivateTo(env.user().domainUserForDomain(this.domain()))
}, makePrivateTo:function(a) {
    $v(this.projectMembershipsR()).forEach(function(a) {
        a.setActive(!1)
    });
    this._addProjectMemberNoContact(a, !0);
    this.setIsPublicToWorkspace(!1)
}, isPrivateToCurrentUser:function() {
    if(this.isUserTaskList()) {
        return!1
    }
    return!this.isPublicToWorkspace() && this.memberCount() === 1
}, setAsPublic:function() {
    this.setIsPublicToWorkspace(!0)
}, hasExternalMembers:function() {
    return this.members().any(function(a) {
        return a.isGuest()
    })
}, externalMembers:function() {
    return this.members().filter(function(a) {
        return a.isGuest()
    })
}, externalMemberCount:function() {
    return this.externalMembers().length
}, isPublic:function() {
    if(this.isUserTaskList()) {
        return!0
    }
    this.domain().hasPremiumPermissions();
    return this.isPublicToWorkspace()
}, isPrivate:function() {
    return!this.isPublic()
}, addProjectMember:function(a, b) {
    env.userOrNull() && env.user().domainUserForDomainOrNull(a.domain()) !== null && env.user().domainUserForDomain(a.domain()).addContact(a);
    return this._addProjectMemberNoContact(a, b)
}, _addProjectMemberNoContact:function(a, b) {
    assert(b || this.isPublicToWorkspace() || this.domain().hasPremiumPermissions() || this.members().size() === 0 || this.hasProjectMember(a));
    var c = this.membershipForDomainUserOrNull(a), d = null;
    this.team() !== null && (d = a.teamMembershipForTeamOrNull(this.team()), d === null && (d = TeamMembership.create({team:this.team(), member:a, limited_access:ExperimentalFeature.enabled("expose_teams", this.domain()) ? !0 : a.isGuest()})));
    this.domain().isGlobal() && assertLt(this.members().size(), Pot.GLOBAL_DOMAIN_MAX_MEMBER_COUNT, "We don't support more than " + Pot.GLOBAL_DOMAIN_MAX_MEMBER_COUNT + " members on a pot in the global domain for now");
    c !== null ? (c.setActive(!0), c.setTeamMembership(d)) : c = ProjectMembership.create({project:this, member:a, active:!0, team_membership:d});
    this.resetMemberCount();
    return c
}, removeProjectMember:function(a) {
    a = this.membershipForDomainUserOrNull(a);
    a !== null && a.setActive(!1);
    this.resetMemberCount()
}, resetMemberCount:function() {
    this.setMemberCount(this.members().size())
}, isVisible:function() {
    var a = env.userOrNull();
    return a ? this.isVisibleBy(a) : !0
}, activeMemberships:function() {
    return $v(this.projectMembershipsR()).filter(function(a) {
        return a.isActive()
    })
}, members:function() {
    return this.activeMemberships().map(function(a) {
        return a.member()
    })
}, _computeIsVisibleBy:function(a) {
    if(this.isTrashed() && isUnknown(this.getX("is_public_to_workspace").peekAllowingUnknown())) {
        return!1
    }
    env.world_store.peekXvaluesAndStateObjectScalars([this.getX("domain"), this.getX("is_project"), this.getX("is_public_to_workspace"), this.getX("team")], []);
    var b = this.getX("domain").peekAllowingUnknown(), b = this.domainOrUnknown();
    if(!isKnown(b)) {
        return!1
    }
    a = b.findDomainUser(a);
    if(a === null) {
        return!1
    }
    if(!a.active()) {
        return!1
    }
    if(this.isUserTaskList()) {
        return!0
    }
    b = a.groupAccessForPotOrNull(this);
    return this.isPublicToWorkspace() && b && b.canSeePublicData() || a.isProjectMember(this)
}, _areTrashPropertiesWriteableBy:function() {
    return!0
}, convertPot:function(a) {
    UserActionContext.get().start(env.world_store.createStateObject(ConvertPotAction, {creator:env.user(), pot:this, was_project:a}));
    this.addStoryOfSubtype(ConvertPotComment, {creator_du:env.user().domainUserForDomain(this.domain()), to_tag:a});
    this.setIsProject(!a)
}, setIsProject:function(a) {
    assertEq(!0, this.isPublic(), "Can't convertprivate projects/tags because the access control models are diferent.");
    this.getX("is_project").requestSet(a)
}, setArchivedInUserAction:function(a) {
    UserActionContext.get().start(env.world_store.createStateObject(SetArchivedAction, {creator:env.user(), pot:this, is_archived:a}));
    this.getX("is_archived").requestSet(a)
}, duplicate:attributedFunc({name:ATTRIBUTE_REQUIRED, domain:null, user:null, team:null, include_description:!0, include_assignee:!0, include_subtasks:!0, include_tags:!0, include_task_followers:!0, include_projects:!1, include_due_date:!1, include_attachments:!1, include_project_followers:!1, include_project_members:!0}, function(a) {
    var b = this;
    assertEq(!0, b.isRegularProject());
    var c = a.user === null ? env.user() : a.user, d = a.domain === null ? b.domain() : a.domain, e = a.team === null ? b.team() : a.team;
    d !== b.domain() && (a.include_assignee || a.include_tags || a.include_task_followers || a.include_projects || a.include_project_members || a.include_project_followers) && ufu("Most meta-data cannot be duplicated if you are duplicating a pot across domains");
    var f = Pot.create({creator_du:c.domainUserForDomain(d), name:a.name, is_archived:!1, is_project:b.isProject(), followers_du:a.include_project_followers ? b.followersDu() : null, domain:d, team:e, is_public_to_workspace:b.isPublicToWorkspace()});
    a.include_project_members && b.members().forEach(function(a) {
        c.blessUserForContact(a.user());
        f._addProjectMemberNoContact(a, !0)
    });
    delete a.include_project_members;
    d.isGlobal() || d.listsL().requestInsertBefore(f, null);
    a.include_followers = a.include_task_followers;
    delete a.include_task_followers;
    delete a.include_project_followers;
    delete a.include_project_members;
    delete a.name;
    delete a.team;
    delete a.include_attachments;
    b.items().forEachValueAndRank(function(c, d) {
        var e = c.duplicate(a);
        f.itemsL().requestInsertAtRank(e, d);
        a.include_projects && b.itemsL().requestRemove(e)
    });
    logEvent({name:"DuplicatePot", pot_length:b.items().size(), new_pot:f.global_id, old_pot:b.global_id});
    return f
}), descriptionForPlainText:function() {
    return this.description()
}, descriptionForHtmlText:function() {
    return AsanaHelpers.stylizedHtmlFromPlainText(this.description())
}, onBeforeTrashedChangedOnServer:function() {
    var a = [];
    this.items().forEach(function(b) {
        a.push("listsThatContainTask:" + b.global_id)
    });
    env.world_store.invalidateMemcacheKeys(a)
}, onBeforeTrashedOnServer:function() {
    var a = this;
    a.items().forEach(function(b) {
        b.wouldBeOrphanedWithout(a) && (env.change_event_generator.cacheTargetIds(b), b.trash())
    });
    var b = Set.create([env.user().domainUserForDomain(a.domain())]);
    $v(a.projectMembershipsR()).forEachValue(function(a) {
        a.trash();
        b.add(a.member())
    });
    b.forEach(function(b) {
        env.remote_job_store.addJob(ProjectDeletedEmailRemoteJob.create({pot:a.global_id, recipient_du:b.global_id}), env.clock.now() + Flags.project_deleted_email_delay)
    })
}, deliverDeletedEmail:function(a) {
    var b = this.trashedBy(), c = EmailTemplate.create({template_name:"generic_notification_email"}), d = this.name(), e = this.isTag() ? "tag" : "project", e = {primary_message:"The " + e + ' "' + d + '" has been deleted.', secondary_message:"Please contact support@asana.com and reference " + e + " ID " + this.global_id + " if you believe this was in error.", is_dark_account:!a.user().isClaimed()}, c = {body_text:c.renderPartialTemplate("textBody", e), body_html:c.renderPartialTemplate("htmlBody",
        e)};
    EmailMessage.create(update(c, {from_address:ServerEmailUtils.noReplyAddress(), to_address:EmailAddress.create(a.email(), a.name()), subject:b.name() + ' deleted "' + d + '"'})).scheduleDelivery();
    logEvent({name:"ProjectDeletedEmail"})
}, isIndexed:function() {
    return!0
}, productTypeName:function() {
    if(this.isTag()) {
        return Vocab.Tag
    }else {
        if(this.isProject()) {
            return Vocab.Project
        }
    }
}, describe:function() {
    return this.name()
}, navigationTarget:function() {
    return this
}, navigationContextForUser:function() {
    return{list:this}
}, onNavigateToSharedWithLink:function(a, b) {
    assert(this.isInGlobalWorkspace());
    if(this.isSharedWithLink()) {
        var c = a.domainUserForDomain(this.domain());
        assert(c);
        this.addProjectMember(c);
        b !== void 0 && b(this.getPermalink(a))
    }
}, onLoginAfterNavigateToSharedWithLink:function(a) {
    a.appSession().setCurrentList(this)
}});
DuplicateProjectChange = define("DuplicateProjectChange", Change.subclass("DuplicateProjectChange", {}, {pot:ATTRIBUTE_REQUIRED, name:ATTRIBUTE_REQUIRED, include_description:!0, include_assignee:!0, include_subtasks:!0, include_tags:!0, include_task_followers:!0, include_project_members:!0, include_projects:!1, include_due_date:!1, include_project_followers:!1, enact:function() {
    if(env.is_server) {
        var a = RemoteJobStatus.create({});
        env.remote_job_store.addJob(DuplicatePotRemoteJob.create({user_id:env.user().global_id, pot_id:this.pot.global_id, job_status_id:a.global_id, name:this.name, include_description:this.include_description, include_assignee:this.include_assignee, include_subtasks:this.include_subtasks, include_tags:this.include_tags, include_task_followers:this.include_task_followers, include_projects:this.include_projects, include_due_date:this.include_due_date, include_attachments:this.include_attachments, include_project_members:this.include_project_members,
            include_project_followers:this.include_project_followers}), env.clock.now());
        var b = env.session_store.sessionObject2(RemoteJobState, RemoteJobState.SINGLETON_OBJECT_ID);
        b.setRemoteJobStatus(a);
        b.setInProgressText(this.name + " is being created");
        b.setCompletionText(this.name + " was created")
    }
}, taintedObjectIds:function() {
    return[this.pot.global_id]
}}));
__FILE__ = "luna/common/computed_lists/concat_rvalue.js";
ConcatRvalue = Rvalue.subclass("ConcatRvalue", {create:function() {
    return MergedListRvalue.createWithAttributes({listish_xvalues:$A(arguments), outputRank:function(a, b) {
        return List.MultiKeyRank.create([b, a])
    }})
}}, {});
__FILE__ = "luna/common/computed_lists/map_list_rvalue.js";
MapRvalue = Rvalue.subclass("MapRvalue", {create:function(a, b) {
    return MapRvalue._create(a, b)
}, createWithRvalues:function(a, b, c) {
    return MapRvalue._create(a, function(a) {
        return $rval(function() {
            return b(a)
        })
    }, c || !1)
}}, {_func:SET_IN_CONSTRUCTOR, _helper:SET_IN_CONSTRUCTOR, _input_value_to_output_value:SET_IN_CONSTRUCTOR, constructor:function(a, b, c) {
    var d = this;
    MapRvalue.superproto.constructor.call(this);
    var e = c || !1;
    this._func = b;
    var f = function(a, b) {
        d._setManualInputKey(a);
        var c = d._func(a);
        if(e) {
            var f = MapRvalue.Item.create(d._helper.output_list, c, b);
            d._input_value_to_output_value.put(a, f);
            var g = $rval(function() {
                f.update()
            }).becomeWatch();
            d._helper.addRvalueJob(d, a, function() {
                g.peek()
            })
        }else {
            d._helper.output_list.insertAtRank(c, b), d._input_value_to_output_value.put(a, c)
        }
        d._setManualInputKey(null)
    }, g = function(a) {
        var b = d._input_value_to_output_value.get(a);
        e ? b.remove() : d._helper.output_list.removeValue(b);
        d._removeManualInputKey(a);
        d._input_value_to_output_value.remove(a)
    };
    this._helper = ComputedListHelper.create(List.POLICY_ANY_RANK, a, f, function(a, b) {
        if(e) {
            g(a, null), f(a, b, null, null)
        }else {
            var c = d._input_value_to_output_value.get(a);
            d._helper.output_list.setRankForValue(c, b)
        }
    }, g);
    this._input_value_to_output_value = FastMap.create()
}, onUnused:function() {
    MapRvalue.superproto.onUnused.call(this);
    this._helper.onUnused()
}, computeValue:function() {
    return this._helper.getUpdatedList()
}, _addInput:function(a, b) {
    Flags.diagnostics_do_expensive_error_checking && b !== null && !a.isWatch() && ufu("MapItemsRvalue trying to peek", a, "Construction stack for current rvalue", Rvalue.getStackPrettyPrintable(a));
    return MapRvalue.superproto._addInput.call(this, a, b)
}});
MapRvalue.Item = AsanaObject.subclass("MapRvalue.Item", {}, {_rvalue:SET_IN_CONSTRUCTOR, _rank:SET_IN_CONSTRUCTOR, _output_list:SET_IN_CONSTRUCTOR, _is_removed:!1, _last_computed_value:null, constructor:function(a, b, c) {
    MapRvalue.Item.superproto.constructor.call(this);
    this._output_list = a;
    this._rvalue = b;
    this._rank = c
}, update:function() {
    if(!this._is_removed) {
        var a = toValueAllowingUnknown(this._rvalue);
        if(isKnown(a) && a !== this._last_computed_value) {
            this._last_computed_value && this._output_list.removeValue(this._last_computed_value), this._output_list.insertAtRank(a, this._rank), this._last_computed_value = a
        }
    }
}, remove:function() {
    if(this._last_computed_value !== null) {
        this._output_list.removeValue(this._last_computed_value), this._last_computed_value = null
    }
    this._is_removed = !0
}});
__FILE__ = "luna/common/computed_lists/map_list_with_index_rvalue.js";
MapListWithIndexRvalue = Rvalue.subclass("MapListWithIndexRvalue", {create:function(a, b) {
    return MapListWithIndexRvalue._create(a, b)
}, createWithRvalues:function(a, b) {
    return MapListWithIndexRvalue._create(a, function(a, d) {
        return $rval(function() {
            return b(a, d)
        })
    })
}}, {_list_dependents:SET_IN_CONSTRUCTOR, _func:SET_IN_CONSTRUCTOR, _helper:SET_IN_CONSTRUCTOR, _input_value_to_output_value:SET_IN_CONSTRUCTOR, _min_dirty_index:null, _max_dirty_index:null, constructor:function(a, b) {
    var c = this;
    MapListWithIndexRvalue.superproto.constructor.call(this);
    this._list_dependents = Set.create();
    this._func = b;
    this._helper = ComputedListHelper.create(List.POLICY_ANY_RANK, a, function(a, b) {
        c._setManualInputKey(a);
        var f = MapListWithIndexRvalue.MapIndexRvalue.create(c), g = c._func(a, f), h = c._helper.output_list.insertAtRank(g, b);
        c._setManualInputKey(null);
        c._markIndexRangeDirty(c._helper.output_list._getIndexForRank(b), c._helper.output_list._items.length);
        h._index_rvalue = f;
        c._input_value_to_output_value.put(a, g)
    }, function(a, b) {
        var f = c._input_value_to_output_value.get(a), g = c._helper.output_list.indexOfValue(f);
        c._helper.output_list.setRankForValue(f, b);
        f = c._helper.output_list.indexOfValue(f);
        c._markIndexRangeDirty(Math.min(g, f), Math.max(g, f) + 1)
    }, function(a, b) {
        var f = c._input_value_to_output_value.get(a), g = c._helper.output_list._getIndexForRank(b);
        c._markIndexRangeDirty(g, c._helper.output_list._items.length);
        c._helper.output_list.removeValue(f);
        c._input_value_to_output_value.remove(a);
        c._removeManualInputKey(a)
    });
    this._input_value_to_output_value = FastMap.create();
    Flags.diagnostics_detailed_rvalue_names && a instanceof Rvalue && this.setName(a.getIdentifier())
}, onUnused:function() {
    MapListWithIndexRvalue.superproto.onUnused.call(this);
    this._helper.onUnused();
    this._max_dirty_index = this._min_dirty_index = null
}, computeValue:function() {
    this._min_dirty_index = this._helper.output_list === null ? 1 : this._helper.output_list._items.length + 1;
    this._max_dirty_index = -1;
    var a = this._helper.getUpdatedList();
    this._max_dirty_index = Math.min(this._max_dirty_index, this._helper.output_list._items.length);
    for(var b = this._list_dependents.values(), c = this._min_dirty_index;c < this._max_dirty_index;c++) {
        var d = this._helper.output_list._items[c]._index_rvalue;
        d.setXvalue(c);
        d.getCachedXvalue() !== void 0 && b.push(d)
    }
    this._setDirtyDependents(b);
    return a
}, _addInput:function(a, b) {
    b !== null && ufu("MapItemsWithIndexRvalue item trying to peek", a, "Construction stack for current rvalue", Rvalue.getStackPrettyPrintable(a));
    return MapListWithIndexRvalue.superproto._addInput.call(this, a, b)
}, _addDependent:function(a) {
    a instanceof MapListWithIndexRvalue.MapIndexRvalue || this._list_dependents.add(a);
    MapListWithIndexRvalue.superproto._addDependent.call(this, a)
}, _removeDependent:function(a) {
    a instanceof MapListWithIndexRvalue.MapIndexRvalue || this._list_dependents.remove(a);
    MapListWithIndexRvalue.superproto._removeDependent.call(this, a)
}, _markIndexRangeDirty:function(a, b) {
    this._min_dirty_index = Math.min(this._min_dirty_index, a);
    this._max_dirty_index = Math.max(this._max_dirty_index, b)
}});
MapListWithIndexRvalue.MapIndexRvalue = Rvalue.subclass("MapListWithIndexRvalue.MapIndexRvalue", {}, {_xvalue:SET_IN_CONSTRUCTOR, _lazy_list_rvalue:SET_IN_CONSTRUCTOR, constructor:function(a) {
    MapListWithIndexRvalue.MapIndexRvalue.superproto.constructor.call(this);
    this._xvalue = UnknownValue.Loading.create(this, null);
    this._lazy_list_rvalue = a
}, computeValue:function() {
    this._lazy_list_rvalue.peek();
    return this._xvalue
}, setXvalue:function(a) {
    this._xvalue = a
}});
__FILE__ = "luna/common/computed_lists/merged_list_rvalue.js";
MergedListRvalue = Rvalue.subclass("MergedList", {create:function() {
    return MergedListRvalue.createWithAttributes({listish_xvalues:$A(arguments), allow_duplicates:!1})
}, createAllowingDuplicates:function() {
    return MergedListRvalue.createWithAttributes({listish_xvalues:$A(arguments), allow_duplicates:!0})
}, createWithAttributes:attributedFunc({listish_xvalues:ATTRIBUTE_REQUIRED, allow_duplicates:!1, outputRank:identity}, function(a) {
    return MergedListRvalue._create(a)
})}, {_merged_input_lists:SET_IN_CONSTRUCTOR, _output_list:SET_IN_CONSTRUCTOR, constructor:function(a) {
    var b = this;
    MergedListRvalue.superproto.constructor.call(b);
    b._output_list = List.create([], List.POLICY_ANY_RANK);
    b._buffer = MergedListRvalue._MergedListBuffer.create(b._output_list, a.allow_duplicates);
    b._merged_input_lists = a.listish_xvalues.map(function(c, d) {
        return MergedListRvalue._MergedInputList.create(b._buffer, c, a.outputRank, d)
    })
}, computeValue:function() {
    this._merged_input_lists.forEach(function(a) {
        a.poll()
    });
    this._buffer.flush();
    return this._output_list
}});
MergedListRvalue._MergedInputList = AsanaObject.subclass("MergedListRvalue._MergedInputList", {}, {_input_listish_xvalue:SET_IN_CONSTRUCTOR, _poller:SET_IN_CONSTRUCTOR, _buffer:SET_IN_CONSTRUCTOR, constructor:function(a, b, c, d) {
    MergedListRvalue._MergedInputList.superproto.constructor.call(this);
    this._buffer = a;
    this._input_listish_xvalue = b;
    var e = this;
    this._poller = List.Poller.create(b, {onInserted:function(a, b) {
        e._buffer.insert(e, a, c(b, d))
    }, onMoved:function(a, b) {
        e._buffer.move(e, a, c(b, d))
    }, onRemoved:function(a) {
        e._buffer.remove(e, a)
    }})
}, poll:function() {
    toValue(this._input_listish_xvalue);
    this._poller.poll()
}});
MergedListRvalue._MergedListBuffer = AsanaObject.subclass("MergedListRvalue._MergedListBuffer", {}, {_duplicate_xvalue_map:SET_IN_CONSTRUCTOR, _allow_duplicates_if_same_rank:SET_IN_CONSTRUCTOR, _xvalue_ref_count_map:SET_IN_CONSTRUCTOR, _output_list:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    MergedListRvalue._MergedListBuffer.superproto.constructor.call(this);
    this._output_list = a;
    this._allow_duplicates_if_same_rank = b;
    this._xvalue_ref_count_map = Map.create();
    this._duplicate_xvalue_map = Map.create()
}, insert:function(a, b, c) {
    this._xvalue_ref_count_map.incrementCount(b) === 1 ? this._output_list.insertAtRank(b, c) : this._bufferRankChange(a, b, c)
}, move:function(a, b, c) {
    this._duplicate_xvalue_map.containsKey(b) ? this._bufferRankChange(a, b, c) : this._output_list.setRankForValue(b, c)
}, remove:function(a, b) {
    this._xvalue_ref_count_map.decrementCount(b) === 0 ? (this._output_list.removeValue(b), this._duplicate_xvalue_map.remove(b)) : this._bufferRankChange(a, b, List.RANK_NOT_IN_LIST)
}, flush:function() {
    var a = this;
    this._duplicate_xvalue_map.forEach(function(b, c) {
        var d = null, e = 0;
        c.source_to_rank_map.forEach(function(a, b) {
            b !== List.RANK_NOT_IN_LIST && (e++, d = b)
        });
        if(d !== null) {
            var f = a._xvalue_ref_count_map.getOr(b, 0);
            f === 0 ? a._output_list.removeValue(b) : e < f || a._output_list.setRankForValue(b, d)
        }
    });
    this._duplicate_xvalue_map.clear()
}, _bufferRankChange:function(a, b, c) {
    var d = this;
    this._duplicate_xvalue_map.setDefault(b, function() {
        return{initial_rank:d._output_list.rankForValueOrNull(b), source_to_rank_map:Map.create()}
    }).source_to_rank_map.put(a, c)
}});
__FILE__ = "luna/common/access_control/access_control_blacklist.js";
AccessControl.Blacklist = AsanaObject.subclass("AccessControl.Blacklist", {}, {_user_to_blacklisted_object_ids:SET_IN_CONSTRUCTOR, constructor:function() {
    AccessControl.Blacklist.superproto.constructor.call(this);
    this._user_to_blacklisted_object_ids = Map.create()
}, blacklistForUser:function(a) {
    return this._user_to_blacklisted_object_ids.setDefault(a, Set.create)
}});
__FILE__ = "luna/common/computed_lists.js";
computed_lists = function() {
    var a = Rvalue.subclass("SortedListRvalue", {}, {_listish_xvalue:SET_IN_CONSTRUCTOR, _func:SET_IN_CONSTRUCTOR, _output_list:null, _poller:null, _manual_input_key_to_function:SET_IN_CONSTRUCTOR, constructor:function(b, c) {
        a.superproto.constructor.call(this);
        this._getSortedRank = c;
        this._listish_xvalue = b;
        this._manual_input_key_to_function = host.job_queue !== null ? Map.create() : null
    }, onUnused:function() {
        a.superproto.onUnused.call(this);
        this._poller = this._output_list = null
    }, computeValue:function() {
        var a = this;
        this._output_list = this._output_list || List.create([], List.POLICY_ANY_RANK);
        this._poller = this._poller || List.Poller.create(this._listish_xvalue, {onInserted:function(c) {
            a._setManualInputKey(c);
            var e = $rval(function() {
                var e = a._getSortedRank(c);
                a._output_list.contains(c) ? isKnown(e) ? a._output_list.setRankForValue(c, e) : a._output_list.removeValue(c) : isKnown(e) && a._output_list.insertAtRank(c, e);
                return null
            });
            host.job_queue !== null ? a._manual_input_key_to_function.put(c, function() {
                e.peek()
            }) : e.peek();
            a._setManualInputKey(null)
        }, onMoved:function() {
        }, onRemoved:function(c) {
            a._output_list.contains(c) && a._output_list.removeValue(c);
            host.job_queue !== null && a._manual_input_key_to_function.remove(c);
            a._removeManualInputKey(c)
        }});
        this._poller.poll();
        if(host.job_queue !== null) {
            var c = a._manual_input_key_to_function.mapEntries(function(c, e) {
                return env.frp.addRvalueJob(a, c, e)
            });
            host.job_queue.join(c);
            a._manual_input_key_to_function.clear()
        }
        toValue(this._listish_xvalue);
        return this._output_list
    }});
    return{map:function(a, c) {
        return MapRvalue.create(a, c)
    }, mapInRvalues:function(a, c) {
        return MapRvalue.createWithRvalues(a, c)
    }, reduce:function(a, c, d) {
        return $rval(function() {
            var e = d;
            Rvalue.peekValuesArray(a).forEach(function(a) {
                e = c(e, a)
            });
            return e
        }, "reduced_xvalue")
    }, sort:function(b, c) {
        return a.create(b, c)
    }}
}();
__FILE__ = "luna/common/model/domain_user.js";
DomainUser = AsanaStateObject.subclass("DomainUser", [IDescribable, INavigatable, IGroupAccess], {property_descs:{__modification_time:{type:Timestamp, default_value:0}, domain:{type:Domain, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE, preloaded:!0}, user:{type:User, preloaded:!0}, _user_name_sort_key:{type:String, server_only:!0, isWriteableBy:function(a, b) {
    return a.isNew() || a.user() === b
}}, task_list:{type:ItemList, isWriteableBy:Asana.AccessControl.domainUserTaskListIsWriteable, preloaded:!0}, favorites:{type:List, isWriteableBy:Asana.AccessControl.domainUserPreferenceIsWriteable}, recents:{type:List, isWriteableBy:Asana.AccessControl.domainUserPreferenceIsWriteable}, assigned_to_me_group_by:{type:String, isWriteableBy:Asana.AccessControl.domainUserPreferenceIsWriteable, default_value:"project_in_assignee_view"}, active:{type:Boolean, isWriteableBy:Asana.AccessControl.domainUserActiveIsWriteable,
    track_initial_value:!0, preloaded:!0}, summary_email_preference:{type:Integer, isWriteableBy:Asana.AccessControl.domainUserPreferenceIsWriteable, default_value:1}, notification_verified_email:{type:VerifiedEmail, default_value:null, isWriteableBy:Asana.AccessControl.domainUserNotificationVerifiedEmailIsWriteable}, send_notification_emails:{type:Boolean, default_value:!0, isWriteableBy:Asana.AccessControl.domainUserPreferenceIsWriteable}, last_notification_for_batching:{type:AsanaStateObject, default_value:null,
    allow_trashed_values:!0, isWriteableBy:Asana.AccessControl.domainUserLastNotificationForBatchingIsWriteable}, notification_remote_job_lock:{type:Boolean, default_value:!1, server_only:!0}, is_guest:{type:Boolean, preloaded:!0, track_initial_value:!0, default_value:!1, isWriteableBy:Asana.AccessControl.domainUserIsGuestIsWriteable}, last_interacted_with_notification_feed_time:{type:Timestamp, isWriteableBy:Asana.AccessControl.domainUserPreferenceIsWriteable, default_value:0}, last_notification_creation_time:{type:Timestamp,
    default_value:0}, tasks_marked_for_followup:{type:List, isWriteableBy:Asana.AccessControl.domainUserPreferenceIsWriteable}, thread_objects_marked_for_followup:{type:List, isWriteableBy:Asana.AccessControl.domainUserPreferenceIsWriteable}, feed_mark_all_as_read_time:{type:Integer, default_value:0}, interested_in_premium_permissions:{type:Timestamp, default_value:null, isWriteableBy:Asana.AccessControl.domainUserPreferenceIsWriteable}}, index_descs:{domain_user_is_unique:{keys:["user", "domain", StateObject.PropertyName.TRASHED_AT],
    unique:!0}}, create:attributedValueFunc({domain:ATTRIBUTE_REQUIRED, user:ATTRIBUTE_REQUIRED, notification_verified_email:ATTRIBUTE_REQUIRED, active:!0, is_guest:!1, task_list:List.EMPTY_LIST}, function(a) {
    var b = View.runWithoutLvalueChecking(function() {
        return toValueOrDefaultIfUnknown(a.user.getX("name"), a.user.name())
    }), b = env.world_store.createStateObject(DomainUser, copyAndUpdate(a, {task_list:null, last_notification_for_batching:null, _user_name_sort_key:b}));
    b.getX("task_list").requestSet(ItemList.create({creator_du:b, assignee:b, name:"My Tasks", items:List.EMPTY_LIST, domain:a.domain}));
    return b
}), RECENTS_LENGTH:5, SUMMARY_EMAIL_PREFERENCES:{NONE:0, DAILY:1}}, {isIndexed:function() {
    return!0
}, apiModel:Memoize.memoizeInThis("DomainUser.apiModel", function() {
    var a = this;
    return Api.Model.create({name:function() {
        return"user"
    }, hasChangeEvents:function() {
        return!0
    }, supportsChangeEvent:function(a) {
        return a !== "deleted"
    }, objectId:function() {
        return a.user().global_id
    }, objectTypeId:function() {
        return env.type_registry.getTypeId(a.user().__type)
    }, addChangeEventData:function(b) {
        if(!a.isTrashed()) {
            b.workspace = {id:a.domain().global_id}
        }
    }})
}), setActive:function() {
    ufu("use deactivate or reactivate")
}, setUser:function(a) {
    var b = this.user();
    this.datastore.unique_key_manager.unregisterObject(this);
    this.userL().requestSet(a);
    this.datastore.unique_key_manager.registerObject(this);
    a.domainUsersL().requestInsertBefore(this, null);
    b.domainUsersL().requestRemove(this);
    env.datastore_manager.enactChange(IndexContactsChange.create({domain_users:[this], users:[]}))
}, setNotificationVerifiedEmail:function(a) {
    this.notificationVerifiedEmailL().requestSet(a);
    env.datastore_manager.enactChange(IndexContactsChange.create({domain_users:[this], users:[]}))
}, deactivate:function() {
    var a = env.userOrNull();
    !env.is_server && env.lunaSession() !== null && a && UserActionContext.get().start(env.world_store.createStateObject(DeactivateDomainUserAction, {domain_user:this, creator:a}));
    env.datastore_manager.enactChange(DeactivateDomainUserChange.create({domain_user:this}))
}, reactivate:function() {
    env.datastore_manager.enactChange(ReactivateDomainUserChange.create({domain_user:this}))
}, name:function() {
    return this.user().name().replace(/@.*$/, "@...")
}, firstName:function() {
    return User.parseFirstName(this.name())
}, emailNoAC:function() {
    var a = this.notificationVerifiedEmailL(), a = toValue(a.datastore_lvalue);
    return a !== null ? toValue(a.emailL()) : this.user().emailNoAC()
}, email:function() {
    var a = this._emailOrUnknown();
    if(isKnown(a)) {
        return a
    }
    throw new ValueIsUnknownError(a);
}, emailR:rvalueProperty("emailR", function() {
    return this.email()
}), _emailOrUnknown:serverComputedPropertyAllowingUnknown("email", function() {
    var a = this.notificationVerifiedEmailL(), a = toValue(a.datastore_lvalue);
    return a !== null ? a.serverOnlyEmailR().peekAllowingUnknown() : this.user().emailR().peekAllowingUnknown()
}), isInternal:function() {
    return!this.getV("is_guest")
}, isExternal:function() {
    return this.getV("is_guest")
}, isBillingOwner:function() {
    return this.domain().isPremium() && this.domain().billingOwner() === this
}, canSeePublicData:function() {
    return!this.domain().isGlobal() && !this.isGuest()
}, canAdminAccess:function() {
    return!this.isGuest()
}, taskCreationVerifiedEmailsR:Memoize.memoizeInThis("taskCreationVerifiedEmailsR", function() {
    return QueryBuilder.queryForObjects(VerifiedEmail).where(QueryBuilder.scalarProperty("task_creation_domain_user").eq(this).orders()).getQueryRvalue("verified email with domain user").setAsSafelyPeekableByAncestor()
}), taskCreationVerifiedEmails:function() {
    return $v(this.taskCreationVerifiedEmailsR())
}, creator:function() {
    return null
}, relevantDomainUsers:function(a) {
    return this.relevantDomainUsersLists(a).reduce(function(a, c) {
        return a.concat(c)
    })
}, relevantDomainUsersLists:function(a) {
    var b = this;
    if(a && a.isRegularProject() && a.domain() === b.domain()) {
        var c = a.members()
    }
    var d = b.addressBook();
    if(!b.isGuest() && !b.domain().isGlobal()) {
        var a = b.domain().usersModel().allObjectsR(), e = $v(a).toArray()
    }else {
        b.isGuest() ? (a = b.domain().usersModel().allObjectsR(), e = $v(a).filter(function(a) {
            return a.isInternal() || a === b
        })) : e = [b]
    }
    if(c) {
        var f = [];
        d.forEach(function(a) {
            c.indexOf(a) !== -1 && f.push(a)
        });
        f.forEach(function(a) {
            d.splice(d.indexOf(a), 1);
            c.splice(c.indexOf(a), 1)
        });
        c = f.concat(c)
    }
    a = function(a) {
        e.indexOf(a) !== -1 && e.splice(e.indexOf(a), 1)
    };
    c ? c.forEach(a) : c = [];
    d.forEach(a);
    return[c, d, e]
}, contactForDomainUser:function(a) {
    return this._contactForDomainUserQuery(a).firstValueOrNull()
}, _contactForDomainUserQuery:computedProperty("contactForDomainUserQuery", function(a) {
    return QueryBuilder.queryForObjects(Contact).where(QueryBuilder.scalarProperty("owner").eq(this).orders(), QueryBuilder.scalarProperty("addressee").eq(a)).getQueryRvalue()
}), hasContact:function(a) {
    return this.contactForDomainUser(a) !== null
}, contacts:function() {
    return $v(this._contactsR())
}, reverseContacts:function() {
    return $v(this._reverseContactsR())
}, addressBook:function() {
    return this._filterInactiveContacts($v(this._contactsR()))
}, topContacts:function(a) {
    return this._filterInactiveContacts($v(this._topContactsR(a)))
}, _topContactsR:rvalueProperty("_topContactsR", function(a) {
    return this._contactsQuery(1).getQueryRvalue("DomainUser.topContacts", this._topContactsRankLimit(a))
}), _topContactsRankLimit:computedProperty("_topContactsRankLimit", function(a) {
    var b = this;
    return serverComputedValue("_topContactsRankLimit|" + this.global_id + "|" + a, function() {
        for(var c = b._contactsQuery(1), d = null, e = a, f = null, g = function(a) {
            env.frp.forEachParallel(a, function(a) {
                env.datastoreObject(a).addressee().active()
            });
            a.forEachValueAndRank(function(a, b) {
                if(e === 0) {
                    throw f = b, IIterable.STOP;
                }
                env.datastoreObject(a).addressee().active() && e--
            })
        };f === null;) {
            d = c.fetchNthObjectRank(d, d === null ? e + 1 : Math.max(e + 1, 10));
            if(d === null) {
                return d
            }
            var h = c.getQueryRvalue("_topContactsRankLimit", d).matchingObjectIds();
            g(h)
        }
        return f
    })
}), _filterInactiveContacts:function(a) {
    return a.filter(function(a) {
        return a.addressee().active()
    }).map(function(a) {
            return a.addressee()
        })
}, _contactsQuery:function(a) {
    return QueryBuilder.queryForObjects(Contact).where(QueryBuilder.scalarProperty("owner").eq(this), QueryBuilder.scalarProperty("interaction_count").gt(a).orders().rankGenerator(Query.NegateRankGenerator.create()))
}, _contactsR:Memoize.memoizeInThis("contactsR", function(a, b) {
    b === void 0 && (b = 0);
    return this._contactsQuery(b).getQueryRvalue("DomainUser._contactsR", null, a !== null && a !== 0 ? a : Number.MAX_INT_VALUE).setAsSafelyPeekableByAncestor()
}), _reverseContactsR:Memoize.memoizeInThis("reverseContactsR", function() {
    return QueryBuilder.queryForObjects(Contact).where(QueryBuilder.scalarProperty("addressee").eq(this).orders()).getQueryRvalue("DomainUser._reverseContactsR").setAsSafelyPeekableByAncestor()
}), addContact:function(a, b) {
    if(env.is_server) {
        if(this !== a) {
            if(!b && isUnknown(a.user().emailR().peekAllowingUnknown())) {
                ufu("Tried to add contact without access to email")
            }else {
                if(b && a.user() !== User.findByEmailOnServerWithoutAC(b)) {
                    ufu("Tried to add contact with a wrong email")
                }else {
                    return this.addContactWithoutAC(a)
                }
            }
        }
    }else {
        env.datastore_manager.enactChange(ContactInteractionChange.create({owner:this, addressee:a, email:b ? b : null}))
    }
}, addContactWithoutAC:function(a) {
    this.user().blessUserForContact(a.user());
    logEvent({name:"ContactInteraction"});
    var b = this.contactForDomainUser(a);
    b ? b.incrementInteractionCount() : Contact.create({owner:this, addressee:a, interaction_count:1});
    a.contactForDomainUser(this) || Contact.create({owner:a, addressee:this, interaction_count:1})
}, isProjectMember:function(a) {
    a = Flags.enable_backpropagation ? this.membershipForProjectOrNullWithoutLoadingQuery(a) : this.membershipForProjectOrNull(a);
    return a !== null && a.isActive()
}, activeProjectMemberships:computedProperty("activeProjectMemberships", function() {
    return $v(this._projectMembershipsR(!0)).filter(function(a) {
        return a.isActive()
    })
}), projectMembershipsR:function() {
    return this._projectMembershipsR(!1)
}, _projectMembershipsR:Memoize.memoizeInThis("_projectMembershipsR", function(a) {
    return QueryBuilder.queryForObjects(ProjectMembership).where(QueryBuilder.scalarProperty("member").eq(this).orders(), a ? QueryBuilder.scalarProperty("active").eq(!0) : null).getQueryRvalue("DomainUser.projectMemberships").setAsSafelyPeekableByAncestor()
}), _membershipsForProjectR:Memoize.memoizeInThis("_membershipsForProjectR", function(a) {
    return QueryBuilder.queryForObjects(ProjectMembership).where(QueryBuilder.scalarProperty("member").eq(this).orders(), QueryBuilder.scalarProperty("project").eq(a)).getQueryRvalue("DomainUser.projectMembershipsForPot").setAsSafelyPeekableByAncestor()
}), groupAccessForPotOrNull:function(a) {
    return a.team() ? this.teamMembershipForTeamOrNull(a.team()) : this
}, membershipForProjectOrNullWithoutLoadingQuery:function(a) {
    return $v(this._membershipsForProjectR(a)).firstValueOrNull()
}, membershipForProjectOrNull:function(a) {
    assert(!a.isUserTaskList(), "must be a project", a.global_id);
    var b = null;
    $v(this.projectMembershipsR()).forEachValue(function(c) {
        var d = c.datastoreLvalueForProperty("project");
        project_id = env.world_store.readValue(d);
        if(project_id === a.global_id) {
            throw b = c, IIterable.STOP;
        }
    });
    return b
}, _visibleRecentsR:function() {
    var a = this;
    return FilterRvalue.createWithRvalues(a.recentsR(), function(b) {
        return!a.favoritesL().containsObject(b) && (!(b instanceof DomainUser) || b.active())
    })
}, projectsModel:computedProperty("projectsModel", function() {
    return DomainPotsModel.create({domain_user:this, is_project:!0, initial_pots_to_load:Domain.POTS_TO_LOAD_INITIALLY})
}), tagsModel:computedProperty("tagsModel", function() {
    return DomainPotsModel.create({domain_user:this, is_project:!1, initial_pots_to_load:Domain.POTS_TO_LOAD_INITIALLY, delay_until_page_loads:!0})
}), topListsR:rvalueProperty("topListsR", function() {
    var a = this, b = a.favoritesL(), c = a._visibleRecentsR(), d = FilterRvalue.createWithRvalues(a.projectsModel().limitedPotsR(!1), function(b) {
        return!a.favoritesL().containsObject(b) && !a.recents().contains(b)
    }), e = 5 - $v(b).size();
    e < 2 && (e = 2);
    return ConcatRvalue.create(b, computed_lists.sort(LimitListRvalue.create(ConcatRvalue.create(c, d), e), function(a) {
        return a.name().toLowerCase()
    }))
}), sortedNonFavoriteRecentsR:rvalueProperty("sortedNonFavoriteRecentsR", function() {
    var a = this._visibleRecentsR();
    return computed_lists.sort(a, function(a) {
        return a.name().toLowerCase()
    })
}), undeliveredNotificationsR:Memoize.memoizeInThis("undeliveredNotificationsR", function() {
    return QueryBuilder.queryForObjects(Notification).where(QueryBuilder.scalarProperty("needs_batch_delivery_du").eq(this).orders()).getQueryRvalue("NotificationRemoteJob.undelivered_notifications")
}), oldestUndeliveredNotificationNonReactive:function() {
    return QueryBuilder.queryForObjects(Notification).where(QueryBuilder.scalarProperty("needs_batch_delivery_du").eq(this), QueryBuilder.scalarProperty("__creation_time").orders()).getOneObjectNonReactive("NotificationRemoteJob.oldestUndeliveredNotificationNonReactive")
}, inboxState:function() {
    return env.session_store.sessionObject2(Inbox.State, "inbox_state_" + this.global_id)
}, inbox:computedProperty("inbox", function() {
    return Inbox.create({domain_user:this})
}), notificationForStoryNonReactive:function(a) {
    return QueryBuilder.queryForObjects(Notification).where(QueryBuilder.scalarProperty("recipient").eq(this).orders(), QueryBuilder.scalarProperty("story").eq(a), QueryBuilder.scalarProperty("__creation_time").orders()).getOneObjectNonReactive("DomainUser.notificationForStoryNonReactive")
}, toggleThreadObjectForFollowUp:function(a) {
    this.isFollowingUpOnThreadObject(a) ? this.tasksMarkedForFollowupL().requestRemove(a) : this.tasksMarkedForFollowupL().requestInsertBefore(a, null)
}, isFollowingUpOnThreadObject:function(a) {
    return this.tasksMarkedForFollowupL().containsObject(a)
}, teamMembershipForTeamOrNull:function(a) {
    return $v(this.teamMembershipForTeamR(a)).firstValueOrNull()
}, teamMembershipForTeam:function(a) {
    return this.teamMembershipForTeamOrNull(a)
}, teamMembershipForTeamR:Memoize.memoizeInThis("teamMembershipForTearR", function(a) {
    return QueryBuilder.queryForObjects(TeamMembership).where(QueryBuilder.scalarProperty("team").eq(a), QueryBuilder.scalarProperty("member").eq(this)).getQueryRvalue("DomainUser.teamMembershipForTeam").setAsSafelyPeekableByAncestor()
}), isTeamMember:function(a) {
    return this.teamMembershipForTeamOrNull(a) !== null
}, teamMemberships:Association.hasMany({name:"teamMemberships", type_name:"TeamMembership", scalar_property_name:"member"}), fullTeamMemberships:function() {
    return this.teamMemberships().filter(function(a) {
        return!a.limitedAccess()
    })
}, teams:function() {
    return this.teamMemberships().map(function(a) {
        return a.team()
    })
}, fullTeams:function() {
    return this.fullTeamMemberships().map(function(a) {
        return a.team()
    })
}, merge:function(a) {
    var b = this, c = QueryBuilder.queryForObjects(Task).where(QueryBuilder.listProperty("followers_du").contains(a)).getQueryRvalue("DomainUser.items_following").setAsSafelyPeekableByAncestor(), d = QueryBuilder.queryForObjects(Pot).where(QueryBuilder.listProperty("followers_du").contains(a)).getQueryRvalue("DomainUser.items_following").setAsSafelyPeekableByAncestor();
    $v(a.projectMembershipsR()).forEachValue(function(a) {
        a.setActive(!1);
        a.project().addProjectMember(b, !0)
    });
    $v(ConcatRvalue.create(c, d)).forEachValue(function(c) {
        c.removeFollower(a);
        c.addFollowerWithoutStory(b)
    });
    a.taskList().items().forEachValueAndRank(function(a, c) {
        b.taskList().itemsL().requestInsertAtRank(a, c)
    });
    a.taskList().itemsL().requestClear();
    $v(a.undeliveredNotificationsR()).forEachValue(function(a) {
        a.setRecipient(b);
        a.setNeedsBatchDeliveryDu(b)
    });
    c = env.clock.now() - Date.MILLISECONDS_PER_DAY;
    c = QueryBuilder.queryForObjects(Notification).where(QueryBuilder.scalarProperty("recipient").eq(a), QueryBuilder.scalarProperty("needs_batch_delivery_du").eq(null), QueryBuilder.scalarProperty("__creation_time").gt(c).orders()).getQueryRvalue("recent_unbatched_notifications");
    $v(c).forEachValue(function(a) {
        a.setRecipient(b)
    });
    a.taskCreationVerifiedEmails().forEachValue(function(a) {
        assertEq(a.veUser(), b.user());
        a.setTaskCreationDomainUser(b)
    });
    a.deactivate();
    logAuditEvent({name:"MergeDomainUser", from_domain_user:a, to_domain_user:this})
}, _computeIsVisibleBy:function(a) {
    if(this.user() === a) {
        return!0
    }
    var b = this.domainL().peekAllowingUnknown();
    if(isUnknown(b)) {
        return!1
    }
    return b.isVisibleBy(a)
}, _areTrashPropertiesWriteableBy:function() {
    return!1
}, networkMembershipIsOkay:function() {
    return!this.active() || this.isGuest() || this.domain().network() === null || this.user().networks().contains(this.domain().network())
}, describe:function() {
    return this.user().describe()
}, navigationTarget:function() {
    return this.taskList()
}, colorForInitials:function() {
    return this.user().global_id % 9
}, recentsR:rvalueProperty("recentsR", function() {
    var a = DomainUser.SessionRecents.get(this).recentsJson();
    if(a.length === 0) {
        return this.getV("recents")
    }
    var b = env.frp.mapParallel(JSON.parse(a), function(a) {
        return env.world_store.objectOrUnknownR(a)
    });
    return $rval(function() {
        return List.create(env.frp.mapParallel(b, function(a) {
            return a.peekAllowingUnknown()
        }).filter(function(a) {
                return isKnown(a)
            }))
    })
}), recents:function() {
    return $v(this.recentsR())
}, setRecents:function() {
    ufu("use addRecent")
}, recentsL:function() {
    ufu("use addRecent")
}, addRecent:function(a) {
    env.datastore_manager.enactChange(AddRecentChange.create({domain_user:this, recent:a}))
}});
DeactivateDomainUserAction = UserAction.subclass("DeactivateDomainUserAction", {property_descs:{domain_user:{type:DomainUser}}}, {isUndoable:function() {
    return!0
}, useGenericUndoDisplay:function() {
    return!1
}, formatString:function() {
    return"%{user} was removed from %{domain}"
}, placeholderMap:function() {
    return Map.create([["user", this.getV("domain_user").name(), "domain", this.getV("domain_user").domain().name()]])
}});
DeactivateDomainUserChange = define("DeactivateDomainUserChange", Change.subclass("DeactivateDomainUserChange", {deactivateDomainUserOnServer:function(a, b) {
    b ? a.setPropertyBlessed("active", !1) : a.activeL().requestSet(!1);
    env.remote_job_store.addJob(UpdateProjectMemberCountsRemoteJob.create({domain_user_id:a.global_id}), env.clock.now())
}}, {domain_user:ATTRIBUTE_REQUIRED, enact:function() {
    env.is_server ? DeactivateDomainUserChange.deactivateDomainUserOnServer(this.domain_user) : this.domain_user.activeL().requestSet(!1)
}, taintedObjectIds:function() {
    return[this.domain_user.global_id, this.domain_user.user().global_id]
}}));
ReactivateDomainUserChange = define("ReactivateDomainUserChange", Change.subclass("ReactivateDomainUserChange", {}, {domain_user:ATTRIBUTE_REQUIRED, enact:function() {
    this.domain_user.activeL().requestSet(!0);
    env.is_server && env.remote_job_store.addJob(UpdateProjectMemberCountsRemoteJob.create({domain_user_id:this.domain_user.global_id}), env.clock.now())
}, taintedObjectIds:function() {
    return[this.domain_user.global_id]
}}));
ActivateDomainUserChange = define("ActivateDomainUserChange", Change.subclass("ActivateDomainUserChange", {}, {domain:ATTRIBUTE_REQUIRED, domain_user:ATTRIBUTE_REQUIRED, enact:function() {
    if(env.is_server) {
        var a = this.domain_user.user();
        toValue(this.domain_user.notificationVerifiedEmailL().datastore_lvalue) === null && this.domain_user.setPropertyBlessed("notification_verified_email", a.defaultVerifiedEmailOrNull());
        a.domains().filter(function(a) {
            return!a.isGlobal()
        }).size() === 1 && a.setTaskCreationDomainUserForAllVerifiedEmails(this.domain_user)
    }
}, taintedObjectIds:function() {
    return[this.domain_user.global_id, this.domain_user.user().global_id]
}}));
DomainUser.SessionRecents = SessionObject2.subclass("DomainUser.SessionRecents", {property_descs:{recents_json:{type:String, default_value:""}}, get:function(a) {
    return env.session_store.sessionObject2(DomainUser.SessionRecents, "recents_" + a.global_id)
}}, {});
AddRecentChange = define("AddRecentChange", Change.subclass("AddRecentChange", {}, {domain_user:ATTRIBUTE_REQUIRED, recent:ATTRIBUTE_REQUIRED, enact:function() {
    var a = this, b = a.domain_user.recentsR().peekAllowingUnknown(), b = isKnown(b) ? b.toArray() : [];
    b.indexOf(a.recent) >= 0 && b.splice(b.indexOf(a.recent), 1);
    b.unshift(a.recent);
    b = b.slice(0, DomainUser.RECENTS_LENGTH);
    b = JSON.stringify(b.map(function(a) {
        return a.global_id
    }));
    DomainUser.SessionRecents.get(a.domain_user).setRecentsJson(b);
    if(env.is_server) {
        var c = Signal.connect(env, "sync_response_sent", function() {
            Signal.disconnect(c);
            processHandler(function() {
                a.domain_user.getX("recents").prependAndLimitSize(a.recent, DomainUser.RECENTS_LENGTH)
            })
        })
    }
}, taintedObjectIds:function() {
    return[this.domain_user.global_id]
}}));
__FILE__ = "luna/temp/app_ui_context.js";
ApplicationUIContext = AsanaObject.subclass("ApplicationUIContext", {}, {browser:ATTRIBUTE_REQUIRED, user:ATTRIBUTE_REQUIRED, constructor:function(a) {
    ApplicationUIContext.superproto.constructor.call(this);
    updateWithAttributes(this, a)
}});
__FILE__ = "luna/common/view/view.js";
View = AsanaObject.subclass("View", {create:function(a) {
    var b = this;
    return View._runWithActiveView("set me", !0, function() {
        return b._create(a)
    })
}, activeView:function() {
    if(!Flags.diagnostics_check_handler_lvalues) {
        return null
    }
    return View._viewForRvalue(EvaluationContext.getTopRvalue(), !0)
}, handling_view:null, runWithoutLvalueChecking:function(a) {
    return View._runWithHandlingView(null, a)
}, publicMethod:function(a) {
    return function() {
        var b = this, c = arguments;
        return View._runWithHandlingView(b, function() {
            return a.apply(b, c)
        })
    }
}, publicFunction:function(a, b) {
    return function() {
        var c = arguments;
        return View._runWithHandlingView(a, function() {
            return b.apply(null, c)
        })
    }
}, allInUseViews:Memoize.memoizeInThis("allInUseViews", function() {
    return Set.create()
}), registerToCheckViews:Memoize.memoizeInThis("registerToCheckViews", function() {
    Signal.connect(env.frp, "propagate_all_stop", function() {
        var a = Set.create(), b = Set.create(), c = env.lunaSession().lunaSessionState().focusedElementIdL();
        View.allInUseViews().forEach(function(d) {
            if(!d.__type.ALLOW_DUPLICATES) {
                a.contains(d.fully_qualified_view_name) && b.add(d.fully_qualified_view_name);
                a.add(d.fully_qualified_view_name);
                var f = [], g = function(a) {
                    var b = a._getState();
                    a === c && ufu("View depends on focused_element_id while computing default focus (see comment for instructions)", d.fully_qualified_view_name, prettyHint(f, 1));
                    b.auto_inputs.forEach(function(a) {
                        f.push(a);
                        g(a);
                        f.pop()
                    })
                };
                env.frp.runWithOnPeeked(g, function() {
                    d.defaultFocusAndSelection()
                })
            }
        });
        var d = [];
        b.size() > 0 && View.allInUseViews().forEach(function(a) {
            b.contains(a.fully_qualified_view_name) && d.push(a)
        })
    });
    return null
}), _runWithActiveView:function(a, b, c) {
    if(!Flags.diagnostics_check_handler_lvalues) {
        return c()
    }
    var d = null, e, f = JavaScriptRvalue.create({computeValue:function() {
        if(this.getCachedXvalue() !== void 0) {
            return View._junk_return_value
        }
        try {
            return e = c(), Flags.diagnostics_do_expensive_error_checking && b && (View.allInUseViews().add(e), View.registerToCheckViews()), null
        }catch(a) {
            if(a instanceof ValueIsUnknownError) {
                return d = a, null
            }else {
                throw a;
            }
        }
    }, onUnused:function() {
        Flags.diagnostics_do_expensive_error_checking && b && View.allInUseViews().remove(e)
    }, name:"View_runFuncWithTracking" + c.name});
    f.setAsSafelyPeekableByAncestor();
    f._setAsExemptFromPeekConsistencyChecks();
    f.handler_data__view = a;
    f.handler_data__in_constructor = b;
    f.handler_data__func = c;
    f.getXvalueAllowingUnknown();
    if(d === null) {
        return e
    }else {
        throw d;
    }
}, _runWithHandlingView:function(a, b) {
    var c = View.handling_view;
    View.handling_view = a;
    try {
        return Flags.diagnostics_check_handler_lvalues && a !== null && env.datastore_manager.isRunningHandler() ? env.frp.runWithOnPeeked(View._onRvaluePeekedInHandler, b) : b()
    }finally {
        View.handling_view = c
    }
}, _onRvaluePeekedInHandler:function(a) {
    View.handling_view !== null && (a._getState().auto_inputs.forEach(function(a) {
        View._onRvaluePeekedInHandler(a)
    }), a instanceof DatastoreScalarLvalue && View._assertDslvalueIsOkForHandlingView(a))
}, _assertDslvalueIsOkForHandlingView:function(a) {
    if(!View._isDslvalueExemptFromUsageRequirements(a)) {
        var b = Set.create(), c = Set.create();
        View._addAllowedViewsForRvalue(b, c, a);
        if(a.element_id !== IDatastoreAddress.ELEMENT_ID_SCALAR) {
            var d = a.object.getX(a.property_name);
            View._addAllowedViewsForRvalue(b, c, d)
        }
        c.contains(View.handling_view) || ufu("Attempt to read an unsafe rvalue during a handler", "dslvalue", prettyHint(a, 0), "view", prettyHint(View.handling_view, 0), "allowed_views", prettyHint(c, 2))
    }
}, _isDslvalueExemptFromUsageRequirements:function(a) {
    if(a.preloaded || a.property_name === StateObject.PropertyName.TYPE_ID || env.datastoreForObjectId(a.object_id) === env.session_store || env.datastore_manager._current_action.previous_datastore_value_map.containsKey(a)) {
        return!0
    }
    var b = !1;
    env.datastore_manager._current_action.previous_datastore_value_map.forEach(function(c) {
        if((c.object_id === a.object_id || c.object_id === a.element_id) && c.property_name === StateObject.PropertyName.TYPE_ID) {
            b = !0
        }
    });
    if(b) {
        return!0
    }
    return!1
}, _addAllowedViewsForRvalue:function(a, b, c) {
    if(!a.contains(c)) {
        a.add(c);
        var d = View._viewForRvalue(c, !1);
        d !== null && b.add(d);
        c._getState().dependents.forEach(function(c) {
            View._addAllowedViewsForRvalue(a, b, c)
        })
    }
}, _viewForRvalue:function(a, b) {
    for(var c = a;c !== null;) {
        if(c.handler_data__view !== void 0) {
            if(c === a || !c.handler_data__in_constructor || b) {
                return c.handler_data__view
            }else {
                break
            }
        }
        c = c._parent
    }
    return null
}, _junk_return_value:makeUniqueValue("View._junk_return_value")}, {_ui_context:ATTRIBUTE_REQUIRED, view_name:null, fully_qualified_view_name:SET_IN_CONSTRUCTOR, namespace:null, parent_view:null, constructor:function(a) {
    if(Flags.diagnostics_check_handler_lvalues) {
        EvaluationContext.getTopRvalue().handler_data__view = this
    }
    if(this.session === ATTRIBUTE_REQUIRED && !a.session) {
        a.session = env.realAppSession()
    }
    View.superproto.constructor.call(this);
    "_ui_context" in a || ufu("Create views using your view's createView method");
    updateWithAttributes(this, a);
    if(this.view_name === null) {
        this.view_name = this.__type_name, this.model && this.model.global_id !== void 0 ? this.view_name += "." + this.model.global_id : this.id && (this.view_name += "." + this.id)
    }
    this.fully_qualified_view_name = this.parent_view === null ? this.view_name : this.namespace === null ? [this.parent_view.fully_qualified_view_name, this.view_name].join("/") : [this.parent_view.fully_qualified_view_name, "#", this.namespace, "/", this.view_name].join("");
    if(this.__type.State !== void 0 && SessionObject2.isSuperclassOf(this.__type.State)) {
        this._state = env.session_store.sessionObject2(this.__type.State, this.fully_qualified_view_name), this._state.view = this, this._state.touch()
    }
}, createView:function(a, b) {
    if(Flags.diagnostics_trace_view_recreation) {
        var c = EvaluationContext.getTopRvalue();
        if(c !== null) {
            if(c.created_view_classes === void 0) {
                c.created_view_classes = Set.create()
            }
            var d = fastGetJsStackTrace();
            d.view = a;
            c.created_view_classes.add(d)
        }
    }
    return a.create(update({_ui_context:this._ui_context, parent_view:this}, b))
}, render:function() {
    var a = this, b = arguments;
    return View._runWithActiveView(a, !1, function() {
        return a._render.apply(a, b)
    })
}, clearViewStateWithinNamespace:function(a) {
    var b = this.fully_qualified_view_name;
    a !== void 0 && (b += "#" + a);
    b += "/";
    env.datastore_manager.enactChange(ClearViewStateWithPrefixChange.create({prefix:b}))
}, defaultFocusAndSelection:function() {
    return{focused_element_id:null, selection_start:null, selection_end:null}
}, _registerDisplayChangeCallback:function(a, b) {
    var c = null;
    ElementDimensionsLvalue.create({name:"View._registerDisplayChangeCallback", element:null, func:function() {
        c === null && (c = safeTimeout(function() {
            c = null;
            processHandler(a)
        }, b));
        return!0
    }, _onUnused:function() {
        c !== null && (safeClearTimeout(c), c = null)
    }}).watchScalar(noop)
}, _render:ABSTRACT});
View.prototype.__defineGetter__("browser", function() {
    return this._ui_context.browser
});
View.prototype.__defineGetter__("user", function() {
    return this._ui_context.user
});
View.staticConstructor = function(a) {
    a.create = a.superclass.create;
    if(a.State === void 0 && a.superclass.State !== void 0) {
        a.State = a.superclass.State
    }
};
define("ClearViewStateWithPrefixChange", Change.subclass("ClearViewStateWithPrefixChange", {}, {prefix:ATTRIBUTE_REQUIRED, enact:function() {
    var a = IDatastoreAddress.SESSION_OBJECT2_ID_PREFIX + this.prefix, b = [];
    env.session_store.forEachCachedValue(function(c) {
        c.object_id.startsWith(a) && b.push(c)
    });
    env.session_store.removeValues(b)
}, taintedObjectIds:function() {
    return[]
}}));
__FILE__ = "apps/asana/model/domain_invite.js";
DomainInvite = Registration.subclass("DomainInvite", {property_descs:{invite_domain:{type:Domain, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, active:{type:Boolean, isWriteableBy:Asana.AccessControl.domainInviteActiveIsWriteable}, is_guest:{type:Boolean, default_value:!1, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, created_domain_user:{type:DomainUser}, send_invite_email:{type:Boolean, default_value:!0}}, create:attributedValueFunc({creator:ATTRIBUTE_REQUIRED, invite_domain:ATTRIBUTE_REQUIRED,
    invited_name:ATTRIBUTE_REQUIRED, invited_email:ATTRIBUTE_REQUIRED, invite_message:null, is_guest:!1, active:!0, send_invite_email:!0}, function(a) {
    View.runWithoutLvalueChecking(function() {
        a.invite_domain.canInviteMoreUsers() || ufu("Can't create more users for domain", a.invite_domain)
    });
    return env.world_store.createStateObject(DomainInvite, {created_domain_user:null, created_user:null, invite_domain:a.invite_domain, creator:a.creator, invited_email:Format.sanitizeEmailInput(a.invited_email), invite_message:a.invite_message, invited_name:a.invited_name, active:a.active, is_guest:a.is_guest, send_invite_email:a.send_invite_email})
}), findForDomainUser:function(a) {
    with(QueryBuilder) {
        a = queryForObjects(DomainInvite).where(scalarProperty("created_domain_user").eq(a).orders()).getOneObjectNonReactive("invite for domain_user")
    }
    return $v(a)
}, findByCreator:function(a) {
    with(QueryBuilder) {
        a = queryForObjects(DomainInvite).where(QueryBuilder.scalarProperty("creator").eq(a)).withoutAccessControl().getQueryRvalue("invites created by user")
    }
    return $v(a)
}}, {inviteType:function() {
    return this.inviteDomain().isGlobal() ? ServerUrl.EmailTypeToTrackId.GLOBAL_DOMAIN_INVITE : this.isGuest() ? ServerUrl.EmailTypeToTrackId.GUEST_DOMAIN_INVITE : ServerUrl.EmailTypeToTrackId.DOMAIN_INVITE
}, _eventPrefix:function() {
    return ServerUrl.EmailTrackIdToLogName[this.inviteType()]
}, logEvent:function(a, b) {
    var c = {name:this._eventPrefix() + "-" + a, invite:this, creator:this.creator(), domain:this.inviteDomain(), invited_email:this.invitedEmail(), invite_ui_source:this.inviteUiSource(), inviter_nps:this.inviterNps(), invite_ui_type:this.inviteUiType(), is_custom_invite_message:this.isCustomInviteMessage()};
    b && update(c, b);
    logEvent(c)
}, userCreationSource:function() {
    return this.inviteDomain().isGlobal() ? User.CreationSource.PERSONAL_PROJECTS : this.isGuest() ? User.CreationSource.GUEST_INVITE : User.CreationSource.DOMAIN_INVITE
}, _computeIsVisibleBy:function(a) {
    return this.userIsActiveInDomain(a)
}, userIsActiveInDomain:function(a) {
    return this.inviteDomain().isActiveUser(a)
}, claimedUser:function() {
    var a = this.createdDomainUser().user();
    return a.isClaimed() ? a : null
}, isCancelled:function() {
    return!this.createdDomainUser().active()
}, _afterOnServerCreate:function() {
    var a = this.inviteDomain(), b = this.invitedEmail(), c = VerifiedEmail.findByEmailOnServerWithoutAC(b), d = c === null ? User.findByEmailOnServerWithoutAC(b) : c.user(), e, f = !1, g = !this.isGuest();
    d ? (e = d, f = a.hasActiveUser(d)) : e = User.create({name:this.invitedName(), email:b, creation_source:this.userCreationSource()});
    a.isGlobal() ? c = e.globalDomainUser() : (f && (g = g || a.findDomainUser(e).isInternal()), c = a.addUser({user:e, notification_verified_email:c, is_guest:!g}), !ExperimentalFeature.enabled("expose_teams", a) && a.teams().size() === 1 && a.onlyTeam().addTeamMember({domain_user:c, limited_access:!g}));
    this.setCreatedDomainUser(c);
    this.creator() && this.creator().domainUserForDomainOrNull(a) && this.creator().domainUserForDomain(a).addContactWithoutAC(c, b);
    d && d.isClaimed() ? (this.setActive(!1), !f && this.sendInviteEmail() && (this.scheduleDomainInviteEmail(c), this.logEvent("ExistingUser-Enqueued")), a = "ExistingUser") : (this.sendInviteEmail() && (this.scheduleDomainInviteEmail(), this.logEvent("NewUser-Enqueued")), a = "NewUser");
    this.logEvent(a, {sent_email:this.sendInviteEmail()})
}, scheduleDomainInviteEmail:function(a) {
    var b;
    a ? (a = a.getV("task_list"), b = a.getPermalinkForContextList(a), a = this._eventPrefix() + "-ExistingUser-Sent") : (b = this.relevantHandlerUrl(), a = this._eventPrefix() + "-NewUser-Sent");
    var c = this.inviteDomain(), d = this.creator(), e = d ? d.name() : "", f = d ? d.firstName() : "", g, h = c.activated() && !c.isGlobal();
    g = d && h ? this.isGuest() ? c.name() + " has shared projects with you on Asana" : e + " invited you to " + c.name() + " on Asana" : d ? e + " welcomes you to Asana" : "Someone invited you to " + c.name() + " on Asana";
    var i;
    i = d && h ? {emphasis_part:c.name(), regular_part:" is getting organized on Asana"} : d ? {emphasis_part:e, regular_part:" is getting organized on Asana"} : {emphasis_part:c.name(), regular_part:" is ready to go on Asana"};
    var j = this.isGuest() ? "the team" : "your team", f = this.inviteDomain().isGlobal() ? d ? "Join " + f + " by clicking below." : "Get started by clicking below." : d ? "Join " + f + " and the rest of " + j + " by clicking below." : "Get your team started by clicking below.", c = h ? "Join " + c.name() + " Now" : "Join Asana Now";
    b = EmailTemplate.create({template_name:"domain_invite_email", template_data:{subject:g, headline:i, subline:f, cta:c, atm_url_or_signup_link:b, invite_message:this.inviteMessage(), tracking_image_url:ServerUrl.emailTrackingImageUrl(this.global_id, this.inviteType())}}).render();
    d = d ? ServerEmailUtils.noReplyAddress(e + " via Asana") : ServerEmailUtils.noReplyAddress();
    EmailMessage.create(update(b, {from_address:d, to_address:EmailAddress.create(this.getV("invited_email"), this.getV("invited_name")), message_id:this.global_id, reply_to_email:null, event_name:a, extra_event_attributes:{invite:this.global_id}})).scheduleDelivery()
}, relevantHandlerUrl:function() {
    var a = User.findByEmailOnServerWithoutAC(this.getV("invited_email"));
    return this.urlForHandler(a !== null && a.isClaimed() ? "join" : "register")
}, _recordAccessLinkClicked:function() {
    this.logEvent("Clicked")
}, runBeforeLogin:function(a, b) {
    var c = this.createdDomainUser().user();
    a !== c && a.merge(c);
    this.setActive(!1);
    if((c = VerifiedEmail.findByEmailOnServerWithoutAC(this.invitedEmail())) && c.taskCreationDomainUser() === null) {
        var d = a.domainUserForDomain(this.inviteDomain());
        c.setTaskCreationDomainUser(d)
    }
    b && (a.makeDomainDefault(this.inviteDomain()), this.logEvent("Accepted", {user:a, created_user:a}))
}});
__FILE__ = "apps/asana/model/signup.js";
Signup = Registration.subclass("Signup", {property_descs:{active:{type:Boolean, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, accepted_using_google_auth:{type:Boolean, isWriteableBy:StateObject.Property.READ_ONLY, default_value:!1}}, create:attributedValueFunc({name:ATTRIBUTE_REQUIRED, email:ATTRIBUTE_REQUIRED}, function(a) {
    a = env.world_store.createStateObject(Signup, {created_user:null, creator:null, invited_email:a.email, invited_name:a.name, active:!0});
    logEvent({name:"Signup-Creation", invite:a});
    return a
}), findByEmail:function(a) {
    return $v(QueryBuilder.queryForObjects(Signup).usingIndex(Registration.getIndexByName("Registration.invited_email")).where(QueryBuilder.scalarProperty("invited_email").eq(a)).getOneObjectNonReactive("signup by email"))
}}, {userCreationSource:function() {
    return this.acceptedUsingGoogleAuth() ? User.CreationSource.SIGNUP_GOOGLE_AUTH : User.CreationSource.SIGNUP
}, runBeforeLogin:function(a, b) {
    b && (this.setCreatedUser(a), logEvent({name:this.acceptedUsingGoogleAuth() ? "Signup-Accepted-UsingGoogleAuth" : "Signup-Accepted", user:a, invite:this}), a.hasNonPersonalWorkspace() || a.createFirstDomain())
}, _recordAccessLinkClicked:function() {
    logEvent({name:"Signup-Clicked", invite:this})
}, _computeIsVisibleBy:function() {
    return!1
}});
__FILE__ = "apps/asana/model/workspace_link_invite.js";
WorkspaceLinkInviteStatus = {INVITE_ACCEPTED:"invite_accepted", INVITE_INVALID:"invite_invalid", LIMIT_REACHED:"limit_reached", DEPRECATED:"deprecated"};
WorkspaceLinkInvite = Registration.subclass("WorkspaceLinkInvite", {property_descs:{invite_domain:{type:Domain, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, active:{type:Boolean, isWriteableBy:Asana.AccessControl.domainInviteActiveIsWriteable}, created_domain_user:{type:DomainUser}}, create:attributedValueFunc({creator:null, invite_domain:ATTRIBUTE_REQUIRED, invited_name:"", invited_email:"", active:!0}, function(a) {
    ufu("Workspace invite links are deprecated and should no longer be created");
    View.runWithoutLvalueChecking(function() {
        a.invite_domain.canInviteMoreUsers() || ufu("Can't create more users for domain", a.invite_domain)
    });
    return env.world_store.createStateObject(WorkspaceLinkInvite, {created_domain_user:null, created_user:null, invite_domain:a.invite_domain, creator:a.creator, invited_email:Format.sanitizeEmailInput(a.invited_email), invited_name:a.invited_name, active:a.active})
})}, {userCreationSource:function() {
    return User.CreationSource.WORKSPACE_LINK_INVITE
}, _computeIsVisibleBy:function(a) {
    return this.inviteDomain().isActiveUser(a)
}, claimedUser:function() {
    var a = this.createdDomainUser();
    if(a === null) {
        return null
    }
    a = a.user();
    return a.isClaimed() ? a : null
}, isCancelled:function() {
    var a = this.createdDomainUser();
    return a && !a.active()
}, _afterOnServerCreate:function() {
    ufu("WorkspaceLinkInvited has been deprecated, and it should be impossible to create them.");
    logEvent({name:"WorkspaceLinkInviteCreation", invite:this, domain:this.inviteDomain()})
}, relevantHandlerUrl:function() {
    return this.urlForHandler(User.findByEmailOnServerWithoutAC(this.invitedEmail()).isClaimed() ? "join" : "register")
}, _recordAccessLinkClicked:function() {
    logEvent({name:"WorkspaceLinkInviteClicked", creator:this.creator(), invite:this})
}, runBeforeLogin:function(a, b) {
    var c = this.inviteDomain();
    this.createdDomainUser() || this.setCreatedDomainUser(c.addFullMember(a));
    this.setActive(!1);
    b && logEvent({name:"WorkspaceLinkInviteAccepted", domain:this.inviteDomain(), invite:this, user:a, creator:this.creator()})
}});
__FILE__ = "apps/asana/model/share_link_invite.js";
ShareLinkInvite = Registration.subclass("ShareLinkInvite", {property_descs:{shared_object:{type:StateObject, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, active:{type:Boolean, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}}, create:attributedValueFunc({creator:ATTRIBUTE_REQUIRED, invited_name:ATTRIBUTE_REQUIRED, invited_email:ATTRIBUTE_REQUIRED, shared_object:ATTRIBUTE_REQUIRED}, function(a) {
    return env.world_store.createStateObject(ShareLinkInvite, {created_user:null, creator:a.creator, invited_email:Format.sanitizeEmailInput(a.invited_email), invited_name:a.invited_name, invite_ui_source:Registration.InviteUiSource.LINK, shared_object:a.shared_object, active:!0})
})}, {userCreationSource:function() {
    return User.CreationSource.SHARE_LINK_INVITE
}, _computeIsVisibleBy:function() {
    return!1
}, isCancelled:function() {
    return!this.active()
}, _afterOnServerCreate:function() {
    this._logEvent("ShareLinkInviteCreation")
}, relevantHandlerUrl:function() {
    var a = User.findByEmailOnServerWithoutAC(this.getV("invited_email"));
    return this.urlForHandler(a !== null && a.isClaimed() ? "join" : "register")
}, _recordAccessLinkClicked:function() {
    this._logEvent("ShareLinkInviteClicked")
}, runBeforeLogin:function(a, b) {
    this.sharedObject().onNavigateToSharedWithLink(a);
    b && this._logEvent("ShareLinkInviteAccepted", {user:a})
}, _logEvent:function(a, b) {
    logEvent(update({name:a, invite:this, creator:this.creator(), shared_object:this.sharedObject(), shared_object_type:this.sharedObject().__type_name}, b))
}});
__FILE__ = "apps/asana/model/team_membership.js";
TeamMembership = StateObject.subclass("TeamMembership", [IGroupAccess], {property_descs:{team:{type:Team, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE, preloaded:!0, backpropagates:!0}, member:{type:DomainUser, isWriteableBy:function(a, b) {
    if(!a.isNew()) {
        return!1
    }
    return b.isBlessedToContact(a.member().user())
}, preloaded:!0}, collapsed:{type:Boolean, default_value:!1, isWriteableBy:function(a, b) {
    return a.isNew() || a.member().user() === b
}}, limited_access:{type:Boolean, preloaded:!0, track_initial_value:!0, isWriteableBy:function(a, b, c) {
    if(!a.isNew() && a.initialValue("limited_access") === $v(c)) {
        return!0
    }
    if(a.member().user() === b) {
        return a.team().isNew() ? !0 : a.isNew() ? !1 : $v(c)
    }
    return b.domainUserForDomain(a.team().domain()).teamMembershipForTeamOrNull(a.team()).limitedAccess() ? $v(limited_access) && a.isNew() : !0
}}}, index_descs:{team_membership_is_unique:{keys:["member", "team", StateObject.PropertyName.TRASHED_AT], unique:!0}}, create:attributedValueFunc({team:ATTRIBUTE_REQUIRED, member:ATTRIBUTE_REQUIRED, limited_access:ATTRIBUTE_REQUIRED}, function(a) {
    assertEq(a.team.domain(), a.member.domain());
    return env.world_store.createStateObject(TeamMembership, a)
})}, {projectsModel:computedProperty("projectsModel", function() {
    return DomainPotsModel.create({domain_user:this.member(), is_project:!0, team:this.team(), initial_pots_to_load:Domain.POTS_TO_LOAD_INITIALLY})
}), canSeePublicData:function() {
    return!this.limitedAccess()
}, canAdminAccess:function() {
    return!this.limitedAccess()
}, projectMembershipsR:Memoize.memoizeInThis("projectMembershipsR", function() {
    return QueryBuilder.queryForObjects(ProjectMembership).where(QueryBuilder.scalarProperty("team_membership").eq(this).orders()).getQueryRvalue("TeamMembership.projectMemberships").setAsSafelyPeekableByAncestor()
}), _computeIsVisibleBy:function(a) {
    var b = this.memberOrUnknown();
    if(!isKnown(b)) {
        return!1
    }
    if(b.user() === a) {
        return!0
    }
    b = this.teamOrUnknown();
    if(!isKnown(b)) {
        return!1
    }
    return b.isVisibleBy(a)
}, _areTrashPropertiesWriteableBy:function(a) {
    if(a === this.member().user()) {
        return this.isTrashed()
    }
    a = a.domainUserForDomainOrNull(this.team().domain());
    if(!a) {
        return!1
    }
    return(a = a.teamMembershipForTeamOrNull(this.team())) && a.canAdminAccess()
}});
__FILE__ = "apps/asana/model/project_membership.js";
ProjectMembership = StateObject.subclass("ProjectMembership", {property_descs:{project:{type:Pot, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE, preloaded:!0, allow_trashed_values:!0, backpropagates:!0}, member:{type:DomainUser, isWriteableBy:function(a, b) {
    if(!a.isNew()) {
        return!1
    }
    return b.isBlessedToContact(a.member().user())
}, preloaded:!0}, team_membership:{type:TeamMembership, default_value:null, preloaded:!0, allow_trashed_values:!0}, active:{type:Boolean, isWriteableBy:function(a, b, c) {
    a = a.project();
    if(!b.domainUserForDomain(a.domain()).groupAccessForPotOrNull(a).canAdminAccess()) {
        return $v(c)
    }
    return!0
}, preloaded:!0, track_initial_value:!0}}, index_descs:{project_membership_is_unique:{keys:["member", "project", StateObject.PropertyName.TRASHED_AT], unique:!0}}, create:attributedValueFunc({project:ATTRIBUTE_REQUIRED, member:ATTRIBUTE_REQUIRED, team_membership:ATTRIBUTE_REQUIRED, active:!0}, function(a) {
    assertEq(a.project.domain(), a.member.domain());
    return env.world_store.createStateObject(ProjectMembership, a)
})}, {_computeIsVisibleBy:function(a) {
    return this.member().user() === a ? !0 : this.projectOrUnknown() instanceof UnknownValue.AccessDenied ? !1 : this.project().isVisibleBy(a)
}, active:function() {
    ufu("You almost always want to check isActive instead so that you canalso ensure the user hasn't been removed from the Team or Network")
}, isActive:function() {
    return this.getV("active") && (this.teamMembership() === null || !this.teamMembership().isTrashed()) && this.member().active()
}, validate:function(a) {
    ProjectMembership.superproto.validate.call(this, a);
    this.isTrashed() || (this.project().team() ? (assertNotNull(this.teamMembership()), assertEq(this.member(), this.teamMembership().member()), assertEq(this.project().team(), this.teamMembership().team())) : assertEq(null, this.teamMembership()))
}, _areTrashPropertiesWriteableBy:function() {
    return this.isTrashed() === (isUnknown(this.projectOrUnknown()) || this.project().isTrashed())
}, deliverLostAccessEmail:function(a) {
    var a = a.user(), b = EmailTemplate.create({template_name:"generic_notification_email"}), c = this.project(), d = {primary_message:'You no longer have access to the project "' + c.name() + '" in the ' + c.domain().name() + " Workspace.", secondary_message:"Please contact your teammate if you believe there has been an error.", is_dark_account:!this.member().user().isClaimed()}, b = {body_text:b.renderPartialTemplate("textBody", d), body_html:b.renderPartialTemplate("htmlBody", d)};
    EmailMessage.create(update(b, {from_address:ServerEmailUtils.noReplyAddress(), to_address:EmailAddress.create(this.member().email(), this.member().name()), subject:a.name() + ' removed your access to "' + c.name() + '"'})).deliver();
    logEvent({name:"ProjectLostAccessEmail"})
}, sendShareEmail:function(a) {
    var a = a.user(), b = EmailTemplate.create({template_name:"project_share_email"}), c = this.project().members().map(function(a) {
        return a.name()
    }), d = this.project().followersDuL().containsObject(this.member()), e = CommentNotifier._renderFollowUri(this.project(), this.member(), !d), f = this.project().getPermalink(this.member()), c = {member_names:c, sharer_name:a.name(), project_name:this.project().name(), is_dark_account:!this.member().user().isClaimed(), description:this.project().description(), is_following:d, view_uri:f, follow_uri:e}, b = {body_text:b.renderPartialTemplate("textBody", c), body_html:b.renderPartialTemplate("htmlBody",
        c)};
    EmailMessage.create(update(b, {from_address:ServerEmailUtils.noReplyAddress(), to_address:EmailAddress.create(this.member().email(), this.member().name()), subject:a.name() + ' shared "' + this.project().name() + '" with you'})).scheduleDelivery();
    logEvent({name:"ProjectShareEmail"})
}});
ShareProjectChange = define("ShareProjectChange", Change.subclass("ShareProjectChange", {}, {actor:ATTRIBUTE_REQUIRED, membership:ATTRIBUTE_REQUIRED, enact:function() {
    env.is_server && this.actor.user() !== this.membership.member().user() && (this.membership.sendShareEmail(this.actor), this.membership.project().addStoryOfSubtype(ProjectShareStory, {creator_du:this.actor, receiver_du:this.membership.member()}))
}, taintedObjectIds:function() {
    return[this.membership.global_id, this.actor.global_id]
}}));
FlagSystem.defineInt({name:"project_lost_access_email_delay", default_value:6E4, help:"Number of milliseconds to wait before sending a project lost accessemail after access has been revoked in the UI."});
ProjectLostAccessChange = define("ProjectLostAccessChange", Change.subclass("ProjectLostAccessChange", {}, {actor:ATTRIBUTE_REQUIRED, membership:ATTRIBUTE_REQUIRED, enact:function() {
    env.is_server && this.actor.user() !== this.membership.member().user() && env.remote_job_store.addJob(ProjectLostAccessEmailRemoteJob.create({actor:this.actor.global_id, membership:this.membership.global_id}), env.clock.now() + Flags.project_lost_access_email_delay)
}, taintedObjectIds:function() {
    return[this.membership.global_id, this.actor.global_id]
}}));
__FILE__ = "luna/common/uri.js";
FlagSystem.defineString({name:"secure_web_host_port", help:"Host and port for secure portions of the web app service.", send_to_client:!0});
FlagSystem.defineString({name:"insecure_web_host_port", help:"Host and port for insecure portions of the web app service.", send_to_client:!0});
URI = define("URI", AsanaObject.subclass("URI", {parseQuery:function(a) {
    return a ? OMap.create(a.split("&").map(function(a) {
        var c = a.indexOf("=");
        if(c === -1) {
            var d = a, a = ""
        }else {
            d = a.substring(0, c), a = a.substring(c + 1)
        }
        return[d, a].map(URI.decodeComponent)
    })) : OMap.create()
}, parse:function(a) {
    var b = a.match(/^(\w+)\:\/\/(?:([^@]*)@)?([\w\.\-]*)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?/);
    if(!b) {
        return null
    }
    var c = URI.parseQuery(b[6]);
    return URI.create({scheme:b[1] || "", userinfo:b[2] || "", hostname:b[3] || "", port:b[4] !== null ? parseInt(b[4], 10) : 80, path:b[5] ? URI.decodeComponent(b[5]).split("/") : [], query:c, fragment:URI.decodeComponent(b[7] || ""), original:a})
}, encodeComponent:encodeURIComponent, decodeComponent:decodeURIComponent, buildQueryString:function(a) {
    return Map.mapEntries(a, function(a, c) {
        return URI.encodeComponent(a) + (c ? "=" + URI.encodeComponent(c) : "")
    }).join("&")
}, buildQueryStringNoEncoding:function(a, b, c) {
    var d = b === void 0 ? "=" : b;
    return Map.mapEntries(a, function(a, b) {
        return a + (b ? d + b : "")
    }).join(c === void 0 ? "&" : c)
}, appendQuery:function(a, b) {
    var c = a.indexOf("?"), d = URI.buildQueryString(b);
    return d.length === 0 ? a : c === -1 ? a + "?" + d : c === a.length - 1 ? a + d : a + "&" + d
}}, {scheme:ATTRIBUTE_REQUIRED, userinfo:null, hostname:ATTRIBUTE_REQUIRED, port:null, path:null, query:SET_IN_CONSTRUCTOR, fragment:null, original:null, constructor:function(a) {
    URI.superproto.constructor.call(this);
    updateWithAttributes(this, a);
    if(this.query === SET_IN_CONSTRUCTOR) {
        this.query = Map.create()
    }
}, toString:function() {
    return this.original || this.stringify()
}, stringify:function() {
    return this.scheme + ":" + this.getHierarchicalString() + this.getQueryAndFragmentString()
}, getRelativePathString:function() {
    return this.getPathString() + this.getQueryAndFragmentString()
}, getQueryAndFragmentString:function() {
    var a = this.getQueryString(), b = this.fragment;
    return(a ? "?" + a : "") + (b ? "#" + URI.encodeComponent(b) : "")
}, getHierarchicalString:function() {
    return"//" + this.getAuthorityString() + this.getPathString()
}, getAuthorityString:function() {
    var a = this.userinfo;
    return(a ? a + "@" : "") + this.getHostPort()
}, getHostPort:function() {
    var a = this.port;
    return this.hostname + (a === 0 || a && a !== 80 ? ":" + a : "")
}, getPathString:function() {
    return"/" + (this.path ? this.path.join("/") : "")
}, getQueryString:function() {
    return URI.buildQueryString(this.query)
}, getRootString:function() {
    return this.scheme + "://" + this.getAuthorityString()
}, getEffectivePath:function() {
    var a = this.path;
    return a[0] === "app" ? a.slice(2) : a
}, getAppPath:function() {
    var a = this.path;
    return a[0] === "app" ? a.slice(0, 2) : []
}, origin:function() {
    return this.getRootString()
}}));
__FILE__ = "luna/common/common_url.js";
FlagSystem.defineString({name:"cloudfront_static_domain", help:"Domain name to use for cloudfront distribution of static assets", send_to_client:!0, default_value:""});
CommonUrl = {staticUrl:function(a) {
    return a.endsWith(".js") && Flags.enable_unsafe_static_js ? "/staticjs/" + a : Flags.diagnostics_preprocessed_individual_js && a.endsWith(".js") && !a.startsWith("3rdparty") ? "/-/static/build/preprocessed_js/" + a : Flags.s3_asset_distribution === !0 && Flags.cloudfront_static_domain !== "" && a.contains("build/bundles") ? CommonUrl._cloudfrontUrl(a) : "/-/static/" + a
}, _cloudfrontUrl:function(a) {
    globals.request.header("Accept-Encoding", "").split(",").indexOf("deflate") !== -1 && (a = "compressed/" + a);
    return"https://" + Flags.cloudfront_static_domain + "/" + env.getFlag("CLUSTER") + "/" + a
}};
__FILE__ = "apps/asana/model/duplicate_recurring_task_change.js";
DuplicateRecurringTaskChange = define("DuplicateRecurringTaskChange", Change.subclass("DuplicateRecurringTaskChange", {}, {task:ATTRIBUTE_REQUIRED, today_time_on_client:ATTRIBUTE_REQUIRED, enact:function() {
    if(env.is_server) {
        var a = null, b = Date.create(this.today_time_on_client);
        this.task.recurrenceType() !== Task.RecurrenceType.NEVER && (a = {task:this.task, domain:this.task.domain()}, logEvent(copyAndUpdate({name:"DuplicateRecurringTask"}, a)), logEvent(copyAndUpdate({name:"DuplicateRecurringTask-" + this.task.recurrenceType()}, a)));
        switch(this.task.recurrenceType()) {
            case Task.RecurrenceType.PERIODICALLY:
                a = Day.create(this.today_time_on_client).add(this.task.recursDaysAfterCompletion(), Date.Units.DAYS);
                break;
            case Task.RecurrenceType.DAILY:
                a = Day.create(this.today_time_on_client).succ(Date.Units.DAYS);
                if(this.task.dueDate()) {
                    for(;a.getTime() <= this.task.dueDate().getTime();) {
                        a.add(1, Date.Units.DAYS)
                    }
                }
                break;
            case Task.RecurrenceType.MONTHLY:
                var c = this.task.recursMonthlyOnDay();
                if(c < 29) {
                    if(a = b.clone(), a.setUTCDate(c), a.getTime() <= b.getTime() && (a = a.add(1, Date.Units.MONTHS)), this.task.dueDate()) {
                        for(;a.getTime() <= this.task.dueDate().getTime();) {
                            a.add(1, Date.Units.MONTHS)
                        }
                    }
                }else {
                    if(a = b.clone(), a.setUTCDate(1), a.add(1, Date.Units.MONTHS), a.setUTCDate(0), a.getTime() <= b.getTime() && (a.setUTCDate(1), a.add(2, Date.Units.MONTHS), a.setUTCDate(0)), this.task.dueDate()) {
                        for(;a.getTime() <= this.task.dueDate().getTime();) {
                            a.setUTCDate(1), a.add(2, Date.Units.MONTHS), a.setUTCDate(0)
                        }
                    }
                }
                break;
            case Task.RecurrenceType.WEEKLY:
                a = this.task.recursWeeklyOnDay() - b.getUTCDay();
                a <= 0 && (a += 7);
                a = b.clone().add(a, Date.Units.DAYS);
                if(this.task.dueDate()) {
                    for(;a.getTime() <= this.task.dueDate().getTime();) {
                        a.add(1, Date.Units.WEEKS)
                    }
                }
                break;
            case Task.RecurrenceType.YEARLY:
                a = Date.create(this.task.recursYearlyOnDay()).clone();
                a.setFullYear(b.getFullYear());
                (a.getTime() <= b.getTime() || this.task.dueDate() && a.getTime() <= this.task.dueDate().getTime()) && a.setFullYear(a.getFullYear() + 1);
                break;
            case Task.RecurrenceType.NEVER:
                return;
            default:
                host.recordWarning("invalid recurrence type", this.task.recurrenceType());
                return
        }
        b = this.task.duplicate({include_projects:!0, include_schedule_status:!0});
        this.task.setRecurrenceType(Task.RecurrenceType.NEVER);
        b.completedL().requestSet(0);
        b.setDueDateWithoutStory(a)
    }
}, taintedObjectIds:function() {
    return[this.task.global_id]
}}));
__FILE__ = "apps/asana/model/webhook.js";
Webhook = StateObject.subclass("Webhook", {property_descs:{parent:{type:StateObject, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, callback_url:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, last_notify_error:{type:String, default_value:""}, creator:{type:User, isWriteableBy:function(a, b, c) {
    return a.isNew() && $v(c) === b
}}}, create:attributedValueFunc({callback_url:ATTRIBUTE_REQUIRED, parent:ATTRIBUTE_REQUIRED, creator:null}, function(a) {
    return env.world_store.createStateObject(Webhook, {creator:a.creator || env.user(), callback_url:a.callback_url, parent:a.parent})
})}, {hasError:function() {
    return this.lastNotifyError() !== ""
}, notify:function() {
    assertEq(!0, env.datastore_manager.isRunningHandler());
    log.info("Notifying callback url", this.callbackUrl(), "of webhook", this.global_id);
    var a = Process.exec({command:"curl", cmd_args:["-XPOST", '-H"Content-type: application/json"', "--connect-timeout", "5", "--max-time", "10", "--fail", "-s", "-S", "--data-binary", "@-", this.callbackUrl()], input:JSON.stringify({})});
    if(a.err) {
        throw a = a.err.replace(/curl\: (?:\(\d+\))? /, ""), this.setLastNotifyError(a), new Webhook.CallbackUrlRequestError("Failed to notify webhook callback url: " + a);
    }else {
        this.setLastNotifyError("")
    }
}, _computeIsVisibleBy:function(a) {
    var b = this.parentOrUnknown();
    return isKnown(b) && b.isVisibleBy(a)
}, _areTrashPropertiesWriteableBy:function() {
    return!0
}});
Webhook.CallbackUrlRequestError = function(a) {
    this.name = "CallbackUrlRequestError";
    this.message = a
};
Webhook.CallbackUrlRequestError.prototype.toString = function() {
    return this.name + " " + this.message
};
__FILE__ = "apps/asana/model/ihas_webhooks.js";
FlagSystem.defineInt({name:"webhook_notification_delay", help:"The number of milliseconds to wait before notifying a webhook about a change", default_value:0});
IHasWebhooks = Interface.create("IHasWebhooks", [], {}, {webhooks:Association.hasMany({name:"webhooks", type_name:"Webhook", scalar_property_name:"parent"}), webhooksDescription:ABSTRACT, notifyWebhooks:function() {
    assert(env.is_server, "Webhook notification should only be done on the server.");
    env.remote_job_store.addJob(BatchWebhookNotifierRemoteJob.create({parent_id:this.global_id}), env.clock.now() + Flags.webhook_notification_delay)
}, createWebhook:attributedFunc({callback_url:ATTRIBUTE_REQUIRED, creator:null}, function(a) {
    return Webhook.create({callback_url:a.callback_url, creator:a.creator, parent:this})
})});
__FILE__ = "apps/asana/model/task.js";
Task = AsanaStateObject.subclass("Task", [IDescribable, IItemList, IDomainSpecific, INavigatable, INavigationTarget, IHasWebhooks], {MAX_TASK_DEPTH:4, property_descs:{__modification_time:{type:Timestamp, untimely:!0}, completed:{type:Timestamp, preloaded:!0, api_info:{field_name:"completed_at"}}, name:{type:String, preloaded:!0, untimely:!0, api_info:{field_name:"name"}}, task_type:{type:String, untimely:!0}, schedule_status:{type:String, preloaded:!0, api_info:{field_name:"assignee_status"}}, assigned_to:{type:PlaceholderType},
    domain:{type:Domain, isWriteableBy:Asana.AccessControl.domainPropertyIsWriteable, preloaded:!0}, tags:{type:PlaceholderType}, due_date:{type:Timestamp}, recurrence_type:{type:String, default_value:"NEVER"}, recurs_days_after_completion:{type:Integer, default_value:null}, recurs_monthly_on_day:{type:Integer, default_value:null}, recurs_weekly_on_day:{type:Integer, default_value:null}, recurs_yearly_on_day:{type:Timestamp, default_value:null}, description:{type:String, untimely:!0, api_info:{field_name:"notes"}},
    attachments:{type:List}, items:{type:List, isWriteableBy:Asana.AccessControl.itemsPropertyIsWriteable, track_initial_value:!0, api_info:{field_name:"subtask"}}, force_public_to_workspace:{type:Boolean, default_value:!1}, has_details:{type:Integer, default_value:2}, num_incomplete_subtasks:{type:Integer, default_value:0}}, multiAssign:function(a, b, c) {
    if(b === null) {
        Rvalue.forEachValue(a, function(a) {
            a.unassign(c)
        })
    }else {
        var d = b.getV("task_list");
        Rvalue.forEachValue(a, function(a) {
            a.assignTo(d, c)
        })
    }
}}, {_allow_task_type_change:!1, _makeXvalue:function(a) {
    switch(a) {
        case "assignee":
            return null;
        default:
            return Task.superproto._makeXvalue.call(this, a)
    }
}, isIndexed:function() {
    return!0
}, onBeforeChangeProperty:function(a, b) {
    Task.superproto.onBeforeChangeProperty.call(this, a, b);
    switch(a.property_name) {
        case "name":
            try {
                this._allow_task_type_change = !0, this.getX("task_type").requestSet(b.endsWith(Task.BAR_NAME_SUFFIX) ? Task.TaskType.BAR : Task.TaskType.TASK)
            }finally {
                this._allow_task_type_change = !1
            }
            break;
        case "task_type":
            this._allow_task_type_change || ufu("do not set task_type directly. Set task.name instead");
            break;
        case "items":
            env.world_store.object(a.element_id).findParent() !== this && this.taskDepth() > Task.MAX_TASK_DEPTH && ufu("Can not add subtasks to a task of depth" + Task.MAX_TASK_DEPTH + " or greater.")
    }
}, onAfterChangeProperty:function(a, b) {
    Task.superproto.onAfterChangeProperty.call(this, a, b);
    if(env.is_server && (["items", "description", "attachments"].contains(a.property_name) && this._invalidateHasMetadataCache(), ["items"].contains(a.property_name) && this.updateNumIncompleteSubtasks(), [StateObject.PropertyName.TRASHED_AT, "completed"].contains(a.property_name))) {
        var c = this.findParent();
        c && c.updateNumIncompleteSubtasks()
    }
}, onBeforeCommit:function(a) {
    Task.superproto.onBeforeCommit.call(this, a);
    Flags.enable_rest_api && env.is_server && !this.isNew() && a.contains(this.getX("completed")) && this.notifyWebhooks()
}, onBeforeTrashedOnServer:function() {
    var a = this;
    $v(a.getX("items")).toArray().forEach(function(b) {
        b.wouldBeOrphanedWithout(a) && b.trash()
    })
}, apiModel:Memoize.memoizeInThis("Task.apiModel", function() {
    var a = this;
    return Api.Model.create({name:function() {
        return"task"
    }, hasChangeEvents:function() {
        return!0
    }, objectId:function() {
        return a.global_id
    }, objectTypeId:function() {
        return env.type_registry.getTypeId(a.__type)
    }, changeEventTargetIds:function() {
        var b = [a.global_id];
        a._itemListsContainingThisR().matchingObjectIds().forEach(function(a) {
            b.push(a)
        });
        return b
    }, addChangeEventData:function(b) {
        b.workspace = {id:a.domain().global_id}
    }})
}), webhooksDescription:function() {
    return"Task Webhooks are notified whenever the completion status of the Task changes."
}, getAssigneesR:Memoize.memoizeInThis("getAssigneesR", function() {
    var a = this.getAssigneeListsR();
    return $rval(function() {
        return List.create($v(a).map(function(a) {
            return a.getV("assignee")
        }))
    }).setAsSafelyPeekableByAncestor()
}), getAssigneeListsR:Memoize.memoizeInThis("getAssigneeListsR", function(a) {
    a === void 0 && (a = !1);
    var b = this._itemListsContainingThisR();
    return $rval(function() {
        return List.create($v(b).filter(function(b) {
            if(b instanceof Pot) {
                var d = toValueAllowingUnknown(b.getX("assignee"));
                return isKnown(d) && d !== null && (a || b.getV("assignee").active())
            }else {
                return!1
            }
        }))
    })
}), getAssigneeOrNullR:Memoize.memoizeInThis("Task.getAssigneeOrNullR", function() {
    var a = this.getAssigneesR();
    return $rval(function() {
        return $v(a).firstValueOrNull()
    }).setAsSafelyPeekableByAncestor()
}), getAssigneeListOrNullR:Memoize.memoizeInThis("getAssigneeListOrNullR", function() {
    var a = this.getAssigneeListsR();
    return $rval(function() {
        return $v(a).firstValueOrNull()
    }).setAsSafelyPeekableByAncestor()
}), getAssigneeListOrNull:function() {
    return $v(this.getAssigneeListOrNullR())
}, getAssigneeOrNull:function() {
    var a = this.getAssigneesR();
    return $v(a).firstValueOrNull()
}, findParent:computedProperty("parent", function() {
    return $v(this._itemListsContainingThisR()).findValueOrNull(function(a) {
        return a instanceof Task
    })
}), hasParentOrUnknown:serverComputedPropertyAllowingUnknown("hasParentOrUnknown", function() {
    var a = this._itemListsContainingThisR().getQueryRvalue();
    return $v(a).any(function(a) {
        return a instanceof Task
    })
}), isAncestorOf:function(a) {
    for(a = a.findParent();a !== null;) {
        if(a === this) {
            return!0
        }
        a = a.findParent()
    }
    return!1
}, isDescendantOf:function(a) {
    return a.isAncestorOf(this)
}, isSubtask:function() {
    return this.findParent() !== null
}, hasSubtasksR:rvalueProperty("hasSubtasks", function() {
    return this.items().size() > 0
}), hasSubtasks:function() {
    return $v(this.hasSubtasksR())
}, addSubtask:function(a) {
    assertEq(null, a.findParent());
    this.itemsL().requestInsertBefore(a, null)
}, removeSubtask:function(a) {
    this.itemsL().containsObject(a) && this.itemsL().requestRemove(a)
}, rootAncestor:function() {
    var a = this.findParent();
    return a ? a.rootAncestor() : this
}, taskDepth:function() {
    for(var a = 1, b = this.findParent();b !== null;) {
        b = b.findParent(), a++
    }
    return a
}, canHaveSubtasks:function() {
    return this.taskDepth() < Task.MAX_TASK_DEPTH
}, tagsX:Memoize.memoizeInThis("tagsX", function(a) {
    var b = this._itemListsContainingThisR();
    return $rval(function() {
        var c = $v(b).filter(function(b) {
            return b !== a && b instanceof Pot
        });
        return List.create(c.filter(function(a) {
            var b = toValueAllowingUnknown(a.getX("assignee")), a = toValueAllowingUnknown(a.getX("domain"));
            return isKnown(b) && b === null && isKnown(a) && a !== null
        }))
    }).setAsSafelyPeekableByAncestor()
}), pots:function() {
    return $v(this.tagsX())
}, projects:function() {
    var a = this.ownProjects(), b = this.inheritedProjects();
    return b.isEmpty() ? a : (a = OSet.create(a.toArray()), a.addAll(b.toArray()), a.values())
}, tags:function() {
    return $v(this.tagsX()).filter(function(a) {
        return!a.getV("is_project")
    })
}, ownProjects:function() {
    var a = this, b;
    View.runWithoutLvalueChecking(function() {
        b = $v(a.tagsX())
    });
    return b.filter(function(a) {
        return a.getV("is_project")
    })
}, inheritedProjects:computedProperty("inheritedProjects", function() {
    var a = this.findParent();
    return a !== null ? a.projects() : []
}), _itemListsContainingThisR:Memoize.memoizeInThis("_itemListsContainingThisR", function() {
    return QueryBuilder.queryForObjects(StateObject).where(QueryBuilder.listProperty("items").contains(this), QueryBuilder.scalarProperty(StateObject.PropertyName.TYPE_ID).eq(env.type_registry.getTypeId(Task)).or().eq(env.type_registry.getTypeId(Pot))).withMemcacheKey("listsThatContainTask:" + this.global_id).getQueryRvalue("Task._itemListsContainingThisR").setAsSafelyPeekableByAncestor()
}), subtasksL:function() {
    return this.itemsL()
}, dueDate:function() {
    return Day.fromLocalMidnightTimestamp(this.getV("due_date"))
}, dueDateL:function() {
    ufu("use setDueDate")
}, isCompleted:function() {
    return this.getV("completed") > 0
}, setCompleted:function(a, b, c) {
    assertInstanceof(b, DomainUser);
    var d = this, e = this.getV("completed") !== 0;
    a !== e && (a ? (e = $v(env.frp.chronometer.instant_time_rvalue), logEvent({name:"TaskCompletion", domain:this.domain(), task:this, completion_timestamp:e}), this.getX("completed").requestSet(e), c || this.addStoryOfSubtype(TaskCompletedComment, {creator_du:b}), env.datastore_manager.enactChange(DuplicateRecurringTaskChange.create({task:this, today_time_on_client:Day.todayInPotentiallyWrongTimezoneAllowedOnServer().getTime()}))) : (logEvent({name:"TaskUncompletion", domain:this.domain(), task:this,
        old_completion_timestamp:this.completed()}), this.getX("completed").requestSet(0), c || this.addStoryOfSubtype(TaskUncompletedComment, {creator_du:b})), !env.is_server && Flags.enable_unicorns_and_rainbows && !env.isMobile() && a && Random.integer({max:3}) === 0 && DynamicLoader.get().load({url:CommonUrl.staticUrl("apps/asana/view/asana_rainbow.js"), allow_cached:!1, callback:function(a, b) {
        b && AsanaRainbow.start(d.global_id)
    }}))
}, rawScheduleStatus:function() {
    return this.getV("schedule_status")
}, scheduleStatus:function() {
    var a = this.getV("schedule_status");
    return this.isCompleted() ? Task.ScheduleStatus.COMPLETED : a
}, setScheduleStatus:function(a) {
    var b = env.userOrNull();
    this._setScheduleStatus(a, b === null ? null : b.domainUserForDomain(this.domain()))
}, setScheduleStatusByUser:function(a, b) {
    this._setScheduleStatus(a, b.domainUserForDomain(this.domain()))
}, _setScheduleStatus:function(a, b) {
    var c = this.scheduleStatus();
    b !== null && assertInstanceof(b, DomainUser);
    if(c !== a) {
        logEvent({name:"TaskScheduleStatus", domain:this.domain(), task:this, old_status:c, status:a});
        c === Task.ScheduleStatus.TODAY && a !== Task.ScheduleStatus.TODAY ? this.addStoryOfSubtype(ToggleTodayComment, {creator_du:b, became_today:!1}) : c !== Task.ScheduleStatus.TODAY && a === Task.ScheduleStatus.TODAY && this.addStoryOfSubtype(ToggleTodayComment, {creator_du:b, became_today:!0});
        c = this.getAssigneeListOrNull();
        if(c !== null && (!this.isNew() || !c.getX("items").containsObject(this))) {
            a === Task.ScheduleStatus.UPCOMING ? c.getX("items").requestInsertAfter(this, null) : a === Task.ScheduleStatus.TODAY ? c.getX("items").requestInsertBefore(this, null) : c.getX("items").containsObject(this) || c.getX("items").requestInsertBefore(this, null)
        }
        assertNe(Task.ScheduleStatus.COMPLETED, a);
        this.scheduleStatusL().requestSet(a)
    }
}, addTag:function(a) {
    $v(this.tagsX()).contains(a) || a.insert(this)
}, removePot:function(a) {
    $v(this.tagsX()).contains(a) && (a.isUserTaskList() || this.addStoryOfSubtype(TaskRemovedFromListComment, {creator_du:env.user().domainUserForDomain(this.domain()), indirect_object:a}), this.removePotWithoutStory(a))
}, removePotWithoutStory:function(a) {
    var b = env.userOrNull();
    b && this.addFollowerWithoutStory(b.domainUserForDomain(this.domain()));
    a.getX("items").requestRemove(this)
}, addedToListStoryForPotOrNull:function(a) {
    return $v(this._addedToListStoriesForPotR(a)).firstValueOrNull()
}, _addedToListStoriesForPotR:Memoize.memoizeInThis("_addedToListStoriesForPotR", function(a) {
    return QueryBuilder.queryForObjects(TaskAddedToListComment).where(QueryBuilder.scalarProperty("parent_object").eq(this).orders(), QueryBuilder.scalarProperty("indirect_object").eq(a).orders()).getQueryRvalue("Task._addedToListStoriesForPotR").setAsSafelyPeekableByAncestor()
}), setDueDate:function(a, b) {
    var c = this.dueDate();
    if(!equals(c, a)) {
        var c = this.setDueDateWithoutStory(a), d = this.addStoryOfSubtype(TaskDueDateChangedStory, {creator_du:b, due_date:c});
        View.runWithoutLvalueChecking(function() {
            d.tryConsolidatingWithPrevious()
        })
    }
}, setDueDateWithoutStory:function(a) {
    a = a === null ? null : a.getTime();
    this.getX("due_date").requestSet(a);
    return a
}, onStoryCreatedOnServer:function(a) {
    Task.superproto.onStoryCreatedOnServer.call(this, a);
    a instanceof CommentStory && this._invalidateHasMetadataCache()
}, onStoryTrashedOnServer:function(a) {
    Task.superproto.onStoryTrashedOnServer.call(this, a);
    a instanceof CommentStory && this._invalidateHasMetadataCache()
}, onAttachmentTrashedOnServer:function() {
    this._invalidateHasMetadataCache()
}, assignTo:function(a, b) {
    var c = a.getV("assignee");
    c.active() || ufu("Can't assign task to user not in the domain", this, c, this.getV("domain"));
    var d = this.getAssigneeListOrNull();
    d !== a && (d = d === null ? null : d.assignee(), b.addContact(a.assignee()), this.assignToWithoutStory(a), c !== null && c !== b && logEvent({name:"TaskAssignedToSomeoneElse", old_assignee:this.getAssigneeOrNull(), assignee:c, domain:this.domain()}), assertInstanceof(b, DomainUser), assertInstanceof(c, DomainUser), this.addStoryOfSubtype(TaskAssignedComment, {creator_du:b, assignee_du:c, prev_assignee_du:d}))
}, assignToWithoutStory:function(a) {
    var b = this, c = a.getV("assignee");
    logEvent({name:"TaskAssignment", old_assignee:this.getAssigneeOrNull(), assignee:c, domain:b.domain()});
    $v(b.getAssigneeListsR(!0)).forEachValue(function(a) {
        b.unassignFromWithoutStory(a)
    });
    a.getX("items").requestInsertBefore(this, null);
    assertInstanceof(c, DomainUser);
    b.addFollowerWithoutStory(c);
    b.setScheduleStatus(Task.ScheduleStatus.NEW)
}, unassign:function(a) {
    var b = this;
    $v(this.getAssigneesR()).forEach(function(c) {
        b.unassignFrom(c.taskList(), a)
    })
}, unassignFrom:function(a, b) {
    var c = a.assignee();
    assertInstanceof(b, DomainUser);
    c = {creator_du:b, unassignee_du:c};
    this.unassignFromWithoutStory(a);
    this.addStoryOfSubtype(TaskUnassignedComment, c)
}, unassignFromWithoutStory:function(a) {
    logEvent({name:"TaskUnassignment", old_assignee:this.getAssigneeOrNull(), domain:this.domain()});
    var b = a.assignee();
    b.user() === env.userOrNull() && this.addFollowerWithoutStory(b);
    a.getX("items").requestRemove(this);
    this.setScheduleStatus(Task.ScheduleStatus.OK)
}, duplicate:attributedFunc({domain:null, user:null, include_description:!0, include_assignee:!0, include_subtasks:!0, include_tags:!0, include_followers:!0, include_projects:!1, include_due_date:!1, include_schedule_status:!1}, function(a) {
    var b = this, c = a.user === null ? env.user() : a.user, d = a.domain === null ? b.domain() : a.domain;
    d !== b.domain() && (a.include_assignee || a.include_tags || a.include_followers || a.include_projects) && ufu("Most meta-data cannot be duplicated if you are duplicating a task across domains");
    var e = b.__type.create({creator_du:c.domainUserForDomain(d), name:b.name(), description:a.include_description ? b.description() : "", completed:b.completed(), domain:d, followers_du:a.include_followers ? b.followersDu() : null});
    e.setRecurrenceType(b.recurrenceType());
    e.setRecursDaysAfterCompletion(b.recursDaysAfterCompletion());
    e.setRecursMonthlyOnDay(b.recursMonthlyOnDay());
    e.setRecursWeeklyOnDay(b.recursWeeklyOnDay());
    e.setRecursYearlyOnDay(b.recursYearlyOnDay());
    a.include_due_date && e.setDueDateWithoutStory(b.dueDate());
    a.include_tags && b.tags().forEach(function(a) {
        e.addTag(a)
    });
    a.include_projects && b.ownProjects().forEach(function(a) {
        a.itemsL().requestInsertAfter(e, b)
    });
    c = b.getAssigneeListOrNull();
    a.include_assignee && c && (e.assignToWithoutStory(c), c.itemsL().requestInsertAfter(e, b), a.include_schedule_status && e.setScheduleStatus(b.rawScheduleStatus()));
    a.include_subtasks && b.items().forEachValueAndRank(function(b, c) {
        var d = b.duplicate(a);
        e.itemsL().requestInsertAtRank(d, c);
        d.completedL().requestSet(0)
    });
    return e
}), trash:function() {
    this.addFollowerWithoutStory(env.user().domainUserForDomain(this.domain()));
    Task.superproto.trash.call(this)
}, removeFromWorld:function() {
    this.removeFromWorldAsUser(env.user())
}, removeFromWorldAsUser:function(a) {
    var b = this;
    $v(b.tagsX()).forEachValue(function(a) {
        b.removePotWithoutStory(a)
    });
    $v(b.getAssigneeListsR()).forEachValue(function(c) {
        b.unassignFromWithoutStory(c, a)
    })
}, isOrphaned:function() {
    return this.pots().size() === 0 && this.getAssigneeListOrNull() === null
}, wouldBeOrphanedWithout:function(a) {
    var b = this.ownProjects();
    if(b.size() > 1) {
        return!1
    }else {
        if(b.size() === 1 && b[0] !== a) {
            return!1
        }
    }
    if((b = this.findParent()) && b !== a && !b.wouldBeOrphanedWithout(a)) {
        return!1
    }
    return!0
}, addAttachment:function(a) {
    logEvent({name:"AttachmentSuccess", domain:this.domain(), task:this, asset:a});
    this.getX("attachments").requestInsertBefore(a, null);
    this._invalidateHasMetadataCache();
    a = {creator_du:env.user().domainUserForDomain(this.domain()), asset:a};
    this.addStoryOfSubtype(AddAttachmentStory, a)
}, _computeIsVisibleBy:function(a) {
    var b = this.getX("domain").peekAllowingUnknown();
    if(isUnknown(b)) {
        return!1
    }
    b = b.findDomainUser(a);
    if(b === null || !b.active()) {
        return assertEq(!0, a.hasAdminReadPrivilege() || a.hasSuperuserReadPrivilege()), !1
    }
    if(this.getAssigneeOrNull() === b) {
        return!0
    }
    if(!$v(this.ownProjects()).isEmpty()) {
        return!0
    }
    if($v(this.followersR()).contains(b)) {
        return!0
    }
    if(this.findParent()) {
        return!0
    }
    return b.canSeePublicData() && this.forcePublicToWorkspace()
}, _areTrashPropertiesWriteableBy:function() {
    return!0
}, hasPublicProject:function() {
    return this.projects().any(function(a) {
        return a.isPublic()
    })
}, hasOwnPublicProject:function() {
    return this.ownProjects().any(function(a) {
        return a.isPublic()
    })
}, hasPublicProjectOrPublicParent:function() {
    if(this.hasOwnPublicProject()) {
        return!0
    }
    var a = this.findParent();
    return a ? a.isPublicToWorkspace() : !1
}, isPublicToWorkspace:function() {
    if(this.hasOwnPublicProject() || this.forcePublicToWorkspace()) {
        return!0
    }
    var a = this.findParent();
    return a ? a.isPublicToWorkspace() : !1
}, isPrivateToCurrentUser:function() {
    if(this.ownProjects().any(function(a) {
        return!a.isPrivateToCurrentUser()
    })) {
        return!1
    }else {
        var a = this.findParent(), a = a ? a.isPrivateToCurrentUser() : !0;
        return this.otherMembers().length === 0 && !this.forcePublicToWorkspace() && a
    }
}, members:function() {
    var a = this.getAssigneeOrNull(), b = this.followers().toArray();
    a && !b.contains(a) && b.push(a);
    a = this.findParent();
    a !== null && a.members().forEach(function(a) {
        b.contains(a) || b.push(a)
    });
    return b
}, otherMembers:function() {
    var a = env.user();
    return this.members().filter(function(b) {
        return b.user() !== a
    })
}, externalMembers:function() {
    return this.members().filter(function(a) {
        return a.isExternal()
    })
}, hasExternalMembers:function() {
    return this.externalMembers().length > 0
}, isBar:function() {
    var a = this;
    return View.runWithoutLvalueChecking(function() {
        return toValueAllowingUnknown(a.getX("task_type")) === Task.TaskType.BAR
    })
}, setIsBar:function(a) {
    if(a !== this.isBar()) {
        if(a) {
            a = this.name() + ":"
        }else {
            for(a = this.name();a && a[a.length - 1] === ":";) {
                a = a.slice(0, -1)
            }
        }
        this.nameL().requestSet(a)
    }
}, barName:function() {
    var a = this.name();
    return this.isBar() ? a.substring(0, a.length - 1) : a
}, linkName:function() {
    return this.name()
}, hasTagWithName:function(a) {
    return $v(this.tagsX()).any(function(b) {
        return b.name() === a
    })
}, descriptionForHtmlText:function() {
    return AsanaHelpers.stylizedHtmlFromPlainText(this.description())
}, descriptionForPlainText:function() {
    return this.description()
}, hasMetadata:computedProperty("Task.hasMetadata", function() {
    var a = this.hasDetails();
    return a === Task.HasDetails.UNKNOWN ? this.description().trim() !== "" : a === Task.HasDetails.KNOWN_TRUE ? !0 : !1
}), _hasDetails:function() {
    if(this.comments().size() > 0) {
        return!0
    }
    if(this.attachments().size() > 0) {
        return!0
    }
    if(this.items().size() > 0) {
        return!0
    }
    return this.description().trim() !== ""
}, _invalidateHasMetadataCache:function() {
    this.setHasDetails(this._hasDetails() ? Task.HasDetails.KNOWN_TRUE : Task.HasDetails.KNOWN_FALSE)
}, updateNumIncompleteSubtasks:function() {
    this.setNumIncompleteSubtasks(this.items().filter(function(a) {
        return!a.isCompleted()
    }).size())
}, onBeforeTrashedChangedOnServer:function() {
    env.world_store.invalidateMemcacheKeys(["listsThatContainTask:" + this.global_id])
}, setRecursYearlyOnDay:function(a) {
    this.recursYearlyOnDayL().requestSet(a, "We try to recurr everything at midnight. We seem to have someDaylight-Savings-Time related bugs, though.")
}, describe:function() {
    return this.name()
}, navigationTarget:function() {
    return this
}, navigationContextForUser:function(a) {
    var b = this._contextListForUser(a);
    if(b) {
        return{list:b, item:this}
    }else {
        for(var c = this.findParent();c !== null && b === null;) {
            (b = c._contextListForUser(a)) || (c = c.findParent())
        }
        return b ? {list:b, item:c, subitem:this} : {item:this}
    }
}, _contextListForUser:function(a) {
    var b = $v(this.tagsX()).peekValuesArray().find(function(b) {
        return b.isVisibleBy(a)
    });
    return b !== null ? b : this.getAssigneeOrNull() !== null && this.getAssigneeOrNull().user() === a ? this.getAssigneeListOrNull() : null
}, isProject:function() {
    return!1
}, isRegularProject:function() {
    return!1
}, addInsertionStories:function(a) {
    a.addStoryOfSubtype(TaskAddedToListComment, {creator_du:env.user().domainUserForDomain(this.domain()), indirect_object:this})
}});
Task.HasDetails = {KNOWN_FALSE:0, KNOWN_TRUE:1, UNKNOWN:2};
Task.TaskType = {TASK:"task", BAR:"bar"};
Task.ScheduleStatus = {NEW:"INBOX", OK:"OK", UPCOMING:"UPCOMING", TODAY:"TODAY", COMPLETED:"COMPLETED"};
Task.RecurrenceType = {NEVER:"NEVER", DAILY:"DAILY", PERIODICALLY:"PERIODICALLY", WEEKLY:"WEEKLY", MONTHLY:"MONTHLY", YEARLY:"YEARLY", Display:{NEVER:"Never", DAILY:"Daily", PERIODICALLY:"Periodically", WEEKLY:"Weekly", MONTHLY:"Monthly", YEARLY:"Yearly"}};
Task.RecurrenceTypes = [Task.RecurrenceType.NEVER, Task.RecurrenceType.DAILY, Task.RecurrenceType.PERIODICALLY, Task.RecurrenceType.WEEKLY, Task.RecurrenceType.MONTHLY, Task.RecurrenceType.YEARLY];
Task.BAR_NAME_SUFFIX = ":";
Task.create = attributedValueFunc({creator_du:ATTRIBUTE_REQUIRED, name:"", domain:ATTRIBUTE_REQUIRED, description:"", completed:0, followers_du:null, due_date:null, items:null, recurrence_type:Task.RecurrenceType.NEVER, force_public_to_workspace:!1}, function(a) {
    assertNotEquals(null, a.creator_du);
    assertNotEquals(null, a.domain);
    assertInstanceof(a.creator_du, DomainUser);
    assertEquals(a.creator_du.domain(), a.domain);
    if(a.followers_du === null) {
        a.followers_du = [a.creator_du]
    }
    if(a.items === null) {
        a.items = []
    }
    a.schedule_status = Task.ScheduleStatus.OK;
    var b = env.world_store.createStateObject(this, a);
    logEvent({name:"TaskCreation", domain:a.domain, task:b});
    return b
});
__FILE__ = "apps/asana/model/email_task.js";
EmailTask = Task.subclass("EmailTask", {property_descs:{}}, {});
__FILE__ = "luna/common/model/inavigator.js";
INavigator = Interface.create("INavigator", [], {}, {isNavigatedTo:ABSTRACT, navigateTo:ABSTRACT});
__FILE__ = "luna/common/model/app_session.js";
AppSession = SessionObject.subclass("AppSession", {create:attributedValueFunc({}, function(a) {
    return env.session_store.createStateObject(this, a)
})}, {onAddedToEnvironment:noop, onRemovedFromEnvironment:noop});
__FILE__ = "luna/common/model/luna_session.js";
LunaSession = StateObject.subclass("LunaSession", {property_descs:{user:{type:User, isWriteableBy:StateObject.Property.READ_ONLY}, last_action_enacted:{type:Integer}, reload_count:{type:Integer, default_value:0, preloaded:!0}}, LAST_ACTION_ENACTED_INITIAL:-1, create:attributedValueFunc({user:ATTRIBUTE_REQUIRED}, function(a) {
    var b = env.world_store.createStateObject(LunaSession, {user:a.user, last_action_enacted:LunaSession.LAST_ACTION_ENACTED_INITIAL});
    if(a.user !== null) {
        a.user.onNewSession(b)
    }
    return b
})}, {createSessionState:function(a) {
    var b = this._lunaSessionState();
    b.setExists(!0);
    b.setAppSession(a);
    b.setLastDomActionTime(env.clock.now());
    b.setVersion(VersionInfo.currentVersion().session_version)
}, peekValuesForClient:function() {
    env.world_store.peekXvaluesAndStateObjectScalarsWithoutDependencies([], [this]);
    this.lunaSessionState().touch()
}, _lunaSessionState:function() {
    return env.session_store.sessionObject2(LunaSessionState, LunaSessionState.OBJECT_NAME)
}, lunaSessionState:function() {
    var a = this._lunaSessionState();
    return a.exists() ? a : null
}, lunaSessionStateExists:function() {
    return this._lunaSessionState().exists()
}, appSession:function() {
    return this.lunaSessionState().appSession()
}, defaultFocusAndSelectionR:rvalueProperty("_defaultFocusAndSelection", function() {
    if(this.lunaSessionState() === null || this.appSession() === null || env.realAppSession().view === void 0 || env.realAppSession().view === null) {
        return{focused_element_id:null, selection_start:null, selection_end:null}
    }
    var a = env.realAppSession().view.defaultFocusAndSelection();
    if(a.focused_element_id === void 0) {
        a.focused_element_id = null
    }
    if(a.selection_start === void 0) {
        a.selection_start = null
    }
    if(a.selection_end === void 0) {
        a.selection_end = null
    }
    return a
}), defaultFocusAndSelection:function() {
    return $v(this.defaultFocusAndSelectionR())
}, focusedElementId:function() {
    return $v(this.focusedElementIdR())
}, focusedElementIdR:rvalueProperty("_focusedElementId", function() {
    if(this.lunaSessionState() === null) {
        return null
    }
    var a = this.lunaSessionState().focusedElementIdL().peekAllowingUnknown();
    return isKnown(a) ? a : null
}), setFocus:function(a) {
    Flags.diagnostics_trace_focus_with_stack_trace ? log.debug("Luna focus changed to", a, prettyProof(getStackTrace())) : Flags.diagnostics_trace_focus && log.debug("Luna focus changed to", a);
    this.lunaSessionState().setFocusedElementId(a);
    Validation.State.clear()
}, setFocusToDefault:function() {
    this.lunaSessionState() !== null && this.lunaSessionState().clearField("focused_element_id")
}, resetOnClientForNextTest:function() {
    var a = this;
    Node.documentActiveElement() !== null && Node.documentActiveElement().blur();
    processHandler(function() {
        a.lunaSessionState().setFocusedElementId(null);
        a.lunaSessionState().setLastUndoableAction(null)
    })
}, _computeIsVisibleBy:function() {
    return!0
}});
LunaSessionState = SessionObject2.subclass("LunaSessionState", {property_descs:{exists:{type:Boolean, default_value:!1}, last_undoable_action:{type:AsanaStateObject, default_value:null}, focused_element_id:{type:String, default_value:function() {
    return env.lunaSession().defaultFocusAndSelection().focused_element_id
}}, last_dom_action_time:{type:Timestamp}, num_page_loads:{type:Integer}, is_navigating:{type:Boolean, default_value:!1}, version:{type:Integer}, app_session:{type:AppSession, isWriteableBy:function() {
    return!0
}}, rpc_count:{type:Integer, default_value:0}}, OBJECT_NAME:"LunaSessionState"}, {timeSinceLastDomAction:function() {
    return env.clock.now() - this.getV("last_dom_action_time")
}, pageIsLoading:computedProperty("pageIsLoading", function() {
    return this.rpcCount() === 0
})});
__FILE__ = "apps/asana/view/vocab.js";
Vocab = {tag:"tag", tags:"tags", Tag:"Tag", Tags:"Tags", project:"project", projects:"projects", Project:"Project", Projects:"Projects", Team:"Team", team:"team", Teams:"Teams", teams:"teams", PROJECT_HOTKEY:"P", Messages:"Messages", messages:"messages", messages_about_activity:"messages about activity", inbox_messages:"Inbox messages", Inbox_Messages:"Inbox Messages", email_messages:"email messages", Email_Messages:"Email Messages", APOSTROPHE:"\u2019"};
__FILE__ = "luna/common/model/dropbox_attachment.js";
DropboxAttachment = StateObject.subclass("DropboxAsset", {property_descs:{path:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, preview_url:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, download_url:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}}}, {authenticatedUrl:function() {
    return this.previewUrl()
}, parentObject:Association.hasOne({name:"DropboxAttachment.parent_object", type_name:"Asset", property_name:"original_content"}), _computeIsVisibleBy:function(a) {
    return this.parentObject().isVisibleBy(a)
}});
__FILE__ = "luna/common/model/s3file.js";
S3File = {authenticatedS3Url:function(a, b) {
    var c;
    c = Math.floor(env.clock.now() / 1E3) + (b || 300);
    var d = Crypto.hash("GET\n\n\n" + c + "\n" + a, {algorithm:Crypto.Algorithm.SHA1, hmac_key:env.secrets.s3_aws_key.secret_key, output:Crypto.Format.BASE64});
    c = URI.buildQueryString({AWSAccessKeyId:Flags.s3_aws_access_key, Expires:c, Signature:d});
    return"https://s3.amazonaws.com:443" + a + "?" + c
}};
__FILE__ = "luna/common/model/s3_attachment.js";
FlagSystem.defineString({name:"attachments_s3_bucket_name", help:"Name of the S3 bucket that object attachments are stored in.", send_to_client:!0});
FlagSystem.defineString({name:"attachments_s3_path", help:"Name of the path within the S3 bucket for object attachments.", send_to_client:!0});
FlagSystem.defineString({name:"s3_aws_access_key", help:"Access Key ID for Amazon Web Services, identifying the owner of the service being accessed.", send_to_client:!0});
S3Attachment = StateObject.subclass("S3Attachment", {registry_name:"AssetRole", property_descs:{creator:{type:StateObject, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, filesize:{type:Integer, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, contents:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, pages:{type:Integer, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, duration:{type:Integer, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, artist:{type:String,
    isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, track_title:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, height:{type:Integer, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, width:{type:Integer, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, s3_path:{type:String, track_initial_value:!0, isWriteableBy:function(a, b, c) {
    return a.isNew() || a.initialValue(c.property_name) === null
}}}, create:function(a) {
    a = Map.objectFromMappedValues(updateWithDefaults(a, {global_id:ATTRIBUTE_REQUIRED, creator:ATTRIBUTE_REQUIRED, filesize:ATTRIBUTE_REQUIRED, s3_path:null, contents:"", pages:0, duration:0, artist:"", track_title:"", height:0, width:0}), toValue);
    return env.world_store.createStateObject(S3Attachment, a)
}, uploadPolicyForFile:function(a, b, c) {
    a = {expiration:env.clock.nowDate().add(5, Date.Units.MINUTES).strftime("%Y-%m-%dT%H:%M:%SZ", Date.TZ_UTC), conditions:[{bucket:Flags.attachments_s3_bucket_name}, ["eq", "$key", S3Attachment.bucketRelativePath(a, b)], {acl:"private"}, ["starts-with", "$Content-Type", ""], ["starts-with", "$Content-Disposition", ""], ["content-length-range", 0, Asset.MAX_SIZE_BYTES]]};
    c && a.conditions.push({success_action_redirect:c});
    c = Crypto.stringToBase64(MochiKit.Base.serializeJSON(a));
    return{policy:c, signature:Crypto.hash(c, {algorithm:Crypto.Algorithm.SHA1, hmac_key:env.secrets.s3_aws_key.secret_key, output:Crypto.Format.BASE64})}
}, bucketRelativePath:function(a, b) {
    return Flags.attachments_s3_path + "/" + a + "/" + S3Attachment.urlSafeFilename(b)
}, absolutePath:function(a, b) {
    return"/" + Flags.attachments_s3_bucket_name + "/" + S3Attachment.bucketRelativePath(a, b)
}, urlSafeFilename:function(a) {
    return a.replace(/[^\w0-9\-\_\.]+/g, "_")
}}, {authenticatedUrl:function() {
    return S3File.authenticatedS3Url(this.getV("s3_path"))
}, parentObject:Association.hasOne({name:"S3Attachment.parent_object", type_name:"Asset", property_name:"original_content"}), _computeIsVisibleBy:function(a) {
    var b = this.parentObject();
    return b === null ? a === this.getX("creator").peekAllowingUnknown() : b.isVisibleBy(a)
}});
__FILE__ = "luna/common/model/asset.js";
Asset = StateObject.subclass("Asset", [IDescribable], {property_descs:{name:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, type:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, original_content:{type:StateObject, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, icon_name:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE, default_value:null}, title:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, description:{type:String,
    isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, thumbnail:{type:StateObject, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE_WITH_NEW_OBJECT}, small_thumbnail:{type:StateObject, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE_WITH_NEW_OBJECT}, large_thumbnail:{type:StateObject, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE_WITH_NEW_OBJECT}, flash_preview:{type:StateObject, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE_WITH_NEW_OBJECT}, web_preview:{type:StateObject,
    isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE_WITH_NEW_OBJECT}}, MAX_SIZE_BYTES:104857600, _CONTENT_TO_ASSET_TYPE_MAP:Map.mapize({image:"image", text:"document", audio:"audio", video:"movie"}), create:function(a) {
    a = Map.objectFromMappedValues(updateWithDefaults(a, {name:ATTRIBUTE_REQUIRED, type:ATTRIBUTE_REQUIRED, icon_name:null, title:"", description:"", original_content:null, thumbnail:null, small_thumbnail:null, large_thumbnail:null, flash_preview:null, web_preview:null}), toValue);
    return env.world_store.createStateObject(Asset, a)
}, assetTypeFromContentType:function(a) {
    a = a.split("/")[0];
    return Asset._CONTENT_TO_ASSET_TYPE_MAP.getOr(a, "other")
}}, {_uri:function() {
    return URI.create({scheme:"https", hostname:Flags.secure_web_host_port, path:["app", "asana", "-", "download_asset"], query:{asset_id:this.global_id}})
}, relativeUrl:function() {
    return this._uri().getRelativePathString()
}, absoluteUrl:function() {
    return this._uri().stringify()
}, originalContentUrl:function() {
    var a = toValueAllowingUnknown(this.originalContentL());
    return isUnknown(a) ? a : a.isVisibleBy(env.user()) ? a.authenticatedUrl() : UnknownValue.AccessDenied.create(a, null)
}, parentObjects:Association.hasMany({name:"Asset.parent_objects", type_name:"Task", list_property_name:"attachments"}), onAfterTrashedOnServer:function() {
    Asset.superproto.onAfterTrashedOnServer.call(this);
    this.parentObjects().forEach(function(a) {
        a.onAttachmentTrashedOnServer(this)
    })
}, _computeIsVisibleBy:function(a) {
    var b = this.parentObjects().firstValueOrNull(), c = this.trashedBy();
    return b !== null && b.isVisibleBy(a) && (c === null || c === a)
}, _areTrashPropertiesWriteableBy:function() {
    return!0
}, describe:function() {
    return this.name()
}});
define("RegisterAssetChange", Change.subclass("RegisterAssetChange", {}, {task:ATTRIBUTE_REQUIRED, asset:ATTRIBUTE_REQUIRED, enact:function() {
    env.is_server && this.task.addAttachment(this.asset)
}, taintedObjectIds:function() {
    return[this.task.global_id, this.asset.global_id]
}}));
__FILE__ = "luna/common/model/comment.js";
FlagSystem.defineBool({name:"enable_notifications", default_value:!0, help:"Send email notifications to following users when a comment is created"});
Story = AsanaStateObject.subclass("Story", [IDescribable, IDomainSpecific], {TEXT_SUMMARY_LENGTH:10, TEXT_SUMMARY_ELLIPSIS:"...", stories_to_notify_about:[], property_descs:{parent_object:{type:AsanaStateObject, isWriteableBy:Asana.AccessControl.commentParentObjectPropertyIsWriteable, allow_trashed_values:!0, api_info:{name:"parent", is_parent:!0}}, source:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE, default_value:"UNKNOWN"}}}, {text:ABSTRACT, combineWithFooter:function() {
    return!0
}, onServerCreate:function() {
    var a = $v(this.followersR());
    logEvent({name:"StoryCreation:" + this.typeName(), domain:this.domain(), parent:this.parentObject(), comment:this, followers:a.peekValuesArray().map(function(a) {
        return a.user().global_id
    })});
    assert(this.parentObject() instanceof Task || this.parentObject() instanceof Pot);
    Flags.enable_notifications && this.scheduleNotifyFollowers();
    this.parentObject().onStoryCreatedOnServer(this)
}, onAfterTrashedOnServer:function() {
    Story.superproto.onAfterTrashedOnServer.call(this);
    this.parentObject().onStoryTrashedOnServer(this)
}, notifyFollowers:function() {
    var a = this;
    a.nonCreatorFollowers().forEach(function(b) {
        var c = a.shouldBeBatched(b);
        Notification.create({story:a, unread:!0, creator_du:a.creatorDu(), recipient:b, needs_batch_delivery_du:c ? b : null})
    })
}, onBeforeCommit:function(a) {
    if(env.is_server && this.isNew() && Story.stories_to_notify_about.contains(this)) {
        var b = Story.stories_to_notify_about, c = this.creatorDu() ? this.creatorDu().user() : null;
        if(c) {
            assert(b.all(function(a) {
                return a.creatorDu().user() === c
            }));
            var d = env.isInUiTest() ? 0 : Flags.single_story_notification_delay;
            env.remote_job_store.addJob(NotifyFollowersRemoteJob.create({story_ids:b.map(StateObject.globalId), user_id:c.global_id}), env.clock.now() + d)
        }else {
            assert(env.isInUiTest())
        }
        Story.stories_to_notify_about = []
    }
    Story.superproto.onBeforeCommit.call(this, a)
}, scheduleNotifyFollowers:function() {
    this.nonCreatorFollowers().isEmpty() || (this.source() === Story.Source.EMAIL ? env.remote_job_store.addJob(NotifyFollowersRemoteJob.create({story_ids:[this.global_id], user_id:this.creatorDu().user().global_id}), env.clock.now()) : Story.stories_to_notify_about.push(this))
}, domain:function() {
    return this.getV("parent_object").domain()
}, shouldBeBatched:function() {
    return!0
}, shouldSendNotificationEmail:function() {
    return!0
}, nonCreatorFollowers:function() {
    var a = this;
    return $v(this.followersR()).filter(function(b) {
        return b !== a.creatorDu()
    })
}, followersR:rvalueProperty("followersR", function() {
    return List.EMPTY_LIST
}), _computeIsVisibleBy:function(a) {
    var b = this.getX("parent_object").peekAllowingUnknown();
    return isKnown(b) && b.isVisibleBy(a)
}, canBeTrashedBy:function(a) {
    return this.creatorDu() !== null && this.creatorDu().user() === a
}, _areTrashPropertiesWriteableBy:function(a) {
    return this.canBeTrashedBy(a)
}, describe:function() {
    return"Story"
}, _isFieldVisibleTo:function(a, b) {
    var c = this.getValueAllowingUnknown(a);
    return isKnown(c) && c.isVisibleBy(b) && !c.isTrashed()
}});
Story.Source = {WEB:"WEB", EMAIL:"EMAIL", MOBILE:"MOBILE", API:"API", UNKNOWN:"UNKNOWN"};
ConvertPotComment = Story.subclass("ConvertPotComment", {property_descs:{to_tag:{type:Boolean, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}}}, {text:function() {
    return isUnknown(toValueAllowingUnknown(this.getX("to_tag"))) ? "Converted" : "Converted to " + (this.getV("to_tag") ? "tag" : Vocab.project)
}});
PriorityChangeComment = Story.subclass("PriorityChangeComment", {property_descs:{from_group:{type:AsanaStateObject, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, to_group:{type:AsanaStateObject, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, project:{type:Pot, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}}}, {text:function() {
    var a = toValueAllowingUnknown(this.getX("from_group")), b = toValueAllowingUnknown(this.getX("to_group")), a = isUnknown(a) ? null : a, b = isUnknown(b) ? null : b, c = toValueAllowingUnknown(this.getX("project")), c = isUnknown(c) ? "" : " (" + c.name() + ")";
    if(a === null && b === null) {
        return"Moved"
    }
    return a === null ? "Moved into " + b.barName() + c : b === null ? "Moved out of " + a.barName() + c : "Moved from " + a.barName() + " to " + b.barName() + c
}, _computeIsVisibleBy:function(a) {
    var b = this.fromGroupL().peekAllowingUnknown(), c = this.toGroupL().peekAllowingUnknown();
    if((b === null || isUnknown(b)) && (c === null || isUnknown(c))) {
        return!1
    }
    return PriorityChangeComment.superproto._computeIsVisibleBy.call(this, a) && this._isFieldVisibleTo("project", a)
}});
ToggleTodayComment = Story.subclass("ToggleTodayComment", {property_descs:{became_today:{type:Boolean, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}}}, {text:function() {
    return this.getV("became_today") ? "Marked today" : "Unmarked today"
}});
TaskListStory = Story.subclass("TaskListStory", {property_descs:{indirect_object:{type:AsanaStateObject, isWriteableBy:Asana.AccessControl.commentParentObjectPropertyIsWriteable, allow_trashed_values:!0}}}, {_computeIsVisibleBy:function(a) {
    return TaskListStory.superproto._computeIsVisibleBy.call(this, a) && this._isFieldVisibleTo("indirect_object", a)
}});
TaskAddedToListComment = TaskListStory.subclass("TaskAddedToListComment", {}, {text:function() {
    return"added " + (this.indirectObject() instanceof Task ? "subtask to task " : "to ") + this.indirectObject().name()
}, followersR:rvalueProperty("followersR", function() {
    return this.indirectObject() instanceof Task ? List.EMPTY_LIST : this.indirectObject().followers()
})});
TaskRemovedFromListComment = TaskListStory.subclass("TaskRemovedFromListComment", {}, {text:function() {
    return"removed from " + this.indirectObject().name()
}});
TaskAssignedComment = Story.subclass("TaskAssignedComment", {property_descs:{assignee_du:{type:DomainUser, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, prev_assignee_du:{type:DomainUser, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE, default_value:null}}}, {text:function() {
    var a = toValueAllowingUnknown(this.getX("assignee_du"));
    return isKnown(a) && a !== null ? "assigned to " + a.name() : "assigned the task"
}, shouldBeBatched:function(a) {
    return a !== this.assigneeDu()
}, followersR:rvalueProperty("followersR", function() {
    var a = [], b = toValueAllowingUnknown(this.getX("assignee_du"));
    isKnown(b) && b !== null && a.push(b);
    b = this.getV("prev_assignee_du");
    b !== null && a.push(b);
    return List.create(a)
})});
TaskUnassignedComment = Story.subclass("TaskUnassignedComment", {property_descs:{unassignee_du:{type:DomainUser, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}}}, {text:function() {
    var a = toValueAllowingUnknown(this.getX("unassignee_du"));
    return isKnown(a) && a !== null ? "unassigned from " + a.name() : "unassigned the task"
}, followersR:rvalueProperty("followersR", function() {
    var a = toValueAllowingUnknown(this.getX("unassignee_du"));
    return isKnown(a) && a !== null ? List.create([a]) : List.create([])
})});
AddedFollowerComment = Story.subclass("AddedFollowerComment", {property_descs:{follower_du:{type:DomainUser, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}}}, {text:function() {
    var a = toValueAllowingUnknown(this.followerDuL());
    return isKnown(a) && a !== null ? "added " + a.name() + " as a follower" : "added a follower"
}, followersR:rvalueProperty("followersR", function() {
    return List.create([this.followerDu()])
})});
AsanaStateObjectDeletedComment = Story.subclass("AsanaStateObjectDeletedComment", {}, {text:function() {
    return"deleted"
}});
TaskCompletedComment = Story.subclass("TaskCompletedComment", {}, {text:function() {
    return"marked complete"
}, followersR:rvalueProperty("TaskCompletedComment.followersR", function() {
    var a = this.getV("parent_object"), b = Set.create(a.followers());
    Flags.enable_completion_to_project_followers && a.pots().forEach(function(a) {
        a.followers().forEach(function(a) {
            b.add(a)
        })
    });
    return List.create(b)
})});
TaskUncompletedComment = Story.subclass("TaskUncompletedComment", {}, {text:function() {
    return"marked incomplete"
}, followersR:function() {
    return this.getV("parent_object").followersR()
}});
AddAttachmentStory = Story.subclass("AddAttachmentStory", {property_descs:{asset:{type:Asset, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}}}, {_computeIsVisibleBy:function(a) {
    var b = this.getX("asset").peekAllowingUnknown();
    if(!isKnown(b)) {
        return!1
    }
    return AddAttachmentStory.superproto._computeIsVisibleBy.call(this, a)
}, text:function() {
    var a = this.getX("asset").peekAllowingUnknown();
    return isKnown(a) ? "attached " + a.absoluteUrl() : "added attachment"
}, followersR:function() {
    return this.getV("parent_object").followersR()
}});
TaskDueDateChangedStory = Story.subclass("TaskDueDateChangedStory", {property_descs:{due_date:{type:Timestamp, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}}}, {text:function() {
    var a = this.dueDate();
    return a === null ? "removed the due date" : "changed the due date to " + a.getStaticDayDescription()
}, dueDate:function() {
    return Day.fromLocalMidnightTimestamp(this.getV("due_date"))
}, followersR:rvalueProperty("followersR", function() {
    var a = this.parentObject().getAssigneeOrNull();
    return List.create(a ? [a] : [])
}), onServerCreate:function() {
    TaskDueDateChangedStory.superproto.onServerCreate.call(this);
    this.tryConsolidatingWithPrevious()
}, tryConsolidatingWithPrevious:function() {
    var a = toValueAllowingUnknown(this.parentObject().storiesR());
    if(!isUnknown(a) && (a = a.valueBeforeValueOrNull(this))) {
        var b = a.creatorOrUnknown(), c = toValueAllowingUnknown(a.getX("__creation_time"));
        !isUnknown(b) && !isUnknown(c) && this.__type === a.__type && this.creator() === b && this.getV("__creation_time") - c < Date.MILLISECONDS_PER_MINUTE && a.trash()
    }
}});
CommentStory = Story.subclass("Comment", {property_descs:{text:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}}}, {combineWithFooter:function() {
    return!1
}, shouldBeBatched:function() {
    return!1
}, followersR:function() {
    return this.getV("parent_object").followersR()
}, describe:function() {
    return"Comment"
}});
ProjectShareStory = Story.subclass("ProjectShareStory", {property_descs:{receiver_du:{type:DomainUser}}}, {text:function() {
    return"shared " + this.parentObject().name() + " with " + this.receiverDu().name()
}, describe:function() {
    return"ProjectShareStory"
}, shouldSendNotificationEmail:function() {
    return!1
}, followersR:rvalueProperty("followersR", function() {
    return List.create([this.receiverDu()])
})});
__FILE__ = "luna/common/model/comment_draft.js";
CommentDraft = AsanaStateObject.subclass("CommentDraft", [IDescribable], {property_descs:{parent_object:{type:AsanaStateObject, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE, allow_trashed_values:!0, preloaded:!0}, text:{type:String, isWriteableBy:Asana.AccessControl.commentDraftTextIsWriteable, untimely:!0, preloaded:!0}, email_to_task_thread:{type:Boolean, isWriteableBy:Asana.AccessControl.commentDraftTextIsWriteable, default_value:!1, preloaded:!0}}}, {describe:function() {
    return this.text()
}, _computeIsVisibleBy:Asana.AccessControl.isVisibleOnlyToCreatorDu});
__FILE__ = "luna/common/model/email_comment_story.js";
EmailCommentStory = CommentStory.subclass("EmailCommentStory", {property_descs:{outgoing:{type:Boolean, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, subject:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, to:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, cc:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, from:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, message_id:{type:String, indexed:!0,
    isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, forwarded_for_email:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, email_text:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, in_reply_to_message_id:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}}, create:function(a) {
    a = env.world_store.createStateObject(this, a);
    a.messageId() === null && a.setMessageId("<" + a.global_id + "@mailbridge.asana.com>")
}}, {onServerCreate:function() {
    ExperimentalFeature.enabled("email_bridge") || ufu("you do not have email bridging. Sorry");
    EmailCommentStory.superproto.onServerCreate.call(this)
}, notifyFollowers:function() {
    EmailCommentStory.superproto.notifyFollowers.call(this);
    if(this.outgoing()) {
        var a = this.cc() === "" ? [] : this.cc().split(", ").map(function(a) {
            return EmailAddress.parse(a)
        });
        EmailMessage.create({to_address:EmailAddress.parse(this.to()), from_address:EmailAddress.create("no-reply@asana.com", env.user().name()), cc_addresses:a, reply_to_email:env.realAppSession().activeDomainUser().email(), hashed_message_id:this.messageId(), subject:this.subject(), body_text:this.emailText(), in_reply_to:this.inReplyToMessageId()}).scheduleDelivery()
    }
}});
__FILE__ = "luna/common/model/notification.js";
FlagSystem.defineInt({name:"single_story_notification_delay", default_value:3E4, help:"Number of milliseconds to wait before sending a storythat isn't batched."});
FlagSystem.defineInt({name:"batched_notification_delay", default_value:24E4, help:"Number of milliseconds to wait after a notification was created to include other notifications in the same batch."});
Notification = AsanaStateObject.subclass("Notification", {property_descs:{story:{type:Story, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE, allow_trashed_values:!0, preloaded:!0}, recipient:{type:DomainUser, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, unread:{type:Boolean, isWriteableBy:function(a, b) {
    return a.isNew() || b === a.recipient().user()
}}, needs_batch_delivery_du:{type:DomainUser, isWriteableBy:Asana.AccessControl.notificationNeedsBatchDeliveryDuIsWriteable}}, index_descs:{domain_user_feed:{keys:["recipient", "unread", "__creation_time"]}}}, {shouldDeliver:function() {
    return this.active() && this.isUnread()
}, onServerCreate:function() {
    var a = this.recipient(), b = this.isBatched();
    logEvent({name:"NotificationCreation:" + this.story().typeName(), domain_user:a, domain:a.domain(), batched:b});
    a.setLastNotificationCreationTime(this.getV("__creation_time"));
    this.shouldEmail() && (b ? a.setLastNotificationForBatching(this) : env.remote_job_store.addJob(NotificationRemoteJob.create({batch:!1, notification_id:this.global_id, user_id:a.user().global_id}), env.clock.now()))
}, shouldEmail:function() {
    return this.story().shouldSendNotificationEmail() && this.recipient().sendNotificationEmails()
}, onBeforeCommit:function(a) {
    if(env.is_server && this.isBatched() && this.shouldEmail() && this.recipient().lastNotificationForBatching() === this && this.isNew()) {
        var b = env.clock.now() + Flags.batched_notification_delay;
        env.remote_job_store.addJob(NotificationRemoteJob.create({batch:!0, notification_id:this.global_id, user_id:this.recipient().user().global_id}), b)
    }
    Notification.superproto.onBeforeCommit.call(this, a)
}, isBatched:function() {
    return this.needsBatchDeliveryDu() !== null
}, active:function() {
    var a = toValueAllowingUnknown(this.storyL());
    if(isUnknown(a)) {
        return log.info("Skipping notification", this.global_id, "for unknown story", a), !1
    }
    if(a.isTrashed()) {
        return log.info("Skipping notification", this.global_id, "for trashed story", a.global_id), !1
    }
    var b = toValueAllowingUnknown(a.parentObjectL());
    if(isUnknown(b) || b.isTrashed()) {
        return log.info("Skipping notification", this.global_id, "because follower no longer has access to task", b.global_id), !1
    }
    if(a instanceof TaskListStory) {
        a = toValueAllowingUnknown(a.indirectObjectL());
        if(isUnknown(a) || a.isTrashed()) {
            return log.info("Skipping notification", this.global_id, "because follower no longer has access to pot", b.global_id), !1
        }
        if(b.name() === "") {
            return log.info("Skipping notification", this.global_id, "because task is empty", b.global_id), !1
        }
    }
    return!0
}, unread:function() {
    ufu("Use notification.isUnread() instead")
}, isUnread:function() {
    if(this.recipient().isFollowingUpOnThreadObject(this.story().parentObject())) {
        return!0
    }
    return this.isUnreadIgnoringFollowup()
}, newUnreadSinceInitialLoad:function() {
    var a = this.recipient().inboxState().maxUnreadTimestampLoadedInPagination() < this.creationTime();
    return this.isUnread() && a && this.recipient().lastInteractedWithNotificationFeedTime() < $v(env.datastore_manager.last_successful_sync_time_lvalue) && this.typeIdLvalue().recentlyReceivedNotReactive()
}, isUnreadIgnoringFollowup:function() {
    return this.getV("unread") && this.getV("__creation_time") > this.recipient().feedMarkAllAsReadTime()
}, _computeIsVisibleBy:function(a) {
    return a === this.recipient().user() || this.recipient().domain().hasActiveUser(a)
}, isFilteredFromTaskThread:function() {
    return this.story() instanceof TaskAddedToListComment
}});
__FILE__ = "luna/common/model/remote_job_status.js";
RemoteJobStatus = StateObject.subclass("RemoteJobStatus", [], {property_descs:{job_completed:{type:Boolean, default_value:!1}}}, {_computeIsVisibleBy:function() {
    return!0
}});
__FILE__ = "luna/common/model/login.js";
Login = StateObject.subclass("Login", {property_descs:{auth_token:{type:String, indexed:!0, isWriteableBy:StateObject.Property.READ_ONLY}, user:{type:User, isWriteableBy:StateObject.Property.READ_ONLY}, expiry:{type:Timestamp, isWriteableBy:StateObject.Property.READ_ONLY}}, create:attributedValueFunc({user:ATTRIBUTE_REQUIRED}, function(a) {
    return env.world_store.createStateObject(Login, {auth_token:Random.id({secure:!0}), user:a.user, expiry:env.clock.now() + 14 * Date.MILLISECONDS_PER_DAY})
})}, {getTicket:function() {
    return Crypto.hash(Flags.salt + this.getV("auth_token"), {algorithm:Crypto.Algorithm.MD5, output:Crypto.Format.HEX})
}, _computeIsVisibleBy:AccessControl.isVisibleOnlyToUser("user")});
Login.findByAuthToken = findByUniquelyValuedProperty("findByAuthToken", "auth_token", Login, "Login.auth_token");
__FILE__ = "apps/asana/model/api_settings.js";
ApiSettings = StateObject.subclass("ApiSettings", {property_descs:{api_key:{type:String, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE, preloaded:!0, indexed:!0}, user:{type:User, isWriteableBy:function(a, b, c) {
    return a.isNew() && $v(c) === b
}, preloaded:!0}}, create:attributedValueFunc({user:ATTRIBUTE_REQUIRED}, function(a) {
    return env.world_store.createStateObject(ApiSettings, {user:a.user, api_key:KeyGenerator.generateObjectSpecificKey(a.user, 32)})
}), findByApiKey:function(a) {
    a = QueryBuilder.queryForObjects(ApiSettings).usingIndex(ApiSettings.getIndexByName("ApiSettings.api_key")).where(QueryBuilder.scalarProperty("api_key").eq(a));
    return $v(a.getOneObjectNonReactive("ApiSettings.findByApiKey"))
}}, {_computeIsVisibleBy:function(a) {
    return a === this.user()
}, _areTrashPropertiesWriteableBy:function() {
    return!0
}});
__FILE__ = "luna/temp/object_types.js";
TestRunSession = AppSession.subclass("TestRunSession", {property_descs:{real_session:{type:AppSession}, is_perf_test:{type:Boolean}, test_case_name:{type:String}, test_name:{type:String}, client_sync_frame:{type:Integer}, stored_objects:{type:List, allow_trashed_values:!0}, stored_data:{type:String}}, create:attributedValueFunc(copyAndUpdate(AppSession.create.attribute_spec, {real_session:ATTRIBUTE_REQUIRED, is_perf_test:!1, test_case_name:null, test_name:null, client_sync_frame:0, stored_objects:[],
    stored_data:""}), function(a) {
    return env.session_store.createStateObject(TestRunSession, a)
})}, {onAddedToEnvironment:function() {
}, onRemovedFromEnvironment:function() {
}, findTestValue:function(a) {
    if(UiTestingInternals.in_newSession) {
        return null
    }
    return this._deserializedStoredData().getOr(a, null)
}, addTestValue:function(a, b, c) {
    if(!UiTestingInternals.in_newSession) {
        isA(b, StateObject) && this.storedObjectsL().requestInsertBefore(b, null);
        var d = this._deserializedStoredData();
        !c && d.containsKey(a) && ufu("Test value for key already exists", a, d.get(a));
        d.put(a, b);
        this.setStoredData(Serializer.serialize(d))
    }
}, clearTestValues:function() {
    this.storedObjectsL().requestClear();
    this.setStoredData(Serializer.serialize(Map.create()))
}, _deserializedStoredData:function() {
    var a = this.storedData();
    return a === "" ? Map.create() : Deserializer.deserialize(a)
}});
__FILE__ = "luna/common/testing/coverage.js";
JsCoverageReport = AsanaObject.subclass("CoverageReport", {createFromRawObjects:function(a) {
    var b = JsCoverageReport.create();
    a.forEach(function(a) {
        var d = a.filename, e = JSON.parse(a.coverage_lines_json);
        Map.mapEntries(e, function(a, c) {
            b.addLineCoverage(d, a, c)
        });
        b.setFileSource(d, JSON.parse(a.source_lines_json))
    });
    return b
}, createFromJsCoverageState:function(a, b) {
    var c = JsCoverageReport.create();
    if(a) {
        for(var d in a) {
            for(var e = a[d], f = 0;f < e.length;f++) {
                e[f] !== void 0 && c.addLineCoverage(d, f, e[f])
            }
            b && c.setFileSource(d, e.source || [])
        }
        log.info("Generated coverage report for " + c._file_to_line_coverage_map.size() + " files")
    }
    return c
}}, {_file_to_line_coverage_map:SET_IN_CONSTRUCTOR, _file_to_source_lines_map:SET_IN_CONSTRUCTOR, constructor:function() {
    JsCoverageReport.superproto.constructor.call(this);
    this._file_to_line_coverage_map = Map.create();
    this._file_to_source_lines_map = Map.create()
}, isEmpty:function() {
    return this._file_to_line_coverage_map.isEmpty()
}, setFileSource:function(a, b) {
    this._file_to_source_lines_map.put(a, b)
}, addLineCoverage:function(a, b, c) {
    this._file_to_line_coverage_map.setDefault(a, Map.create).incrementCount("" + b, c)
}, merge:function(a) {
    var b = this;
    a._file_to_line_coverage_map.forEach(function(a, d) {
        d.forEach(function(d, f) {
            b.addLineCoverage(a, d, f)
        })
    });
    a._file_to_source_lines_map.forEach(function(a, d) {
        b.setFileSource(a, d)
    })
}, toFileCoverageReportRawObjects:function() {
    var a = this;
    return this._file_to_line_coverage_map.mapEntries(function(b, c) {
        return ObjectBundle.createStateObjectAsRawObject(FileCoverageReport, {filename:b, coverage_lines_json:JSON.stringify(c.toRawObject()), source_lines_json:JSON.stringify(a._file_to_source_lines_map.getOr(b, []))})
    })
}, toJsCoverageState:function() {
    var a = this, b = {};
    this._file_to_line_coverage_map.forEach(function(c, d) {
        var e = [];
        e.source = a._file_to_source_lines_map.getOr(c, []);
        d.forEach(function(a, b) {
            e[parseInt(a, 10)] = b
        });
        b[c] = e
    });
    return b
}});
__FILE__ = "luna/common/debugging/reporting.js";
ClientServerProfiler = AsanaObject.subclass("ClientServerProfiler", {TestRunStatus:{OK:"OK", CLIENT_FAIL:"CLIENT", SERVER_FAIL:"SERVER", FRAMEWORK_FAIL:"FRAMEWORK"}, _test_run_id:null, pageload_accumulator:MultiMap.create(), action_accumulator:MultiMap.create(), perf_event_summaries:null, configureFromServerGlobals:function() {
    ClientServerProfiler._test_run_id = "server_globals" in globals ? server_globals.getOr("perf_test_run_id", null) : null
}, configureFromRequest:function(a) {
    ClientServerProfiler._test_run_id = a.utf8ParamOr("perf_test_run_id", null)
}, configureManually:function(a) {
    ClientServerProfiler._test_run_id = a
}, unconfigure:function() {
    ClientServerProfiler._test_run_id = null
}, isTestRun:function() {
    return this.getTestRunId() !== null
}, getTestRunId:function() {
    return ClientServerProfiler._test_run_id
}, createExceptionRawObject:function(a, b, c) {
    c = c || [];
    return ObjectBundle.createStateObjectAsRawObject(Exception, {message:"" + a, stack_trace:getStackTraceFromException(a, b), log_snippet:c.join("\n")})
}, postAllReports:function() {
    ClientServerProfiler._postAllReports(ClientServerProfiler.TestRunStatus.OK, null)
}, postAllReportsWithException:function(a, b, c, d) {
    b = ClientServerProfiler.createExceptionRawObject(b, c, d);
    ClientServerProfiler._postAllReports(a, b)
}, _postAllReports:function(a, b) {
    var c = ClientServerProfiler.getTestRunId();
    if(c !== null) {
        if(ClientServerProfiler.perf_event_summaries === null) {
            ClientServerProfiler.perf_event_summaries = this.createSummaries(ClientServerProfiler.pageload_accumulator, ClientServerProfiler.action_accumulator)
        }
        var d = ClientServerProfiler.createTestRunBundle({test_id:c, status:a, exception:b, perf_event_summaries:ClientServerProfiler.perf_event_summaries, coverage_report:env.is_server ? null : JsCoverageReport.createFromJsCoverageState(globals._$jscoverage, !1)});
        env.serverCall("POST_TEST_RUN", OMap.create([["test_run_id", c], ["test_run_json", d.exportToString()]]))
    }
}, createTestRunBundle:attributedFunc({test_id:ATTRIBUTE_REQUIRED, status:ATTRIBUTE_REQUIRED, exception:null, perf_event_summaries:null, coverage_report:null, cluster:null}, function(a) {
    var b = a.test_id, c = a.status, d = a.exception, e = a.coverage_report, f = a.cluster || env.getFlag("CLUSTER"), a = ObjectBundle.createStateObjectAsRawObject(TestRun, {id:b, cluster:f, status:c, exception:d, serialized_perf_event_summaries:Serializer.serialize(a.perf_event_summaries || []), file_coverage_reports:e ? e.toFileCoverageReportRawObjects() : [], build_time_ms:VersionInfo.currentVersion().build_time_ms, build_date_str:VersionInfo.currentVersion().build_date_str, commit_id:VersionInfo.currentVersion().commit_id,
        commit_date_str:VersionInfo.currentVersion().commit_date_str, release_revision:VersionInfo.currentVersion().release_revision, session_version:VersionInfo.currentVersion().session_version});
    return ObjectBundle.createFromRawObject(a)
}), createSummaries:function(a, b) {
    var c = [];
    a !== null && a.forEach(function(a, b) {
        var f = PageloadSummary.create(a, b);
        c.push(f)
    });
    b !== null && b.forEach(function(a, b) {
        var f = ActionSummary.create(a, b);
        c.push(f)
    });
    return c
}}, {});
__FILE__ = "luna/common/phrases.js";
PhraseFactory = AsanaObject.subclass("PhraseFactory", {}, {num_bits:SET_IN_CONSTRUCTOR, constructor:function(a) {
    PhraseFactory.superproto.constructor.call(this);
    var b = 0;
    a.forEach(function(a) {
        b += a.num_bits
    });
    this._generators = a;
    this.num_bits = b
}, getRandomPhrase:function() {
    return this.getPhraseFromInteger(Random.integer({max:this.getNumPhrases() - 1}))
}, getPhraseFromInteger:function(a) {
    var b = [], c = this.num_bits;
    this._generators.forEach(function(d) {
        var e = d.num_bits;
        c -= e;
        b.push(d.getWord(Math.floor(a / Math.pow(2, c)) % (1 << e)))
    });
    return b
}, getNumPhrases:function() {
    return Math.pow(2, this.num_bits)
}});
PhraseFactory.AbstractGenerator = AsanaObject.subclass("PhraseFactory.AbstractGenerator", {}, {num_bits:SET_IN_CONSTRUCTOR, constructor:function(a) {
    PhraseFactory.AbstractGenerator.superproto.constructor.call(this);
    this.num_bits = a
}, getWord:ABSTRACT, size:function() {
    return 1 << this.num_bits
}});
PhraseFactory.Dictionary = PhraseFactory.AbstractGenerator.subclass("PhraseFactory.Dictionary", {}, {constructor:function(a) {
    for(var b = a.length, c = 0, d = b;d > 1;d >>= 1) {
        d % 2 === 1 && ufu("Dictionary size is not an even power of two", b), c++
    }
    PhraseFactory.Dictionary.superproto.constructor.call(this, c);
    this._words = a
}, getWord:function(a) {
    return"" + this._words[a]
}});
PhraseFactory.NumberRange = PhraseFactory.AbstractGenerator.subclass("PhraseFactory.NumberRange", {}, {constructor:function(a, b) {
    PhraseFactory.NumberRange.superproto.constructor.call(this, a);
    this._offset = b || 0
}, getWord:function(a) {
    return"" + (a + this._offset)
}});
PhraseFactory.createDefault32Bit = Memoize.memoizeFew("PhraseFactory.createDefault", function() {
    return PhraseFactory.create([PhraseFactory.NumberRange.create(5, 2), PhraseFactory.Dictionary.create(["awful", "bad", "bashful", "berserk", "big", "bizarre", "black", "blue", "boring", "brawny", "bright", "bumpy", "burly", "cagey", "cheerful", "chilly", "chubby", "classy", "clumsy", "cold", "crazy", "creepy", "cuddly", "dashing", "dirty", "dizzy", "drunk", "dry", "dull", "dusty", "eager", "evil", "fancy", "fast", "fat", "faulty", "fearless", "filthy", "foamy", "friendly", "funny", "gentle", "giant",
        "glossy", "good", "goofy", "great", "greedy", "green", "groovy", "grumpy", "guilty", "hairy", "handsome", "happy", "healthy", "heavy", "helpful", "high", "huge", "hungry", "icky", "itchy", "jazzy", "jealous", "jolly", "jumpy", "kind", "large", "lazy", "lean", "little", "lively", "lucky", "macho", "magenta", "magic", "massive", "meek", "mighty", "mindless", "nasty", "needy", "new", "nice", "noisy", "odd", "old", "orange", "pretty", "prickly", "proud", "puffy", "purple", "quick", "quiet", "rabid",
        "rebel", "red", "righteous", "round", "sad", "sassy", "scary", "sedate", "shallow", "short", "silly", "skillful", "skinny", "sloppy", "slow", "small", "smelly", "sneaky", "snobby", "strange", "tacky", "tall", "tan", "tough", "tricky", "ugly", "wicked", "wise", "yellow", "young", "zany"]), PhraseFactory.Dictionary.create(["aardvarks", "alpacas", "ants", "apes", "baboons", "badgers", "bats", "bears", "beavers", "bees", "birds", "bison", "bobcats", "bullfrogs", "bulls", "bunnies", "buzzards", "camels",
        "catfish", "cats", "cattle", "cheetahs", "chickens", "chipmunks", "cobras", "cougars", "crabs", "crickets", "crows", "deer", "dogs", "dolphins", "donkeys", "doves", "ducks", "eagles", "eels", "elephants", "elk", "emus", "ewoks", "falcons", "ferrets", "fish", "fleas", "flies", "foxes", "frogs", "gazelle", "geese", "gerbils", "giraffes", "goats", "goblins", "gorillas", "groundhogs", "hawks", "hippos", "hogs", "horses", "hounds", "jackals", "jaguars", "kittens", "klingons", "lambs", "leeches", "lemmings",
        "leopards", "ligers", "lions", "lizards", "llamas", "lobsters", "marmots", "mice", "monkeys", "moose", "mules", "newts", "orcs", "otters", "owls", "oysters", "pandas", "peacocks", "penguins", "pidgeons", "pigs", "pumas", "puppies", "quails", "rabbits", "raccoons", "rats", "reindeer", "rhinos", "roosters", "salmon", "seals", "sharks", "sheep", "shrimp", "skunks", "slugs", "snails", "snakes", "spiders", "squid", "squirrels", "starfish", "stingrays", "swans", "tigers", "toads", "trout", "tuna", "turkeys",
        "turtles", "urchins", "vipers", "vultures", "warthogs", "whales", "wolves", "woodchucks", "yaks", "zebras"]), PhraseFactory.Dictionary.create(["agree", "applaud", "argue", "arise", "arrive", "attack", "awaken", "bake", "bathe", "beg", "behave", "bite", "blink", "blush", "bounce", "breathe", "burrow", "buzz", "charge", "chat", "cheer", "chuckle", "chew", "clap", "cry", "dance", "dig", "dive", "drink", "eat", "feed", "fight", "flap", "flee", "float", "fly", "gather", "glow", "grunt", "hang", "hide",
        "howl", "hunt", "itch", "jog", "joke", "jostle", "jump", "kick", "kneel", "knit", "krump", "laugh", "leap", "leave", "look", "lope", "march", "mix", "moan", "nuzzle", "observe", "plan", "play", "plead", "point", "pray", "punch", "push", "race", "rejoice", "relax", "retire", "return", "roar", "rub", "rumble", "run", "rush", "sail", "scare", "scrape", "scratch", "scream", "scrub", "search", "shake", "shiver", "shrink", "shrug", "sigh", "sing", "sit", "skip", "slap", "sleep", "slide", "slip", "smash",
        "snore", "spar", "speak", "spit", "stand", "stare", "step", "sting", "stomp", "stretch", "strike", "study", "stumble", "swim", "talk", "think", "tickle", "travel", "trot", "twist", "wait", "walk", "wander", "watch", "wave", "whine", "whisper", "work", "wriggle"]), PhraseFactory.Dictionary.create(["ably", "always", "angrily", "badly", "blindly", "boldly", "bravely", "briefly", "brightly", "busily", "calmly", "clearly", "cruelly", "daily", "easily", "equally", "exactly", "fast", "fiercely", "fondly",
        "gently", "gladly", "greedily", "happily", "hastily", "honestly", "hourly", "hungrily", "joyously", "justly", "kindly", "lazily", "loosely", "loudly", "madly", "merrily", "monthly", "neatly", "often", "poorly", "promptly", "quickly", "quietly", "rarely", "roughly", "rudely", "sadly", "safely", "sharply", "shyly", "slowly", "smoothly", "softly", "soon", "sternly", "swiftly", "tensely", "tightly", "too", "warmly", "weakly", "well", "wildly", "yearly"])])
});
__FILE__ = "luna/common/wrapped_exception.js";
WrappedException = AsanaObject.subclass("WrappedException", {}, {_exception:SET_IN_CONSTRUCTOR, constructor:function(a) {
    WrappedException.superproto.constructor.call(this);
    this._exception = a
}, getBacktrace:Memoize.memoizeInThis("_getBacktraceLines", function() {
    return this._parseStackTrace(this._exception)
}), getMessage:function() {
    return this._exception.message ? this._exception.message : this._exception.toString()
}, _parseStackTrace:function(a) {
    var b = [];
    if(a.stack) {
        for(var a = a.stack.replace(/^[^@]*@/gm, "@").split(/\n/), c = 0;c < a.length;c++) {
            var d = a[c].replace(/^\s*at /, "@");
            d.indexOf("@") === 0 && (d = d.substr(1).replace(/https?\:\/\/[^\/]+\//, "/"), b.push({method:this._parseMethodFromStackLine(d), file:this._parseFileFromStackLine(d), line:this._parseLineFromStackLine(d)}))
        }
    }
    b.length === 0 && (b = [{line:"0", file:"(stack trace unavailable)"}]);
    return b
}, _parseMethodFromStackLine:function(a) {
    return(a = a.match(/([^\(]+) \(/)) ? a[1] : null
}, _parseFileFromStackLine:function(a) {
    var b = a.match(/\(([^\)]+?)(:\d+)?(:\d+)?\)/);
    return b ? b[1] : (b = a.match(/(.*?):(\d+)/)) ? b[1] : a
}, _parseLineFromStackLine:function(a) {
    return(a = a.match(/\:(\d+)(\:\d+)?\)?/)) ? a[1] : null
}});
__FILE__ = "luna/common/exception_handler.js";
NestedHandlerException = AsanaObject.subclass("NestedHandlerException", {}, {_browser_name_and_version:SET_IN_CONSTRUCTOR, constructor:attributedConstructorAfterSuper(AsanaObject, function() {
    try {
        this._browser_name_and_version = BrowserInfo.create(navigator.userAgent).nameAndVersion()
    }catch(a) {
        this._browser_name_and_version = "could-not-find-browser-info"
    }
}), toString:function() {
    return"Attempt to run a nested exception handler (" + this._browser_name_and_version + ")"
}});
ExceptionHandler = {ReentryStrategy:{ALLOW:makeUniqueValue("ALLOW"), DELAY:makeUniqueValue("DELAY"), DEFER_CHAINED:makeUniqueValue("DEFER_CHAINED"), DROP:makeUniqueValue("DROP"), FAIL:makeUniqueValue("FAIL")}, ExceptionStrategy:{DEFAULT:makeUniqueValue("DEFAULT"), DO_NOT_REPORT:makeUniqueValue("DO_NOT_REPORT")}, _DEFER_DELAY_MS:1, wrapInExceptionHandler:function(a, b, c) {
    c === void 0 && ufu("wrapInExceptionHandler accepts 3 arguments");
    var d = host, e = globals.env, f = d._is_undead;
    return function() {
        if((!d.isDead() || f) && !breakpointInProgress()) {
            var g = Fiber.current, h = g.host_is_exception_handler_active, i = g.host_is_exception_handler_on_stack, j = arguments;
            if(h) {
                if(ExceptionHandler._shouldFailOnReentrantHandler(b)) {
                    log.info("Unexpected wrapped handler called reentrantly", a, "while already running", d.exception_info_stack), ExceptionHandler._maybeFailOnReentrantHandler()
                }else {
                    if(b === ExceptionHandler.ReentryStrategy.DELAY || b === ExceptionHandler.ReentryStrategy.DEFER_CHAINED) {
                        return log.info("Deferring wrapped handler due to reentry", a), ExceptionHandler._deferReentrantHandler(b, a, c, j)
                    }else {
                        if(b === ExceptionHandler.ReentryStrategy.DROP) {
                            log.info("Ignoring wrapped handler due to reentry", a);
                            return
                        }
                    }
                }
            }
            g.host_is_exception_handler_active = !0;
            g.host_is_exception_handler_on_stack = !0;
            var l = void 0;
            try {
                d._is_undead = f, host.runWithExceptionInfo("wrapInExceptionHandler", function() {
                    host.runWithExceptionInfo(a, function() {
                        l = c.apply(d, j);
                        ExceptionHandler._assertHandlerReturnOkForStrategy(b, l)
                    })
                }), g.host_is_exception_handler_active = h, g.host_is_exception_handler_on_stack = i
            }catch(m) {
                g.host_is_exception_handler_active = h;
                g.host_is_exception_handler_on_stack = i;
                g = "exception";
                h = !1;
                if(!d._has_reported_exception && !d._testing_skip_exception_handler_reporting) {
                    h = !0;
                    try {
                        h = d._runExceptionHooks(m) !== ExceptionHandler.ExceptionStrategy.DO_NOT_REPORT
                    }catch(o) {
                    }
                }
                if(h) {
                    if(m.suppress_stack_trace) {
                        log.error(prettyProof("" + m))
                    }else {
                        if(m.logged_from_stack === void 0) {
                            var n;
                            try {
                                n = EvaluationContext.getTopRvalue()
                            }catch(p) {
                                n = null
                            }
                            try {
                                logException(m, n)
                            }catch(q) {
                            }
                        }else {
                            log.info("Exception caught by handler, but already logged")
                        }
                    }
                    if(ClientServerProfiler.isTestRun() || env.isInUiTest()) {
                        env = e;
                        revertAllReplacedGlobals();
                        var t = d.recent_log.readLines();
                        Flags.use_webdriver ? UiTestingWebDriver.slave().fail(getJsStackTraceFromException(m), t) : ClientServerProfiler.postAllReportsWithException(d.exception_handler_error_status, m, EvaluationContext.getTopRvalue(), t)
                    }else {
                        d._is_undead = !0;
                        try {
                            t = d.phrase_factory.getRandomPhrase().join(" ")
                        }catch(w) {
                            t = "[unable to generate unique error phrase]"
                        }
                        var v;
                        n = WrappedException.create(m).getMessage();
                        n in d._known_exception_messages && (v = d._known_exception_messages[n]);
                        d._warning_exception_messages.contains(n) && (g = "warning");
                        if(g === "exception") {
                            try {
                                d.notifyUserAboutError(t, v)
                            }catch(r) {
                                document.body.style.display = "none"
                            }
                        }
                        v = null;
                        g === "exception" && typeof env !== "undefined" && !env.is_server && env.runningApp() && env.runningApp().browser().isMobileNativeApp() && (v = function() {
                            window.location.href = "asanacmd://localhost./#:quit"
                        });
                        d.reportIssueToServer({type:g, exception:m, error_id:t, callback:v})
                    }
                    d._has_reported_exception = !0
                }
                g === "exception" && d._throwExceptionToSystem(m)
            }finally {
                d._is_undead = !1
            }
            return l
        }
    }
}, reportIssueToServer:attributedFunc({type:ATTRIBUTE_REQUIRED, exception:ATTRIBUTE_REQUIRED, error_id:ATTRIBUTE_OPTIONAL, callback:ATTRIBUTE_OPTIONAL, user:ATTRIBUTE_OPTIONAL}, function(a) {
    var b = ExceptionHandler._createErrorNotification(a.type, a.exception, a.error_id, a.user);
    host._sendErrorNotificationToServer(b, a.callback)
}), _createErrorNotification:function(a, b, c, d) {
    var e = host, f = WrappedException.create(b), g = "unable to generate message";
    try {
        g = f.getMessage()
    }catch(h) {
    }
    try {
        var i = b instanceof Object && "nameForHoptoadGrouping" in b ? b.nameForHoptoadGrouping() : g.toString()
    }catch(j) {
        i = "unable to determine name for hoptoad grouping"
    }
    try {
        env.getFlag("CLUSTER")
    }catch(l) {
    }
    var m = null;
    try {
        m = d ? d : env.userOrNull()
    }catch(o) {
    }
    d = null;
    try {
        d = m.global_id
    }catch(n) {
    }
    b = null;
    try {
        b = m.name()
    }catch(p) {
    }
    try {
        var q = f.getBacktrace()
    }catch(t) {
        q = "exception occurred while trying to generate backtrace"
    }
    m = null;
    try {
        env && env.runningApp() && (m = env.appName())
    }catch(w) {
    }
    try {
        r = env.lunaSession().global_id
    }catch(v) {
        var r = null
    }
    g in e._known_exception_messages && (g = "[known exception] " + g);
    f = !0;
    try {
        f = env.is_server
    }catch(x) {
    }
    a = {message:g, backtrace:q, request:{params:{is_server:f, type:a, user_id:d, user_name:b, app_name:m, session_id:r, name_for_grouping:i}}};
    try {
        var y = EvaluationContext.getTopRvalue();
        if(y) {
            a.request.params.lunascript_stack = "" + Rvalue.getStackPrettyPrintable(y), a.request.params.rvalues_being_computed = JobQueue.currentJob().evaluation_context_rvalues_being_computed.join("\n")
        }
    }catch(D) {
        a.request.params.lunascript_stack = "unable to compute rvalue stack", a.request.params.rvalues_being_computed = "unable to generate rvalues_being_computed"
    }
    if(c) {
        a.request.params.error_id = c
    }
    a.request.params.recent_log = e.recent_log.readLines().join("\n").slice(-32768);
    if(!f) {
        a.request.params.recent_events = Node.logged_events.join("\n")
    }
    return a
}, browserNotifyUserAboutError:function(a, b) {
    if(!document.getElementById("fatal_error_dialog")) {
        var c;
        c = document.body.appendChild(document.createElement("div"));
        c.id = "fatal_error_dialog";
        if(server_globals.getOr("is_mobile", !1)) {
            c.style.position = "absolute", c.style.width = "100%", c.style.height = "100%", c.style.left = "0px", c.style.top = "0px", c.style.opacity = "0"
        }else {
            var d = b ? 290 : 190, e = (document.body.clientHeight - d) / 2;
            c.style.left = (document.body.clientWidth - 500) / 2 + "px";
            c.style.top = e + "px";
            c.style.width = "500px";
            c.style.height = d + "px";
            d = a ? ['<p id="error_info">', "If you contact us about this problem, please include this unique phrase:", "<br/><strong>", a, "</strong></p>"] : [];
            e = "<p>(This is a placeholder message, in case message formatting breaks.  Please let us know if you see it.)</p>";
            try {
                e = b ? "<p>" + Format.stylizedHtmlFromPlainText(b) + "</p>" : ""
            }catch(f) {
            }
            c.innerHTML = concat([e, '<div class="reload-icon"></div>', '<div class="error-heading">Asana needs to be reloaded</div>', '<div class="error-directions">', "If you have work that may not have saved, you can dismiss the dialog to copy it, ", "but you will not be able to continue working.</div>"], d, ['<table style="width: 100%;">', '<tr><td class="error-contact">You can reach us at: <a href="mailto:support@asana.com">support@asana.com</a></td>', '<td class="error-buttons">', '<input type="submit" class="button primary" value="Reload" onclick="window.location.reload(true)" />',
                '<input type="button" value="Dismiss" onclick="document.getElementById(\'fatal_error_dialog\').style.display=\'none\';" />', "</td></tr></table>"]).join("");
            c = document.getElementById("error_message_box");
            if(!c) {
                c = document.body.appendChild(document.createElement("div")), c.id = "error_message_box"
            }
            c.innerHTML = "<div class=\"secondary-explanation\"><span class='message'>Please Reload.</span><a href=# class=\"explain_link\"     onclick=\"document.getElementById('fatal_error_dialog').style.display = 'block'\">What's going on?</a></div>"
        }
        log.info("Stopping syncs because of exception");
        env.datastore_manager.stop()
    }
}, _maybeFailOnReentrantHandler:function() {
    var a = NestedHandlerException.create();
    if(Flags.enable_fail_on_reentrant_handlers) {
        throw a;
    }else {
        host.recordWarningOnce(a.toString())
    }
}, _deferReentrantHandler:function(a, b, c, d) {
    var b = ExceptionHandler.wrapInExceptionHandler({name:"wrapInExceptionHandler deferred handler", original_info:b}, ExceptionHandler.ReentryStrategy.FAIL, function() {
        var b = c.apply(null, d);
        ExceptionHandler._assertHandlerReturnOkForStrategy(a, b);
        return b
    }), e = setTimeout;
    if(a === ExceptionHandler.ReentryStrategy.DEFER_CHAINED) {
        var f = newTrackedDeferred("wrapInExceptionHandler deferred handler");
        f.addCallback(b);
        e(function() {
            f.callback()
        }, ExceptionHandler._DEFER_DELAY_MS);
        return f
    }else {
        e(b, ExceptionHandler._DEFER_DELAY_MS)
    }
}, _assertHandlerReturnOkForStrategy:function() {
}, _shouldFailOnReentrantHandler:function(a) {
    var b = BrowserInfo.create(navigator.userAgent).name() === "Chrome" && (a === ExceptionHandler.ReentryStrategy.DELAY || a === ExceptionHandler.ReentryStrategy.DEFER_CHAINED || a === ExceptionHandler.ReentryStrategy.DROP);
    return a === ExceptionHandler.ReentryStrategy.FAIL || b
}};
__FILE__ = "luna/common/host.js";
FlagSystem.defineBool({name:"treat_warnings_as_errors", help:"Crash if we hit a warning", is_feature:!0, default_value:!1});
Console = AsanaObject.subclass("Console", {}, {_print:ABSTRACT, readLine:ABSTRACT, print:function(a) {
    this._print(this.getPrefixedMessage(a))
}, println:function(a) {
    this.print(a + "\n")
}, getPrefixedMessage:function(a) {
    if("request_id" in globals) {
        var b = Host.getSessionIdOrNull(), c = [b !== null ? "SID:" + MochiKit.Text.padLeft("" + b, 8, "0") : "NO_SID", "[" + request_id + "]", ""].join(" "), d = a.split("\n");
        return d.map(function(a, b) {
            return b !== d.length - 1 ? c + a + "\n" : a
        }).join("")
    }else {
        return a
    }
}});
Host = AsanaObject.subclass("Host", {_:Fiber.addOnFiberCreatedFunc(function() {
    Fiber.current.host_is_exception_handler_active = !1;
    Fiber.current.host_is_exception_handler_on_stack = !1
}), getSessionIdOrNull:function() {
    return"request_globals" in globals && request_globals && request_globals.session ? request_globals.session.global_id : null
}}, {console:SET_IN_CONSTRUCTOR, recent_log:SET_IN_CONSTRUCTOR, job_queue:SET_IN_CONSTRUCTOR, _known_exception_messages:SET_IN_CONSTRUCTOR, _warning_exception_messages:SET_IN_CONSTRUCTOR, exception_handler_error_status:null, last_reported_error_id:null, _is_undead:!1, _has_reported_exception:!1, phrase_factory:SET_IN_CONSTRUCTOR, _exception_hooks:SET_IN_CONSTRUCTOR, exception_info_stack:SET_IN_CONSTRUCTOR, is_measuring_coverage:!1, rvalue_debugger:SET_IN_CONSTRUCTOR, profiler:SET_IN_CONSTRUCTOR,
    constructor:function(a) {
        Host.superproto.constructor.call(this);
        update(this, a);
        this.recent_log = StringLogSink.create(1E3);
        log.addSink(this.recent_log);
        this.rvalue_debugger = RvalueDebugger.create();
        this.phrase_factory = PhraseFactory.createDefault32Bit();
        this._exception_hooks = Map.create();
        this.exception_info_stack = [];
        this.is_measuring_coverage = "_$jscoverage" in globals;
        var a = "config_override_profiler" in globals ? globals.config_override_profiler : !1, b = SystemClock.create();
        this.profiler = Profiler.create(b, a);
        this.profiler._resetWithConfig("profiler_config" in globals ? profiler_config : null);
        this._known_exception_messages = {'"Asana modifications to JS objects are not visible"':"One of your extensions (perhaps MeasureIt or Upload to Flickr) appears to be causing problems for Asana.", "Object sufio._xdWatchInFlight(); has no method 'call'":"FastestChrome is interfering with the Asana application. You must disable the 'Add Similar Product Search (Superfish)' option to use Asana. Learn how to change your options: http://bit.ly/bPLs5X", "Object function Node() { [native code] } has no method 'getPausingWrappedDomHandler'":"Your version of MeasureIt is interfering with the Asana application.  You can download a different version of MeasureIt that does not interfere with Asana: http://www.kevinfreitas.net/extensions/measureit/; but you must still disable your current version of MeasureIt to prevent crashes like this one.",
            '"Caught exception in _replaceChildNode -- see above"':"One of your browser extensions seems to be causing a problem.\nLearn more: http://j.mp/szflK3"};
        this._warning_exception_messages = ['"Cannot modify properties of a WrappedNative"']
    }, wrapInExceptionHandler:ExceptionHandler.wrapInExceptionHandler, runOutsideExceptionHandler:function(a) {
        var b = Fiber.current.host_is_exception_handler_active;
        Fiber.current.host_is_exception_handler_active = !1;
        return this.runWithExceptionInfo("runOutsideExceptionHandler", function() {
            try {
                return a()
            }finally {
                Fiber.current.host_is_exception_handler_active = b
            }
        })
    }, addExceptionHook:function(a, b) {
        this._exception_hooks.put(a, b)
    }, removeExceptionHook:function(a) {
        this._exception_hooks.checkedRemove(a)
    }, runWithExceptionInfo:function(a, b) {
        this.exception_info_stack.push(a);
        try {
            return b()
        }catch(c) {
            if(c.exception_info_stack === void 0) {
                var d = $A(this.exception_info_stack);
                trySetProperty(c, "exception_info_stack", d) || log.info("Failed to set info stack on thrown exception", d)
            }
            throw c;
        }finally {
            this.exception_info_stack.pop()
        }
    }, recordWarning:function() {
        var a = arguments;
        if(Flags.treat_warnings_as_errors) {
            ufu.apply(null, a)
        }else {
            var b = "Warning: " + map(prettyPrint, a).join(" ");
            try {
                var c = Error(b);
                c.nameForHoptoadGrouping = function() {
                    return a[0]
                };
                throw c;
            }catch(d) {
                var e;
                try {
                    e = EvaluationContext.getTopRvalue()
                }catch(f) {
                    e = null
                }
                logException(d, e)
            }
            this.reportIssueToServer({type:"warning", exception:c})
        }
    }, recordWarningOnce:function() {
        if(!this._recorded_warnings) {
            this._recorded_warnings = Set.create()
        }
        this._recorded_warnings.contains(arguments[0]) || (this.recordWarning.apply(this, arguments), this._recorded_warnings.add(arguments[0]))
    }, resetRecordedWarningsForTesting:function() {
        this._recorded_warnings = void 0
    }, reportIssueToServer:ExceptionHandler.reportIssueToServer, sendErrorNotificationToServer:function(a, b) {
        if(a.request.params.error_id) {
            this.last_reported_error_id = a.request.params.error_id
        }
        this._sendErrorNotificationToServer(a, b)
    }, _sendErrorNotificationToServer:function(a, b) {
        b && b()
    }, isExceptionHandlerActive:function() {
        return Fiber.current.host_is_exception_handler_active
    }, ufuThatExceptionHandlerActive:function() {
        this.isExceptionHandlerActive() || ufu("You must be running an unwrapped callback. Use host.wrapInExceptionHandler(), cowboy!")
    }, isExceptionHandlerOnStack:function() {
        return Fiber.current.host_is_exception_handler_on_stack
    }, isDead:function() {
        return this._has_reported_exception
    }, notifyUserAboutError:noop, _throwExceptionToSystem:function(a) {
        throw a;
    }, _runExceptionHooks:function(a) {
        var b = ExceptionHandler.ExceptionStrategy.DEFAULT, c = b;
        this._exception_hooks.forEachUntil(function(d, e) {
            try {
                c = e.call(null, a) || b
            }catch(f) {
                throw log.error("Caught exception during exception hook, aborting hooks", d), logException(f, null), IIterable.STOP;
            }
            if(c === ExceptionHandler.ExceptionStrategy.THROW_AND_STAY_ALIVE) {
                throw IIterable.STOP;
            }
        });
        return c
    }, isMacOrServer:ABSTRACT});
HostConsoleLogSink = AsanaObject.subclass("HostConsoleLogSink", [ILogSink], {}, {onLogMessage:function(a, b, c) {
    a = ILogSink.toSimpleLogLine(a, b, c);
    if(globals.host) {
        host.console.println(a)
    }else {
        throw"[globals.host isn't defined, so throwing] " + a;
    }
}});
__FILE__ = "luna/browser/browser_console_log_sink.js";
BrowserConsoleLogSink = AsanaObject.subclass("BrowserConsoleLogSink", [ILogSink], {}, {_console:SET_IN_CONSTRUCTOR, constructor:function(a) {
    BrowserConsoleLogSink.superproto.constructor.call(this);
    this._console = a || globals.console
}, onLogMessage:function(a, b, c) {
    var d = this, b = concat([b], map(function(a) {
        return a && typeof a === "object" && !(a instanceof PrettyProofWrapper) ? "firebug" in d._console ? a : typeof a === "object" ? [a, prettyPrint(a, 0)] : a : prettyPrint(a)
    }, c));
    a === ILogSink.Level.INFO ? d._console.info.apply(d._console, b) : a === ILogSink.Level.WARN ? (this._console.error("Warning (see below)"), d._console.warn.apply(d._console, b)) : (a === ILogSink.Level.ERROR && d._console.error("Error (see below)"), d._console.log.apply(d._console, b))
}});
__FILE__ = "luna/browser/browser_host.js";
BrowserConsole = Console.subclass("BrowserConsole", {}, {error:function(a, b) {
    var c = b && b.stack ? b.stack.split("@").join("<br />\n") : "", d = b ? b.message : "";
    globals.console && console.log("Error: " + a, d, c)
}, _print:function(a) {
    globals.console && console.log(a)
}, readLine:null});
if("console" in globals && (log.addSink(BrowserConsoleLogSink.create(globals.console)), !("groupCollapsed" in console))) {
    console.groupCollapsed = console.groupEnd = console.log
}
BrowserHost = Host.subclass("BrowserHost", {}, {exception_handler_error_status:ClientServerProfiler.TestRunStatus.CLIENT_FAIL, job_queue:null, constructor:function() {
    BrowserHost.superproto.constructor.call(this);
    this.console = BrowserConsole.create()
}, getCurrentUri:function() {
    return URI.parse(window.location.href)
}, isMac:function() {
    return navigator.userAgent.toLowerCase().indexOf("mac") !== -1
}, isMacOrServer:function() {
    return this.isMac()
}, notifyUserAboutError:ExceptionHandler.browserNotifyUserAboutError, _sendErrorNotificationToServer:function(a, b) {
    a.request.params.user_agent = navigator.userAgent;
    a.request.params.client_version = VersionInfo.currentVersion().commit_id;
    var c = env.postRequest("report_client_exception", "application/x-www-form-urlencoded", URI.buildQueryString({notification:MochiKit.Base.serializeJSON(a)}));
    b && c.addBoth(b)
}});
host = BrowserHost.create();
__FILE__ = "luna/common/view/window_view.js";
WindowView = View.subclass("WindowView", {}, {is_visible_x:ATTRIBUTE_REQUIRED, title_x:ATTRIBUTE_REQUIRED, width:ATTRIBUTE_REQUIRED, height:ATTRIBUTE_REQUIRED, name:ATTRIBUTE_REQUIRED, onClose:ATTRIBUTE_REQUIRED, is_scrolling:!1, _window:null, _child_view:null, _onOwnerWindowUnload:SET_IN_CONSTRUCTOR, constructor:function(a) {
    WindowView.superproto.constructor.call(this, a);
    var b = this;
    b._onOwnerWindowUnload = function() {
        b._window && b._window.close()
    }
}, createView:function(a, b) {
    var c = WindowView.superproto.createView.call(this, a, b);
    return this._child_view = c
}, childView:function() {
    return this._child_view
}, _render:function() {
    var a = this, b = $rval(function() {
        return a._child_view ? a._child_view.render() : ""
    }, "WindowView.renderedView"), c = $rval(function() {
        var b = $v(a.title_x);
        if(a._window) {
            a._window.document.title = b
        }
        return b
    });
    return $rval(function() {
        $v(a.is_visible_x) ? (a._show($v(b)), $v(c)) : a._hide();
        return""
    }, "WindowView.render")
}, document:function() {
    return this._window.document
}, window:function() {
    return this._window
}, _show:function(a) {
    var b = this;
    safeTimeout(function() {
        b._window ? b._clearWindowBody() : (log.debug("Opened window: " + b.name), b._window = window.openAndSadlyRunEventHandlers("about:blank", b._uniqueWindowName(), "scrollbars=yes,height=" + b.height + ",width=" + b.width), b._window.addEventListener("unload", Node.wrappedHandler("WindowView.unload", function() {
            log.debug("Closed window: " + b.name);
            b._clearWindowBody();
            b._window = null;
            b.onClose.call(null)
        }), !0), window.addEventListener("unload", b._onOwnerWindowUnload, !0));
        var c = b._window.document;
        b._copyStylesheetsToDocument(c);
        if(b.is_scrolling) {
            c.body.style.overflow = "auto"
        }
        c.body.appendChild(a)
    }, 0)
}, _hide:function() {
    this._window && (window.removeEventListener("unload", this._onOwnerWindowUnload, !0), this._window.close())
}, _copyStylesheetsToDocument:function(a) {
    a.body.innerHTML = "<style></style>";
    for(var b = a.styleSheets[0], c = 0;c < document.styleSheets.length;c++) {
        var d = document.styleSheets[c].cssRules, e = document.styleSheets[c].href;
        if(e !== null) {
            a.body.innerHTML += '<link type="text/css" rel="stylesheet" href="' + e + '" />'
        }else {
            if(d !== null) {
                for(e = 0;e < d.length;e++) {
                    var f = d[e].cssText;
                    f.startsWith("::-webkit-scrollbar") || b.insertRule(f, b.cssRules.length)
                }
            }
        }
    }
}, _clearWindowBody:function() {
    this._window.document.body.innerHTML = ""
}, _uniqueWindowName:function() {
    return["WindowView", this.name, Random.id({})].join("_")
}});
__FILE__ = "luna/common/view/flag_settings_tokenizer_view.js";
FlagSettingsTokenizerView = View.subclass("FlagSettingsTokenizerView", {}, {who:ATTRIBUTE_REQUIRED, tokenizer_name:ATTRIBUTE_REQUIRED, focusable_element_id:ATTRIBUTE_REQUIRED, _render:function() {
    var a = this, b = FeatureFlags.get().getFeatureNames().sort();
    return this.createView(TokenizerView, {typeahead_view:this.createView(TypeaheadView, {id:a.tokenizer_name, getItemNameX:function(a) {
        var b = $v(a);
        return typeof b === "string" ? b : $v(a).name()
    }, candidate_item_sections:[TypeaheadView.ItemSection.create({id:a.tokenizer_name + "_completions_section", items_x:List.create(b), onNewItem:null})], placeholder:"add flags", onSelectItem:function(b) {
        a.who.getX("flag_settings").requestInsertBefore(FlagSetting.create({name:$v(b)}), null)
    }, focusable_element_id:a.focusable_element_id}), placeholder:"add flags", remove_text:"Remove Flag", selected_items_x:a.who.getX("flag_settings"), is_multi:!0, onTokenClicked:noop, onRemoveToken:function(b) {
        a.who.getX("flag_settings").requestRemove($v(b))
    }}).render()
}});
__FILE__ = "luna/browser/debug/datacat/datacat_model.js";
defineNamespace("Datacat");
Datacat.Model = AsanaObject.subclass("Datacat.Model", {}, {is_recording:!1, is_visible_l:SET_IN_CONSTRUCTOR, source:SET_IN_CONSTRUCTOR, frame_to_source:SET_IN_CONSTRUCTOR, object_id_to_object_map:SET_IN_CONSTRUCTOR, should_advance_frame:!0, _last_frame:-1, constructor:function() {
    Datacat.Model.superproto.constructor.call(this);
    this.is_visible_l = LocalLvalue.create(!1);
    this.clear()
}, clear:function() {
    this.object_id_to_object_map = Map.create();
    this._last_frame = -1;
    this.frame_to_source = [];
    this.source = Datacat.Source.UNKNOWN
}, beginClientFrame:function() {
    this._maybeAdvanceFrame();
    this.should_advance_frame = !0;
    this.source = Datacat.Source.CLIENT;
    this.frame_to_source.push(this.source)
}, beginServerFrame:function() {
    this._maybeAdvanceFrame();
    this.should_advance_frame = !0;
    this.source = Datacat.Source.SERVER;
    this.frame_to_source.push(this.source)
}, snapshotDatastore:function() {
    var a = this;
    this.source = Datacat.Source.SNAPSHOT;
    this.frame_to_source.push(this.source);
    var b = function(b, d) {
        a._writeValue(b, d)
    };
    env.world_store.forEachCachedValue(b);
    env.session_store.forEachCachedValue(b)
}, numFrames:function() {
    return this._last_frame + 1
}, writeValue:function(a, b) {
    this._writeValue(a, b)
}, _writeValue:function(a, b) {
    this._maybeAdvanceFrame();
    var c = a.object_id, d = this.object_id_to_object_map.getOr(c, null);
    d === null && (d = Datacat.Model.Object.create(c), this.object_id_to_object_map.put(c, d));
    d.writePropertyValue(a, b, this._last_frame)
}, removeValue:function(a) {
    this._maybeAdvanceFrame();
    var b = this.object_id_to_object_map.getOr(a.object_id, null);
    b !== null && b.removePropertyValue(a, this._last_frame)
}, _maybeAdvanceFrame:function() {
    if(this.should_advance_frame) {
        this.should_advance_frame = !1, this._last_frame++
    }
}});
Datacat.Model.Frame = AsanaObject.subclass("Datacat.Model.Frame", {}, {value:SET_IN_CONSTRUCTOR, status:SET_IN_CONSTRUCTOR, constructor:function() {
    Datacat.Model.Frame.superproto.constructor.call(this);
    this.value = void 0;
    this.status = Datacat.FrameStatus.MISSING
}, exists:function() {
    return this.status !== Datacat.FrameStatus.MISSING && this.status !== Datacat.FrameStatus.REMOVED
}, write:function(a) {
    if(a !== void 0) {
        this.value = a
    }
    this.status = this.exists() && this.status !== Datacat.FrameStatus.ADDED ? Datacat.FrameStatus.CHANGED : Datacat.FrameStatus.ADDED
}, remove:function() {
    if(this.exists()) {
        this.status = Datacat.FrameStatus.REMOVED
    }
}});
Datacat.Model.FrameContainer = AsanaObject.subclass("Datacat.Model.FrameContainer", {}, {_frames:SET_IN_CONSTRUCTOR, constructor:function() {
    Datacat.Model.FrameContainer.superproto.constructor.call(this);
    this._frames = []
}, frames:function(a) {
    for(var b = [], c = 0;c < a;c++) {
        b.push(this._getOrMakeFrame(c))
    }
    return b
}, frame:function(a) {
    return this._getOrMakeFrame(a)
}, writeValueForFrame:function(a, b) {
    var c = this._getOrMakeFrame(a);
    c.write(b);
    if(a === 0) {
        c.status = Datacat.FrameStatus.UNCHANGED
    }
}, removeValueForFrame:function(a) {
    this._getOrMakeFrame(a).remove()
}, _getOrMakeFrame:function(a) {
    if(this._frames[a] === void 0 && (this._frames[a] = Datacat.Model.Frame.create(), a > 0 && this._getOrMakeFrame(a - 1).exists())) {
        this._frames[a].status = Datacat.FrameStatus.UNCHANGED
    }
    return this._frames[a]
}});
Datacat.Model.Property = Datacat.Model.FrameContainer.subclass("Datacat.Model.Property", {}, {constructor:function(a) {
    Datacat.Model.Property.superproto.constructor.call(this);
    this.address = a
}, name:function() {
    return this.address.property_name
}, elementId:function() {
    return this.address.element_id
}, type:function() {
    return this.address.value_type
}});
Datacat.Model.Object = Datacat.Model.FrameContainer.subclass("Datacat.Model.Object", {}, {id:SET_IN_CONSTRUCTOR, constructor:function(a) {
    Datacat.Model.Object.superproto.constructor.call(this);
    this.id = a;
    this._object = null;
    this.scalar_properties = Map.create();
    this.list_properties = ArrayKeyedMap.create()
}, object:function() {
    if(this._object === null) {
        var a = env.datastoreForObjectId(this.id).objectOrUnknownWithoutAC(this.id);
        if(isKnown(a)) {
            this._object = a
        }
    }
    return this._object
}, datastore:function() {
    return env.datastoreForObjectId(this.id)
}, typeName:function() {
    return this.object() ? this.object().__type_name : "Unknown"
}, writePropertyValue:function(a, b, c) {
    var d = this._propertyMap(a), e = this._propertyKey(a), f = d.getOr(e, null);
    f === null && (f = Datacat.Model.Property.create(a), d.put(e, f));
    f.writeValueForFrame(c, b);
    this.writeValueForFrame(c)
}, removePropertyValue:function(a, b) {
    var c = this._propertyMap(a), d = this._propertyKey(a), c = c.getOr(d, null);
    c !== null && c.removeValueForFrame(b);
    a.property_name === StateObject.PropertyName.TYPE_ID && this.removeValueForFrame(b)
}, allProperties:function() {
    var a = ArrayKeyedMap.create();
    this.scalar_properties.forEach(function(b, c) {
        a.put([b, IDatastoreAddress.ELEMENT_ID_SCALAR], c)
    });
    this.list_properties.forEach(function(b, c) {
        a.put(b, c)
    });
    return a
}, _propertyMap:function(a) {
    return a.element_id === IDatastoreAddress.ELEMENT_ID_SCALAR ? this.scalar_properties : this.list_properties
}, _propertyKey:function(a) {
    return a.element_id === IDatastoreAddress.ELEMENT_ID_SCALAR ? a.property_name : [a.property_name, a.element_id]
}});
__FILE__ = "luna/browser/debug/datacat/datacat_view.js";
defineNamespace("Datacat");
Datacat.View = View.subclass("Datacat.View", {Sort:{TYPE:makeUniqueValue("TYPE"), ID:makeUniqueValue("ID"), STATUS:makeUniqueValue("STATUS")}, createInWindow:function(a, b) {
    var c = b.model, d = a.createView(WindowView, {view_name:"WindowView.Datacat", title_x:"Datacat", width:1E3, height:800, name:"datacat", is_visible_x:c.is_visible_l, is_scrolling:!0, onClose:function() {
        c.is_recording && b.controller.stopRecording();
        c.is_visible_l.requestSet(!1)
    }});
    d.createView(Datacat.View, b);
    return d
}}, {model:ATTRIBUTE_REQUIRED, controller:ATTRIBUTE_REQUIRED, _root_node:null, _state:SET_IN_CONSTRUCTOR, constructor:function(a) {
    Datacat.View.superproto.constructor.call(this, a);
    this._root_node = Node.createDeadNode("DIV", {"class":"datacat-window"});
    this._state = Datacat.View.State.create();
    this.controller.setView(this);
    this.update()
}, _render:function() {
    return this._root_node
}, update:function() {
    var a = this;
    env.is_server || Node.renderInDeadMode(function() {
        a._root_node.removeAllChildren();
        var b = a._sortedFilteredObjects();
        a._root_node.appendChild(DIV({}, [a._renderControls(b), a._renderVisualization(b)]))
    })
}, document:function() {
    return this.parent_view.document()
}, window:function() {
    return this.parent_view.window()
}, _renderButton:function(a, b, c) {
    return SPAN({className:b ? "datacat-button enabled" : "datacat-button disabled", onclick:function() {
        b && c();
        return!1
    }}, [a])
}, _renderCheckbox:function(a, b) {
    var c = this, d = INPUT({type:"checkbox", onchange:function() {
        c._state[a] = !!d.checked;
        c.update()
    }}, []);
    c._state[a] && d.setAttribute("checked", "true");
    return TABLE({className:"checkbox-container"}, [TR({}, [TD({}, [d]), TD({}, [b])])])
}, _renderMultiCheckbox:function(a, b, c) {
    var d = this;
    return DIV({id:a}, b.mapEntries(function(a, b) {
        var g = INPUT({type:"checkbox", onchange:function() {
            g.checked ? c.add(b) : c.remove(b);
            d.update()
        }}, []);
        c.contains(b) && g.setAttribute("checked", "true");
        return TABLE({className:"checkbox-container"}, [TR({}, [TD({}, [g]), TD({}, [a])])])
    }))
}, _renderNumericInput:function(a, b, c, d) {
    var e = this, f = INPUT({type:"text", className:"numeric-input", value:e._state[a] === d ? "" : e._state[a], onblur:function() {
        if(f.value === "" && d !== void 0) {
            e._state[a] = d
        }else {
            var g = parseInt(f.value, 10);
            !isNaN(g) && g >= b && g <= c ? (e._state[a] = g, e.update()) : f.value = d !== void 0 ? d : e._state[a]
        }
    }}, []);
    return f
}, _renderStringInput:function(a) {
    var b = this, c = INPUT({type:"text", className:"string-input", value:b._state[a], onblur:function() {
        b._state[a] = ("" + c.value).trim();
        b.update()
    }}, []);
    return c
}, _keyValueMapForStatusFilter:function() {
    var a = Map.create();
    Map.forEach(Datacat.FrameStatus, function(b, c) {
        a.put(c[0], c)
    });
    return a
}, _renderObjectLink:function(a) {
    var b = this;
    return SPAN({className:"object-link", onclick:function() {
        var c = b.model.object_id_to_object_map.getOr(a, null);
        c !== null && (b._setObjectExpanded(c, !0), b._navigateToObject(c))
    }}, [a])
}, _renderControls:function(a) {
    var b = this;
    return DIV({className:"datacat-panel"}, [TABLE({}, [TR({}, [TD({className:"logo-section"}, [TABLE({}, [TR({}, [TD({className:"datacat-logo static" + (b.model.is_recording ? " hidden" : "")}, [""]), TD({className:"datacat-logo recording" + (!b.model.is_recording ? " hidden" : "")}, [""])]), TR({}, [TD({}, [b._renderButton("Clear", !b.model.is_recording && b.model.numFrames() > 0, function() {
        b.controller.clear()
    }), b._renderButton("Stop", b.model.is_recording, function() {
        b.controller.stopRecording()
    }), b._renderButton("Record", !b.model.is_recording && b.model.numFrames() === 0, function() {
        b.controller.startRecording()
    })])]), TR({}, [TD({}, [b.model.numFrames() + " frames"])])])]), TD({className:"section"}, [TABLE({}, [TR({}, [TD({className:"section-header", colspan:2}, [SPAN({}, ["Show Objects"]), SPAN({className:"object-count"}, [a.size()]), "/", SPAN({className:"object-count"}, [b.model.object_id_to_object_map.size()])])]), TR({}, [TD({className:"section-column"}, [DIV({}, ["With type ", b._renderStringInput("object_type_filter")]), DIV({className:"break"}, [b._renderMultiCheckbox("datastore_filter", Map.create([["world",
        "world_store"], ["session", "session_store"]]), b._state.datastore_filter)])]), TD({className:"section-column"}, [DIV({}, ["Status in last ", b._renderNumericInput("object_status_window", 1, b._numFrames(), 0), " frames "]), DIV({}, [b._renderMultiCheckbox("object_status_filter", b._keyValueMapForStatusFilter(), b._state.object_status_filter)])])])])]), TD({className:"section"}, [TABLE({}, [TR({}, [TD({className:"section-header", colspan:2}, ["With Properties"])]), TR({}, [TD({className:"section-column"},
        [DIV({}, ["Named ", b._renderStringInput("property_name_filter")]), DIV({className:"break"}, [b._renderCheckbox("hide_non_matching_properties", "Hide non-matching")])]), TD({className:"section-column"}, [DIV({}, ["Status in last ", b._renderNumericInput("property_status_window", 1, b._numFrames(), 0), " frames"]), DIV({}, [b._renderMultiCheckbox("property_status_filter", b._keyValueMapForStatusFilter(), b._state.property_status_filter)]), DIV({}, [b._renderCheckbox("only_unknown_values", "unknown")])])])])])])])])
}, _renderVisualization:function(a) {
    for(var b = this, c = [], d = b._numFrames() - 2;d >= 0;d--) {
        var e = "header " + b._sourceClass(b.model.frame_to_source[d]);
        c.push(TD({className:e}, [b._frameLabel(d)]))
    }
    return DIV({className:"datacat-viz"}, [TABLE({className:"datacat-object-table"}, concat([TBODY({}, [TR({}, concat([TD({className:"header"}, [b._renderButton("Object Id", !0, function() {
        b._setSort(Datacat.View.Sort.ID)
    })]), TD({className:"header", colspan:2}, [b._renderButton("Type", !0, function() {
        b._setSort(Datacat.View.Sort.TYPE)
    })]), TD({className:"header"}, [b._renderButton("Status @ " + b._frameLabel(b._numFrames() - 1), !0, function() {
        b._setSort(Datacat.View.Sort.STATUS)
    })])], c.length > 0 ? [TD({className:"header", colspan:c.length}, ["Previous"])] : [])), TR({}, concat([TD({className:"header"}, [b._renderButton("Expand All", !0, function() {
        b._state.all_objects_expanded = !0;
        b.update()
    }), " / ", b._renderButton("Collapse All", !0, function() {
        b._state.all_objects_expanded = !1;
        b._state.expanded_object_ids = Set.create();
        b.update()
    })]), TD({className:"header"}, ["Property Name"]), TD({className:"header"}, ["Element Id"]), TD({className:"header"}, ["Value @ " + b._frameLabel(b._numFrames() - 1)])], c))])], a.map(function(a) {
        return b._renderObject(a)
    })))])
}, _renderObject:function(a) {
    return TBODY({id:this._objectContainerId(a)}, this._renderObjectRows(a))
}, _renderObjectRows:function(a) {
    var b = this, c = b._isObjectExpanded(a) ? b._sortedFilteredObjectProperties(a) : [], d = [TR({className:"object", onclick:function() {
        b._setObjectExpanded(a, !b._isObjectExpanded(a));
        return!1
    }}, concat([TD({className:"object-id"}, ["" + a.id]), TD({className:"object-type", colspan:2}, [a.typeName()])], b._renderFrameCells(a.frames(b._numFrames()))))];
    b._isObjectExpanded(a) && c.forEach(function(a) {
        var c = [];
        c.push(TD({className:"blank"}, [""]));
        a.elementId() === IDatastoreAddress.ELEMENT_ID_SCALAR ? c.push(TD({className:"property-name", colspan:2}, [a.name()])) : (c.push(TD({className:"property-name"}, [a.name()])), c.push(TD({className:"property-element-id"}, [b._renderObjectLink(a.elementId())])));
        c.pushAll(b._renderFrameCells(a.frames(b._numFrames()), a.type()));
        d.push(TR({className:"property"}, c))
    });
    return d
}, _renderFrameCells:function(a, b) {
    var c = this, d = [];
    a.forEachReverse(function(a, f) {
        var g = "";
        if(b !== void 0 && a.value !== void 0 && a.exists() && (f === 0 || a.status !== Datacat.FrameStatus.UNCHANGED)) {
            g = c._renderPropertyValue(a.value, b)
        }
        var h = b !== void 0 ? "property-value" : "object-status";
        h += " " + c._sourceClass(c.model.frame_to_source[f]);
        h += " " + a.status[0];
        d.push(TD({className:h}, [g]))
    });
    return d
}, _renderPropertyValue:function(a, b) {
    if(isUnknown(a)) {
        return"<" + a.user_text.toUpperCase() + ">"
    }else {
        if(b === Timestamp) {
            var c = new Date(a);
            return a === 0 ? "0" : c.strftime("%m-%d %H:%M:%S")
        }else {
            return StateObject.isSuperclassOf(b) ? a !== Datastore.OBJECT_ID_NULL ? this._renderObjectLink(a) : "null" : b === Pointer ? "<ptr>" : "" + a
        }
    }
}, _updateObject:function(a) {
    var b = this;
    Node.renderInDeadMode(function() {
        var c = b.document().getElementById(b._objectContainerId(a));
        c.removeAllChildren();
        b._renderObjectRows(a).forEach(function(a) {
            c.appendChild(a)
        })
    })
}, _navigateToObject:function(a) {
    var b = this;
    safeTimeout(function() {
        var c = b.document().getElementById(b._objectContainerId(a));
        if(c !== null) {
            var d = 0;
            do {
                d += c.offsetTop
            }while(c = c.offsetParent);
            b.document().body.scrollTop = d
        }
    }, 0)
}, _setObjectExpanded:function(a, b) {
    b ? this._state.expanded_object_ids.add(a.id) : this._state.expanded_object_ids.remove(a.id);
    this._updateObject(a)
}, _isObjectExpanded:function(a) {
    return this._state.all_objects_expanded || this._state.expanded_object_ids.contains(a.id)
}, _objectContainerId:function(a) {
    return"obj-" + a.id
}, _numFrames:function() {
    return this.model.numFrames()
}, _sourceClass:function(a) {
    return a === Datacat.Source.CLIENT ? "source-client" : a === Datacat.Source.SERVER ? "source-server" : a === Datacat.Source.SNAPSHOT ? "source-init" : "source-unknown"
}, _sourceLabel:function(a) {
    return a === Datacat.Source.CLIENT ? "Cli" : a === Datacat.Source.SERVER ? "Srv" : a === Datacat.Source.SNAPSHOT ? "Init" : "???"
}, _frameLabel:function(a) {
    if(a < 0) {
        return"0"
    }
    return a + " (" + this._sourceLabel(this.model.frame_to_source[a]) + ")"
}, _setSort:function(a) {
    this._state.primary_sort = a;
    this.update()
}, _objectSortFunc:function() {
    var a = this._objectSortFuncFromSortType(this._state.primary_sort), b = this._objectSortFuncFromSortType(Datacat.View.Sort.ID);
    return function(c, d) {
        return a(c, d) || b(c, d)
    }
}, _objectStatusSortKey:function(a) {
    return a[0]
}, _latestFrame:function(a) {
    return a.frame(this.model.numFrames() - 1)
}, _objectSortFuncFromSortType:function(a) {
    var b = this;
    return a === Datacat.View.Sort.STATUS ? function(a, d) {
        return compare(b._objectStatusSortKey(b._latestFrame(a).status), b._objectStatusSortKey(b._latestFrame(d).status))
    } : a === Datacat.View.Sort.TYPE ? function(a, b) {
        return compare(a.typeName(), b.typeName())
    } : function(a, b) {
        return isA(a.id, String) || isA(b.id, String) ? compare("" + a.id, "" + b.id) : compare(a.id, b.id)
    }
}, _objectMatchesPropertyFilter:function(a) {
    var b = this, c = !1;
    a.allProperties().forEachUntil(function(a, e) {
        if(b._propertyMatchesFilter(e)) {
            throw c = !0, IIterable.STOP;
        }
    });
    return c
}, _framedMatchesStatusFilter:function(a, b, c) {
    if(!b.isEmpty()) {
        return this._framedMatchesFilter(a, function(a) {
            return b.contains(a.status)
        }, c)
    }
    return!0
}, _framedMatchesFilter:function(a, b, c) {
    for(var c = c !== 0 ? c : this._numFrames(), d = !1, e = 0;e < c && !d;e++) {
        d = b(a.frame(this._numFrames() - e - 1))
    }
    return d
}, _objectFilterFunc:function() {
    var a = this;
    return function(b) {
        if(!a._state.datastore_filter.isEmpty() && !a._state.datastore_filter.contains(b.datastore().name)) {
            return!1
        }
        if(a._state.object_type_filter !== "" && a._state.object_type_filter !== b.typeName()) {
            return!1
        }
        if(!a._framedMatchesStatusFilter(b, a._state.object_status_filter, a._state.object_status_window)) {
            return!1
        }
        if(!a._objectMatchesPropertyFilter(b)) {
            return!1
        }
        return!0
    }
}, _propertyMatchesFilter:function(a) {
    if(!this._framedMatchesStatusFilter(a, this._state.property_status_filter, this._state.property_status_window)) {
        return!1
    }
    if(this._state.only_unknown_values && !this._framedMatchesFilter(a, function(a) {
        return isUnknown(a.value)
    }, this._state.property_status_window)) {
        return!1
    }
    if(this._state.property_name_filter !== "" && this._state.property_name_filter !== a.name()) {
        return!1
    }
    return!0
}, _sortedFilteredObjects:function() {
    return this.model.object_id_to_object_map.values().filter(this._objectFilterFunc()).sort(this._objectSortFunc())
}, _sortedFilteredObjectProperties:function(a) {
    var b = this;
    return a.allProperties().values().filter(function(a) {
        return!b._state.hide_non_matching_properties || b._propertyMatchesFilter(a)
    }).sort(function(a, b) {
            return compare(a.name(), b.name()) || compare(a.element_id, b.element_id)
        })
}});
Datacat.View.State = AsanaObject.subclass("Datacat.View.State", {}, {object_status_filter:SET_IN_CONSTRUCTOR, object_status_window:0, property_status_filter:SET_IN_CONSTRUCTOR, property_status_window:0, primary_sort:SET_IN_CONSTRUCTOR, expanded_object_ids:SET_IN_CONSTRUCTOR, all_objects_expanded:!1, datastore_filter:SET_IN_CONSTRUCTOR, hide_non_matching_properties:!1, only_unknown_values:!1, object_type_filter:"", property_name_filter:"", constructor:function(a) {
    Datacat.View.State.superproto.constructor.call(this, a);
    this.expanded_object_ids = Set.create();
    this.object_status_filter = Set.create();
    this.property_status_filter = Set.create();
    this.datastore_filter = Set.create();
    this.primary_sort = Datacat.View.Sort.ID
}});
__FILE__ = "luna/browser/debug/datacat/datacat_controller.js";
defineNamespace("Datacat");
Datacat.Controller = AsanaObject.subclass("Datacat.Controller", [IDatastoreObserver], {}, {_view:null, constructor:function() {
    Datacat.Controller.superproto.constructor.call(this);
    this.model = Datacat.Model.create()
}, setView:function(a) {
    this._view = a
}, toggleVisible:function() {
    this.model.is_visible_l.requestSet(!$v(this.model.is_visible_l))
}, startRecording:function() {
    this.model.clear();
    this.model.snapshotDatastore();
    this.model.is_recording = !0;
    this.model.beginClientFrame();
    env.world_store.addObserver(this);
    env.session_store.addObserver(this);
    this._maybeUpdateView()
}, stopRecording:function() {
    this.model.is_recording = !1;
    env.world_store.removeObserver(this);
    env.session_store.removeObserver(this);
    this._maybeUpdateView()
}, clear:function() {
    this.model.clear();
    this._maybeUpdateView()
}, onSyncResponseBegin:function() {
    this.model.is_recording && (this.model.beginServerFrame(), this._maybeUpdateView())
}, onSyncResponseEnd:function() {
    this.model.is_recording && (this.model.beginClientFrame(), this._maybeUpdateView())
}, onDatastoreValueChanged:function(a, b, c) {
    this.model.is_recording && this.model.writeValue(b, c)
}, onDatastoreValueCached:noop, onDatastoreValueUncached:function(a, b) {
    this.model.is_recording && this.model.removeValue(b)
}, onDatastoreValueInvalidated:noop, _maybeUpdateView:function() {
    this._view && !env.is_server && this._view.update()
}});
__FILE__ = "luna/browser/debug/datacat/datacat.js";
defineNamespace("Datacat");
update(Datacat, {Source:{SNAPSHOT:makeUniqueValue("SNAPSHOT"), UNKNOWN:makeUniqueValue("UNKNOWN"), CLIENT:makeUniqueValue("CLIENT"), SERVER:makeUniqueValue("SERVER")}, FrameStatus:{MISSING:makeUniqueValue("missing"), ADDED:makeUniqueValue("added"), REMOVED:makeUniqueValue("removed"), UNCHANGED:makeUniqueValue("unchanged"), CHANGED:makeUniqueValue("changed")}});
__FILE__ = "luna/common/datastore/isync_observer.js";
ISyncObserver = Interface.create("ISyncObserver", [], {}, {receiveInitialServerCounters:ABSTRACT, receiveInitialClientCounters:ABSTRACT, onSyncResponseBegin:ABSTRACT, onSyncResponseEnd:ABSTRACT, receiveInfoAboutSync:ABSTRACT});
__FILE__ = "luna/common/idebug_console.js";
IDebugConsole = Interface.create("IDebugConsole", [], {}, {createView:ABSTRACT, syncObserver:ABSTRACT});
__FILE__ = "luna/browser/debug/debug_console.js";
DebugConsole = AsanaObject.subclass("DebugConsole", [IDebugConsole, ISyncObserver], {COUNTER_HISTORY_SIZE:5, COUNTER_VALUE_NONE:"-", counterValueToString:function(a) {
    return a !== null ? "" + a : DebugConsole.COUNTER_VALUE_NONE
}, counterMsecValueToString:function(a) {
    return a !== null ? a + "ms" : DebugConsole.COUNTER_VALUE_NONE
}, counterUsecValueToString:function(a) {
    return DebugConsole.counterMsecValueToString(a !== null ? Math.round(a / 1E3) : null)
}}, {_view:null, _server_counter_state:null, _client_counter_state:null, _initial_server_counters:SET_IN_CONSTRUCTOR, datacat_controller:SET_IN_CONSTRUCTOR, constructor:function(a) {
    DebugConsole.superproto.constructor.call(this);
    this._luna_session = a;
    this.datacat_controller = Datacat.Controller.create()
}, createView:function(a) {
    return this._view = DebugConsole.BarView.create({_ui_context:ApplicationUIContext.create({browser:a, user:env.user()}), debug_console:this})
}, syncObserver:function() {
    return this
}, receiveInitialServerCounters:function(a) {
    this._server_counter_state = DebugConsole.CounterState.create(a)
}, receiveInitialClientCounters:function(a) {
    this._client_counter_state = DebugConsole.CounterState.create(a)
}, onSyncResponseBegin:function() {
    this.datacat_controller.onSyncResponseBegin()
}, onSyncResponseEnd:function() {
    this.datacat_controller.onSyncResponseEnd()
}, receiveInfoAboutSync:function(a, b) {
    var c = this;
    Flags.enable_debug_console && host.profiler.timeFuncDetailed("DebugConsole.receiveInfoAboutSync", function() {
        c._server_counter_state.receiveCounters(a);
        c._client_counter_state.receiveCounters(b);
        c._view && c._view.update()
    })
}});
DebugConsole.CounterState = AsanaObject.subclass("DebugConsole.CounterState", {}, {history:SET_IN_CONSTRUCTOR, names:SET_IN_CONSTRUCTOR, constructor:function(a) {
    DebugConsole.CounterState.superproto.constructor.call(this);
    this.history = CircularQueue.create(DebugConsole.COUNTER_HISTORY_SIZE, [a || Map.create()]);
    this.names = List.create([], List.POLICY_ANY_RANK)
}, receiveCounters:function(a) {
    var b = this;
    b.history.push(a);
    b.history.last().keys().forEach(function(a) {
        b.names.contains(a) || b.names.insertAtRank(a, a)
    })
}, latestValue:function(a) {
    return this.history.last().getOr(a, null)
}});
DebugConsole.BarView = View.subclass("DebugConsole.BarView", {}, {debug_console:ATTRIBUTE_REQUIRED, constructor:function(a) {
    DebugConsole.BarView.superproto.constructor.call(this, a);
    var b = this;
    if(Flags.enable_debug_console) {
        b._num_batches_text_node = document.createTextNode("-"), b._num_rpcs_text_node = document.createTextNode("-"), b._server_time_text_node = document.createTextNode("-"), b._client_time_text_node = document.createTextNode("-"), b._counters_visible_lvalue = LocalLvalue.create(!1), b._counter_window_view = b.createView(WindowView, {view_name:"WindowView.Counters", title_x:"Sync Counters", width:520, height:480, name:"debug_console", is_visible_x:b._counters_visible_lvalue, onClose:function() {
            b._counters_visible_lvalue.requestSet(!1)
        }}), b._counter_view = b._counter_window_view.createView(DebugConsole.CounterView, {debug_console:b.debug_console}), b._datacat_window_view = Datacat.View.createInWindow(this, {controller:b.debug_console.datacat_controller, model:b.debug_console.datacat_controller.model})
    }
}, _render:function() {
    var a = this;
    if(!Flags.enable_debug_console) {
        return""
    }
    var b = SPAN({"class":"tokenizer-and-tags", style:{display:$rval(function() {
        return env.focusedElementId() === "debug_console_flag_settings_tokenizer" ? "inline" : "none"
    })}}, [" ", a.createView(FlagSettingsTokenizerView, {who:env.user(), tokenizer_name:"user_flag_settings", focusable_element_id:"debug_console_flag_settings_tokenizer"}).render()]);
    return SPAN({id:"debug_console_bar", children:[a._counter_window_view.render(), a._datacat_window_view.render(), A({"class":"debug-link", id:"debug_console_flags_toggle", tabindex:-1, onmousedown:function() {
        env.focusedElementId() !== "debug_console_flag_settings_tokenizer" ? document.getElementById("debug_console_flag_settings_tokenizer").requestFocus() : env.setFocus(null)
    }, children:["Flags"]}), b, " | ", A({"class":"debug-link", tabindex:-1, onclick:function() {
        a._counters_visible_lvalue.requestSet(!$v(a._counters_visible_lvalue))
    }, children:["Counters"]}), " | ", A({"class":"debug-link", tabindex:-1, onclick:function() {
        a.debug_console.datacat_controller.toggleVisible()
    }, children:["Datacat"]}), " | ", "Batches: ", SPAN({"class":"counter"}, [a._num_batches_text_node]), " | RPCs: ", SPAN({"class":"counter"}, [a._num_rpcs_text_node]), " | Server: ", SPAN({"class":"time"}, [a._server_time_text_node]), " | Client: ", SPAN({"class":"time"}, [a._client_time_text_node]), " ", A({"class":"debug-link", tabindex:-1, onclick:function() {
        env.datastore_manager.reloadNowPreservingSession()
    }, children:["Reload with same session"]})]})
}, update:function() {
    if(Flags.enable_debug_console) {
        var a = this.debug_console._server_counter_state, b = this.debug_console._client_counter_state;
        this._num_batches_text_node.textContent = DebugConsole.counterValueToString(a.latestValue("datastore.num_batches"));
        this._num_rpcs_text_node.textContent = DebugConsole.counterValueToString(a.latestValue("dispatcher.num_rpcs"));
        this._server_time_text_node.textContent = DebugConsole.counterUsecValueToString(a.latestValue("dispatcher.total_wall_time_usec"));
        this._client_time_text_node.textContent = DebugConsole.counterMsecValueToString(b.latestValue("sync.process_response_wall_time_ms"));
        this._counter_view.update()
    }
}});
DebugConsole.CounterView = View.subclass("DebugConsole.CounterView", {}, {debug_console:ATTRIBUTE_REQUIRED, _root_node:null, constructor:function(a) {
    DebugConsole.CounterView.superproto.constructor.call(this, a);
    this._root_node = Node.createDeadNode("DIV", {id:"debug_console_window"})
}, _render:function() {
    return this._root_node
}, update:function() {
    var a = this;
    a._root_node.removeAllChildren();
    Node.renderInDeadMode(function() {
        a._root_node.appendChild(DIV({className:"notes", children:["Measured as the difference between the values at the ends of sync N and N-1"]}));
        a._root_node.appendChild(a._renderCounters(a.debug_console._server_counter_state, "Server Counter"));
        a._root_node.appendChild(a._renderCounters(a.debug_console._client_counter_state, "Client Counter"))
    })
}, _renderCounters:function(a, b) {
    return DIV({className:"counters", children:[DIV({className:"counter counter-header", children:[DIV({className:"counter-name", children:[b]}), DIV({className:"counter-value", children:["Value"]})]}), DIV({className:"counter-values", children:a.names.map(function(b) {
        var d = a.history.values().reverse().map(function(a) {
            return a.getOr(b, null)
        }).map(function(a) {
                return DIV({className:"counter-value", children:[DebugConsole.counterValueToString(a)]})
            });
        return DIV({className:"counter", children:concat([DIV({className:"counter-name", children:[b]})], d)})
    })})]})
}});
__FILE__ = "luna/common/app_registry.js";
AppRegistry = AsanaObject.subclass("AppRegistry", {_app_registry:null, get:function() {
    if(this._app_registry === null) {
        this._app_registry = AppRegistry.create()
    }
    return this._app_registry
}}, {constructor:function() {
    AppRegistry.superproto.constructor.call(this);
    this._app_name_to_constructor_map = Map.create();
    this._constructed_app_to_app_name_map = Map.create()
}, isAppRegistered:function(a) {
    return this._app_name_to_constructor_map.containsKey(a)
}, registerApp:function(a, b) {
    this._app_name_to_constructor_map.put(a, b)
}, createApp:Memoize.memoizeInThis("createApp", function(a) {
    var b = this, c = b._app_name_to_constructor_map.get(a);
    return Rvalue.runWithinAllowMemoizedPeeks(function() {
        var d = $v(c());
        b._constructed_app_to_app_name_map.put(d, a);
        return d
    })
}), appName:function(a) {
    return this._constructed_app_to_app_name_map.get(a)
}});
__FILE__ = "luna/common/validation.js";
Validation = {ParseFailure:AsanaObject.subclass("ParseFailure", {}, {description:SET_IN_CONSTRUCTOR, constructor:function(a) {
    Validation.ParseFailure.superproto.constructor.call(this);
    this.description = a
}}), State:{dom_node:LocalLvalue.create(null), failure_message:LocalLvalue.create(null), clear:function() {
    this.failure_message.requestSet(null);
    this.dom_node.requestSet(null)
}}};
__FILE__ = "luna/browser/forms.js";
forms = {getFormFieldType:function(a, b, c, d) {
    var b = b || "text", e = function(a) {
        return a.value
    }, f = function(a, b) {
        a.value = a.value === null ? "(Null Value)" : isUnknown(b) ? "(Loading...)" : b
    };
    switch(a) {
        case "INPUT":
            switch(b) {
                case "text":
                    ;
                case "password":
                    return{readFromElement:e, writeToElement:f, change_events:["input"], input_type:b};
                case "integer":
                    return{readFromElement:function(a) {
                        return parseInt(a.value, 10)
                    }, writeToElement:function(a, b) {
                        a.value = isNaN(b) ? "" : b
                    }, change_events:["input"], input_type:"text"};
                case "boolean":
                    return{readFromElement:function(a) {
                        return a.checked ? !0 : !1
                    }, writeToElement:function(a, b) {
                        if(isKnown(b)) {
                            var c = b === !0;
                            a.disabled = !1;
                            a.checked = c;
                            a.defaultChecked = c
                        }else {
                            a.disabled = !0
                        }
                    }, change_events:["click"], input_type:"checkbox"};
                case "date":
                    return{readFromElement:function(a) {
                        return a.value === "" ? null : (a = Day.parse(a.value), a === null ? Validation.ParseFailure.create("Invalid date") : a)
                    }, writeToElement:function(a, b) {
                        a.value = b === null || isUnknown(b) ? "" : b.strftime("%D")
                    }, change_events:["input"], input_type:"text"}
            }
            return null;
        case "TEXTAREA":
            return{readFromElement:e, writeToElement:f, change_events:["input"]};
        case "SELECT":
            return{readFromElement:b === "integer" ? function(a) {
                return parseInt(a.value, 10)
            } : e, writeToElement:f, change_events:["change"]};
        case "DIV":
            return c ? {updateElement:d, change_events:["input"]} : null;
        default:
            return null
    }
}, renderEnumDropdown:function(a, b, c, d) {
    d = d || {};
    d.data = b;
    d.data_type = c;
    var e = SELECT(d);
    env.is_server || Map.forEach(a, function(a, c) {
        e.options.add(new Option(c, a, !1, a === $v(b)))
    });
    return e
}, getFileFromInput:function(a) {
    return a._mock_file ? a._mock_file : a.files.length > 0 ? a.files[0] : null
}, hiddenFormField:function(a, b) {
    return INPUT({type:"hidden", name:a, value:b})
}, postToUrl:function(a, b) {
    var c = document.createElement("form");
    c.setAttribute("method", "POST");
    c.setAttribute("action", a);
    for(var d in b) {
        var e = forms.hiddenFormField(d, b[d]);
        c.appendChild(e)
    }
    document.body.appendChild(c);
    c.submit()
}};
__FILE__ = "luna/browser/keys.js";
KeyMap = AsanaObject.subclass("KeyMap", {Keys:{BACKSPACE:8, TAB:9, NUM_CENTER:12, ENTER:13, RETURN:13, SHIFT:16, CTRL:17, ALT:18, PAUSE:19, CAPS_LOCK:20, ESC:27, SPACE:32, PAGE_UP:33, PAGE_DOWN:34, END:35, HOME:36, LEFT:37, UP:38, RIGHT:39, DOWN:40, PRINT_SCREEN:44, INSERT:45, DELETE:46, ZERO:48, ONE:49, TWO:50, THREE:51, FOUR:52, FIVE:53, SIX:54, SEVEN:55, EIGHT:56, NINE:57, A:65, B:66, C:67, D:68, E:69, F:70, G:71, H:72, I:73, J:74, K:75, L:76, M:77, N:78, O:79, P:80, Q:81, R:82, S:83, T:84, U:85,
    V:86, W:87, X:88, Y:89, Z:90, LEFT_COMMAND:91, CONTEXT_MENU:93, RIGHT_COMMAND:92, NUM_ZERO:96, NUM_ONE:97, NUM_TWO:98, NUM_THREE:99, NUM_FOUR:100, NUM_FIVE:101, NUM_SIX:102, NUM_SEVEN:103, NUM_EIGHT:104, NUM_NINE:105, NUM_MULTIPLY:106, NUM_PLUS:107, NUM_MINUS:109, NUM_PERIOD:110, NUM_DIVISION:111, F1:112, F2:113, F3:114, F4:115, F5:116, F6:117, F7:118, F8:119, F9:120, F10:121, F11:122, F12:123, SEMICOLON:186, SEMICOLON_FIREFOX:59, COMMA:188, SLASH:191}, KeyNameFuncs:null, MODIFIERS:["alt", "shift",
    "meta_or_ctrl", "tab"]}, {_index:SET_IN_CONSTRUCTOR, constructor:function() {
    KeyMap.superproto.constructor.call(this);
    this._index = {}
}, addConfig:function(a) {
    var b = KeyMap.MODIFIERS.map(function(b) {
        return a[b] || !1
    }), c = a.key, b = this._serializeHandlerConfig(c in KeyMap.Keys ? KeyMap.Keys[c] : c, b, a.up || !1, a.capturing || !1, a.all || !1);
    b in this._index || (this._index[b] = []);
    this._index[b].push(a.handler)
}, _serializeHandlerConfig:function(a, b, c, d, e) {
    d += "|";
    d += e ? "all" : a + "|" + b.join("|") + "|" + c;
    return d
}, _findMatchingHandlers:function(a, b, c, d, e) {
    return this._index[this._serializeHandlerConfig(a, b, c, d, e)] || []
}, processKey:function(a, b) {
    var c = a.modifier(), d = KeyMap.MODIFIERS.map(function(b) {
        var d = a._event;
        return b === "meta_or_ctrl" ? d.hasMetaOrCtrl() : b === "tab" ? d.tabKey === !0 : c[b]
    });
    if(c.ctrl && host.isMac() || c.meta && !host.isMac()) {
        return!0
    }
    for(var e = a.key().code, f = a._event.type === "keyup", g = this._findMatchingHandlers(e, d, f, b, !1), d = this._findMatchingHandlers(e, d, f, b, !0), g = concat(g, d), d = g.length, e = 0;e < d;e++) {
        f = (0,g[e])(a);
        if(f === void 0) {
            f = Node.STOP
        }
        if(!Node.updateEventForHandlerReturnValue(a, f)) {
            return!1
        }
    }
    return!0
}});
(function() {
    KeyMap.KeyNameFuncs = {CTRL:function() {
        return env.is_server || host.isMac() ? "\u2303" : "Ctrl+"
    }, ALT:function() {
        return env.is_server || host.isMac() ? "\u2325" : "Alt+"
    }, META_OR_CTRL:function() {
        return env.is_server || host.isMac() ? "\u2318" : "Ctrl+"
    }, SHIFT:function() {
        return"Shift+"
    }, TAB:function() {
        return"Tab+"
    }, TAB_ONLY:function() {
        return"Tab"
    }, TAB_THEN:function() {
        return"Tab then "
    }, DEL:function() {
        return"DEL"
    }, BACKSPACE:function() {
        return"BKSP"
    }, UP:function() {
        return SPAN({"class":"symbol_arrow"}, ["\u2191"])
    }, DOWN:function() {
        return SPAN({"class":"symbol_arrow"}, ["\u2193"])
    }, LEFT:function() {
        return SPAN({"class":"symbol_arrow"}, ["\u2190"])
    }, RIGHT:function() {
        return SPAN({"class":"symbol_arrow"}, ["\u2192"])
    }, ENTER:function() {
        return SPAN({"class":"symbol_enter"}, ["\u21b5"])
    }, ESC:function() {
        return"ESC"
    }}
})();
__FILE__ = "luna/browser/dom_dimensions.js";
DomDimensions = define("DomDimensions", AsanaObject.subclass("DomDimensions", {}, {_element:SET_IN_CONSTRUCTOR, x_r:SET_IN_CONSTRUCTOR, y_r:SET_IN_CONSTRUCTOR, width_r:SET_IN_CONSTRUCTOR, height_r:SET_IN_CONSTRUCTOR, content_width_r:SET_IN_CONSTRUCTOR, content_height_r:SET_IN_CONSTRUCTOR, constructor:function(a) {
    DomDimensions.superproto.constructor.call(this);
    this._element = a;
    var b = function(b, c) {
        if(c) {
            return MochiKit.Style.getElementDimensions(a, c)[b]
        }
        if(b === "w") {
            return a.getBoundingClientRect().width
        }else {
            if(b === "h") {
                return a.getBoundingClientRect().height
            }else {
                ufu("Unknown attribute_key", b)
            }
        }
    }, c = function(b) {
        if(b === "x") {
            return a.getBoundingClientRect().left
        }else {
            if(b === "y") {
                return a.getBoundingClientRect().top
            }else {
                ufu("Unknown attribute_key", b)
            }
        }
    };
    this.x_r = ElementDimensionsLvalue.create({name:"edl:x", element:a, func:function() {
        return c("x")
    }}).setAsSafelyPeekableByAncestor();
    this.x_r.dom_dimensions_element = a;
    this.x_r.dom_dimensions_dimension = "x";
    this.y_r = ElementDimensionsLvalue.create({name:"edl:y", element:a, func:function() {
        return c("y")
    }}).setAsSafelyPeekableByAncestor();
    this.y_r.dom_dimensions_element = a;
    this.y_r.dom_dimensions_dimension = "y";
    this.width_r = ElementDimensionsLvalue.create({name:"edl:width", element:a, func:function() {
        return b("w", !1)
    }}).setAsSafelyPeekableByAncestor();
    this.width_r.dom_dimensions_element = a;
    this.width_r.dom_dimensions_dimension = "width";
    this.height_r = ElementDimensionsLvalue.create({name:"edl:height", element:a, func:function() {
        return b("h", !1)
    }}).setAsSafelyPeekableByAncestor();
    this.height_r.dom_dimensions_element = a;
    this.height_r.dom_dimensions_dimension = "height";
    this.content_width_r = ElementDimensionsLvalue.create({name:"edl:content_width", element:a, func:function() {
        return b("w", !0)
    }}).setAsSafelyPeekableByAncestor();
    this.content_width_r.dom_dimensions_element = a;
    this.content_width_r.dom_dimensions_dimension = "content_width";
    this.content_height_r = ElementDimensionsLvalue.create({name:"edl:content_height", element:a, func:function() {
        return b("h", !0)
    }}).setAsSafelyPeekableByAncestor();
    this.content_height_r.dom_dimensions_element = a;
    this.content_height_r.dom_dimensions_dimension = "content_height"
}, x:function() {
    return $v(this.x_r)
}, y:function() {
    return $v(this.y_r)
}, width:function() {
    return $v(this.width_r)
}, height:function() {
    return $v(this.height_r)
}, right:function() {
    return this.x() + this.width()
}, bottom:function() {
    return this.y() + this.height()
}, center:function() {
    return this.x() + this.width() / 2
}, middle:function() {
    return this.y() + this.height() / 2
}, contentLeft:function() {
    return this.x() + (parseFloat(MochiKit.Style.getStyle(this._element, "borderLeft")) || 0) + (parseFloat(MochiKit.Style.getStyle(this._element, "paddingLeft")) || 0)
}, contentTop:function() {
    return this.y() + (parseFloat(MochiKit.Style.getStyle(this._element, "borderTop")) || 0) + (parseFloat(MochiKit.Style.getStyle(this._element, "paddingTop")) || 0)
}, contentWidth:function() {
    return $v(this.content_width_r)
}, contentHeight:function() {
    return $v(this.content_height_r)
}}));
__FILE__ = "luna/common/xpath_utils.js";
XpathUtils = {hasClassExpression:function(a) {
    return"contains(concat(' ', @class, ' '), ' " + a + " ')"
}};
__FILE__ = "luna/common/dom/dom_event.js";
DomEvent = AsanaObject.subclass("DomEvent", {create:function(a) {
    if(a instanceof DomEvent) {
        return a
    }else {
        if(a._luna_dom_event === void 0) {
            a._luna_dom_event = DomEvent._create(a)
        }
        return a._luna_dom_event
    }
}, _INSTANCE_FIELDS:["type", "target", "keyCode", "charCode", "ctrlKey", "altKey", "shiftKey", "metaKey", "eventPhase", "offsetX", "offsetY", "pageX", "pageY", "relatedTarget", "toElement", "layerX", "layerY", "touches"]}, {_event:SET_IN_CONSTRUCTOR, constructor:function(a) {
    var b = this;
    DomEvent.superproto.constructor.call(b);
    b._event = a;
    DomEvent._INSTANCE_FIELDS.forEach(function(c) {
        b[c] = a[c]
    });
    if(a.asana_code !== void 0) {
        this.charCode = this.keyCode = a.asana_code
    }
}, stopPropagation:function() {
    this._event.stopPropagation()
}, preventDefault:function() {
    this._event.preventDefault()
}, hasMetaOrCtrl:function() {
    return host.isMac() && this.metaKey === !0 || !host.isMac() && this.ctrlKey === !0
}, clipboardText:function() {
    var a = this._event.clipboardData;
    return a ? a.getData("text/plain") || null : null
}, clipboardHtml:function() {
    var a = this._event.clipboardData;
    return a ? a.getData("text/html") || a.getData("text/plain") || null : null
}});
__FILE__ = "luna/common/dom/dom_node_compatibility.js";
document.documentElement !== void 0 && document.documentElement.classList ? safeUpdate(Node.prototype, {containsClass:function(a) {
    return this.classList.contains(a)
}}) : safeUpdate(Node.prototype, {containsClass:function(a) {
    if(!this.className) {
        return!1
    }
    return this.className.match(RegExp("(^|\\s)" + a + "(\\s|$)"))
}});
__FILE__ = "luna/browser/uinode.js";
(function() {
    var a = function() {
        return this
    }.call();
    "A ABBR ACRONYM ADDRESS APPLET AREA B BASE BASEFONT BDO BIG BLOCKQUOTE BODY BR BUTTON CANVAS CAPTION CENTER CITE CODE COL COLGROUP DD DEL DFN DIR DIV DL DT EM EMBED FIELDSET FONT FORM FRAME FRAMESET H1 H2 H3 H4 H5 H6 HEAD HR HTML I IFRAME IMG INPUT INS ISINDEX KBD LABEL LEGEND LI LINK MAP MENU META NOFRAMES NOSCRIPT OBJECT OL OPTGROUP OPTION P PARAM PRE Q S SAMP SCRIPT SELECT SMALL SPAN STRIKE STRONG STYLE SUB SUP TABLE TBODY TD TEXTAREA TFOOT TH THEAD TITLE TR TT U UL VAR".split(/\s+/).forEach(function(b) {
        a[b] = function(a, d) {
            d === void 0 && (a instanceof Array || a instanceof List || a instanceof Rvalue) ? a = {children:a} : void 0 === a ? a = {} : a.children = a.children || d || [];
            if(Flags.diagnostics_show_dom_node_source && !env.is_server) {
                var e = getJsCallerName(), f = EvaluationContext.getTopRvalue();
                a.title = "JS:\n---\n" + e + "\n\nRval:\n-----\n" + f
            }
            return Node.render(b, a)
        }
    })
})();
FRAG = SPAN;
Node.documentActiveElement = function() {
    try {
        var a = document.activeElement;
        if(a && !a.id) {
            Node._dummy_variable_to_ensure_this_isnt_optimized_out = !0
        }
        return a
    }catch(b) {
        if(b.toString().contains("Permission denied to access property")) {
            return console.log("Returning null for documentActiveElement because permission denied"), null
        }
        host.recordWarning("document.activeElement failed", WrappedException.create(b));
        return null
    }
};
Node.FOCUSED_ELEMENT_LOCATOR = "__focused_element";
Node.allMatching = function(a) {
    if(a === Node.FOCUSED_ELEMENT_LOCATOR) {
        return[Node.documentActiveElement()]
    }else {
        try {
            var b = document.evaluate(a, document, null, XPathResult.UNORDERED_NODE_ITERATOR_TYPE, null)
        }catch(c) {
            throw log.info("Failed trying to evaluate XPath", a), c;
        }
        for(var a = [], d;(d = b.iterateNext()) !== null;) {
            a.push(d)
        }
        return a
    }
};
Node.findMatching = function(a) {
    return Node.allMatching(a)[0] || null
};
(function() {
    var a = window.open;
    update(window, {openAsync:function() {
        var b = $A(arguments);
        Node.addDomHandlerFinishedFunc(function() {
            var c = typeof b[b.length - 1] === "function" ? b.pop() : null, d = a.apply(window, b);
            c && c(d)
        })
    }, openAndSadlyRunEventHandlers:function() {
        var b = arguments;
        return host.runOutsideExceptionHandler(function() {
            return a.apply(window, b)
        })
    }})
})();
(function() {
    if(globals.alert !== void 0) {
        var a = alert;
        update(globals, {alert:function() {
            ufu("alert is unsafe in handlers")
        }, alertAsync:function() {
            var b = arguments;
            Node.addDomHandlerFinishedFunc(function() {
                return a.apply(null, b)
            })
        }})
    }
})();
Node.prototype.__defineGetter__("dimensions", Memoize.memoizeInThis("Node.dimensions", function() {
    return DomDimensions.create(this)
}));
safeUpdate(Node.prototype, {_key_map:null, _num_unknown_propagating_children:0, _unknown_value:null, _unknown_node:null, had_text_on_backspace_keydown:!1, _hasUnknownChildrenForPropagation:function() {
    return this._has_unknown_propagating_children_r ? !1 : this._num_unknown_propagating_children > 0
}, _has_unknown_propagating_children_r:null, liveAppendToBody:function() {
    var a = EvaluationContext.getTopRvalue(), a = (a ? a.getName() : "(no-rvalue)") + ".liveAppendToBody." + this.tagName + "[" + (this.id || this.className) + "]";
    AppendToBodyRvalue.create(this, a).peek()
}, _enliven:function(a) {
    var b = this;
    env.runningApp() && (Flags.diagnostics_do_expensive_error_checking || Flags.diagnostics_highlight_new_elements) && !a.disable_highlighting_for_diagnostics && env.runningApp().ui_node_tree._registerForElementDiagnostics(this);
    var c = this.tagName;
    switch(c) {
        case "INPUT":
            this.autocomplete = "off"
    }
    var d = void 0, e = null, f;
    for(f in a) {
        var g = a[f];
        switch(f) {
            case "dimensions":
                ;
            case "tag":
                ;
            case "children":
                break;
            case "empty_text":
                e = g;
                break;
            case "data":
                !(g instanceof Rvalue) && !("handler" in a) && !("readonly" in a) && ufu("Constant-valued `data=` property without `handler=` function", g);
                (this._form_field_type = forms.getFormFieldType(c, $v(a.data_type), $v(a.contenteditable), $v(a.update))) || ufu("`data=` attribute invalid on this tag/data_type combination", "tag:", c, "data_type:", a.data_type, "node:", this);
                if(this._form_field_type.input_type) {
                    this.type = this._form_field_type.input_type
                }
                d = g;
                break;
            case "handler":
                g instanceof Rvalue && ufu("Rvalued `handler=` unimplemented", g);
                this.handler = g;
                break;
            default:
                this.watchProperty(f, g)
        }
    }
    d !== void 0 && (e ? this._watchData(JavascriptLvalue.create(function() {
        var a = $v(d);
        return(!a || a.length === 0) && !b.isFocused() ? $v(e) : a
    }, function(a) {
        return $L(d).requestSet(a)
    }, "watchData.EmptyText")) : this._watchData(d));
    a = a.children;
    a !== void 0 && this.watchChildren(a);
    return this
}, _appendLiveDOM:function(a, b) {
    var c = null, d = this, e = function(e) {
        c === null ? d._insertChildNodeBefore(e, b) : d._replaceChildNode(e, c);
        c = e;
        if(a instanceof Rvalue) {
            a.dom_node = e
        }
    };
    return Rvalue.watchScalar(a, function(b) {
        if(!env.is_server) {
            if(b instanceof Node) {
                b.tagName !== "BODY" && e(b)
            }else {
                if(isUnknown(b)) {
                    var c = SPAN({"class":"unknown-" + b.css_class_suffix}, [b.user_text]);
                    if(d.tagName === "TBODY" || d.tagName === "THEAD" || d.tagName === "TABLE") {
                        c = TR([TD([c])])
                    }
                    Flags.diagnostics_log_unknown_values_in_ui && UnknownValue.prettyLogUnknownValueInDom(b, d);
                    if(b.propagates_unknown_values_in_ui || !Flags.enable_only_propagate_unknown_loading_values_to_loading_boundaries) {
                        c._num_unknown_propagating_children = 1
                    }
                    c._unknown_value = b;
                    e(c)
                }else {
                    if(b instanceof Object) {
                        ufu("All UI values should be `Node`s or primitives", b)
                    }else {
                        try {
                            e(document.createTextNode("" + b))
                        }catch(h) {
                            throw log.info("Got exception calling setNode. ", "node_value", b, "node_xvalue", a, "self", d), h;
                        }
                    }
                }
            }
        }
    })
}, isFocused:function() {
    return $v(this.isFocusedR())
}, isFocusedR:function() {
    if(this._is_focused_r === void 0) {
        this._is_focused_r = env.isElementIdFocusedR(this.id), this._is_focused_r.setAsSafelyPeekableByAncestor()
    }
    return this._is_focused_r
}, requestFocus:function() {
    env.setFocus(this.id)
}, hasUnknownChildrenR:function() {
    return this._has_unknown_propagating_children_r
}, firstUnknownValue:function() {
    if(this._unknown_value) {
        return this._unknown_value
    }else {
        for(var a = 0;a < this.children.length;a++) {
            var b = this.children[a];
            if(b._num_unknown_propagating_children > 0) {
                return b.firstUnknownValue()
            }
        }
    }
    ufu("Node has no unknown children", this)
}, unknownValues:function(a) {
    a = a || [];
    this._unknown_value && a.push([this, this._unknown_value]);
    this._unknown_node && this._unknown_node.unknownValues(a);
    for(var b = 0;b < this.children.length;b++) {
        this.children[b].unknownValues(a)
    }
    return a
}, _onChildBecameKnown:function() {
    this._num_unknown_propagating_children--;
    this._num_unknown_propagating_children === 0 && (vlogEnabled("uinode") && vlog("uinode", "all children became known", this), this._has_unknown_propagating_children_r ? env.frp.addDirtyRvalueIfUsed(this._has_unknown_propagating_children_r) : this.parentNode && this.parentNode._onChildBecameKnown())
}, _onChildBecameUnknown:function() {
    this._num_unknown_propagating_children++;
    this._num_unknown_propagating_children === 1 && (vlogEnabled("uinode") && vlog("uinode", "children became unknown", this), this._has_unknown_propagating_children_r ? env.frp.addDirtyRvalueIfUsed(this._has_unknown_propagating_children_r) : this.parentNode && this.parentNode._onChildBecameUnknown())
}, removeAllChildren:function() {
    for(;this.hasChildNodes();) {
        this._removeChildNode(this.firstChild)
    }
}, watchChildren:function(a) {
    if(this._isContainerType()) {
        var b = function(a) {
            return a === null ? null : a instanceof Rvalue ? a.dom_node : a
        }, c = this;
        Rvalue.watchList(a, {onUnknown:function(a) {
            c._appendLiveDOM(a, null)
        }, onKnown:function() {
            c.removeAllChildren()
        }, onInserted:function(d, e) {
            var f = EvaluationContext.getTopRvalueEntry(), g = f[EvaluationContext.RVALUE_ENTRY_INDEX_RVALUE], f = f[EvaluationContext.RVALUE_ENTRY_INDEX_MANUAL_INPUT_KEY];
            env.is_server && f !== null ? env.frp.addRvalueJob(g, f, function() {
                c._appendLiveDOM(d, null)
            }) : (a instanceof Rvalue && !(d instanceof Rvalue || d instanceof Node) && ufu("Cannot insert a literal into a reactive child list; we will not know how to remove it.", d), c._appendLiveDOM(d, b(e)))
        }, onMoved:function(a, e) {
            env.is_server || c._insertChildNodeBefore(b(a), b(e))
        }, onRemoved:function(a) {
            env.is_server || c._removeChildNode(b(a))
        }})
    }
}, isAncestorOfComputedDownwards:function(a) {
    if(this === a) {
        return!0
    }
    for(var b = 0;b < this.children.length;b++) {
        if(this.children[b].isAncestorOfComputedDownwards(a)) {
            return!0
        }
    }
    return!1
}, watchProperty:function(a, b) {
    var c = this, d = function(b) {
        c.set(a, b)
    };
    Rvalue.watchScalar(b, function(b) {
        a === "for" && b instanceof Node ? d(b._getID()) : a === "style" && b instanceof Object ? (isUnknown(b) && ufu("style can't go unknown. You may need to add a loading-boundary somewhere."), Map.forEach(b, function(a, b) {
            Rvalue.watchScalar(b, function(b) {
                c.setStyleAttr(a, b)
            })
        })) : isUnknown(b) || d(b)
    })
}, _watchData:function(a) {
    var b = this;
    this._connectDataFieldEvents(a);
    Rvalue.watchScalar(a, function(a) {
        b.updateFieldValue(a)
    })
}, _getID:function() {
    if(!this.id) {
        this.id = "luna" + Node._id_counter()
    }
    return this.id
}, _isContainerType:function() {
    var a = Set.create(["AREA", "BASE", "BASEFONT", "BR", "COL", "FRAME", "HR", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM"]);
    return function() {
        return!a.contains(this.tagName)
    }
}(), _insertChildNodeBefore:function(a, b) {
    try {
        var c = MochiKit.DOM.isChildNode(Node.documentActiveElement(), a) ? Node._SavedFocus.create() : null, d = a.parentNode !== this;
        this.insertBefore(a, b);
        c !== null && c.restore();
        d && a._hasUnknownChildrenForPropagation() && this._onChildBecameUnknown()
    }catch(e) {
        logException(e, null), ufu("Caught exception in _insertChildNodeBefore -- see above")
    }
}, _removeChildNode:function(a) {
    try {
        this.removeChild(a), a.removed_from_dom = !0, a._hasUnknownChildrenForPropagation() && this._onChildBecameKnown()
    }catch(b) {
        logException(b, null), ufu("Caught exception in _removeChildNode -- see above")
    }
}, _replaceChildNode:function(a, b) {
    try {
        assertThat(Matcher.isInstanceOf(Node), a);
        assertThat(Matcher.isInstanceOf(Node), b);
        assertEq(this, b.parentNode, "old_node", b, "new_node", a);
        this.replaceChild(a, b);
        var c = b._hasUnknownChildrenForPropagation(), d = a._hasUnknownChildrenForPropagation();
        c && !d ? this._onChildBecameKnown() : !c && d && this._onChildBecameUnknown()
    }catch(e) {
        logException(e, null), ufu("Caught exception in _replaceChildNode -- see above")
    }
}, clear:function() {
    this.innerHTML = ""
}, updateFieldValue:function(a) {
    var b = this._form_field_type;
    b || ufu("Can't update field that's not an input type");
    if(b.updateElement) {
        b.updateElement.call(this, this, a)
    }else {
        if(Node.documentActiveElement() === this && a !== null) {
            var c = b.readFromElement(this);
            if(equals(c, a)) {
                return
            }
        }
        b.writeToElement(this, a)
    }
}, _getAppropriateEventKey:function(a) {
    return a === "onmouseleave" || a === "onmouseenter" || a === "onmouseout" || a === "onmouseover" ? this._getAppropriateEventKeyForMouseEventAndValidate(a) : a
}, _getAppropriateEventName:function(a) {
    return this._getAppropriateEventKey("on" + a).replace(/^on/, "")
}, _getWrappedDomHandlerFunction:function(a, b) {
    var c = this, d = null;
    if(env.isInUiTest() && (a === "onblur" || a === "onfocus")) {
        d = ExceptionHandler.ReentryStrategy.ALLOW
    }
    var e = Node.wrappedHandler({method:"Node._getWrappedDomHandlerFunction", node:c, key:a}, function(d) {
        if(a === "onmouseleave" || a === "onmouseenter") {
            for(var e = d.relatedTarget ? d.relatedTarget : d.toElement;e && e !== c;) {
                try {
                    e = e.parentNode
                }catch(h) {
                    e = null
                }
            }
            if(e === c) {
                return
            }
        }
        return Node.updateEventForHandlerReturnValue(d, b(d))
    }, d);
    return function(b) {
        Node._handling_event_key = a;
        Node._dom_handler_finished_funcs = [];
        var c;
        try {
            if(b.type === "blur" && env.frp.propagating()) {
                return
            }
            c = e.call(null, b);
            Node._dom_handler_finished_funcs.forEach(function(a) {
                a()
            })
        }finally {
            Node._handling_event_key = null, Node._dom_handler_finished_funcs = []
        }
        return c
    }
}, set:function(a, b) {
    var c = this;
    switch(a) {
        case "is_unknown_boundary":
            if(b) {
                this._has_unknown_propagating_children_r = $rval(function() {
                    return c._num_unknown_propagating_children > 0
                })
            }
            break;
        case "key_map":
            b !== null && !this._key_map && this.addKeyMap(b);
            break;
        case "tooltip":
            if((this.__tooltip = b) && !env.isMobile()) {
                this.listen("mouseenter", function() {
                    env.realAppSession().tooltipElementIdL().requestSet(c._getID())
                });
                var d = function() {
                    env.realAppSession().tooltipElementIdL().requestSet(null)
                };
                this.listen("mouseleave", d);
                this.listen("mousedown", d)
            }
            break;
        case "tooltip_delay":
            this.__tooltip_delay = b;
            break;
        case "tooltip_placement":
            this.__tooltip_placement = b;
            break;
        case "tooltip_gravity":
            this.__tooltip_gravity = b;
            break;
        case "tooltip_class":
            this.__tooltip_class = b;
            break;
        case "tooltip_silhouette":
            this.__tooltip_silhouette = b;
            break;
        case "tooltip_nofade":
            this.__tooltip_nofade = b;
            break;
        case "ontransitionend":
            !env.is_server && b && this.listen(this._getTransitionEndEventName(), b, !0);
            break;
        default:
            a === "tabindex" && b === Node.TABINDEX_UNDEFINED && (b = void 0);
            if(d = b instanceof Function) {
                var e = this._getAppropriateEventKey(a), f = this._getWrappedDomHandlerFunction(a, b)
            }else {
                e = a, f = b
            }
            d || e === "innerHTML" || e === "scrollTop" ? this[e] = f : f !== null ? this.setAttribute(e, f) : this.removeAttribute(e)
    }
}, listen:function(a, b, c) {
    var d = "on" + a, a = {real_event_name:this._getAppropriateEventName(a), wrapped_handler:this._getWrappedDomHandlerFunction(d, b), use_capture:c || !1};
    this.addEventListener(a.real_event_name, a.wrapped_handler, a.use_capture);
    return a
}, unlisten:function(a) {
    this.removeEventListener(a.real_event_name, a.wrapped_handler, a.use_capture)
}, reactiveListen:function(a, b, c) {
    if(!env.is_server) {
        var d = this, e = d.listen(a, b, c);
        JavaScriptRvalue.create({name:"reactiveListener:" + a, computeValue:noop, onUnused:function() {
            d.unlisten(e)
        }}).becomeWatch().peek()
    }
}, setStyleAttr:function(a, b) {
    var c = {"float":"cssFloat"}, c = a in c ? c[a] : a, d = !{zIndex:!0, azimuth:!0, pause:!0, pitch:!0, speechRate:!0, windows:!0, orphans:!0, opacity:!0}[c] && typeof b === "number" && parseFloat(b, 10) === b ? b + "px" : b === null ? "" : "" + b;
    this.style[c] = d;
    c === "display" && b === "none" && "blur" in this && this.blur()
}, addClass:function(a) {
    var b = " " + (this.className || "") + " ";
    if(!b.contains(" " + a + " ")) {
        this.className = b + a
    }
}, removeClass:function(a) {
    this.className = (" " + (this.className || "") + " ").replace(" " + a + " ", " ")
}, _getAppropriateEventKeyForMouseEventAndValidate:function(a) {
    var b = a === "onmouseleave" ? "onmouseout" : a === "onmouseenter" ? "onmouseover" : a;
    this._original_event_key_map = this._original_event_key_map || {};
    var c = this._original_event_key_map[b];
    c && c !== a ? ufu("A Node cannot contain both the " + a + " and " + c + " event handlers") : this._original_event_key_map[b] = a;
    return b
}, _connectDataFieldEvents:function(a) {
    var b = this, c = this, d = {value_to_reinstate:void 0}, e = Node.wrappedHandler({method:"Node._connectDataFieldEvents", node:b}, function(e) {
        assert(b.isInDocument());
        var f = function() {
            return b._defaultHandler(c, a, d)
        }, f = b.handler ? b.handler(e, f) : f();
        if(f === void 0) {
            host.recordWarning("Data event handler should not return undefined, probably a bug."), f = Node.JUST_DEFAULT
        }
        return Node.updateEventForHandlerReturnValue(e, f)
    }), f = host.wrapInExceptionHandler("UINode.handleBlur", ExceptionHandler.ReentryStrategy.ALLOW, function() {
        UINodeTree._FocusManager._ignore_focus_and_blur_events || MochiKit.DOM.isChildNode(c, document.body) && d.value_to_reinstate !== void 0 && b.updateFieldValue(d.value_to_reinstate)
    });
    this._form_field_type.change_events.forEach(function(a) {
        c.addEventListener(a, e, !1)
    });
    c.addEventListener("blur", f, !1)
}, _defaultHandler:function(a, b, c) {
    a = this._form_field_type.readFromElement(a);
    if(a instanceof Validation.ParseFailure) {
        Validation.State.failure_message.requestSet(a.description), Validation.State.dom_node.requestSet(this), View.runWithoutLvalueChecking(function() {
            c.value_to_reinstate = $v(b)
        })
    }else {
        var d = b.getLvalue();
        Validation.State.clear();
        d.requestSet(a);
        c.value_to_reinstate = void 0
    }
    return Node.JUST_DEFAULT
}, _getTransitionEndEventName:function() {
    return navigator.userAgent.contains("Firefox") ? "transitionend" : "webkitTransitionEnd"
}, _connectKeyEvents:function() {
    var a = this, b = function(a) {
        if(a === "keypress") {
            return"keydown"
        }else {
            if(a === "keydown") {
                return"keypress"
            }
        }
    }, c = Node.wrappedHandler({method:"Node._conectKeyEvents handleBubblingKeyEvent", node:a}, function(c) {
        c.type === env.runningApp().ui_node_tree._event_bubble_skip_type ? (c.stopPropagation(), env.runningApp().ui_node_tree._event_bubble_skip_type = void 0) : (env.runningApp().ui_node_tree._event_bubble_skip_type = b(c.type), a._key_map.processKey(new Signal.Event(a, c), !1) || c.preventDefault())
    }), d = Node.wrappedHandler({method:"Node._conectKeyEvents handleCapturingKeyEvent", node:a}, function(c) {
        c.type === env.runningApp().ui_node_tree._event_capture_skip_type ? (c.stopPropagation(), env.runningApp().ui_node_tree._event_capture_skip_type = void 0) : (env.runningApp().ui_node_tree._event_capture_skip_type = b(c.type), a._key_map.processKey(new Signal.Event(a, c), !0) || c.preventDefault())
    });
    this.addEventListener("keypress", d, !0);
    this.addEventListener("keydown", d, !0);
    this.addEventListener("keyup", d, !0);
    this.addEventListener("keypress", c, !1);
    this.addEventListener("keydown", c, !1);
    this.addEventListener("keyup", c, !1)
}, addKeyMap:function(a) {
    if(!this._key_map) {
        this._connectKeyEvents(), this._key_map = KeyMap.create()
    }
    for(var b = 0;b < a.length;++b) {
        this._key_map.addConfig(a[b])
    }
}, descendentsMatchingXpath:function(a) {
    for(var a = document.evaluate(a, this, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null), b = [];;) {
        var c = a.iterateNext();
        if(c === null) {
            break
        }else {
            b.push(c)
        }
    }
    return b
}, ensureBottomVisible:function() {
    var a = document.elementFromPoint(this.dimensions.x(), this.dimensions.y() + this.dimensions.height());
    (a === null || !MochiKit.DOM.isChildNode(a, this)) && this.scrollIntoView(!1)
}, ensureTopVisible:function() {
    var a = document.elementFromPoint(this.dimensions.x(), this.dimensions.y());
    (a === null || !MochiKit.DOM.isChildNode(a, this)) && this.scrollIntoView(!0)
}, isInDocument:function() {
    assertEquals(!1, env.is_server);
    for(var a = this;a !== null;) {
        if(a === document) {
            return!0
        }
        a = a.parentNode
    }
    return!1
}, setChildren:function(a) {
    var b = this;
    b.removeAllChildren();
    a.forEach(function(a) {
        b.appendChild(a)
    })
}, debugPath:function(a) {
    a = a === void 0 ? 99999 : a;
    if(a === 0) {
        return"..."
    }else {
        if(this === document) {
            return"document"
        }else {
            var a = this.parentNode ? this.parentNode.debugPath(a - 1) + ">" : "", b = this.tagName;
            this.id && (b += "#" + this.id);
            this.className && this.className.length > 0 && (b += "[" + MochiKit.Text.truncate(this.className, 30, "...") + "]");
            return a + b
        }
    }
}});
update(Node, {NBSP:"\u00a0", RAQUO:"\u00bb", _id_counter:makeCounter(), _handling_event_key:null, _dom_handler_finished_funcs:null, addDomHandlerFinishedFunc:function(a) {
    Node._dom_handler_finished_funcs.push(a)
}, createLiveNode:function(a, b) {
    Flags.diagnostics_do_expensive_error_checking && a.toLowerCase() === "body" && ufu("body tags are not allowed. Luna provides the body. You provide the contents of the body.");
    var c = document.createElement(a);
    c._enliven(b);
    return c
}, createDeadNode:function(a, b) {
    var c = document.createElement(a);
    Map.forEach(b, function(a, b) {
        b = $v(b);
        a === "children" ? Rvalue.forEachValue(b, function(a) {
            a instanceof Node ? c.appendChild(a) : c.appendChild(document.createTextNode("" + a))
        }) : (a === "class" ? a = "className" : (a === "colspan" || a === "rowspan") && c.setAttribute(a, b), c[a] = b)
    });
    return c
}, renderInDeadMode:function(a) {
    var b;
    runWithReplacedGlobals(function() {
        b = a()
    }, {"Node.render":Node.createDeadNode});
    return b
}, createLoadingBoundaryLiveNodeR:function(a, b, c) {
    b.is_unknown_boundary = !0;
    var d = this.createLiveNode(a, b);
    return $rval(function() {
        if($v(d.hasUnknownChildrenR())) {
            var a = c(d);
            a._unknown_node = d;
            return a
        }else {
            return d
        }
    })
}, DEFAULT_AND_BUBBLE:{"default":!0, bubble:!0}, JUST_DEFAULT:{"default":!0, bubble:!1}, JUST_BUBBLE:{"default":!1, bubble:!0}, STOP:{"default":!1, bubble:!1}, TABINDEX_UNDEFINED:"TABINDEX_UNDEFINED", _SavedFocus:AsanaObject.subclass("Node._SavedFocus", {}, {constructor:function() {
    Node._SavedFocus.superproto.constructor.call(this);
    try {
        var a = Node.documentActiveElement(), b = "selectionStart" in a;
        this._focused_element = a;
        this._selection_start = b ? a.selectionStart : null;
        this._selection_end = b ? a.selectionEnd : null
    }catch(c) {
        host.recordWarning("Couldn't save focus or selection", WrappedException.create(c)), this._selection_end = this._selection_start = this._focused_element = null
    }
    UINodeTree._FocusManager.setIgnoringFocusAndBlurEvents(!0)
}, restore:function() {
    if(this._focused_element) {
        try {
            this._focused_element.focus(), this._selection_start !== null && MochiKit.DOM.isChildNode(this._focused_element, document.body) && this._focused_element.setSelectionRange(this._selection_start, this._selection_end)
        }catch(a) {
            host.recordWarning("Couldn't restore focus or selection", WrappedException.create(a))
        }
    }
    UINodeTree._FocusManager.setIgnoringFocusAndBlurEvents(!1)
}}), wrappedHandler:function(a, b, c) {
    var d = View.activeView();
    return host.wrapInExceptionHandler({"UINode.wrappedHandler":a}, c || ExceptionHandler.ReentryStrategy.DROP, function(a) {
        if(a.target && a.target instanceof Node && !a.target.isInDocument()) {
            log.info("Short circuting event handler because the node that received the event is no longer in the document")
        }else {
            a instanceof Event && (a = DomEvent.create(a));
            if(env.datastore_manager.reloadNowIfPending()) {
                return a.preventDefault(), !1
            }
            Node.logEvent(a);
            Node.updateDatastoreClientManagerForEvent(a);
            return processHandler(function() {
                var c = View._runWithHandlingView(d, function() {
                    if(a.type === "blur" || a.type === "focus") {
                        var c;
                        env.datastore_manager.runUntimelyFunc(function() {
                            c = b(a)
                        });
                        return c
                    }else {
                        return b(a)
                    }
                });
                if(env.datastore_manager.currentActionHasChanges()) {
                    var g = env.lunaSessionState();
                    env.datastore_manager.runUntimelyFunc(function() {
                        g.getX("last_dom_action_time").requestSet(env.clock.now())
                    })
                }
                return c
            })
        }
    })
}, logEvent:function(a) {
    a.type !== "mouseout" && a.type !== "mousemove" && a.type !== "mouseover" && (log_line = a.target instanceof Node ? a.type + " " + (a.target ? a.target.debugPath(5) : "(no target)") : a.type + " target is not a Node", Node.logged_events.last() !== log_line && Node.logged_events.push(log_line))
}, updateDatastoreClientManagerForEvent:function(a) {
    a.type === "blur" || a.type === "focus" || a.type === "mousedown" || a.type === "mouseup" ? env.datastore_manager.temporarilyPauseSyncing() : env.datastore_manager.unpauseSyncing()
}, updateEventForHandlerReturnValue:function(a, b) {
    if(b === void 0) {
        b = Node.JUST_BUBBLE
    }
    !b.bubble && a && a.stopPropagation();
    !b["default"] && a && a.preventDefault();
    return b["default"]
}, select:function(a, b, c) {
    var d = window.getSelection(), e = document.createRange();
    e.selectNode(a);
    b && e.setStart(a, b);
    c && e.setEnd(a, c);
    d.removeAllRanges();
    d.addRange(e)
}, selectAfter:function(a) {
    this._selectAndCollapse(a, !1)
}, selectBefore:function(a) {
    this._selectAndCollapse(a, !0)
}, _selectAndCollapse:function(a, b) {
    var c = window.getSelection(), d = document.createRange();
    d.selectNode(a);
    d.collapse(b);
    c.removeAllRanges();
    c.addRange(d)
}, activeElementIsChild:function(a) {
    for(var b = Node.documentActiveElement();b !== null;) {
        if(b === a) {
            return!0
        }else {
            b = b.parentNode
        }
    }
    return!1
}, replaceSelectionWithText:function(a) {
    var b = window.getSelection();
    b.rangeCount === 0 && ufu("No selection, so could not insert cursor");
    b = b.getRangeAt(0);
    b.deleteContents();
    a = document.createTextNode(a);
    b.insertNode(a)
}});
Node.render = Node.createLiveNode;
Node.logged_events = CircularQueue.create(20);
UINodeTree = AsanaObject.subclass("UINodeTree", {}, {_tree_xvalue:SET_IN_CONSTRUCTOR, _running_on_server:SET_IN_CONSTRUCTOR, _event_bubble_skip_type:void 0, _event_capture_skip_type:void 0, _elements:SET_IN_CONSTRUCTOR, focus_manager:SET_IN_CONSTRUCTOR, constructor:function(a, b, c) {
    UINodeTree.superproto.constructor.call(this);
    this._tree_xvalue = a;
    this.focus_manager = (this._running_on_server = b) ? MOCK_FOCUS_MANAGER : UINodeTree._FocusManager.create(c);
    this._elements = []
}, buildUi:function() {
    document.body._appendLiveDOM(this._tree_xvalue, null)
}, onPageLoaded:function() {
    var a = this;
    document.body.addKeyMap([{key:"L", handler:function() {
        log.debug("=====================================================")
    }}, {key:"F", handler:function() {
        a.focus_manager.toggleEnabled()
    }}, {key:"P", handler:function() {
        safeTimeout(function() {
            host.profiler.printReport()
        }, 0)
    }}, {key:"B", handler:function() {
        safeTimeout(function() {
            log.debug("Enabling conditionalBreakpoint. Can be disabled from console with:");
            log.debug("conditionalBreakpoint.enabled = false");
            conditionalBreakpoint.enabled = !conditionalBreakpoint.enabled
        }, 200)
    }}].map(function(a) {
            return update(a, {alt:!0, shift:!0, meta_or_ctrl:!0})
        }));
    a.focus_manager.onPageLoaded();
    a._onUpdate();
    Signal.connect(env.frp, "propagate_stop", method(a, "_onUpdate"))
}, _onUpdate:function() {
    var a = this;
    if(!this._running_on_server && (Flags.diagnostics_do_expensive_error_checking && safeTimeout(function() {
        var b = [];
        a._elements.forEach(function(a) {
            a.removed_from_dom || MochiKit.DOM.isChildNode(a, document.body) || b.push(a)
        });
        var d = b.length;
        d && log.warn(d + " element" + (d === 1 ? "" : "s") + " created that did not end up in the DOM", b)
    }, 0), Flags.diagnostics_highlight_new_elements)) {
        a._elements.forEach(function(a) {
            a.setAttribute("new_element", 1);
            a.className = a.className
        });
        var b = partial(function(a) {
            a.forEach(function(a) {
                a.removeAttribute("new_element");
                a.className = a.className
            })
        }, a._elements);
        safeTimeout(b, 50)
    }
    a._elements = []
}, _registerForElementDiagnostics:function(a) {
    this._elements.push(a)
}, teardown:function() {
}});
UINodeTree._FocusManager = AsanaObject.subclass("UINodeTree._FocusManager", {_ignore_focus_and_blur_events:!1, setIgnoringFocusAndBlurEvents:function(a) {
    UINodeTree._FocusManager._ignore_focus_and_blur_events = a
}}, {_luna_session:SET_IN_CONSTRUCTOR, _in_resolveFocus:!1, _old_session_focused_element_id:!1, _connection:null, _enabled:!0, constructor:function(a) {
    var b = this;
    UINodeTree._FocusManager.superproto.constructor.call(b);
    b._connection = Signal.connect(env.frp, "propagate_stop", function() {
        safeTimeout(function() {
            b._resolveFocus()
        }, 0)
    });
    env.isInUiTest() && Signal.connect(env.frp, "processHandler_stop", function() {
        b._resolveFocus()
    });
    b._luna_session = a;
    a = host.wrapInExceptionHandler("UINode.onFocusChanged", ExceptionHandler.ReentryStrategy.ALLOW, function(a) {
        a = DomEvent.create(a);
        Node.updateDatastoreClientManagerForEvent(a);
        if(!UINodeTree._FocusManager._ignore_focus_and_blur_events) {
            var d = a.type === "blur";
            if(!b._in_resolveFocus && !env.frp.propagating()) {
                if(b._enabled) {
                    var e = d ? null : a.target;
                    Flags.diagnostics_trace_focus && log.debug("Focus changed by browser to", e);
                    env.datastore_manager.runHandler(function() {
                        e !== null && e.id !== "" ? (b._old_session_focused_element_id = e.id, e.requestFocus()) : (b._old_session_focused_element_id = null, env.setFocus(null))
                    });
                    d = function() {
                        env.frp.propagate([]);
                        Signal.signal(env.frp, "processHandler_stop")
                    };
                    a.type === "blur" ? safeTimeout(d, 0) : d()
                }else {
                    log.info("ignoring change in browser focus. Press meta_or_ctrl+alt+shift+F to reenable focus tracking")
                }
            }
        }
    });
    document.body.addEventListener("blur", a, !0);
    document.body.addEventListener("focus", a, !0);
    document.body.addEventListener("mousemove", function() {
        var a = $v(env.datastore_manager.last_successful_sync_time_lvalue);
        env.clock.now() - a > Date.MILLISECONDS_PER_MINUTE && env.datastore_manager.syncIfSafe()
    }, !0)
}, onPageLoaded:function() {
    this._resolveFocus()
}, _idForElement:function(a) {
    return a === null || a.id === "" ? null : a.id
}, _resolveFocus:function() {
    this._in_resolveFocus = !0;
    var a = env.focusedElementId(), b = env.lunaSession().lunaSessionState().focusedElementIdL();
    isUnknown(b.peekAllowingUnknown()) && (env.frp.addDirtyRvalueIfUsed(b), a = b.peekAllowingUnknown());
    b = this._idForElement(Node.documentActiveElement());
    if(a !== this._old_session_focused_element_id || a !== b && a !== null) {
        if(a === null) {
            Node.documentActiveElement().blur()
        }else {
            var c = document.getElementById(a);
            if(c === null) {
                log.warn(null, c, "Could not find element to focus, Id is", a)
            }else {
                host.runOutsideExceptionHandler(function() {
                    c.focus()
                });
                b = c.select !== void 0;
                if(env.enable_default_selection) {
                    var d = env.lunaSession().defaultFocusAndSelection();
                    env.setSelectionForFocusedElement(d.selection_start, d.selection_end)
                }
                env.focused_selection_start !== null && env.focused_selection_end !== null && b && (env.focused_selection_start < 0 || env.focused_selection_end < 0 ? c.select() : c.setSelectionRange(env.focused_selection_start, env.focused_selection_end));
                env.focused_selection_start = null;
                env.focused_selection_end = null
            }
        }
        this._old_session_focused_element_id = a
    }
    this._in_resolveFocus = !1
}, toggleEnabled:function() {
    (this._enabled = !this._enabled) ? log.info("Enabling focus tracking") : log.info("Pausing focus tracking")
}});
__FILE__ = "luna/temp/asana_forms.js";
AsanaForms = {renderButton:function(a) {
    var a = update({}, a), b = a.label || ufu("missing label");
    delete a.label;
    a["class"] === void 0 && (a["class"] = "");
    a["class"] += a["class"] instanceof Rvalue ? " asana-button" : " default-button button";
    var c = a.onclick || a.onmousedown;
    if(c === void 0 || c === null) {
        if(a["class"] += " disabled", "tabindex" in a) {
            a.tabindex = -1
        }
    }else {
        a["class"] += " enabled", a.key_map = [{key:"ENTER", handler:c}, {key:"SPACE", handler:c}]
    }
    return DIV(a, [SPAN({"class":"button-text"}, [b])])
}, renderToggleButton:function(a) {
    a.pressed && (a["class"] = (a["class"] || "") + " pressed");
    return AsanaForms.applyHoveredOnMouseEnter(AsanaForms.renderButton(a))
}, applyHoveredOnMouseEnter:function(a) {
    a.addClass("unhovered");
    a.listen("mouseenter", function() {
        a.removeClass("unhovered");
        a.addClass("hovered")
    });
    a.listen("mouseleave", function() {
        a.removeClass("hovered");
        a.addClass("unhovered")
    });
    return a
}, renderCheckbox:function(a) {
    a["class"] = (a["class"] || "") + " checkbox";
    var b = $v(a.data);
    delete a.data;
    b && (a["class"] += " checked");
    return SPAN(a)
}, renderIconButton:function(a) {
    a["class"] === void 0 && (a["class"] = "");
    a["class"] += " button";
    return DIV(a, [SPAN({"class":"button-icon " + (a.inner_span_class || "")})])
}, getDataType:function(a) {
    return a === "description" ? "longstring" : a === "admin" || a === "show_welcome_dialog" || a === "show_manage_workspace_dialog" ? "boolean" : a === "due_date" ? "date" : a === "facebook_id" ? "integer" : "text"
}};
__FILE__ = "apps/asana/model/generic_user_action.js";
GenericUserAction = UserAction.subclass("GenericUserAction", {property_descs:{message:{type:String}}}, {formatString:function() {
    return"%{message}"
}, placeholderMap:function() {
    return Map.create([["message", this.message()]])
}});
__FILE__ = "apps/asana/view/iselection_state.js";
ISelectionState = Interface.create("ISelectionState", [], {}, {selectedItemsR:ABSTRACT, selectedItems:function() {
    return this.selectedItemsR().peek()
}, itemsForDetailPaneR:rvalueProperty("itemsForDetailPaneR", function() {
    var a = this.selectedItems();
    if(a.size() === 1) {
        a = a.first();
        if(a instanceof Task) {
            var b = env.realAppSession().detailsState().selectedRelativeOrNull();
            if(b === null && !Flags.enable_navigating_to_detailless_subtasks) {
                var c = a.findParent();
                if(c && !a.hasMetadata()) {
                    return[c]
                }
            }
            if(b && a.rootAncestor() === b.rootAncestor()) {
                return[b]
            }
        }
        return[a]
    }
    return a
}), deferredItemsForDetailPane:computedProperty("deferredItemsForDetailPane", function() {
    return DeferredRvalue.create(this.itemsForDetailPaneR(), 300, !0)
}), isItemSelected:function(a) {
    return this.selectedItemsR().containsObject(a)
}, singleDetailPaneItem:function() {
    var a = $v(this.itemsForDetailPaneR());
    return a.size() === 1 ? a.first() : null
}});
__FILE__ = "apps/asana/view/grid_state.js";
GRID_INITIAL_NUMBER_OF_TASKS_TO_LOAD = 10;
GRID_NUMBER_OF_TASKS_TO_LOAD_PER_STEP = 30;
GridState2 = SessionObject2.subclass("GridState2", {property_descs:{task_list_threshold_rank_string:{type:String, default_value:function() {
    if(env.is_server) {
        var a = this.grid_state1;
        if(a.pot() === null) {
            return""
        }
        a = a._calculateNextTaskListThreshold(null, GRID_INITIAL_NUMBER_OF_TASKS_TO_LOAD + 1);
        return a === null ? "" : Serializer.serialize(a)
    }else {
        return UnknownValue.Loading.create(null, null)
    }
}}}}, {grid_state1:SET_IN_CONSTRUCTOR});
GridState = SessionObject.subclass("GridState", [ISelectionState], {property_descs:{grid_id:{type:String, default_value:"pot_grid"}, selected_items:{type:List}, selected_group:{type:StateObject}, show_archived_items:{type:Boolean}, selected_filters:{type:List}, convert_pot_dialog_visible:{type:Boolean}, delete_pot_dialog_visible:{type:Boolean}, expanded_groups:{type:List}, pot:{type:Pot, default_value:null, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, has_outstanding_load_request:{type:Boolean,
    default_value:!1}, collapse_inbox:{type:Boolean}, group_by:{type:String}, show_all_my_tasks:{type:Boolean}, SPECIAL_GROUP_NULL:{type:StateObject}, SPECIAL_GROUP_TODAY:{type:StateObject}, SPECIAL_GROUP_UPCOMING:{type:StateObject}, SPECIAL_GROUP_COMPLETED:{type:StateObject}, SPECIAL_GROUP_NEW:{type:StateObject}, SPECIAL_GROUP_DUE:{type:StateObject}}, _force_pagination_in_tests:!1, forcePaginationInTests:function(a) {
    GridState._force_pagination_in_tests = a
}, paginationEnabled:function() {
    return!env.isInTest() || GridState._force_pagination_in_tests
}}, {mainInputElementIdForGroupItem:function(a) {
    return this.gridId() + "_row__main_input__" + a.toString()
}, _gridState2:function() {
    var a = env.session_store.sessionObject2(GridState2, this.global_id);
    a.grid_state1 = this;
    return a
}, getTaskGrouper:function() {
    return TaskGrouper.create(this)
}, selectedItemsR:function() {
    return this.selectedItemsL()
}, selectionIsEmpty:computedProperty("selectionIsEmpty", function() {
    return this.selectedItems().size() === 0
}), selectGroupItem:function(a) {
    this.getX("selected_items").requestClear();
    a !== null ? this.addGroupItemToSelection(a) : this.getX("selected_group").requestSet(this.getV("SPECIAL_GROUP_NULL"))
}, selectItem:function(a) {
    if(a === null) {
        this.selectGroupItem(null)
    }else {
        var b = this.getTaskGrouper();
        this.selectGroupItem(ItemListView.GroupItem.create(a instanceof Task ? b.defaultGroupForTask(a) : b.SpecialGroup.NULL, a))
    }
}, selectItems:function(a) {
    var b = this;
    b.selectItem(null);
    Rvalue.forEachValue(a, function(a) {
        b.addToSelection(a)
    })
}, addGroupItemToSelection:function(a) {
    this.getX("selected_items").requestInsertBefore(a.item, null);
    this.getX("selected_group").requestSet(a.group);
    var b = this.getX("expanded_groups");
    b.containsObject(a.group) || b.requestInsertBefore(a.group, null);
    env.setFocus(this.mainInputElementIdForGroupItem(a))
}, copySelection:function(a) {
    var b = this;
    a.selectedItems().forEach(function(a) {
        b.getX("selected_items").requestInsertBefore(a, null)
    });
    "selected_group" in a && b.getX("selected_group").requestSet(grid_state.getV("selected_group"))
}, addToSelection:function(a) {
    var b = this.getTaskGrouper(), b = a instanceof Task ? b.defaultGroupForTask(a) : b.SpecialGroup.NULL;
    this.addGroupItemToSelection(ItemListView.GroupItem.create(b, a))
}, removeFromSelection:function(a) {
    var b = this;
    b.getX("selected_items").requestRemove(a);
    var c = b.getX("selected_group"), d = b.getTaskGrouper(), e = !1, f = b.getV("selected_items");
    f.size() === 2 && f.forEach(function(f) {
        if(f !== a) {
            var h = d.defaultGroupForTask(f);
            env.setFocus(b.mainInputElementIdForGroupItem(ItemListView.GroupItem.create(h, f)));
            c.requestSet(h);
            e = !0
        }
    });
    e || c.requestSet(b.getV("SPECIAL_GROUP_NULL"))
}, selectDefaultItem:function(a) {
    var b = this, c;
    View.runWithoutLvalueChecking(function() {
        c = b.defaultItemOrUnknown(a)
    });
    isKnown(c) ? this.selectItem(c || a) : env.datastore_manager.enactChange(PotSelectionChange.create({grid_state:this, selected_pot:a}))
}, _setGroupByToDefault:function(a) {
    if(a.assignee() !== null) {
        if(a.assignee().user() === env.userOrNull()) {
            var b;
            View.runWithoutLvalueChecking(function() {
                b = a.assignee().assignedToMeGroupByL().peekAllowingUnknown()
            });
            isKnown(b) ? this.setGroupBy(b) : env.datastore_manager.enactChange(PotGroupByChange.create({grid_state:this, domain_user:a.assignee()}))
        }else {
            this.setGroupBy(TaskGrouper.Type.PROJECT_IN_ASSIGNEE_VIEW)
        }
    }else {
        View.runWithoutLvalueChecking(function() {
            return!a.isProject()
        }) && this.setGroupBy(TaskGrouper.Type.PROJECT)
    }
}, mostRecentlySelectedItemOrNull:function() {
    var a = this.selectedItems().last();
    return a ? a : null
}, mostRecentlySelectedGroupItemOrNull:function() {
    var a = this.mostRecentlySelectedItemOrNull();
    if(a === null) {
        return null
    }else {
        var b = this.selectedGroup();
        if(a instanceof Task) {
            var c = this.getTaskGrouper().groupsForTask(a);
            c.indexOf(b) === -1 && (b = c[0] || null)
        }
        return b === null ? null : ItemListView.GroupItem.create(b, a)
    }
}, secondMostRecentlySelectedItemOrNull:function() {
    var a = this.mostRecentlySelectedItemOrNull();
    return a ? this.getV("selected_items").valueBeforeValueOrNull(a) : null
}, onToggleTag:function(a) {
    var b = this.getX("selected_filters");
    $v(b).contains(a) ? b.requestRemove(a) : b.requestInsertBefore(a, null);
    this.getX("selected_items").requestClear();
    this._advanceTaskListThreshold(GRID_INITIAL_NUMBER_OF_TASKS_TO_LOAD, !0)
}, resetSelectedFilters:function() {
    this.selectedFiltersL().requestClear();
    this._advanceTaskListThreshold(GRID_INITIAL_NUMBER_OF_TASKS_TO_LOAD, !0)
}, focusSelectedItems:function() {
    var a = this.mostRecentlySelectedGroupItemOrNull();
    a !== null ? env.setFocus(this.mainInputElementIdForGroupItem(a)) : env.setFocus(null)
}, filteredItemsListR:rvalueProperty("filteredItemsListR", function(a) {
    var b = GridState.paginationEnabled() && this.getTaskGrouper() instanceof TaskGrouper.None, c = [].concat(this.selectedFilters().map(function(a) {
        return a.name()
    })).join("|");
    b ? (b = this._taskListThresholdRankR(), this._serverLimitR(a).watchScalar(noop), a = this._filteredTasksR(a, b), a = LatestKnownRvalue.create(a)) : (this._serverComputedValue("task_list_is_ready|" + c, a, function() {
        return!0
    }), a = LatestKnownRvalue.create(this._filteredTasksR(a, null)));
    return a
}), _tasksCount:function(a, b) {
    var c = this;
    return this._serverComputedValue(["tasks_count", b].join("|"), a, function() {
        return $v(c._allTasksR(a, b)).size()
    })
}, haveMoreTasksToLoad:function() {
    var a = toValueAllowingUnknown(this._taskListThresholdRankR());
    return isKnown(a) && a !== null
}, loadingMoreTasks:function(a) {
    a = toValueAllowingUnknown(this.filteredItemsListR(a));
    return isUnknown(a) || this.hasOutstandingLoadRequest()
}, maybeLoadMoreTasks:function() {
    !this.loadingMoreTasks(this.pot()) && this.haveMoreTasksToLoad(this.pot()) && this._advanceTaskListThreshold(GRID_NUMBER_OF_TASKS_TO_LOAD_PER_STEP, !1)
}, allTasksLoaded:function(a) {
    return!this.haveMoreTasksToLoad(a) && !this.loadingMoreTasks(a)
}, statisticsForFilteredTasks:function(a) {
    var b = this;
    return this._serverComputedValue("statistics_for_filtered_tasks", a, function() {
        var c = $v(b._allTasksR(a, !0)), d = !1, e = !1, f = !1, g = !1, h = !1;
        env.world_store.peekStateObjectProperties(c, ["due_date"]);
        c.forEachValue(function(a) {
            var b = a.ownProjects().size();
            b > 0 && (e = !0);
            b > 1 && (d = !0);
            a.getAssigneeOrNull() !== null && (f = !0);
            a.dueDate() !== null && (g = !0);
            a.isCompleted() && (h = !0);
            if(e && d && f && g && h) {
                throw IIterable.STOP;
            }
        });
        return{some_tasks_have_other_project:d, some_tasks_have_projects:e, some_tasks_are_assigned:f, some_tasks_have_due_date:g, some_tasks_are_complete:h}
    })
}, tagsAndCountsForUnfilteredTasks:function(a) {
    return this._tagsAndCountsForTasksNonReactive(a, !1)
}, tagsAndCountsForFilteredTasks:function(a) {
    return this._tagsAndCountsForTasksNonReactive(a, !0)
}, _tagsAndCountsForTasksNonReactive:function(a, b) {
    var c = this;
    return Map.create(this._serverComputedValue(["tags_for_tasks", b].join("|"), a, function() {
        var d = [];
        b && (d = c.selectedFilters().map(function(a) {
            return a.global_id
        }));
        var e = a.potIdsForTasksNonReactive(d, c.showArchivedItems());
        env.frp.forEachParallel(e.keys(), function(a) {
            isUnknown(env.datastoreObject(a)) && e.remove(a)
        });
        return e
    }).mapEntries(function(a, b) {
            return[env.datastoreObject(a), b]
        }))
}, _tagsAndCountsForTaskList:function(a, b) {
    var c = Map.create();
    env.frp.mapParallel(a, function(a) {
        return $v(a.tagsX(b))
    }).forEach(function(a) {
            a.forEachValue(function(a) {
                c.incrementCount(a.global_id)
            })
        });
    return c
}, _allTasksR:function(a, b) {
    return b || this.selectedFilters().isEmpty() ? this._filteredTasksR(a, null) : this._unfilteredTasksR(a)
}, _filteredTasksR:rvalueProperty("_filteredTasksR", function(a, b) {
    var c = this;
    return MergedListRvalue.createAllowingDuplicates(c._filteredTasksQuery(a).getQueryRvalue("_filteredTasksR", b), $rval(function() {
        return TaskList.getVisibleTasks({asana_list:a, which_tasks:c.getV("show_archived_items") ? "all" : "unarchived", completed_first:!ExperimentalFeature.enabled("completed_tasks_remain_inline"), limit:b, task_type:Task.TaskType.BAR})
    }))
}), _filteredTasksQuery:computedProperty("_filteredTasksQuery", function(a) {
    return TaskList.getVisibleTasksQuery({asana_list:a, which_tasks:this.getV("show_archived_items") ? "all" : "unarchived", completed_first:!ExperimentalFeature.enabled("completed_tasks_remain_inline"), task_type:Task.TaskType.TASK, filtered_by_tags:this.selectedFilters()})
}), recoverCachedLength:function() {
    var a = this, b = View.runWithoutLvalueChecking(function() {
        return knownReturnValueOrDefault(function() {
            return $v(a._serverLimitR(a.pot()))
        }, null)
    });
    b !== null && this._gridState2().taskListThresholdRankStringL().requestSet(b)
}, _serverLimitR:rvalueProperty("_serverLimitR", function(a) {
    var b = this;
    return this._serverComputedValue("server_task_list_threshold_rank_string", a, function() {
        var a = env.session_store.readValue(b._gridState2().taskListThresholdRankStringL());
        return isKnown(a) ? a : null
    })
}), _unfilteredTasksR:rvalueProperty("_unfilteredTasksR", function(a) {
    return TaskList.getVisibleTasks({asana_list:a, which_tasks:this.getV("show_archived_items") ? "all" : "unarchived", completed_first:!0})
}), _serverComputedValue:function(a, b, c) {
    var d = function(c) {
        return[a, b.global_id, c ? "active" : "inactive"].join("|")
    }, e = env.lunaSessionStateOrNull() === null || env.realAppSession().gridState() === this, c = serverComputedValueAllowingUnknown(d(e), c);
    isUnknown(c) && e && (c = serverComputedValue(d(!1), noop));
    return c
}, _taskListThresholdRankR:rvalueProperty("_taskListThresholdRank", function() {
    var a = this._gridState2().taskListThresholdRankString();
    return a !== "" ? Deserializer.deserialize(a) : null
}), _taskListThresholdRank:function() {
    return $v(this._taskListThresholdRankR())
}, _advanceTaskListThreshold:function(a, b) {
    env.datastore_manager.enactChange(AdvanceTaskListThresholdChange.create({grid_state:this, base_rank:b ? null : this._taskListThresholdRank(), advance_count:b ? a + 1 : a}))
}, _calculateNextTaskListThreshold:function(a, b) {
    var c = this, d = knownReturnValueOrDefault(function() {
        return c._filteredTasksQuery(c.pot())
    }, null);
    if(d === null) {
        return a
    }
    return d.fetchNthObjectRank(a, b - 1)
}, defaultItemOrUnknown:function(a) {
    return this._defaultItemR(a).peekAllowingUnknown()
}, defaultItem:function(a) {
    return this._defaultItemR(a).peek()
}, _defaultItemR:rvalueProperty("_defaultItemR", function(a) {
    if(!Flags.enable_select_first_task) {
        return null
    }
    return $v(this.filteredItemsListR(a)).find(function(a) {
        return!a.completed()
    })
}), rootGridBlockR:rvalueProperty("GridState.rootGridBlockR", function(a, b) {
    var c = this.getTaskGrouper();
    return c instanceof TaskGrouper.None ? TriPartItemList.create({pot:a, task_grouper:c, group:c.SpecialGroup.NULL, visible_list_r:b, blockAbove:GridBlock.nullBlock, blockBelow:GridBlock.nullBlock, parent_block:null, display_order_key_part:null}) : ItemListGroups.create({task_grouper:c, pot:a, visible_list_r:b, expanded_groups_l:this.expandedGroupsL(), blockAbove:GridBlock.nullBlock, blockBelow:GridBlock.nullBlock, parent_block:null})
})});
GridState.create = attributedValueFunc({grid_id:ATTRIBUTE_REQUIRED, show_archived_items:!1, pot:null}, function(a) {
    var b = env.session_store.createStateObject(StateObjectPlaceholder, {name:"null_group"}), b = env.session_store.createStateObject(GridState, {grid_id:a.grid_id, selected_items:[], selected_group:b, pot:a.pot, show_archived_items:a.show_archived_items, group_by:TaskGrouper.Type.NONE, selected_filters:List.EMPTY_LIST, expanded_groups:List.EMPTY_LIST, show_all_my_tasks:!0, collapse_inbox:!1, convert_pot_dialog_visible:!1, delete_pot_dialog_visible:!1, SPECIAL_GROUP_COMPLETED:env.session_store.createStateObject(StateObjectPlaceholder,
            {name:"SPECIAL_GROUP_COMPLETED"}), SPECIAL_GROUP_NEW:env.session_store.createStateObject(StateObjectPlaceholder, {name:"SPECIAL_GROUP_NEW"}), SPECIAL_GROUP_TODAY:env.session_store.createStateObject(StateObjectPlaceholder, {name:"SPECIAL_GROUP_TODAY"}), SPECIAL_GROUP_UPCOMING:env.session_store.createStateObject(StateObjectPlaceholder, {name:"SPECIAL_GROUP_UPCOMING"}), SPECIAL_GROUP_DUE:env.session_store.createStateObject(StateObjectPlaceholder, {name:"SPECIAL_GROUP_DUE"}), SPECIAL_GROUP_NULL:b}),
        a = a.pot;
    if(a !== null && a.isVisibleBy(env.user())) {
        if(a.assignee() !== null) {
            var c = b.expandedGroupsL(), d = b.getTaskGrouper();
            c.requestInsertBefore(d.SpecialGroup.UPCOMING);
            c.requestInsertBefore(d.SpecialGroup.TODAY);
            c.requestInsertBefore(d.SpecialGroup.NEW);
            c.requestInsertBefore(d.SpecialGroup.NULL)
        }
        b._setGroupByToDefault(a)
    }
    return b
});
PotSelectionChange = define("PotSelectionChange", Change.subclass("PotSelectionChange", {}, {grid_state:ATTRIBUTE_REQUIRED, selected_pot:ATTRIBUTE_REQUIRED, enact:function() {
    env.is_server && this.grid_state.selectItem(this.grid_state.defaultItem(this.selected_pot) || this.selected_pot)
}, taintedObjectIds:function() {
    return[this.grid_state.global_id, this.selected_pot.global_id]
}}));
PotGroupByChange = define("PotGroupByChange", Change.subclass("PotGroupByChange", {}, {grid_state:ATTRIBUTE_REQUIRED, domain_user:ATTRIBUTE_REQUIRED, enact:function() {
    env.is_server && (this.grid_state.setGroupBy(this.domain_user.assignedToMeGroupBy()), this.grid_state.focusSelectedItems())
}, taintedObjectIds:function() {
    return[this.grid_state.global_id, this.domain_user.global_id]
}}));
AdvanceTaskListThresholdChange = define("AdvanceTaskListThresholdChange", Change.subclass("AdvanceTaskListThresholdChange", {}, {grid_state:ATTRIBUTE_REQUIRED, base_rank:ATTRIBUTE_REQUIRED, advance_count:ATTRIBUTE_REQUIRED, enact:function() {
    this.grid_state.hasOutstandingLoadRequestL().requestSet(!0);
    if(env.is_server) {
        var a = this.grid_state._calculateNextTaskListThreshold(this.base_rank, this.advance_count);
        this.grid_state._gridState2().taskListThresholdRankStringL().requestSet(a === null ? "" : Serializer.serialize(a));
        this.grid_state.hasOutstandingLoadRequestL().requestSet(!1)
    }
}, taintedObjectIds:function() {
    return[this.grid_state.global_id]
}}));
__FILE__ = "apps/asana/view/details_state.js";
DetailsState = SessionObject.subclass("DetailsState", {property_descs:{selected_relative:{type:Task, default_value:null}, details_grid_state:{type:GridState}}, create:attributedValueFunc({}, function(a) {
    return env.session_store.createStateObject(DetailsState, update({details_grid_state:GridState.create({grid_id:"details_grid", show_archived_items:!0})}, a))
})}, {selectRelativeTask:function(a) {
    this.setSelectedRelative(a);
    this.detailsGridState().selectGroupItem(null)
}, resetSubtaskState:function() {
    this.selectRelativeTask(null)
}, selectedRelativeOrNull:function() {
    var a = this.selectedRelativeOrUnknown();
    return isKnown(a) ? a : null
}});
__FILE__ = "apps/asana/view/quick_add_state.js";
__FILE__ = "luna/common/runnable.js";
Runnable = SessionObject.subclass("Runnable", {}, {run:ABSTRACT, peekDependencies:function() {
}});
__FILE__ = "apps/asana/view/dialog/dialog_state.js";
DialogState = SessionObject2.subclass("DialogState", {property_descs:{onclose_runnable:{type:Runnable, default_value:null}, saved_focus_element_id:{type:String, default_value:null}}, dialogStates:function(a) {
    return env.app_interfaces.get(IDialogStateManager).dialogStates().filter(function(b) {
        return b instanceof a
    })
}}, {hide:function() {
    var a = env.app_interfaces.get(IDialogStateManager), b = a.isDialogVisible(this);
    b && (a.popDialog(), env.setFocus(this.savedFocusElementId()), a = this.oncloseRunnableL().peekAllowingUnknown(), isUnknown(a) ? host.recordWarning("onclose_runnable is unknown", this) : a !== null && a.run(), this.reset());
    return b
}, isDismissable:function() {
    return!0
}, renderDialog:function(a, b) {
    var c = this.__type.__type_name, d = {_ui_context:a._ui_context, parent_view:null}, c = c.substring(0, c.length - 6), e = globals;
    c.split(".").forEach(function(a) {
        e = e[a]
    });
    d.view_name = DialogView2.viewName(c, b);
    var d = e.create(d), f = this.oncloseRunnableL().peekAllowingUnknown();
    isKnown(f) && f !== null && View._runWithActiveView(d, !1, function() {
        f.peekDependencies()
    });
    return d.render()
}});
__FILE__ = "apps/asana/view/dialog/account_dialog_state.js";
AccountDialogTabs = {PROFILE:"profile", EMAIL_NOTIFICATIONS:"email_notifications", EMAIL_DROPBOX:"email_dropbox", PASSWORD:"password", API:"api", APPS:"apps"};
AccountDialogState = DialogState.subclass("AccountDialogView.State", {registry_name:"AccountDialogState", property_descs:{name:{type:String}, email:{type:String}, password_status:{type:String}, email_status:{type:String}, email_verification_resent:{type:Boolean}, adding_email_for_domain:{type:Domain, default_value:null}, email_verification_resent_for_domain:{type:Domain}, new_email:{type:String}, selected_tab:{type:String, default_value:AccountDialogTabs.PROFILE}, local_timezone:{type:String}, country_code:{type:String}},
    UpdateStatus:{HIDDEN:"hidden", PENDING:"pending", VISIBLE:"visible", ADDING_NEW:"adding_new", PASSWORD_SET_FAILURE:"There was an error setting your password.", CURRENT_PASSWORD_INCORRECT:"You have entered your current password incorrectly.", EMAIL_NOT_VALID:"That email address is not valid.", EMAIL_IN_USE:"That email address is already in use. If you are the owner, you can contact support@asana.com to merge your accounts.", EMAIL_ALREADY_ADDED:"You have already verified that email."}, create:attributedValueFunc({email_status:ATTRIBUTE_REQUIRED,
        password_status:ATTRIBUTE_REQUIRED, selected_tab:ATTRIBUTE_REQUIRED, name:"", email:"", email_verification_resent:!1, adding_email_for_domain:null, email_verification_resent_for_domain:null, new_email:""}, function(a) {
        return env.session_store.createStateObject(AccountDialogState, a)
    }), hasEmailVerificationWorkflow:function() {
        var a = env.user().getV("email_verification_workflow");
        return a !== null && a.getV("expires_at") > env.clock.now()
    }}, {timezoneOptions:serverComputedProperty("timezoneOptions", function() {
    return env.tzdatelib.timezoneMap(this.countryCode())
}), isDismissable:function() {
    var a = env.user();
    return!(a.needsToSetPassword() || !Format.EMAIL_RE.test(a.email()) && !AccountDialogState.hasEmailVerificationWorkflow())
}, passwordStatus:function() {
    return this.getV("password_status").trim()
}, emailStatus:function() {
    return this.getV("email_status").trim()
}});
__FILE__ = "apps/asana/view/dialog/invite_to_asana_action.js";
InviteToAsanaAction = UserAction.subclass("InviteToAsanaAction", {property_descs:{num_invites:{type:Integer}}}, {formatString:function() {
    return"Sent " + pluralize("invite", this.numInvites()) + ". Thanks for sharing!"
}, placeholderMap:function() {
    return Map.create([])
}});
__FILE__ = "apps/asana/view/dialog/invite_to_beta_dialog_state.js";
InviteToBetaDialogState = DialogState.subclass("InviteToBetaDialogView.State", {INVITE_MESSAGE:"I've been really enjoying using Asana and thought you would like it too.", UiType:{CLOUD_SPONGE:"cloudsponge"}, registry_name:"InviteToBetaDialogState", property_descs:{invited_name:{type:String}, invited_email:{type:String}, invited_emails:{type:String, default_value:""}, last_invite:{type:AsanaInvite}, has_imported_contacts:{type:Boolean, default_value:!1}, is_importing_contacts:{type:Boolean, default_value:!1},
    invite_ui_source:{type:String, default_value:"left_menu"}, invited_message:{type:String, default_value:"I've been really enjoying using Asana and thought you would like it too."}}, inviteUiType:function() {
    return InviteToBetaDialogState.UiType.CLOUD_SPONGE
}}, {hide:function() {
    InviteToBetaDialogView._instance = null;
    return InviteToBetaDialogState.superproto.hide.call(this)
}, resetState:function() {
    this.setInvitedName("");
    this.setInvitedEmail("");
    this.setInvitedEmails("");
    this.setHasImportedContacts(!1)
}});
__FILE__ = "apps/asana/view/dialog/workspace_settings_dialog_state.js";
WorkspaceSettingsDialogState = DialogState.subclass("WorkspaceSettingsDialogState", {property_descs:{domain:{type:Domain}, workspace_name:{type:String}, workspace_message:{type:String}, workspace_members:{type:String}, is_for:{type:String}, network_id:{type:String}, org_name:{type:String}, website:{type:String}, org_size:{type:String}}, DEFAULT_WORKSPACE_INVITE_MESSAGE:"Let's use Asana to get organized.\n\nPlease note the tasks you plan to work on this week and update them with any questions or status you have.",
    createFromDomain:function(a) {
        return a === null ? WorkspaceSettingsDialogState.create({}) : View.runWithoutLvalueChecking(function() {
            return WorkspaceSettingsDialogState.create({domain:a, workspace_name:a.name(), is_for:a.getV("is_for"), network_id:a.network() === null ? "null" : "" + a.network().global_id, org_name:a.getV("org_name"), website:a.getV("website"), org_size:a.getV("org_size")})
        })
    }, create:attributedValueFunc({domain:null, workspace_name:"", workspace_members:"", workspace_message:"Let's use Asana to get organized.\n\nPlease note the tasks you plan to work on this week and update them with any questions or status you have.", is_for:"BUSINESS", network_id:ATTRIBUTE_OPTIONAL, org_name:"", website:"", org_size:"NULL"}, function(a) {
        if(a.network_id === void 0) {
            var b = env.user().networks().firstNonNull();
            a.network_id = "" + (b === null ? null : b.global_id)
        }
        return env.session_store.createStateObject(WorkspaceSettingsDialogState, a)
    })}, {workspaceProperties:function() {
    var a;
    a = this.isFor() !== "BUSINESS" ? null : this.networkId() === "null" ? null : env.world_store.object(parseInt(this.networkId(), 10));
    return{name:this.workspaceName(), is_for:this.isFor(), network:a, org_name:this.orgName(), website:this.website(), org_size:this.orgSize(), activated:!0}
}});
__FILE__ = "apps/asana/view/dialog/idialog_state_manager.js";
IDialogStateManager = Interface.create("IDialogStateManager", [], {}, {dialogStatesOfType:function(a) {
    return this.dialogStates().filter(function(b) {
        return b instanceof a
    })
}, dialogStates:function() {
    var a = this._dialogsJson();
    return(a === null ? [] : JSON.parse(a)).map(function(a) {
        return env.session_store.sessionObject2(env.type_registry.getTypeFromId(a.type_id), a.global_name)
    })
}, isDialogVisible:function(a) {
    return this.dialogStates().indexOf(a) !== -1
}, popDialog:function() {
    var a = this.dialogStates(), b = a.top();
    a.pop();
    this._setDialogStates(a);
    return b
}, pushDialog:function(a) {
    var b = this.dialogStates();
    b.push(a);
    this._setDialogStates(b)
}, _setDialogStates:function(a) {
    a = a.map(function(a) {
        return{type_id:env.type_registry.getTypeId(a.__type), global_name:a.globalName()}
    });
    this._setDialogsJson(JSON.stringify(a))
}, _dialogsJson:ABSTRACT, _setDialogsJson:ABSTRACT});
__FILE__ = "apps/asana/view/tab_ring_view.js";
TabRingView = View.subclass("TabRingView", {_focusableNodes:function(a) {
    return a.descendentsMatchingXpath("(.//input[not(contains(@tabindex, \"-1\"))] | .//select[not(contains(@tabindex, \"-1\"))] | .//*[@tabindex=0][not(contains(concat(' ', @class, ' '), ' tab-ring '))])")
}, _getActiveTabRingElement:function() {
    for(var a = Node.documentActiveElement();!a.containsClass("tab-ring");) {
        a = a.parentNode
    }
    return a
}, focusNext:function(a) {
    var a = TabRingView._focusableNodes(a), b = a.indexOf(Node.documentActiveElement());
    a[(b + 1) % a.length].requestFocus()
}, focusPrevious:function(a) {
    var a = TabRingView._focusableNodes(a), b = a.indexOf(Node.documentActiveElement());
    a[(b + a.length - 1) % a.length].requestFocus()
}, focusNextInCurrentTabRing:function() {
    var a = TabRingView._getActiveTabRingElement();
    TabRingView.focusNext(a)
}, focusPreviousInCurrentTabRing:function() {
    var a = TabRingView._getActiveTabRingElement();
    TabRingView.focusPrevious(a)
}, tabIsDownL:Memoize.memoizeInThis("tabIsDownL", function() {
    return LocalLvalue.create(!1).setName("TabRingView.tabIsDownL").setAsSafelyPeekableByAncestor()
})}, {contents:ATTRIBUTE_REQUIRED, hotkey_configs:null, key_map:null, _main_div:SET_IN_CONSTRUCTOR, constructor:function(a) {
    TabRingView.superproto.constructor.call(this, a);
    this.hotkey_configs = this.hotkey_configs || [];
    this.key_map = this.key_map || [];
    this._main_div = DIV({id:this.fully_qualified_view_name, "class":"tab-ring", tabindex:0, children:[this.contents]})
}, _render:function() {
    return DIV({key_map:this._keyMap(), "class":$rval(function() {
        return $v(TabRingView.tabIsDownL()) ? " show-hotkeys" : ""
    }), children:[this._main_div]})
}, focusNext:function() {
    TabRingView.focusNext(this._main_div)
}, focusPrevious:function() {
    TabRingView.focusPrevious(this._main_div)
}, _keyMap:function() {
    var a = this, b = [{key:KeyMap.Keys.TAB, handler:function() {
        TabRingView.tabIsDownL().requestSet(!0)
    }}, {key:KeyMap.Keys.TAB, shift:!0, handler:function() {
        TabRingView.tabIsDownL().requestSet(!0)
    }}, {key:KeyMap.Keys.TAB, up:!0, capturing:!0, handler:function() {
        return $v(TabRingView.tabIsDownL()) ? (a.focusNext(), TabRingView.tabIsDownL().requestSet(!1), Node.JUST_BUBBLE) : Node.JUST_DEFAULT
    }}, {key:KeyMap.Keys.TAB, shift:!0, up:!0, capturing:!0, handler:function() {
        return $v(TabRingView.tabIsDownL()) ? (TabRingView.tabIsDownL().requestSet(!1), a.focusPrevious(), Node.JUST_BUBBLE) : Node.JUST_DEFAULT
    }}, {all:!0, capturing:!0, handler:function(a) {
        return $v(TabRingView.tabIsDownL()) ? (a._event.tabKey = !0, Node.JUST_BUBBLE) : Node.DEFAULT_AND_BUBBLE
    }}], c = function(a) {
        b.push({key:a.key, tab:!0, handler:function() {
            logEvent({name:"Tab-" + a.key});
            TabRingView.tabIsDownL().requestSet(!1);
            if(a.handler) {
                return a.handler()
            }else {
                if(a.element_id) {
                    var b = function() {
                        env.setFocus(a.element_id)
                    };
                    a.open_details_pane ? env.realAppSession().openDetailsPaneIfClosedAndRunInHandler(b) : b()
                }
            }
        }})
    };
    a.hotkey_configs.forEach(function(a) {
        c(a)
    });
    b.pushAll(a.key_map);
    return b
}});
TabRingView.DispatcherView = View.subclass("TabRingView.DispatcherView", {}, {body_x:ATTRIBUTE_REQUIRED, key_map:null, _render:function() {
    var a = DIV({id:"tab-ring-dispatcher", tabindex:1, key_map:concat([{key:KeyMap.Keys.TAB, handler:function() {
    }}, {key:KeyMap.Keys.TAB, up:!0, handler:function(b) {
        if(b.target() === a) {
            b = document.descendentsMatchingXpath('//*[contains(@class, "tab-ring")]'), b = TabRingView._focusableNodes(b.top()), b.length > 0 && b[0].requestFocus()
        }else {
            return Node.DEFAULT_AND_BUBBLE
        }
    }}], this.key_map || []), children:[this.body_x]});
    return a
}});
__FILE__ = "luna/common/view/dialog_view.js";
DialogView = View.subclass("DialogView", {BOTTOM_SCROLL_MARGIN:100}, {title_x:ATTRIBUTE_REQUIRED, body_x:ATTRIBUTE_REQUIRED, banner_x:null, banner_class:"banner", top_message_x:null, hide_chrome:!1, flush_body_style:!1, onScrollToBottom:null, footer_x:null, max_top_window_padding:150, onclose:null, close_flag_l:null, show_header_bottom:!0, element_id:null, tabindex:Node.TABINDEX_UNDEFINED, hotkey_configs:null, key_map:null, extra_class:"", tab_view:null, _header:SET_IN_CONSTRUCTOR, _footer_top:SET_IN_CONSTRUCTOR,
    _tabs:SET_IN_CONSTRUCTOR, _banner:SET_IN_CONSTRUCTOR, constructor:function(a) {
        var b = this;
        DialogView.superproto.constructor.call(b, a);
        a = b._getOnclose();
        b._header = b.hide_chrome ? "" : DIV([a ? DIV({"class":"delete", onclick:a}, []) : "", DIV({"class":"dialog-title"}, [b.title_x])]);
        b._header_bottom = b.show_header_bottom && !b.hide_chrome ? DIV({"class":"title-bottom"}) : "";
        b._footer_top = DIV({"class":"footer-top"});
        b._tabs = !b.tab_view ? "" : DIV({"class":"gradient-bar"}, [b.tab_view.render()]);
        b._banner = b.banner_x === null ? "" : DIV({"class":b.banner_class, style:{display:$rval(function() {
            var a = $v(b.banner_x);
            return a === null || a === "" ? "none" : ""
        })}}, [b.banner_x])
    }, _render:function() {
        var a = this, b = $rval(function() {
            var b = toValueAllowingUnknown(a.body_x);
            if(isUnknown(b)) {
                return!1
            }else {
                var c = a.getMaxBodyHeight();
                return b.dimensions.height() > c
            }
        }), c = $rval(function() {
            var c = $rval(function() {
                return $v(b) ? {overflowY:"auto", overflowX:"hidden", maxHeight:a.getMaxBodyHeight()} : {overflowY:"visible"}
            }), e = function() {
                if(f && a.onScrollToBottom !== null && f.scrollHeight - (f.scrollTop + f.dimensions.height()) < DialogView.BOTTOM_SCROLL_MARGIN) {
                    a.onScrollToBottom()
                }
            }, f = DIV({"class":"content", style:c, onscroll:a.onScrollToBottom === null ? null : e}, [AsanaHelpers.renderWithinLoadingBoundary("DIV", [a.top_message_x === null ? "" : DIV({"class":"message"}, [a.top_message_x]), a.body_x])]);
            a._registerDisplayChangeCallback(e, 100);
            c = [];
            a.hide_chrome || c.pushAll([a._header, a._header_bottom, a._tabs, a._banner]);
            c.push(a.flush_body_style ? f : DIV({"class":"dialog-text"}, [f]));
            a.hide_chrome || c.pushAll([a.footer_x === null ? "" : a._footer_top, a.footer_x === null ? "" : a.footer_x]);
            return DIV({id:a.element_id, "class":"dialog-box " + a.extra_class, tabindex:a.tabindex, key_map:a.key_map, style:$rval(function() {
                var c = $v(b), d = a.browser.width(), e = a.browser.height(), f = $v(a.body_x).dimensions, c = (c ? a.getMaxBodyHeight() : f.height()) + a.getNonScrollingBodyHeight(), f = f.width();
                return{position:"fixed", left:(d - f) / 2, top:Math.min(a.max_top_window_padding, (e - c) / 2)}
            })}, c)
        });
        return a.createView(TabRingView, {contents:DIV([c, DIV({"class":"dialog-background"})]), hotkey_configs:a.hotkey_configs, key_map:a.key_map}).render()
    }, getNonScrollingBodyHeight:function() {
        var a = this._header ? this._header.dimensions.height() : 0, b = this._header_bottom ? this._header_bottom.dimensions.height() : 0, c = $v(this.footer_x), d = c === null ? 0 : c.dimensions.height(), c = c === null ? 0 : this._footer_top.dimensions.height(), e = this._tabs ? this._tabs.dimensions.height() : 0, f = this._banner_x ? this._banner.dimensions.height() : 0;
        return a + b + d + f + c + e
    }, getMaxBodyHeight:function() {
        return this.browser.height() - this.max_top_window_padding - this.getNonScrollingBodyHeight()
    }, _getOnclose:function() {
        var a = this, b = a._dialogState();
        if(b && !b.isDismissable()) {
            return null
        }
        return function() {
            a.close_flag_l && a.close_flag_l.requestSet(!1);
            if(a.onclose) {
                a.onclose()
            }
            b && b.view.hide()
        }
    }, _dialogState:function() {
        return this.parent_view && (this.parent_view.state || this.parent_view._state) || null
    }});
__FILE__ = "apps/asana/view/dialog/dialog_view.js";
DialogView2 = View.subclass("DialogView2", {_IS_SINGLETON_DIALOG:!1, viewName:function(a, b) {
    return"Dialogs/" + b + "/" + a
}, show:function(a) {
    var a = a || {}, b;
    b = a.dialog_state_manager !== void 0 ? a.dialog_state_manager : env.app_interfaces.get(IDialogStateManager);
    delete a.dialog_state_manager;
    if(this._IS_SINGLETON_DIALOG) {
        var c = b.dialogStatesOfType(this.State).firstNonNull();
        if(c !== null) {
            return log.info("Dialog of type", this.__type_name, "already visible, ignoring request to show."), c
        }
    }
    var c = DialogView2.viewName(this.__type_name, b.dialogStates().length), d = env.session_store.sessionObject2(this.State, c);
    Map.forEach(a, function(a, b) {
        d.getX(a).requestSet(b)
    });
    b.pushDialog(d);
    d.setSavedFocusElementId(env.focusedElementId());
    env.setFocusToDefault();
    return d
}}, {hide:View.publicMethod(function() {
    return this._state.hide()
})});
DialogView2.staticConstructor = function(a) {
    if(a.show === void 0) {
        a.show = DialogView2.show
    }
};
__FILE__ = "apps/asana/view/dialog/form_dialog_view.js";
FormDialogView = DialogView2.subclass("FormDialogView", {}, {dialog_name:ABSTRACT, create_status_field:!0, _renderSpacer:function() {
    return TR({}, [TD({colspan:"2", "class":"spacer"})])
}, focusableElementId:function(a) {
    return"form_view:" + this.dialog_name + "_field:" + a
}, _renderFooter:function(a) {
    return DIV({"class":"buttons", children:[SPAN({"class":"button-spacer"}), a]})
}, _renderBody:function(a) {
    for(var b = [], c = 0;c < a.length;c++) {
        var d = a[c];
        c > 0 && b.push(this._renderSpacer());
        if(d instanceof FormDialogView.Row) {
            var e = this.focusableElementId(d.field_name);
            d.create_status_field = this.create_status_field;
            b.push(d.render(e))
        }else {
            b.push(d)
        }
    }
    return DIV([DIV({"class":"form-view"}, [TABLE(b)])])
}});
FormDialogView.Row = View.subclass("FormDialogView.Row", {}, {field_header:null, label:ATTRIBUTE_REQUIRED, requirement_message:null, notes_x:null, status_x:SET_IN_CONSTRUCTOR, constructor:function(a) {
    if(a.view_name === void 0) {
        a.view_name = this.__type_name + "." + a.label
    }
    FormDialogView.Row.superproto.constructor.call(this, a);
    if(!("status_x" in a)) {
        this.status_x = {is_valid:!0, is_marked:!1}
    }
}, renderBody:ATTRIBUTE_REQUIRED, _statusIndicator:function() {
    var a = this;
    return TABLE({}, [TR({}, [TD({"class":$rval(function() {
        return $v(a.status_x).is_valid ? "icon check" : "icon error"
    }, "FormDialogView.validityIndicator.icon"), style:{visibility:$rval(function() {
        return $v(a.status_x).is_marked ? "visible" : "hidden"
    }, "FormDialogView.validityIndicator.visible")}})])])
}, _renderOneLineHeader:function() {
    return TR({"class":"field-header"}, [TD({"class":"field-title", colspan:3}, [this.field_header.hasOwnProperty("field_number") ? SPAN({"class":"field-title-number"}, [SPAN({"class":"field-number"}, [this.field_header.field_number])]) : "", this.field_header.field_title])])
}, _renderOneLineProperty:function(a) {
    return TR({"class":"field"}, [TD({"class":"field-name"}, [LABEL({"for":a}, [this.label])]), TD({"class":"field-value"}, [a]), this.show_status_field ? this.status_x !== void 0 ? TD({"class":"field-status"}, [this._statusIndicator(this.status_x)]) : TD({"class":"field-no-status"}) : ""])
}, _renderRequirementMessage:function(a) {
    var b = this, c = env.isElementIdFocusedR(a), a = $rval(function() {
        var a = "field-description", e = $v(b.status_x);
        if(e.is_marked && !e.is_valid) {
            a += " alert"
        }else {
            if(e.is_valid || $v(c)) {
                a += " valid"
            }
        }
        return a
    });
    return TR({}, [TD(), TD({"class":a, colspan:"2"}, [b.requirement_message])])
}, _renderNotes:function() {
    var a = this;
    return $rval(function() {
        var b = $v(a.notes_x);
        return b !== null && b !== "" ? TR({}, [TD(), TD({"class":"field-notes"}, [a.notes_x]), TD()]) : ""
    }, "FormDialogView_renderNotes_" + a.name)
}, _render:function(a) {
    var b = [];
    this.field_header !== null && b.push(this._renderOneLineHeader());
    b.push(this._renderOneLineProperty(this.renderBody(a)));
    this.requirement_message !== null && b.push(this._renderRequirementMessage(a));
    this.notes_x !== null && b.push(this._renderNotes());
    return TBODY(b)
}});
FormDialogView.SingleFieldRow = FormDialogView.Row.subclass("FormDialogView.SingleFieldRow", {}, {field_name:ATTRIBUTE_REQUIRED, data_l:ATTRIBUTE_REQUIRED, data_type:ATTRIBUTE_REQUIRED, default_text_value:"", placeholder:"", enum_options:null, constructor:function(a) {
    if(a.view_name === void 0) {
        a.view_name = this.__type_name + "." + a.field_name
    }
    FormDialogView.SingleFieldRow.superproto.constructor.call(this, a)
}, renderBody:function(a) {
    switch(this.data_type) {
        case "autogrow_textarea":
            return a = this.createView(AutogrowTextareaView, {"class":["generic-input showing", this.field_name].join(" "), data:this.data_l, textarea_attributes:{id:a, placeholder:this.placeholder, tabindex:0}}).render(), a.addClass(this.field_name), a;
        case "enum":
            return forms.renderEnumDropdown(this.enum_options, this.data_l, "text", {"class":this.field_name, id:a});
        default:
            return INPUT({"class":["generic-input showing", this.field_name].join(" "), data:this.data_l, data_type:this.data_type, placeholder:this.placeholder, id:a}, [])
    }
}});
__FILE__ = "apps/asana/view/dialog/create_workspace_dialog_view.js";
CreateWorkspaceDialogView = DialogView2.subclass("CreateWorkspaceDialogView", {State:DialogState.subclass("CreateWorkspaceDialogView.State", {property_descs:{workspace_settings_dialog_state:{type:WorkspaceSettingsDialogState}, onclose_runnable:{type:Runnable}}}, {}), show:attributedFunc({domain:null, onclose_runnable:null}, function(a) {
    var b = a.domain;
    delete a.domain;
    return CreateWorkspaceDialogView.superclass.show.call(this, update({workspace_settings_dialog_state:WorkspaceSettingsDialogState.createFromDomain(b)}, a))
})}, {_settings_view:null, defaultFocusAndSelection:function() {
    return this._settings_view === null ? {} : this._settings_view.defaultFocusAndSelection()
}, _render:function() {
    var a = this;
    if(WorkspaceSettingsDialogView.MAX_WORKSPACES - env.user().domains().size() <= 0) {
        return a.createView(DialogView, {element_id:"workspace_settings_dialog", flush_body_style:!1, title_x:"New Workspace", body_x:DIV({"class":"no-credits"}, [DIV({"class":"no-credits-first-line"}, ["You don't currently have the ability to create a new workspace."]), "If you would like to create more, contact us at support@asana.com."])}).render()
    }
    var b = this._state.getV("workspace_settings_dialog_state"), c = a._state.oncloseRunnable();
    this._settings_view = this.createView(WorkspaceSettingsDialogView, {state:b, touch:function() {
        env.frp.forEachParallel([function() {
            env.user().mergedIntoUser()
        }, function() {
            env.user().activeDomainUsers()
        }, function() {
            b.domain() !== null && (b.domain().isGlobal(), b.domain().canInviteMoreUsers())
        }, function() {
            c !== null && c.peekDependencies()
        }])
    }, display_as_create_workspace:!0, onSubmit:function() {
        var c, d = env.user();
        b.domain() !== null ? (c = b.domain(), c.updateProperties(b.workspaceProperties())) : (c = Domain.create(b.workspaceProperties()), c.addFullMember(d));
        var g = b.workspaceMembers(), g = EmailAddress.parseMultiple(g, []);
        if(g.size() > 0) {
            var h = b.getV("workspace_message");
            g.forEach(function(a) {
                DomainInvite.create({creator:env.user(), invited_name:a.email(), invited_email:a.email(), invite_message:h, invite_domain:c})
            });
            logEvent({name:"DomainInvite-InvitedBatch", creator:env.user(), invite_ui_source:"new-workspace-dialog", num_contacts:g.size(), is_custom_invite_message:h !== b.DEFAULT_WORKSPACE_INVITE_MESSAGE})
        }
        d = c.findDomainUser(d).getV("task_list");
        env.realAppSession().setCurrentList(d);
        ExperimentalFeature.enabled("new_workspace_dialog") ? a._state.hide() : (d = a._state.oncloseRunnable(), a._state.setOncloseRunnable(null), a._state.hide(), logEvent({name:"NewWorkspace-ShowManageWorkspace", created_domain:c}), ManageWorkspaceDialogView.show({billable_domain_user_group:c, selected_tab:ManageWorkspaceDialogView.TABS.MEMBERS, onclose_runnable:d}))
    }});
    var d = ExperimentalFeature.enabled("new_workspace_dialog");
    return a.createView(DialogView, {element_id:"workspace_settings_dialog", extra_class:d ? "redesign" : "original", flush_body_style:!0, title_x:d ? "Create Your Workspace" : "New Workspace", top_message_x:d ? null : DIV({"class":"new-workspace-dialog-message"}, [IMG({src:"/-/static/apps/asana/media/workspace_illustration-08.png", align:"left", "class":"new_workspace_dialog_image"}), "A workspace is a collection of projects that are shared with a group of people."]), body_x:this._settings_view.render(),
        footer_x:this._settings_view.renderFooterForDialogView()}).render()
}});
__FILE__ = "apps/asana/view/dialog/workspace_settings_dialog_view.js";
WorkspaceSettingsDialogView = FormDialogView.subclass("WorkspaceSettingsDialogView", {MAX_WORKSPACES:50}, {state:ATTRIBUTE_REQUIRED, _workspace_name_status_r:SET_IN_CONSTRUCTOR, _workspace_members_status_r:SET_IN_CONSTRUCTOR, _workspace_message_r:SET_IN_CONSTRUCTOR, _is_for_status_r:SET_IN_CONSTRUCTOR, _network_status_r:SET_IN_CONSTRUCTOR, _submit_button_enabled_r:SET_IN_CONSTRUCTOR, _submit_button_r:SET_IN_CONSTRUCTOR, touch:noop, display_as_create_workspace:!1, create_status_field:!1, show_new_dialog:SET_IN_CONSTRUCTOR,
    constructor:function(a) {
        var b = this;
        WorkspaceSettingsDialogView.superproto.constructor.call(this, a);
        var c = b.state.getV("domain");
        b.show_new_dialog = b.display_as_create_workspace && ExperimentalFeature.enabled("new_workspace_dialog");
        var d = env.isElementIdFocusedR(b.focusableElementId("workspace-name"));
        b._workspace_name_status_r = $rval(function() {
            var a = b.state.getV("workspace_name").length >= 1;
            return{is_valid:a, is_marked:a && !$v(d)}
        });
        b._is_for_status_r = $rval(function() {
            return{is_valid:b.state.getV("is_for") !== "NULL", is_marked:!1}
        });
        b._workspace_members_status_r = $rval(function() {
            return{is_valid:b.state.getV("workspace_members").split(/[\s,]+/).size() < Domain.DEFAULT_SIZE_CAP, is_marked:!1}
        });
        b._network_status_r = {is_valid:!0, is_marked:!1};
        var e = [b._workspace_name_status_r, b._is_for_status_r, b._workspace_members_status_r];
        b._submit_button_enabled_r = $rval(function() {
            return null === e.find(function(a) {
                return $v(a).is_valid === !1
            })
        });
        b._submit_button_r = $rval(function() {
            return AsanaForms.renderButton({label:c === null || b.display_as_create_workspace ? "Create Workspace" : "Update Workspace", onclick:$v(b._submit_button_enabled_r) ? function() {
                b.onSubmit()
            } : null, id:"workspace_settings_submit", "class":"primary", tabindex:0})
        })
    }, onSubmit:ATTRIBUTE_REQUIRED, dialog_name:"workspace_settings_dialog", defaultFocusAndSelection:function() {
        return{focused_element_id:"form_view:workspace_settings_dialog_field:workspace-name"}
    }, renderFooterForDialogView:function() {
        return this._renderFooter(this._submit_button_r)
    }, _render:function() {
        var a = this;
        a.touch();
        var b = $rval(function() {
            var b;
            a.state.domain() === null ? (b = env.user().networks(), b.add(null)) : b = env.user().networks().isEmpty() ? Set.create([null]) : a.state.domain().potentialNetworks();
            var d;
            d = b.contains(null) ? Domain.IsFor : {BUSINESS:"Business"};
            var e = [a.createView(FormDialogView.SingleFieldRow, {label:"Workspace name", field_header:a.show_new_dialog ? {field_title:"What is the name of your company or team?", field_number:1} : null, field_name:"workspace-name", data_l:a.state.getX("workspace_name"), placeholder:a.show_new_dialog ? "use your company or team name" : "", data_type:"text", requirement_message:"A workspace name is required.", status_x:a._workspace_name_status_r})];
            (!a.show_new_dialog || !env.user().networks().isEmpty()) && e.push(a.createView(FormDialogView.SingleFieldRow, {label:"What is it for?", field_name:"is-for", data_l:a.state.getX("is_for"), data_type:"enum", enum_options:d, status_x:a._is_for_status_r}));
            a.show_new_dialog && e.push(a.createView(FormDialogView.SingleFieldRow, {label:"Members", field_header:{field_title:"Who do you work on projects with?", field_number:2}, field_name:"workspace-members", data_l:a.state.getX("workspace_members"), placeholder:"separate emails with commas", data_type:"autogrow_textarea", requirement_message:"You can send at most " + (Domain.DEFAULT_SIZE_CAP - 1) + " invitations at this time.", status_x:a._workspace_members_status_r}), a.createView(FormDialogView.SingleFieldRow,
                {label:"Message", field_header:{field_title:"What should your team do in the workspace?", field_number:3}, field_name:"workspace-message", data_l:a.state.getX("workspace_message"), data_type:"autogrow_textarea"}));
            if(a.state.isFor() === "BUSINESS" && !env.user().networks().isEmpty()) {
                var f = Map.create();
                b.forEach(function(a) {
                    a === null ? f.put("null", "Other") : f.put("" + a.global_id, a.name())
                });
                e.push(a.createView(FormDialogView.SingleFieldRow, {label:"Which company?", field_header:a.show_new_dialog ? {field_title:"Which company do you work with?", field_number:4} : null, field_name:"network", data_l:a.state.networkIdL(), data_type:"enum", enum_options:f, status_x:a._network_status_r}))
            }
            return e
        });
        return $rval(function() {
            return DIV({id:"workspace_settings_body", "class":a.display_as_create_workspace && ExperimentalFeature.enabled("new_workspace_dialog") ? "redesign" : "original", key_map:[{key:"ENTER", handler:function() {
                if($v(a._submit_button_enabled_r)) {
                    a.onSubmit()
                }
            }}]}, [AsanaHelpers.renderWithinLoadingBoundary("WorkspaceSettingsDialogView_renderBody_inner", [$rval(function() {
                return a._renderBody($v(b))
            })])])
        })
    }});
__FILE__ = "apps/asana/view/manage_workspace_members_state.js";
ManageWorkspaceMembersState = SessionObject.subclass("ManageWorkspaceMembersState", {property_descs:{requested_remove_self:{type:Boolean, default_value:!1}, request_guest_upgrade:{type:DomainUser, default_value:null}, request_member_downgrade:{type:DomainUser, default_value:null}}}, {});
__FILE__ = "apps/asana/view/guest_icon_view.js";
GuestIconView = View.subclass("GuestIconView", {renderGuestTooltip:function(a) {
    a = a.firstName();
    return FRAG([B(["Guest: "]), a + " can see only items explicitly shared with " + a + "."])
}}, {model:ATTRIBUTE_REQUIRED, _render:function() {
    var a = this, b = a.model.domain().name(), c = a.model.user() === env.user();
    if(a.model.isGuest()) {
        return SPAN({"class":"guest-icon", onclick:function() {
            c || a.parent_view.setRequestGuestUpgrade(a.model)
        }, tooltip:function() {
            return c ? null : FRAG([GuestIconView.renderGuestTooltip(a.model), " Click to grant full access to " + b + "."])
        }})
    }else {
        var d = a.model.firstName();
        return SPAN({"class":"non-guest-icon", onclick:function() {
            c || a.parent_view.setRequestMemberDowngrade(a.model)
        }, tooltip:function() {
            return FRAG([B(["Full Member: "]), d + " can see everything public to " + b + ". " + (c ? "" : "Click to make " + d + " a Guest.")])
        }})
    }
}});
__FILE__ = "apps/asana/view/manage_workspace_members_header_view.js";
ManageWorkspaceMembersHeaderView = View.subclass("ManageWorkspaceMembersHeaderView", {}, {billable_domain_user_group:ATTRIBUTE_REQUIRED, _render:function() {
    for(var a = this.billable_domain_user_group, b = a.numMembersCountingAgainstUserLimit(), c = a.userLimit(), d = [], e = 1;e <= 10;++e) {
        d.push(SPAN({"class":e * c > 10 * b ? "people-gray" : "people" + e * 10}))
    }
    var d = DIV({"class":"people-progress"}, d), e = b >= c, f = a.isBillingOwner(env.user()), g = e ? DIV({"class":"full-message"}, [SPAN({"class":"message-red"}, ["Workspace is full. "]), !a.isPremium() || f ? ManageWorkspaceMembersListView.upgradeLink(a) : ""]) : "";
    return DIV({"class":"members-banner"}, [b, " MEMBERS (of ", c, " available) ", (!a.isPremium() || f) && !e ? ManageWorkspaceMembersListView.upgradeLink(a) : "", d, g])
}});
__FILE__ = "apps/asana/view/manage_workspace_members_list_view.js";
ManageWorkspaceMembersListView = View.subclass("ManageWorkspaceMembersListView", {DOMAIN_USERS_TO_LOAD_PER_SCROLL:50, upgradeLink:function(a) {
    var b = a.domain();
    return A({"class":"upgrade-link", onclick:function() {
        BillingDialogView.showBillingFlow(BillingRoutes.urlForBillingPlans(b.global_id))
    }}, ["Upgrade to Get More Members \u00bb"])
}, renderCapReachedMessage:function(a) {
    return"Your workspace can have no more than " + a.sizeCap() + " members. Want to add more? Contact support@asana.com."
}}, {billable_domain_user_group:ATTRIBUTE_REQUIRED, manage_workspace_members_state:ATTRIBUTE_REQUIRED, defaultFocusAndSelection:function() {
    return{focused_element_id:InviteUserView.email_element_id}
}, _render:function() {
    var a = this;
    return a.billable_domain_user_group.domain().isGlobal() ? "" : DIV({"class":"workspace-users-body"}, [DIV({"class":"scrolling-users"}, [AsanaHelpers.renderWithinLoadingBoundary("DIV", [TABLE([COLGROUP([COL({"class":"spacer"}), COL({"class":"name"}), COL({"class":"email"}), COL({"class":"button"})]), $rval(function() {
        return a._renderUsers()
    })]), $rval(function() {
        return a.billable_domain_user_group.usersModel().isLoadingNow() ? AsanaHelpers.renderLoadingIndicator() : ""
    })])])])
}, onScrollToBottom:function() {
    this.billable_domain_user_group.usersModel().loadMore(ManageWorkspaceMembersListView.DOMAIN_USERS_TO_LOAD_PER_SCROLL)
}, setRequestGuestUpgrade:function(a) {
    this.manage_workspace_members_state.setRequestGuestUpgrade(a)
}, setRequestMemberDowngrade:function(a) {
    this.manage_workspace_members_state.setRequestMemberDowngrade(a)
}, _bisectUsers:function(a, b) {
    if(a.isEmpty()) {
        return 0
    }
    var c = b.name();
    return upperBound(a, function(a) {
        if(a.name() === c) {
            return a.global_id < b.global_id
        }
        return a.name() < c
    }) + 0.5
}, _renderUsers:function() {
    var a = this, b = a.billable_domain_user_group, c = b.domain();
    assert(!c.isGlobal());
    assert(env.user().domainUserForDomain(c).isInternal());
    var d = b.usersModel().limitedObjectsR(), e = $rval(function() {
        var b = env.lastUndoableUserActionOrNull();
        if(b instanceof DeactivateDomainUserAction && equals(b.domainUser().domain(), c) && !$v(d).contains(b.domainUser())) {
            var e = List.create([], List.POLICY_ANY_RANK);
            e.insertAtRank(b.domainUser(), a._bisectUsers($v(d), b.domainUser()));
            return e
        }else {
            return[]
        }
    }), e = MergedListRvalue.create(d, e);
    return TBODY(MapRvalue.createWithRvalues(e, function(c) {
        c = $v(c);
        if(!c.active() && c.user() !== env.user()) {
            var d = env.lastUndoableUserActionOrNull();
            return d instanceof DeactivateDomainUserAction && equals(d.domainUser(), c) ? (env.world_store.peekXvaluesAndStateObjectScalars([d.getX("changes")], [d]), env.world_store.peekXvaluesAndStateObjectScalars([], d.getV("changes").peekValuesArray()), d = UserActionContext.get().isUndoing() ? A({"class":"undo-link", onclick:null}, ["(Undoing...)"]) : A({"class":"undo-link", onclick:function() {
                UserActionContext.get().requestUndo()
            }}, ["Undo"]), TR({"class":"user undo-remove"}, [TD([]), TD({colspan:4}, [SPAN({"class":"removal-text"}, [c.name() + " was removed from " + b.name()]), d])])) : ""
        }else {
            return a._renderUser(c)
        }
    }))
}, _deactivateDomainUserFunc:function(a) {
    var b = this;
    return function() {
        assertEq(!1, a.domain().isGlobal());
        a.user() === env.user() ? b.manage_workspace_members_state.setRequestedRemoveSelf(!0) : b.billable_domain_user_group.removeUser(a.user())
    }
}, _renderUser:function(a) {
    var b = this.billable_domain_user_group, c = b.domain(), d = a.user().isClaimed(), e = c.isGlobal() ? "Remove from Contacts" : d ? "Remove" : "Cancel Invite", b = c.isGlobal() && env.user() === a.user() ? TD({"class":"you-reminder"}, [SPAN({"class":"you-reminder-text"}, ["This is you"])]) : b.billingOwner() === a ? TD({"class":"you-reminder"}, [SPAN({"class":"you-reminder-text"}, ["Payer"])]) : TD([AsanaForms.renderButton({label:e, "class":"remove-button", onclick:this._deactivateDomainUserFunc(a)})]);
    return TR({"class":"user " + (d ? "active" : "invite")}, [TD([]), TD([SPAN({"class":"name"}, [a.name()])]), TD([SPAN({"class":"email"}, [a.email()])]), TD([!c.isGlobal() ? this.createView(GuestIconView, {model:a}).render() : ""]), b])
}});
__FILE__ = "apps/asana/view/invite_user_view.js";
InviteUserView = View.subclass("InviteUserView", {name_element_id:"invite_user_view.invite_form_name", email_element_id:"invite_user_view.invite_form_email", send_element_id:"invite_user_view.invite_form_send", guest_checkbox_element_id:"invite_user_view.guest_checkbox", focusName:function() {
    env.setFocus(InviteUserView.name_element_id)
}, focusEmail:function() {
    env.setFocus(InviteUserView.email_element_id)
}, isFocused:function() {
    return Set.create([InviteUserView.name_element_id, InviteUserView.email_element_id, InviteUserView.send_element_id, InviteUserView.guest_checkbox_element_id]).contains(env.focusedElementId())
}}, {onInvite:ATTRIBUTE_REQUIRED, invited_email_l:ATTRIBUTE_REQUIRED, invited_name_l:ATTRIBUTE_REQUIRED, invite_as_guest_l:null, title_x:"", is_compact:!1, invited_items_text:null, submit_label_x:"Send Invite", submit_enabled_x:!0, guest_choice_after_button:!1, _active_domain_provider:SET_IN_CONSTRUCTOR, constructor:function(a) {
    InviteUserView.superproto.constructor.call(this, a);
    this._active_domain_provider = env.app_interfaces.get(IActiveDomainProvider)
}, defaultFocusAndSelection:function() {
    return{focused_element_id:InviteUserView.email_element_id}
}, _isGuest:function() {
    if(!this.invite_as_guest_l) {
        return!1
    }
    return this._active_domain_provider.activeDomainUser().isGuest()
}, _render:function() {
    var a = this, b = $rval(function() {
        return Format.testEmailInput($v(a.invited_email_l))
    }), c = $rval(function() {
        var c = a._active_domain_provider.activeDomain().network();
        c !== null && c.emailDomains();
        return c === null || $v(a.invite_as_guest_l) || $v(b) && c.ownsEmail($v(a.invited_email_l))
    }), d = env.isElementIdFocusedR(InviteUserView.email_element_id), e = $rval(function() {
        return!$v(d) && !($v(b) && $v(c)) && $v(a.invited_email_l).length > 0
    }), f = $rval(function() {
        return $v(c) && $v(b) && $v(a.submit_enabled_x) === !0 ? function() {
            a.onInvite($v(a.invited_name_l), Format.sanitizeEmailInput($v(a.invited_email_l)), a._isGuest() || $v(a.invite_as_guest_l))
        } : null
    }), g = $rval(function() {
        return a.invite_as_guest_l ? a._renderGuestChoice() : ""
    }), h = $v(a.title_x);
    return DIV({"class":"invite-user-view " + (a.is_compact ? "compact" : "wide"), key_map:[{key:"ENTER", handler:function() {
        var a = $v(f);
        a !== null && a()
    }}]}, [h === "" ? "" : DIV({"class":"invite-form-header header"}, [h]), DIV({"class":"invite-form-field"}, [DIV({"class":"field-name"}, ["Email"]), TABLE([TR([TD([INPUT({"class":"email generic-input showing", data:a.invited_email_l, data_type:"text", id:InviteUserView.email_element_id, tabindex:0})]), TD({"class":$rval(function() {
        return"field-status" + ($v(e) ? " icon error" : "")
    })})])])]), DIV({"class":"invite-form-field"}, [DIV({"class":"field-name"}, ["Name (optional)"]), INPUT({"class":"name generic-input showing", data:a.invited_name_l, data_type:"text", id:InviteUserView.name_element_id, tabindex:0})]), !a.guest_choice_after_button ? g : "", $rval(function() {
        var b = $v(f);
        return AsanaForms.renderButton({label:a.submit_label_x, onclick:b, id:InviteUserView.send_element_id, "class":"primary", tabindex:b !== null ? 0 : -1})
    }), a.guest_choice_after_button ? g : "", $rval(function() {
        if($v(e)) {
            if($v(b)) {
                if($v(c)) {
                    return host.recordWarningOnce("should_show_warning, but don't know what warning to show."), ""
                }else {
                    var d = grammaticalList(a._active_domain_provider.activeDomain().network().emailDomains().toArray(), "or");
                    return DIV({"class":"field-description alert"}, ["The email address must be in the " + d + " domain."])
                }
            }else {
                return DIV({"class":"field-description alert"}, ["This doesn't look like an email address."])
            }
        }else {
            return""
        }
    })])
}, _renderGuestChoice:function() {
    var a = this, b = function() {
        a.invite_as_guest_l.requestSet(!$v(a.invite_as_guest_l))
    };
    return a._isGuest() ? "" : LABEL({"class":"guest-option-content", onclick:b, tooltip:function() {
        return DIV(["Recommended for people who should have restricted access to your project, such as contractors, interns or clients.", DIV({style:{marginTop:"1em"}}, ["Leaving unchecked will give access to everything in " + a._active_domain_provider.activeDomain().name() + "."])])
    }, tooltip_delay:200}, [AsanaForms.renderCheckbox({tabIndex:0, id:InviteUserView.guest_checkbox_element_id, data:a.invite_as_guest_l, key_map:[{key:KeyMap.Keys.SPACE, handler:b}]}), FRAG([SPAN({"class":"guest-checkbox-icon"}), SPAN({"class":"guest-invite-text"}, [SPAN({"class":"guest-invite-text-primary"}, a.invited_items_text ? ["Only " + a.invited_items_text + " (Guest)"] : ["Guest"])])])])
}});
__FILE__ = "apps/asana/view/manage_workspace_members_invite_view.js";
ManageWorkspaceMembersInviteView = View.subclass("ManageWorkspaceMembersInviteView", {}, {State:SessionObject2.subclass("ManageWorkspaceMembersInviteView.State", {registry_name:"ManageWorkspaceMembersInviteState", property_descs:{invited_email:{type:String, default_value:""}, invited_name:{type:String, default_value:""}, invite_as_guest:{type:Boolean, default_value:!1}}}, {resetState:function() {
    this.setInvitedName("");
    this.setInvitedEmail("");
    this.setInviteAsGuest(!1)
}})}, {billable_domain_user_group:ATTRIBUTE_REQUIRED, closeDialog:ATTRIBUTE_REQUIRED, _render:function() {
    return DIV({"class":"workspace-users-footer"}, [DIV({"class":"separator"}), this._renderInviteForm(), DIV({"class":"message"})])
}, _renderInviteForm:function() {
    var a = this, b = a.billable_domain_user_group;
    if(b === null) {
        return FRAG()
    }
    return a.createView(InviteUserView, {onInvite:View.publicFunction(a, function(b, d, e) {
        View.runWithoutLvalueChecking(function() {
            DomainInvite.create({creator:env.user(), invited_name:b ? b : d, invited_email:d, invite_domain:a.billable_domain_user_group.domain(), is_guest:e})
        });
        logEvent({name:"ManageWorkspaceMembersListView.onInvite"});
        a._state.resetState();
        InviteUserView.focusEmail();
        a.billable_domain_user_group.domain().isGlobal() && a.closeDialog()
    }), title_x:b.domain().isGlobal() ? "Add to your contacts" : "Add members to " + b.name(), invited_email_l:a._state.invitedEmailL(), invited_name_l:a._state.invitedNameL(), invite_as_guest_l:b.domain().isGlobal() ? null : a._state.inviteAsGuestL(), guest_choice_after_button:!0, submit_enabled_x:!a._shouldDisableNewUserControls()}).render()
}, _shouldDisableNewUserControls:function() {
    return!this.billable_domain_user_group.canInviteMoreUsers()
}});
__FILE__ = "apps/asana/view/workspace_payment_view.js";
define("EnqueueUpdateBillingOwnerChangeRemoteJob", Change.subclass("EnqueueUpdateBillingOwnerChangeRemoteJob", {}, {new_owner:ATTRIBUTE_REQUIRED, enact:function() {
    env.is_server && env.remote_job_store.addJob(UpdateBillingOwnerRemoteJob.create({domain_id:this.new_owner.domain().global_id, domain_user_id:this.new_owner.global_id}))
}, taintedObjectIds:function() {
    return[this.new_owner.domain().global_id]
}}));
NewBillingOwnerConfirmationDialog = DialogView2.subclass("NewBillingOwnerConfirmationDialog", {State:DialogState.subclass("NewBillingOwnerConfirmationDialog.State", {property_descs:{new_billing_owner:{type:DomainUser, default_value:null}}}, {})}, {_render:function() {
    var a = this;
    return this.createView(DialogView, {element_id:"new_billing_owner_confirmation_dialog", title_x:"REASSIGN PAYMENT RESPONSITILITIES?", body_x:DIV({"class":"reassign-message"}, ["You will no longer have access to billing account information", DIV({style:"margin-top: 1ex"}, [AsanaForms.renderButton({"class":"primary", label:"Reassign", onclick:function() {
        logEvent({name:"Premium:ReassignBillingOwner"});
        var b = a._state.newBillingOwner();
        env.datastore_manager.enactChange(EnqueueUpdateBillingOwnerChangeRemoteJob.create({new_owner:b}));
        b.domain().setBillingOwner(b);
        a.hide()
    }}), AsanaForms.renderButton({style:"margin-left: 1ex", label:"Cancel", onclick:function() {
        var b = a._state.newBillingOwner().domain();
        a.hide();
        ManageWorkspaceDialogView.show({billable_domain_user_group:b, selected_tab:ManageWorkspaceDialogView.TABS.PAYMENT, requested_remove_self:!1})
    }})])])}).render()
}});
WorkspacePaymentView = View.subclass("WorkspaceSettingsView", {State:SessionObject2.subclass("WorkspacePaymentView.State", {property_descs:{reassigning:{type:Boolean, default_value:!1}}}, {})}, {closeDialog:ATTRIBUTE_REQUIRED, domain:ATTRIBUTE_REQUIRED, _billing_owner_typeahead_view:SET_IN_CONSTRUCTOR, constructor:function(a) {
    var b = this;
    WorkspacePaymentView.superproto.constructor.call(this, a);
    this._billing_owner_typeahead_view = $rval(function() {
        return b.createView(UserTypeaheadView, {domain:b.domain, context_pot_or_null:null, only_full_members:!0, id:"billing_owner_typeahead_view", onInvite:null, invited_items_text:null, onSelectItem:View.publicFunction(b, function(a) {
            a === b.domain.billingOwner() ? (b._state.setReassigning(!1), env.setFocusToDefault()) : (b.closeDialog(), NewBillingOwnerConfirmationDialog.show({new_billing_owner:a}))
        }), should_show_new_item_r:!1})
    })
}, defaultFocusAndSelection:function() {
    return this._state.reassigning() ? {focused_element_id:$v(this._billing_owner_typeahead_view).focusable_element_id, selection_start:null, selection_end:null} : {focused_element_id:null, selection_start:null, selection_end:null}
}, renderFooterForDialogView:function() {
    var a = this;
    return DIV([DIV({"class":"separator"}), AsanaHelpers.renderWithinHiddenLoadingBoundary("DIV", [$rval(function() {
        return a._currentUserIsOwner() ? DIV({"class":["message"]}, ["Have a question? Contact customer-service@asana.com"]) : ""
    })])])
}, _currentUserIsOwner:function() {
    return env.user() === this.domain.billingOwner().user()
}, _render:function() {
    var a = this;
    return $rval(function() {
        var b = $v(a._billing_owner_typeahead_view), c = a._currentUserIsOwner(), d = $rval(function() {
            return a.domain.sizeCap() + " Members"
        }), e = $rval(function() {
            return a.domain.numMembersCountingAgainstUserLimit() + " used"
        }), f = $rval(function() {
            return a.domain.billingOwner().name()
        }), b = a._state.reassigning() ? TR({"class":"field"}, [TD({"class":"field-name"}, ["Billing Owner"]), TD({key_map:[{key:KeyMap.Keys.ESC, handler:function() {
            a._state.setReassigning(!1);
            env.setFocusToDefault();
            return Node.STOP
        }}]}, [b.render()]), TD([])]) : TR({"class":"field"}, [TD({"class":"field-name"}, ["Billing Owner"]), TD({"class":"field-value"}, [DIV({"class":"value"}, [f]), DIV({"class":"field-desc"}, [c ? "You are responsible for managing payments" : "This person is responsible for managing payments"])]), TD({"class":"field-button"}, [c ? AsanaForms.renderButton({label:"Reassign", onclick:function() {
            a._state.setReassigning(!0);
            env.setFocusToDefault()
        }}) : ""])]);
        return DIV({"class":"form-view", id:"billing-tab-body"}, [TABLE({"class":"billing-table"}, [TR({"class":"field"}, [TD({"class":"field-name"}, ["Current plan"]), TD({"class":"field-value"}, [DIV({"class":"value"}, [d]), DIV({"class":"field-desc"}, [e])]), TD({"class":"field-button"}, [c ? AsanaForms.renderButton({label:"Change Plan", onclick:function() {
            var b = a.domain.global_id;
            a.closeDialog();
            BillingDialogView.showBillingFlow(BillingRoutes.urlForBillingPlans(b))
        }}) : ""])]), b].concat(c ? [TR({"class":"field"}, [TD({"class":"field-name"}, ["Billing info"]), TD({"class":"field-value"}, [SPAN({"class":"value"}, [a.domain.paymentCardType()]), " ending in ", SPAN({"class":"value"}, [a.domain.paymentCardLastDigits()])]), TD({"class":"field-button"}, [AsanaForms.renderButton({label:"Edit Account", onclick:function() {
            BillingDialogView.showBillingFlow(BillingRoutes.urlForBillingInfoUpdate(a.domain.global_id))
        }})])])] : []))])
    })
}});
__FILE__ = "luna/common/view/tab_view.js";
TabView = View.subclass("TabView", {}, {selected_tab_l:ATTRIBUTE_REQUIRED, tab_configs:ATTRIBUTE_REQUIRED, tabs:SET_IN_CONSTRUCTOR, class_name:"", constructor:function(a) {
    var b = this;
    TabView.superproto.constructor.call(b, a);
    b.tabs = a.tab_configs.map(function(c) {
        return b.createView(TabView.Tab, update(c, {selected_tab_l:a.selected_tab_l}))
    })
}, _render:function() {
    return UL({"class":"tab-view " + this.class_name}, this.tabs.map(function(a) {
        return a.render()
    }))
}, renderSelectedTabContents:function() {
    var a = this.tabs.filter(function(a) {
        return a.isSelected()
    });
    a.size() !== 1 && ufu("Did not find exactly one selected tab", "view name", this.fully_qualified_view_name, "selected_tab", $v(this.selected_tab_l), "selected_tabs", a);
    return a[0].renderContents()
}});
TabView.Tab = View.subclass("TabView.Tab", {}, {selected_tab_l:ATTRIBUTE_REQUIRED, value:ATTRIBUTE_REQUIRED, display_name:ATTRIBUTE_REQUIRED, tooltip:"", tooltip_delay:"", class_name:"", enabled:!0, onSelected:noop, renderContents:ATTRIBUTE_REQUIRED, constructor:function(a) {
    if(a.view_name === void 0) {
        a.view_name = this.__type_name + "." + a.value
    }
    TabView.Tab.superproto.constructor.call(this, a)
}, isSelected:function() {
    return $v(this.selected_tab_l) === this.value
}, _render:function() {
    var a = this;
    return LI({onclick:a.enabled ? function() {
        a.selected_tab_l.requestSet(a.value);
        a.onSelected()
    } : null, tooltip:a.tooltip, tooltip_delay:a.tooltip_delay, "class":[a.class_name, "tab", a.isSelected() ? "selected" : "unselected", !a.enabled ? "disabled" : ""].join(" ")}, [A({}, [a.display_name])])
}});
__FILE__ = "apps/asana/view/dialog/manage_workspace_dialog_view.js";
ManageWorkspaceDialogView = DialogView2.subclass("ManageWorkspaceDialogView", {TABS:{SETTINGS:"settings", MEMBERS:"members", PAYMENT:"payment"}, State:DialogState.subclass("ManageWorkspaceDialogView.State", {registry_name:"ManageWorkspaceDialogState", property_descs:{selected_tab:{type:String}, billable_domain_user_group:{type:StateObject}, workspace_settings_dialog_state:{type:WorkspaceSettingsDialogState}, manage_workspace_members_state:{type:ManageWorkspaceMembersState}}}, {}), show:attributedFunc({billable_domain_user_group:ATTRIBUTE_REQUIRED,
    selected_tab:ATTRIBUTE_REQUIRED, onclose_runnable:null, requested_remove_self:!1}, function(a) {
    return ManageWorkspaceDialogView.superclass.show.call(this, {workspace_settings_dialog_state:WorkspaceSettingsDialogState.createFromDomain(a.billable_domain_user_group.domain()), manage_workspace_members_state:ManageWorkspaceMembersState.create({requested_remove_self:a.requested_remove_self}), billable_domain_user_group:a.billable_domain_user_group, selected_tab:a.selected_tab, onclose_runnable:a.onclose_runnable})
}), touch:function(a, b) {
    env.world_store.peekStateObjectProperties([a], ["activated", "name", "is_for", "network", "org_name", "website", "org_size", "premium_plan_name"]);
    env.user().networks();
    a.teams();
    if(!a.isGlobal()) {
        var c = b.domains(), c = c.valueAfterValueOrNull(a) || c.firstValueOrNull();
        b.taskList(c)
    }
}}, {_workspace_settings_dialog_view:SET_IN_CONSTRUCTOR, _manage_workspace_members_list_view:SET_IN_CONSTRUCTOR, _workspace_payment_view:null, _selectTab:function(a) {
    this._state.selectedTabL().requestSet(a)
}, defaultFocusAndSelection:function() {
    if(this._state.selectedTab() === ManageWorkspaceDialogView.TABS.SETTINGS) {
        var a = !this._state.workspaceSettingsDialogState().domain().activated();
        return{focused_element_id:"form_view:manage_workspace_dialog_field:workspace-name", selection_start:a ? -1 : null, selection_end:a ? -1 : null}
    }else {
        return this._state.selectedTab() === ManageWorkspaceDialogView.TABS.MEMBERS ? {focused_element_id:InviteUserView.email_element_id} : this._workspace_payment_view.defaultFocusAndSelection()
    }
}, _render:function() {
    var a = this, b = this._state.getV("workspace_settings_dialog_state"), c = this._state.manageWorkspaceMembersState();
    if(c.requestGuestUpgrade() !== null) {
        return a._renderRequestGuestUpgrade()
    }
    if(c.requestMemberDowngrade() !== null) {
        return a._renderRequestMemberDowngrade()
    }
    if(c.requestedRemoveSelf()) {
        return a._renderRemoveSelfFromWorkspace()
    }
    var d = b.getV("domain"), c = env.user().domainUserForDomain(d);
    assertEq(!0, c.isInternal(), "Guests shouldn't use the manage workspace dialog");
    this._workspace_settings_dialog_view = this.createView(WorkspaceSettingsDialogView, {dialog_name:"manage_workspace_dialog", state:b, onSubmit:function() {
        d.updateProperties(b.workspaceProperties());
        a._selectTab(ManageWorkspaceDialogView.TABS.MEMBERS)
    }});
    if(c.isInternal()) {
        a._workspace_payment_view = a.createView(WorkspacePaymentView, {domain:d, closeDialog:function() {
            a.hide()
        }})
    }
    var e = a._state.selectedTabL(), f = a.createView(TabView, {selected_tab_l:e, tab_configs:[{value:ManageWorkspaceDialogView.TABS.SETTINGS, display_name:"Settings", class_name:"settings", renderContents:function() {
        return a._workspace_settings_dialog_view.render()
    }, onSelected:function() {
        env.setFocusToDefault()
    }}, {value:ManageWorkspaceDialogView.TABS.MEMBERS, display_name:"Members", class_name:"members", onSelected:function() {
        env.setFocusToDefault()
    }, renderContents:function() {
        return AsanaHelpers.renderWithinLoadingBoundary("DIV", [a._manage_workspace_members_list_view.render()])
    }}].concat(d.premiumPlanName() === null || !c.isInternal() ? [] : [{value:ManageWorkspaceDialogView.TABS.PAYMENT, display_name:"Billing", class_name:"payment", renderContents:function() {
        return a._workspace_payment_view.render()
    }}])});
    this._manage_workspace_members_list_view = this.createView(ManageWorkspaceMembersListView, {billable_domain_user_group:a._state.billableDomainUserGroup(), manage_workspace_members_state:a._state.manageWorkspaceMembersState()});
    this._rendered_manage_workspace_members_invite_view = this.createView(ManageWorkspaceMembersInviteView, {billable_domain_user_group:a._state.billableDomainUserGroup(), closeDialog:function() {
        a.hide()
    }}).render();
    return(d.isGlobal() ? a.createView(DialogView, {element_id:"manage_workspace_dialog", flush_body_style:!0, title_x:"Add Contact", body_x:$rval(function() {
        return AsanaHelpers.renderWithinLoadingBoundary("DIV", [a._manage_workspace_members_list_view.render()])
    }), footer_x:a._rendered_manage_workspace_members_invite_view, show_header_bottom:!1}) : a.createView(DialogView, {element_id:"manage_workspace_dialog", flush_body_style:!0, title_x:"Manage Workspace: " + d.name(), tab_view:f, banner_x:$rval(function() {
        return $v(e) === ManageWorkspaceDialogView.TABS.MEMBERS ? AsanaHelpers.renderWithinHiddenLoadingBoundary("DIV", [$rval(function() {
            return a._renderMembersBanner()
        })]) : null
    }), banner_class:"manage-workspace-banner", body_x:$rval(function() {
        return AsanaHelpers.renderWithinLoadingBoundary("DIV", [f.renderSelectedTabContents()])
    }), footer_x:$rval(function() {
        var b = $v(e);
        return b === ManageWorkspaceDialogView.TABS.SETTINGS ? a._workspace_settings_dialog_view.renderFooterForDialogView() : b === ManageWorkspaceDialogView.TABS.MEMBERS ? a._rendered_manage_workspace_members_invite_view : a._workspace_payment_view.renderFooterForDialogView()
    }), show_header_bottom:!1, onScrollToBottom:function() {
        if($v(e) === ManageWorkspaceDialogView.TABS.MEMBERS) {
            a._manage_workspace_members_list_view.onScrollToBottom()
        }
    }})).render()
}, _renderRemoveSelfFromWorkspace:function() {
    var a = this, b = this._state.getV("workspace_settings_dialog_state").getV("domain"), c = a.user.domainUserForDomain(b);
    a.user.domains();
    a.user.email();
    var d = this._state.manageWorkspaceMembersState().requestedRemoveSelfL(), e = function() {
        d.requestSet(!1);
        c.isGuest() && a._state.hide()
    };
    return a.createView(DialogView, {element_id:"remove_self_from_workspace_dialog", title_x:"Remove yourself from the workspace?", body_x:DIV(["If you remove yourself, you won't be able to access any of the projects or tasks in " + b.name() + ". If you want to regain access, you'll need to ask a coworker to invite you to the workspace again."]), footer_x:DIV({"class":"footer-buttons-left", children:[AsanaForms.renderButton({label:"Remove me from " + b.name(), onclick:function() {
        a.hide();
        d.requestSet(!1);
        var e = a.user.domains();
        e.size() === 1 ? env.realAppSession().setCurrentList(new_domain_user.taskList()) : (e = e.valueAfterValueOrNull(b) || e.firstValueOrNull(), env.realAppSession().setCurrentList(a.user.taskList(e)));
        c.deactivate()
    }, "class":"primary remove_self_yes", tabindex:0}), AsanaForms.renderButton({label:"Stay in " + b.name(), onclick:e, "class":"remove_self_no", tabindex:0})]}), onclose:e}).render()
}, _renderRequestGuestUpgrade:function() {
    var a = this._state.workspaceSettingsDialogState().domain(), b = this._state.manageWorkspaceMembersState(), c = b.requestGuestUpgrade(), d = function() {
        b.setRequestGuestUpgrade(null)
    };
    return this.createView(DialogView, {element_id:"request_guest_upgrade_dialog", title_x:"Grant " + c.name() + " full access to " + a.name() + "?", body_x:DIV(["If you grant full access, " + c.name() + " will be able to see and alter all projects, tags, and tasks in " + a.name() + "."]), footer_x:DIV({"class":"footer-buttons-left", children:[AsanaForms.renderButton({label:"Grant access to " + c.name(), onclick:function() {
        c.setIsGuest(!1);
        b.setRequestGuestUpgrade(null)
    }, "class":"primary upgrade_yes", tabindex:0}), AsanaForms.renderButton({label:"Leave " + c.name() + " as a guest", onclick:d, "class":"upgrade_no", tabindex:0})]}), onclose:d}).render()
}, _renderRequestMemberDowngrade:function() {
    var a = this._state.workspaceSettingsDialogState().domain(), b = this._state.manageWorkspaceMembersState(), c = b.requestMemberDowngrade(), d = function() {
        b.setRequestMemberDowngrade(null)
    };
    return this.createView(DialogView, {element_id:"request_member_downgrade_dialog", title_x:"Make " + c.name() + " a guest in " + a.name() + "?", body_x:DIV(["If you make " + c.name() + " a guest " + c.name() + " will only be able to see items explicitly shared with " + c.name() + "."]), footer_x:DIV({"class":"footer-buttons-left", children:[AsanaForms.renderButton({label:"Make " + c.name() + " a guest", onclick:function() {
        c.setIsGuest(!0);
        b.setRequestMemberDowngrade(null)
    }, "class":"primary downgrade_yes", tabindex:0}), AsanaForms.renderButton({label:"Leave " + c.name() + " with full access", onclick:d, "class":"downgrade_no", tabindex:0})]}), onclose:d}).render()
}, _renderMembersBanner:function() {
    return this.createView(ManageWorkspaceMembersHeaderView, {billable_domain_user_group:this._state.billableDomainUserGroup()}).render()
}});
__FILE__ = "apps/asana/view/dialog/new_workspace_action.js";
NewWorkspaceAction = UserAction.subclass("NewWorkspaceAction", {property_descs:{name:{type:String}}}, {formatString:function() {
    ufu()
}, placeholderMap:function() {
    ufu()
}});
__FILE__ = "apps/asana/view/remote_job_state.js";
RemoteJobState = SessionObject2.subclass("RemoteJobState", {SINGLETON_OBJECT_ID:"remote_job_state", property_descs:{remote_job_status:{type:RemoteJobStatus, default_value:null}, completion_text:{type:String, default_value:""}, in_progress_text:{type:String, default_value:""}}}, {});
__FILE__ = "apps/shared/iasana_session.js";
IAsanaSession = Interface.create("IAsanaSession", [], {}, {setCurrentList:ABSTRACT, setCurrentItem:ABSTRACT, activeDomain:ABSTRACT});
__FILE__ = "apps/shared/iactive_domain_provider.js";
IActiveDomainProvider = Interface.create("IActiveDomainProvider", [], {}, {activeDomain:ABSTRACT, activeDomainUser:function() {
    var a = this.activeDomain();
    return a !== null ? env.user().domainUserForDomain(a) : null
}});
__FILE__ = "apps/asana/model/asana_session.js";
AsanaSession = AppSession.subclass("AsanaSession", [INavigator, IDialogStateManager, IAsanaSession, IActiveDomainProvider], {CACHE_LENGTH:5, MAX_DETAILS_PANE_WIDTH:636, MIN_TWO_PANE_GRID_PANE_WIDTH:615, MIN_THREE_PANE_WIDTH_WITHOUT_OVERLAY:1210, MIN_THREE_PANE_WIDTH:1075, RIGHT_MARGIN_PERCENTAGE:0.0135, THREE_PANE_GRID_PANE_PERCENTAGE:0.565, NAV_PANE_WIDTH:251, NAV_PANE_COLLAPSED_WIDTH:50, NOTIFICATION_PANE_WIDTH:636, LAYOUT_SIZE:{WIDE:"wide", NARROW:"narrow"}, CURRENT_VIEW_TYPE:{FEED:"feed", LIST:"list"},
    property_descs:{user_prop_ratio:{type:Float}, current_list:{type:ItemList}, pots_to_cache:{type:List}, grid_state:{type:GridState}, details_state:{type:DetailsState}, tooltip_element_id:{type:String, default_value:null}, dropdowns:{type:List}, dialogs_json:{type:String, default_value:null}, show_archived_projects:{type:Boolean}, list_of_lists_visible:{type:Boolean}, grid_visible:{type:Boolean}, details_visible:{type:Boolean}, active_billing_flow:{type:String, default_value:null}, logged_in_google_email:{type:String,
        default_value:null}, show_tips_dialog:{type:Boolean}, dropdown_id:{type:String, default_value:null}, show_new_workspace_confirmation_dialog:{type:Boolean}, design_sandbox_filename:{type:String, default_value:null}}, create:attributedValueFunc(copyAndUpdate(AppSession.create.attribute_spec, {current_list:ATTRIBUTE_REQUIRED, details_visible:!0, logged_in_google_email:null}), function(a) {
        var b = GridState.create({grid_id:"pot_grid", pot:a.current_list});
        host.profiler.timeFuncSummary("0.2.1.0.0 selectDefaultItem", function() {
            a.current_list !== null && b.selectDefaultItem(a.current_list)
        });
        return env.session_store.createStateObject(AsanaSession, update({user_prop_ratio:-1, pots_to_cache:[], grid_state:b, details_state:DetailsState.create({}), show_tips_dialog:!1, show_new_workspace_confirmation_dialog:!1, show_archived_projects:!1, list_of_lists_visible:!0, grid_visible:!0}, a))
    })}, {view:null, onAddedToEnvironment:function() {
    env.registerAppInterfaces([IDialogStateManager, INavigator, IActiveDomainProvider], this);
    env.registerAppInterfaces([IDropdownStack], DropdownStack.create(this.dropdownsL()))
}, onRemovedFromEnvironment:function() {
    env.unregisterAppInterfaces([IDialogStateManager, INavigator, IActiveDomainProvider]);
    env.unregisterAppInterfaces([IDropdownStack])
}, _navDockState:function() {
    return env.session_store.sessionObject2(NavigationDockView.State, "AsanaView/NavigationDockView")
}, _ensureNavDockConsistent:function(a) {
    var b = this._navDockState();
    !b.inOverview() && b.domain() !== a && b.setDomain(a)
}, inOverview:function() {
    return this._navDockState().inOverview()
}, navPaneCollapsable:function(a) {
    return this.layoutSize(a) === AsanaSession.LAYOUT_SIZE.NARROW && this.detailsVisible()
}, layoutSize:function(a) {
    return a.width() < AsanaSession.MIN_THREE_PANE_WIDTH_WITHOUT_OVERLAY ? AsanaSession.LAYOUT_SIZE.NARROW : AsanaSession.LAYOUT_SIZE.WIDE
}, inboxModelOrUnknown:function() {
    return this._navDockState().inboxModelOrUnknown()
}, setInboxModel:function(a) {
    this._navDockState().setInboxModel(a)
}, currentViewType:function() {
    return this.inboxModelOrUnknown() !== null ? AsanaSession.CURRENT_VIEW_TYPE.FEED : AsanaSession.CURRENT_VIEW_TYPE.LIST
}, currentlyViewingAList:function() {
    return this.currentViewType() === AsanaSession.CURRENT_VIEW_TYPE.LIST
}, currentlyViewingFeed:function() {
    return this.currentViewType() === AsanaSession.CURRENT_VIEW_TYPE.FEED
}, currentModel:function() {
    return this.currentViewType() === AsanaSession.CURRENT_VIEW_TYPE.FEED ? this.inboxModelOrUnknown() : this.currentListOrUnknown()
}, currentSelectionState:function() {
    return this.currentViewType() === AsanaSession.CURRENT_VIEW_TYPE.FEED ? env.session_store.sessionObject2(InboxView.State, "AsanaView/InboxView." + this.currentModel().global_id) : this.gridState()
}, activeDomain:computedProperty("activeDomain", function() {
    var a = this.currentModel();
    if(isKnown(a) && a !== null && (a = a.domainL().peekAllowingUnknown(), isKnown(a))) {
        return a
    }
    if(a = this.currentSelectionState()) {
        if(a = a.selectedItems().first(), a !== void 0 && (a = a.domainL().peekAllowingUnknown(), isKnown(a))) {
            return a
        }
    }
    return env.user().defaultDomain()
}), touchForSetCurrentList:function() {
    this.currentSelectionState().selectedItems()
}, _setCurrentList:function(a, b) {
    var c = this.currentSelectionState(), d = this.currentListOrUnknown();
    isKnown(d) && d !== null && Flags.enable_list_caching && this.potsToCacheL().prependAndLimitSize(d, AsanaSession.CACHE_LENGTH);
    env.user().maybeAddRecent(a);
    this.setInboxModel(null);
    this.getX("current_list").requestSet(a);
    a === null ? (this.setGridState(null), this.detailsState().resetSubtaskState()) : (this.setGridState(GridState.create({grid_id:"pot_grid", pot:a})), b ? (this.gridState().selectDefaultItem(a), this.detailsState().resetSubtaskState()) : this.gridState().copySelection(c), this.gridState().recoverCachedLength())
}, setCurrentList:function(a) {
    a === null ? this._navDockState().switchToOverview() : isKnown(a.domainOrUnknown()) && this._ensureNavDockConsistent(a.domain());
    this._setCurrentList(a, !0)
}, setCurrentListWithoutResettingSelection:function(a) {
    this._setCurrentList(a, !1)
}, setCurrentItem:function(a, b) {
    var c;
    isA(a, IDomainSpecific) && isKnown(a.domainOrUnknown()) ? (this._ensureNavDockConsistent(a.domain()), c = a.domain()) : c = env.user().defaultDomain();
    var d;
    if(b) {
        d = {list:b, item:a}
    }else {
        if(d = a.navigationContextForUser(env.user()), !d.list && !this.currentlyViewingAList()) {
            d.list = env.user().taskList(c)
        }
    }
    d.list && this.setCurrentListWithoutResettingSelection(d.list);
    this._selectItem(d.item || d.list);
    d.subitem && this.detailsState().selectRelativeTask(d.subitem)
}, potCached:function(a) {
    return this.potsToCacheL().containsObject(a)
}, currentListOrUnknown:function() {
    return this.getX("current_list").peekAllowingUnknown()
}, deferredDetailsVisible:computedProperty("deferredDetailsVisible", function(a) {
    return DeferredRvalue.create(this.getX("details_visible"), a)
}), detailsFullyOpen:function() {
    return this.detailsVisible() && this.deferredDetailsVisible(250)
}, openDetailsPane:function() {
    this.setDetailsVisible(!0);
    env.user().setOpenInThreePane(!0)
}, closeDetailsPane:function() {
    this.setDetailsVisible(!1);
    env.user().setOpenInThreePane(!1)
}, toggleDetailsPane:function() {
    this.detailsVisible() ? this.closeDetailsPane() : this.openDetailsPane()
}, openDetailsPaneIfClosedAndRunInHandler:function(a) {
    this.detailsVisible() ? a() : (this.openDetailsPane(), safeTimeout(function() {
        processHandler(a)
    }, 250))
}, openQuickAddDialog:function(a, b) {
    var c = this.currentModel(), c = isUnknown(c) ? env.user().defaultDomain() : c.domain();
    return QuickAddView.show({domain:c, task_name:a || "", pots:b || []})
}, _selectItem:function(a) {
    this.gridState().selectItem(a);
    this.detailsState().resetSubtaskState()
}, navigateTo:function(a, b) {
    var c = b === void 0 ? !0 : b;
    isA(a, IDomainSpecific) && isKnown(a.domainOrUnknown()) ? this._ensureNavDockConsistent(a.domain()) : a instanceof Domain && this._navDockState().setDomain(a);
    var d = a.navigationTarget();
    if(d instanceof Pot) {
        this._setCurrentList(d, c)
    }else {
        var e = this.currentListOrUnknown(), e = isA(a, IDomainSpecific) && isKnown(e) && isKnown(a.domainOrUnknown()) && e.domain() !== a.domain();
        c || e || !this.currentlyViewingAList() ? this.setCurrentItem(d) : this._selectItem(d)
    }
}, isNavigatedTo:function(a) {
    a = a.navigationTarget();
    return a instanceof Pot ? this.currentlyViewingAList() && a === this.currentListOrUnknown() : this.currentSelectionState().singleDetailPaneItem() === a
}, _dialogsJson:function() {
    return this.dialogsJson()
}, _setDialogsJson:function(a) {
    return this.setDialogsJson(a)
}});
AsanaSession.BillingFlow = {PURCHASE:"purchase", UPGRADE:"upgrade"};
__FILE__ = "apps/shared/fragment_change.js";
FragmentChange = define("FragmentChange", Change.subclass("FragmentChange", {parseFragment:function(a) {
    a = a.split("/");
    a.length > 3 && a[1] === "app" && a.splice(0, 2);
    var b, c, d, e, f = null;
    parseInt(a[1], 10) === 0 ? a[2] === INBOX_NAME.toLowerCase() ? (b = e = !0, c = parseInt(a[3] || "0", 10) || null, d = parseInt(a[4] || "0", 10) || null, f = parseInt(a[5] || "0", 10) || null) : (b = !0, c = parseInt(a[2] || "0", 10) || null, d = parseInt(a[3] || "0", 10) || null, e = !1) : (b = !1, d = c = null, e = !1);
    return{is_valid:b, is_inbox:e, list_id:c, item_id:d, story_id:f}
}}, {fragment:ATTRIBUTE_REQUIRED, is_mobile:!1, enact:function() {
    if(env.is_server) {
        var a = env.realAppSession(), b = FragmentChange.parseFragment(this.fragment);
        if(b.is_inbox) {
            var c = env.world_store.objectOrUnknownWithoutAC(b.list_id), d = b.item_id !== null ? env.world_store.objectOrUnknownWithoutAC(b.item_id) : null, e = b.story_id !== null ? env.world_store.objectOrUnknownWithoutAC(b.story_id) : null;
            c instanceof DomainUser && c.user() === env.user() ? (a.setInboxModel(c), b = env.session_store.sessionObject2(InboxView.State, "AsanaView/InboxView." + b.list_id), e !== null && isKnown(e) && e instanceof Story && (c = c.notificationForStoryNonReactive(e), b.setSelectedNotification(c), env.setFocus("inbox")), d !== null && isKnown(d) && d instanceof Task && (env.is_mobile ? a.setCurrentItem(d) : a.detailsState().selectRelativeTask(d))) : d !== null && isKnown(d) && d instanceof Task && a.setCurrentItem(d)
        }else {
            b.list_id !== null && (d = env.world_store.objectOrUnknownWithoutAC(b.list_id), d instanceof ItemList || (d = null), b = b.item_id !== null ? env.world_store.objectOrUnknownWithoutAC(b.item_id) : null, b !== null && isKnown(b) ? a.setCurrentItem(b, d) : d !== null && a.setCurrentList(d), logEvent({name:"NavigateByFragmentChange", item:b, list:d}), Flags.enable_list_caching && a.hasProperty("pots_to_cache") && a.getX("pots_to_cache").requestSet([]))
        }
        env.stopNavigating(!1)
    }
}, taintedObjectIds:function() {
    return[]
}}));
__FILE__ = "apps/asana/model/error_notification.js";
ErrorNotification = Task.subclass("ErrorNotification", {property_descs:{hoptoad_url:{type:String}, recent_log:{type:String}, number_of_occurrences:{type:Integer}, estimated_times_per_day:{type:Integer, default_value:0}, baseline_number_of_occurrences:{type:Integer}, latest_occurrence_time:{type:String}, user_agent:{type:String}, first_commit_id:{type:String}, server_host:{type:String}, domain:{type:Domain}, notification_sent:{type:Boolean}, oncall_notification_sent:{type:Boolean}, affected_user_objects:{type:List}},
    create:attributedValueFunc(update({hoptoad_url:"", recent_log:"", domain:ATTRIBUTE_REQUIRED, notification_sent:!1, oncall_notification_sent:!1, affected_user_objects:[], number_of_occurrences:null, baseline_number_of_occurrences:0, latest_occurrence_time:"", user_agent:"", estimated_times_per_day:0}, Task.create.attribute_spec), Task.create.bareFunc)}, {safeToIgnore:function() {
    return this.hasTagWithName("safe to ignore")
}, shouldResolveTag:function() {
    return this.hasTagWithName("resolve!")
}, resolve:function() {
    var a = this;
    if(a.getV("number_of_occurrences") !== 0 && (a.tags().forEach(function(b) {
        ["safe to ignore", "warrants investigation", "high impact", "resolve!"].indexOf(b.name()) >= 0 && a.removePotWithoutStory(b)
    }), a.getX("notification_sent").requestSet(!1), a.getX("oncall_notification_sent").requestSet(!1), a.getX("baseline_number_of_occurrences").requestSet(a.getV("number_of_occurrences") + a.getV("baseline_number_of_occurrences")), a.getX("first_commit_id").requestSet(null), !a.isCompleted())) {
        var b = "Resolved at " + env.clock.nowDate() + " [" + a.numberOfOccurrences() + " times, " + a.affectedUserObjects().size() + " users]";
        a.getX("description").requestSet(b + ". Old notes:\n" + a.description());
        a.addComment({creator_du:env.user().domainUserForDomain(a.domain()), text:b});
        a.setCompleted(!0, env.user().domainUserForDomain(a.domain()));
        a.getX("number_of_occurrences").requestSet(0);
        a.getX("affected_user_objects").requestClear()
    }
}, descriptionForPlainText:function() {
    return"=== NOTES ===\n" + this.description() + "\n\n === RECENT LOG ===\n" + this.recentLog() + "\n\n === AFFECTED USERS ===\n" + this.affectedUserObjects().map(function(a) {
        return $v(a).name()
    }).join(",")
}, descriptionForHtmlText:function() {
    return this.descriptionForPlainText()
}});
__FILE__ = "apps/asana/model/task_list.js";
TaskList = {getVisibleTasks:function(a) {
    var b = a.limit || null;
    delete a.limit;
    return TaskList.getVisibleTasksQuery(a).getQueryRvalue("getVisibleTasks|" + a.task_type, b)
}, getVisibleTasksQuery:attributedFunc({asana_list:ATTRIBUTE_REQUIRED, which_tasks:ATTRIBUTE_REQUIRED, completed_first:!1, filtered_by_tags:null, task_type:"all"}, function(a) {
    var b;
    b = a.which_tasks === "all" ? QueryBuilder.scalarProperty("completed").ge(0) : QueryBuilder.scalarProperty("completed").eq(0).or().gt(a.asana_list.getX("archive_time"));
    a.completed_first && b.ordersWithPriority(0).rankGenerator(Query.ZeroToMaxNumberRankGenerator.create());
    var c = null;
    a.filtered_by_tags !== null && (c = a.filtered_by_tags.map(function(a) {
        return QueryBuilder.isInList(a.getX("items"))
    }));
    var d = null;
    a.task_type !== "all" && (d = QueryBuilder.scalarProperty("task_type").eq(a.task_type));
    var e = QueryBuilder.queryForObjects(Task);
    c !== null && e.where.apply(e, c);
    e.where(QueryBuilder.isInList(a.asana_list.getX("items")).ordersWithPriority(a.completed_first ? 1 : 0), b, d);
    return e
})};
__FILE__ = "apps/asana/model/contact.js";
Contact = StateObject.subclass("Contact", [], {property_descs:{__modification_time:{type:Timestamp, default_value:0}, owner:{type:DomainUser, preloaded:!0, isWriteableBy:StateObject.Property.WRITEABLE_ON_CREATE}, addressee:{type:DomainUser, preloaded:!0, isWriteableBy:function(a, b) {
    if(!a.isNew()) {
        return!1
    }
    return b.isBlessedToContact(a.addressee().user())
}}, interaction_count:{type:Integer, preloaded:!0, default_value:0, isWriteableBy:function(a, b) {
    return a.isNew() || a.owner().user() === b
}}}, index_descs:{contact_is_unique:{keys:["owner", "addressee", StateObject.PropertyName.TRASHED_AT], unique:!0}}}, {isIndexed:function() {
    return!0
}, validate:function(a) {
    Contact.superproto.validate.call(this, a);
    assertEq(this.owner().domain(), this.addressee().domain())
}, incrementInteractionCount:function() {
    this.setInteractionCount(this.interactionCount() + 1)
}, _computeIsVisibleBy:function(a) {
    var b = this.ownerOrUnknown();
    if(!(b instanceof UnknownValue.AccessDenied) && a === b.user()) {
        return!0
    }
    b = this.addresseeOrUnknown();
    if(!(b instanceof UnknownValue.AccessDenied) && a === b.user()) {
        return!0
    }
    return!1
}});
ContactInteractionChange = define("ContactInteractionChange", Change.subclass("ContactInteractionChange", {}, {owner:ATTRIBUTE_REQUIRED, addressee:ATTRIBUTE_REQUIRED, email:ATTRIBUTE_REQUIRED, enact:function() {
    env.is_server && (env.user() !== this.owner.user() ? ufu("Added a contact as the wrong user") : this.owner.addContact(this.addressee, this.email))
}, taintedObjectIds:function() {
    return[this.owner.global_id, this.addressee.global_id]
}}));
IndexContactsChange = define("IndexContactsChange", Change.subclass("IndexContactsChange", {}, {domain_users:ATTRIBUTE_REQUIRED, users:ATTRIBUTE_REQUIRED, enact:function() {
    env.is_server && env.remote_job_store.addJob(IndexContactsRemoteJob.create({domain_user_ids:this.domain_users.map(StateObject.globalId), user_ids:this.users.map(StateObject.globalId)}), env.clock.now())
}, taintedObjectIds:function() {
    return[]
}}));
__FILE__ = "apps/asana/model/asana_recurly.js";
AsanaRecurly = {sign:function(a) {
    a.timestamp = Math.floor(env.clock.now() / 1E3);
    a.nonce = Random.string({alphabet:Crypto.URL_FRIENDLY_ALPHABET, length:32, secure:!0});
    a = AsanaRecurly._toQueryString(a);
    return[Crypto.hash(a, {algorithm:Crypto.Algorithm.SHA1, hmac_key:env.secrets.recurly_key.js_key, output:Format.HEX}).replace(/\W/, ""), a].join("|")
}, apiRequest:attributedFunc({api_key:ATTRIBUTE_REQUIRED, action:ATTRIBUTE_REQUIRED, args:ATTRIBUTE_REQUIRED}, function(a) {
    var b = Process.exec({command:host.getEnvVar("CODEZ") + "/apps/asana/jobs/recurly_client.rb", cmd_args:concat([a.api_key, a.action], a.args)});
    b.status !== 0 && ufu("Recurly request failed", a.action, a.args, "Result status", b.status, "Result error", prettyProof(b.err));
    return JSON.parse(b.out)
}), handleRecurlyNotification:function(a) {
    var b = function(a, b) {
        for(var c = 0;c < b.childNodes.length;++c) {
            if(b.childNodes[c].nodeName === a) {
                return b.childNodes[c]
            }
        }
        throw Error("Cannot find " + a + " in " + b.nodeName);
    };
    try {
        var c = (new (require("dom").DOMParser)).parseFromString(a), d = b("account_code", b("account", c.documentElement)).textContent;
        if(!d.startsWith("domain-")) {
            throw Error("Invalid account code (doesn't start with domain-): " + e);
        }
        var e = parseInt(d.substr(7), 10);
        if(isNaN(e)) {
            throw Error("Invalid account code (not a number): " + e);
        }
        env.remote_job_store.addJob(CheckSubscriptionRemoteJob.create({domain_id:e}));
        return!0
    }catch(f) {
        host.recordWarning("Malformed recurly notification", a, f)
    }
    return!1
}, _toQueryString:function(a, b) {
    if(isA(a, String) || isA(a, Boolean) || isA(a, Number)) {
        return assert(b), AsanaRecurly._encodeKeyPair(b, a)
    }else {
        if(isA(a, Array)) {
            assert(b), a.map(function(a) {
                return AsanaRecurly._toQueryString(a, b + "[]")
            }).join("&")
        }else {
            return Map.mapEntries(a, function(a, d) {
                return AsanaRecurly._toQueryString(d, b ? b + "[" + a + "]" : a)
            }).sort().join("&")
        }
    }
}, _encodeKeyPair:function(a, b) {
    return URI.encodeComponent(a) + (b ? "=" + URI.encodeComponent(b) : "")
}};
__FILE__ = "apps/asana/asana_model.js";
RemoveFromListAction = UserAction.subclass("RemoveFromListAction", {property_descs:{object:{type:StateObject, allow_trashed_values:!0}, parent:{type:StateObject}}}, {isUndoable:function() {
    return!0
}, formatString:function() {
    return"%{object} was removed from %{parent}"
}, placeholderMap:function() {
    return Map.create([["object", this.getV("object")], ["parent", this.getV("parent")]])
}});
SetArchivedAction = UserAction.subclass("SetArchivedAction", {property_descs:{pot:{type:Pot}, is_archived:{type:Boolean}}}, {isUndoable:function() {
    return!0
}, formatString:function() {
    return this.getV("is_archived") ? "%{pot} was marked as archived" : "%{pot} was unarchived"
}, placeholderMap:function() {
    return Map.create([["pot", this.getV("pot")]])
}});
ConvertPotAction = UserAction.subclass("ConvertPotAction", {property_descs:{pot:{type:Pot}, was_project:{type:Boolean}}}, {isUndoable:function() {
    return!0
}, formatString:function() {
    return this.getV("was_project") ? "%{pot} was converted to a tag" : "%{pot} was converted to a " + Vocab.project
}, placeholderMap:function() {
    return Map.create([["pot", this.getV("pot")]])
}});
CompleteSurveyAction = UserAction.subclass("CompleteSurveyAction", {}, {formatString:function() {
    return"Thank you for your feedback!"
}, placeholderMap:function() {
    return Map.create([])
}});
GenericTestingUserAction = UserAction.subclass("GenericTestingUserAction", {}, {isUndoable:function() {
    return!0
}, formatString:function() {
    return"You did something!"
}, placeholderMap:function() {
    return null
}});
MoveAsanaStateObjectsAction = UserAction.subclass("MoveAsanaStateObjectsAction", {property_descs:{from_object:{type:StateObject, allow_trashed_values:!0}, to_object:{type:StateObject, allow_trashed_values:!0}, objects:{type:List, allow_trashed_values:!0}}}, {isUndoable:function() {
    return!0
}, formatString:function() {
    return"%{object_description} %{was_or_were} moved from %{from_object} to %{to_object}"
}, placeholderMap:function() {
    var a = this.getV("objects"), b = a.firstValueOrNull();
    a.size() === 1 && b.name().length > 0 ? (a = b, b = "was") : a.size() > 1 ? (a = a.size() + " items", b = "were") : (a = "1 item", b = "was");
    return Map.create([["from_object", this.getV("from_object")], ["to_object", this.getV("to_object")], ["object_description", a], ["was_or_were", b]])
}});
CommentReferencesAddedAsFollower = UserAction.subclass("CommentReferencesAddedAsFollower", {property_descs:{domain_users:{type:List}}}, {isUndoable:function() {
    return!0
}, formatString:function() {
    return this.domainUsers().size() > 1 ? "%{follower_string} were added as followers" : "%{follower_string} was added as a follower"
}, placeholderMap:function() {
    var a = this.domainUsers().map(function(a) {
        return a.name()
    }), a = grammaticalList(a, "and");
    return Map.create([["follower_string", a]])
}});
__FILE__ = "apps/asana/column_testing.js";
ColumnTesting = {columnElement:function(a) {
    return UiTesting.element("//*[@id='" + a + "']")
}, headerElement:function(a) {
    return ColumnTesting.columnElement(a)
}};
__FILE__ = "apps/asana/grid_testing.js";
GridTester = AsanaObject.subclass("GridTester", {}, {gridState:ATTRIBUTE_REQUIRED, containingElement:ATTRIBUTE_REQUIRED, constructor:function(a) {
    GridTester.superproto.constructor.call(this);
    updateWithAttributes(this, a)
}, taskGrouper:function() {
    return this.gridState().getTaskGrouper()
}, setSelection:function(a, b) {
    var c = UiTesting.session();
    a && c.setCurrentList(a);
    c = this.gridState();
    b === void 0 ? c.selectItem(null) : isArrayLike(b) ? c.selectItems(b) : c.selectItem(b)
}, setInboxSelection:function(a, b, c) {
    UiTesting.session().setInboxModel(a);
    a = env.session_store.sessionObject2(InboxView.State, "AsanaView/InboxView." + a.global_id);
    c && a.setSelectedNotification(c)
}, selectGroupItem:function(a) {
    this.gridState().selectGroupItem(a)
}, setGroupBy:function(a) {
    this.gridState().setGroupBy(a)
}, groupBy:function() {
    return this.gridState().groupBy()
}, setShowAllMyTasks:function(a) {
    this.gridState().getX("show_all_my_tasks").requestSet(a)
}, setGroupByAssignee:function(a) {
    a ? this.setGroupBy(TaskGrouper.Type.ASSIGNEE) : this.setGroupBy(TaskGrouper.Type.NONE)
}, mapRowElements:function(a) {
    for(var b = [];;) {
        var c = this.rowElementByIndex(b.length + 1);
        if(!c.exists()) {
            break
        }
        b.push(c)
    }
    return b.map(a)
}, rowNames:function() {
    var a = this;
    return this.mapRowElements(function(b) {
        return a.rowMainInputElement(b).textContent()
    })
}, navigatingOverlayIsVisible:function() {
    return UiTesting.element("//*[@id='center_pane']").childWithClass("navigating-overlay").isDisplayed()
}, loadingIndicatorIsVisible:function() {
    return UiTesting.element("//*[@id='center_pane']").childWithClass("loading-indicator").isDisplayed()
}, toggleAllMyTasksElement:function() {
    return UiTesting.element("//*[" + XpathUtils.hasClassExpression("all-my-tasks-bar") + "]")
}, gridViewElementByIndex:function(a) {
    return this.containingElement().child("//*[@id='grid']").nthChild(a)
}, centerPaneContents:function() {
    return UiTesting.elementById("center_pane__contents")
}, headerRow:function() {
    return UiTesting.elementById("project_header")
}, columnHeaderElement:function() {
    return ColumnTesting.headerElement("center_pane")
}, headerNameTextArea:function() {
    return this.headerRow().nthChild(2, "//TEXTAREA[" + XpathUtils.hasClassExpression("header-name") + "]")
}, groupUpcomingHeader:function() {
    return UiTesting.element("//*[@class='group upcoming_group']/*[@class='group_header']")
}, headerRowFollowButton:function() {
    return this.headerRow().child("//*[" + XpathUtils.hasClassExpression("follow-button") + "]")
}, rowElementByIndex:function(a) {
    return this.containingElement().nthChild(a, "//*[contains(concat(@class, ' '), '-row ')]")
}, toggleLinkElement:function(a) {
    return this.groupElement(a).child("//*[" + XpathUtils.hasClassExpression("toggle-link") + "]")
}, groupElement:function(a) {
    return UiTesting.element("//*[" + XpathUtils.hasClassExpression("group") + " and @group_id='" + ItemListView._groupId(a) + "']")
}, rowDragHandleElement:function(a) {
    return a.child("//td[" + XpathUtils.hasClassExpression("drag_hand") + "]")
}, rowMainInputElement:function(a) {
    return a.child("//*[contains(@id, 'row__main_input__')]")
}, rowAssigneeElement:function(a) {
    return a.child("//*[" + XpathUtils.hasClassExpression("grid_cell_assignee") + "]")
}, rowTagsElement:function(a) {
    return a.child("//*[" + XpathUtils.hasClassExpression("grid-tags-and-date") + "]")
}, rowTagElementByName:function(a, b) {
    return this.rowTagsElement(a).child("//*[" + XpathUtils.hasClassExpression("tag") + "][. ='" + b + "']")
}, rowTaskType:function(a) {
    return a.child("//*[" + XpathUtils.hasClassExpression("bar") + "]").exists() ? Task.TaskType.BAR : Task.TaskType.TASK
}, completedCheckboxElement:function(a) {
    return this.rowElementByIndex(a).child("//*[" + XpathUtils.hasClassExpression("completed-checkbox") + "]")
}, scheduleStatusElement:function(a) {
    return this.rowElementByIndex(a).child("//*[" + XpathUtils.hasClassExpression("schedule-status") + "]")
}, todayIconElement:function(a) {
    return this.rowElementByIndex(a).child("//*[" + XpathUtils.hasClassExpression("today-icon") + "]")
}, moreDetailsElement:function(a) {
    return this.rowElementByIndex(a).child("//*[" + XpathUtils.hasClassExpression("show-details") + "]")
}, moreDetailsElementForSubtask:function(a) {
    return this.rowElementByIndex(a).child("//*[" + XpathUtils.hasClassExpression("comment-icon") + "]")
}, scheduleStatusDropdownLink:function(a) {
    return this.rowElementByIndex(a).child("//*[contains(@class, 'dropdown-menu-link schedule-status-dropdown')]")
}, selectFromScheduleStatusDropdown:function(a, b) {
    this.scheduleStatusDropdownLink(a).click();
    UiTesting.element("//*[contains(@class, 'dropdown-menu schedule-status-dropdown')]//*[@id='" + b + "']").click()
}, unprioritizedItemsClickTargetByIndex:function(a) {
    return this.gridViewElementByIndex(a).child("//*[" + XpathUtils.hasClassExpression("grid_pseudorow_no_prioritized") + "]//*[" + XpathUtils.hasClassExpression("grid_cell_string") + "]")
}, unprioritizedTodayItemsClickTarget:function() {
    return this.unprioritizedItemsClickTargetByIndex(1)
}, rowIsSelected:function(a) {
    return a.containsClass("grid-row-selected")
}, mostRecentlySelectedItemOrNull:function() {
    return this.gridState().mostRecentlySelectedItemOrNull()
}, dragRowAboveRow:function(a, b) {
    this.rowDragHandleElement(this.rowElementByIndex(a)).rawMouseDown();
    var c = this.rowElementByIndex(b);
    c.rawMouseMove({y:2, x:1});
    c.rawMouseUp({y:2, x:1})
}, dragRowBelowRow:function(a, b) {
    this.rowDragHandleElement(this.rowElementByIndex(a)).rawMouseDown();
    var c = this.rowElementByIndex(b);
    c.rawMouseMove({y:-2, x:1});
    c.rawMouseUp({y:-2, x:1})
}, expandNullProjectGroup:function() {
    var a = this.gridState();
    a.getX("expanded_groups").requestInsertBefore(a.getTaskGrouper().SpecialGroup.NULL, null)
}, expandAllSpecialGroups:function() {
    var a = this.gridState(), b = a.getTaskGrouper(), c;
    for(c in b.SpecialGroup) {
        var d = b.SpecialGroup[c];
        a.getX("expanded_groups").requestInsertBefore(d, null)
    }
}, toggleShowArchived:function() {
    UiTesting.element("id('archive_menu')").click();
    UiTesting.element("id('toggle_archived_menu_item')").click()
}, archiveTasks:function() {
    UiTesting.element("id('archive_menu')").click();
    UiTesting.element("id('archive_menu_item')").click()
}});
GridTesting = GridTester.create({gridState:function() {
    return UiTesting.session().gridState()
}, containingElement:function() {
    return UiTesting.elementById("center_pane")
}});
SubtasksGridTesting = GridTester.create({gridState:function() {
    return UiTesting.session().detailsState().detailsGridState()
}, containingElement:function() {
    return DetailsTesting.detailsViewElement()
}});
__FILE__ = "apps/asana/details_testing.js";
DetailsTesting = {detailsViewElementName:function() {
    return"right_pane"
}, detailsViewElement:function() {
    return UiTesting.element("//*[@id='" + this.detailsViewElementName() + "']")
}, navigatingOverlayIsVisible:function() {
    return this.detailsViewElement().childWithClass("navigating-overlay").isDisplayed()
}, privacyTogglesElement:function() {
    return UiTesting.elementById("task_privacy_toggle")
}, forcePublicToggleElement:function() {
    return DetailsTesting.privacyTogglesElement().child("//*[@id='make_task_public']")
}, projectPrivacyToggleElement:function() {
    return DetailsTesting.privacyTogglesElement().child("//*[@id='make_task_private']")
}, privacyInfoElement:function() {
    return this.detailsViewElement().child("//*[@class='privacy-info']")
}, privacyInfoElementIsDeclaringItemPublic:function() {
    return this.privacyInfoElement().textContent === "This task is public"
}, descriptionPlaceholderElement:function() {
    return this.detailsViewElement().child("//*[contains(@class, 'placeholder-text')]")
}, displayedIndeterminateAssigneeElement:function() {
    return this.detailsViewElement().child("//*[@id='indeterminate_assignee'][not(contains(@style, 'display: none'))]")
}, scheduleStatusElement:function() {
    return this.detailsViewElement().child("//*[" + XpathUtils.hasClassExpression("schedule-status") + "]")
}, selectFromScheduleStatusDropdown:function(a) {
    this.detailsViewElement().child("//*[contains(@class, 'dropdown-menu-link schedule-status-dropdown')]").click();
    UiTesting.element("//*[contains(@class, 'dropdown-menu schedule-status-dropdown')]//*[@id='" + a + "']").click()
}, propertyDueDateElement:function() {
    return this.detailsViewElement().child("//*[contains(@class, 'property due_date')]")
}, dueDateEditSpan:function() {
    return this.detailsViewElement().child("//*[contains(@class, 'date-edit')]")
}, dueDateDisplaySpan:function() {
    return this.detailsViewElement().child("//*[contains(@class, 'date-display')]")
}, dueDateEditButton:function() {
    return this.propertyDueDateElement().child("//*[contains(@class, 'edit-button')]")
}, dueDateInputElement:function() {
    return this.dueDateEditSpan().child("//input[contains(@class, 'date')]")
}, dueDateRecurLinkElement:function() {
    return this.propertyDueDateElement().child("//*[contains(@class, 'recur-link')]")
}, focusablePropertyElement:function(a) {
    return UiTesting.elementById("property_sheet:details_property_sheet_field:" + a)
}, calendarPickerElement:function() {
    return UiTesting.element("//*[" + XpathUtils.hasClassExpression("calendar-box") + "]")
}, calendarPickerYearSelectorElement:function() {
    return UiTesting.element("//*[" + XpathUtils.hasClassExpression("calendar-year") + "]")
}, calendarPickerMonthSelectorElement:function() {
    return UiTesting.element("//*[" + XpathUtils.hasClassExpression("calendar-month") + "]")
}, displayedIndeterminateDateElement:function() {
    return this.detailsViewElement().child("//*[@id='indeterminate_date'][not(contains(@style, 'display: none'))]")
}, projectsRowElement:function() {
    return this.detailsViewElement().child("//*[contains(@class, 'property')][contains(@class, 'projects')]")
}, tagsRowElement:function() {
    return this.detailsViewElement().child("//div[contains(@class, 'property')][contains(@class, 'tags')]")
}, clickOnTags:function() {
    var a = DetailsTesting.collapsedPropertyElement("tags");
    a.exists() ? a.rawMouseDown() : DetailsTesting.tagsRowElement().click()
}, collapsedPropertyElement:function(a) {
    return this.detailsViewElement().childWithClass("collapsed-properties").childWithClass(a)
}, columnHeaderElement:function() {
    return ColumnTesting.headerElement(this.detailsViewElementName())
}, assertNothingSelected:function() {
}, isNothingSelected:function() {
    return DetailsTesting.columnHeaderElement().childWithClass("nothing-selected").exists()
}, headerNameTextArea:function() {
    return DetailsTesting.detailsViewElement().nthChild(2, "//TEXTAREA[" + XpathUtils.hasClassExpression("header-name") + "]")
}, headerName:function() {
    return DetailsTesting.headerNameTextArea().textContent()
}, readOnlyHeaderNameElement:function() {
    return DetailsTesting.detailsViewElement().child("//DIV[" + XpathUtils.hasClassExpression("header-name") + "]")
}, tagTokenElement:function(a) {
    return this.tagsRowElement().child("//*[contains(@class, 'token')][. ='" + a + "']")
}, tagTokenRemoveElement:function(a) {
    return this.tagTokenElement(a).parent().child("//*[@class='token_x']")
}, tagsInputElement:function() {
    return this.tagsRowElement().child("//INPUT")
}, tagsTokenizerDropdownElement:function() {
    return UiTesting.element("id('details_property_sheet_tags_list_sections_view')")
}, tagsTokenizerItemElement:function(a) {
    return this.tagsTokenizerDropdownElement().child("//*[contains(@class, 'item')][@class != 'list-section-items'][. ='" + a + "']")
}, projectsTokenizerDropdownElement:function() {
    return UiTesting.element("id('details_property_sheet_projects_list_sections_view')")
}, projectsTokenizerItemElement:function(a) {
    return this.projectsTokenizerDropdownElement().child("//*[contains(@class, 'item')][. ='" + a + "']")
}, projectsInputElement:function() {
    return this.projectsRowElement().child("//INPUT")
}, projectTokenElement:function(a) {
    return this.projectsRowElement().child("//*[contains(@class, 'token')][. ='" + a + "']")
}, composerSectionElement:function() {
    return this.detailsViewElement().child("//*[contains(@class, 'property')][contains(@class, 'composer')]")
}, notesInputElement:function() {
    return this.detailsViewElement().child("//*[contains(@class, 'property-sheet-view')]").child("//DIV[" + XpathUtils.hasClassExpression("field-description") + "]")
}, commentInputElement:function() {
    return this.composerSectionElement().child("//*[@id='property_sheet:details_property_sheet_field:comments']")
}, commentButtonElement:function() {
    return this.detailsViewElement().childWithClass("new-comment-button").childWithClass("button")
}, addComment:function(a) {
    this.composerSectionElement().click();
    this.commentInputElement().get().innerHTML = a;
    this.commentButtonElement().click()
}, feedSectionNameElement:function() {
    return this.detailsViewElement().child("//*[contains(@class, 'property comments')]").child("//*[@class='section-name']")
}, feedStoriesElement:function() {
    return this.detailsViewElement().child("//*[contains(@class, 'property comments')]").child("//*[@class='feed']")
}, numFeedStories:function() {
    return this.feedStoriesElement().numChildren("//*[contains(@class, 'comment-text')]")
}, feedStoryCreatorElementByIndex:function(a) {
    return this.feedStoriesElement().nthChild(a, "//*[contains(@class, 'feed-story-creator')]")
}, feedStoryTextElementByIndex:function(a) {
    return this.feedStoriesElement().nthChild(a, "//*[contains(@class, 'comment-text')]")
}, feedStoryMoreLinkElementByIndex:function(a) {
    return this.feedStoryTextElementByIndex(a).childWithClass("show-more")
}, taskAncestorByIndex:function(a) {
    return this.detailsViewElement().nthChild(a, "//*[contains(@class, 'ancestor-link')]")
}, propertyAssignedToElement:function() {
    return this.detailsViewElement().child("//*[contains(@class, 'property assigned_to')]")
}, propertyAssignedToDropdown:function() {
    return UiTesting.element("id('details_property_sheet_assigned_to_dropdown')")
}, assignedToInputElement:function() {
    return this.propertyAssignedToElement().child("//INPUT")
}, assignedToEditButton:function() {
    return this.propertyAssignedToElement().child("//*[contains(@class, 'edit-button')]")
}, assignedToTokenElement:function(a) {
    return this.propertyAssignedToElement().child("//*[contains(@class, 'token')][. ='" + a + "']")
}, assignedToTokenRemoveElement:function(a) {
    return this.assignedToTokenElement(a).parent().child("//*[@class='token_x']")
}, assignedToPlaceholderElement:function() {
    return this.propertyAssignedToElement().child("//*[@class='placeholder']")
}, assignedToInviteButton:function() {
    return this.propertyAssignedToDropdown().child("//*[contains(@class, 'new-item')]")
}, assignToMeButtonElement:function() {
    return this.detailsViewElement().child("//*[contains(@class, 'assign-to-me-button')]")
}, addAttachmentLinkElement:function() {
    return this.detailsViewElement().child("//*[" + XpathUtils.hasClassExpression("attach-link") + "]")
}, attachmentFileInputElement:function() {
    return this.detailsViewElement().child("//*[@class='hidden-file-input']")
}, attachmentFileLinkElement:function(a) {
    return this.detailsViewElement().nthChild(a, "//*[@class='attachment-link-to-file']")
}, numberOfAttachments:function() {
    return this.detailsViewElement().childWithClass("attachments").numChildren("//*[@class='attachment-link-to-file']")
}, attachmentDeleteLinkElement:function(a) {
    return this.detailsViewElement().nthChild(a, "//*[@class='delete']")
}, followersPropertyElement:function() {
    return this.detailsViewElement().child("//*[" + XpathUtils.hasClassExpression("followers_du") + "]")
}, followButtonElement:function() {
    return this.followersPropertyElement().child("//*[" + XpathUtils.hasClassExpression("follow-button") + "]")
}, followersInputElement:function() {
    return this.followersPropertyElement().child("//INPUT")
}, addFollowerButtonElement:function() {
    return this.followersPropertyElement().child("//*[" + XpathUtils.hasClassExpression("add-button") + "]")
}, followerTokenElement:function(a) {
    return this.followersPropertyElement().child("//*[@title='" + a + "'][" + XpathUtils.hasClassExpression("user_token") + "]")
}, followerTokenNameElement:function(a) {
    return this.followerTokenElement(a).child("//*[@class='token_name']")
}, followerTokenRemoveElement:function(a) {
    return this.followerTokenElement(a).child("//*[@class='token_x']")
}, commentElementByIndex:function(a) {
    return this.detailsViewElement().nthChild(a, "//*[@class='big-feed-story feed-story-comment']")
}, markCompleteToggleElement:function() {
    return this.detailsViewElement().child("//*[" + XpathUtils.hasClassExpression("mark-complete") + "]")
}, markIncompleteToggleElement:function() {
    return this.detailsViewElement().child("//*[" + XpathUtils.hasClassExpression("mark-incomplete") + "]")
}, scheduleStatusToggleGroupElement:function() {
    return this.detailsViewElement().child("//*[" + XpathUtils.hasClassExpression("status-toggle-group") + "]")
}, scheduleStatusSelectedToggleElement:function() {
    return this.scheduleStatusToggleGroupElement().child("//*[" + XpathUtils.hasClassExpression("selected") + "]")
}, scheduleStatusTodayToggleElement:function() {
    return this.scheduleStatusToggleGroupElement().child("//*[" + XpathUtils.hasClassExpression("today-icon") + "]")
}, scheduleStatusUpcomingToggleElement:function() {
    return this.scheduleStatusToggleGroupElement().child("//*[" + XpathUtils.hasClassExpression("upcoming-icon") + "]")
}, scheduleStatusLaterToggleElement:function() {
    return this.scheduleStatusToggleGroupElement().child("//*[" + XpathUtils.hasClassExpression("later-icon") + "]")
}, scheduleStatusNearAssigneeElement:function() {
    return this.detailsViewElement().child("//*[" + XpathUtils.hasClassExpression("assigned_to") + "]").child("//*[" + XpathUtils.hasClassExpression("status-icon") + "]")
}};
__FILE__ = "apps/asana/asana_testing.js";
AsanaTesting = {setupBlackSwanWorld:function() {
    UiTesting.runAsSuperuser(function() {
        processHandler(function() {
            var a = UiTesting.easyCreateUser({name:"Natalie Portman"}), b = UiTesting.easyCreateUser({name:"Mila Kunis"}, {}), c = AsanaTesting.easyCreateAndSwitchToDomain({name:"The Black Swan"}), a = c.addTestUser(a);
            c.addTestUser(b);
            AsanaTesting.easyCreateTaskList({domain:c, name:"Swan Lake", creator_du:a}, {});
            b = UiTesting.load("Swan Lake");
            AsanaTesting.easyAppendTasks(b, {prefix:"white swan ", creator_du:a, num_incomplete_items:1, num_complete_items:1, assigned_to:UiTesting.load("Natalie Portman").domainUserForDomain(b.domain())});
            AsanaTesting.easyAppendTasks(b, {prefix:"black swan ", creator_du:a, num_incomplete_items:1, assigned_to:UiTesting.load("Mila Kunis").domainUserForDomain(b.domain())});
            AsanaTesting.easyAppendTasks(b, {prefix:"swan white ", creator_du:a, num_incomplete_items:1, assigned_to:UiTesting.load("Natalie Portman").domainUserForDomain(b.domain())});
            AsanaTesting.easyAppendTasks(b, {creator_du:a, prefix:"which swan ", num_incomplete_items:1})
        })
    })
}, createEmptyWorld:function() {
    Domain.create({name:"Asana Admin", creator:null})
}, createTask:function(a) {
    a = Map.objectFromMappedValues(updateWithDefaults(a, {name:"", completed:0, creator_du:null, assigned_to:null, domain:ATTRIBUTE_REQUIRED, followers_du:null, force_public_to_workspace:!1}), toValue);
    if(a.creator_du === null) {
        a.creator_du = env.userOrNull() === null ? null : env.user().domainUserForDomain(a.domain)
    }
    var b = a.followers_du || (a.creator_du === null ? [] : [a.creator_du]), b = Task.create({name:a.name, creator_du:a.creator_du, description:loremIpsum(3), completed:a.completed, force_public_to_workspace:a.force_public_to_workspace, followers_du:b, due_date:null, domain:a.domain});
    if(a.assigned_to) {
        var c = a.assigned_to.taskList(a.domain);
        b.assignToWithoutStory(c)
    }
    a.schedule_status && b.setScheduleStatus(a.schedule_status);
    return b
}, easyCreateTasks:function(a) {
    updateWithDefaults(a, {num:ATTRIBUTE_REQUIRED, prefix:ATTRIBUTE_REQUIRED, store:!0, attributes:{}, bars_at:[]});
    return range(1, a.num + 1).map(function(b) {
        var b = a.prefix + b + (a.bars_at.indexOf(b) !== -1 ? Task.BAR_NAME_SUFFIX : ""), c = update({name:b}, a.attributes), c = AsanaTesting.createTask(c);
        return a.store ? UiTesting.store(b, c) : c
    })
}, easyAppendTasks:function(a, b) {
    updateWithDefaults(b, {num_complete_items:0, num_incomplete_items:0, incomplete_bars_at:[], creator_du:null, assigned_to:null, completion_time:1, store_tasks:!0, prefix:"", incomplete_default_status:null, incomplete_index_to_status_map:{}});
    b.creator_du = b.creator_du || (env.userOrNull() === null ? null : env.user().domainUserForDomain(a.domain()));
    var c = function(c, e, f, g, h, i) {
        c = AsanaTesting.easyCreateTasks({num:c, prefix:e, store:b.store_tasks, bars_at:g, attributes:{creator_du:b.creator_du, domain:a.getV("domain"), completed:f, assigned_to:b.assigned_to}});
        a.getX("items").requestInsertMultipleBefore(c, null);
        c.forEach(function(c) {
            c.addStoryOfSubtype(TaskAddedToListComment, {creator_du:b.creator_du, indirect_object:a})
        });
        for(f = 0;f < c.size();++f) {
            (e = i[f + 1] || h) && c[f].setScheduleStatus(e)
        }
    };
    c(b.num_complete_items, b.prefix + "complete", b.completion_time, [], null, {});
    c(b.num_incomplete_items, b.prefix + "incomplete", 0, b.incomplete_bars_at, b.incomplete_default_status, b.incomplete_index_to_status_map)
}, createTaskList:function(a) {
    var a = update({}, a), b = a.domain || ufu("domain is required");
    delete a.domain;
    if(a.team === null && !b.allowProjectsWithNullTeam() && (a.is_project === !0 || a.is_project === void 0)) {
        a.team = b.onlyTeam()
    }
    a = update({name:"Tasks"}, a);
    a.creator_du = a.creator_du || (env.userOrNull() === null ? null : env.user().domainUserForDomain(b));
    return b.createItemList(a)
}, easyCreateTaskListInNewDomain:function(a) {
    a.domain = AsanaTesting.easyCreateDomain({users:[env.user()]});
    return AsanaTesting.easyCreateTaskList(a)
}, easyCreateTaskList:attributedFunc({domain:ATTRIBUTE_REQUIRED, team:null, name:null, num_complete_items:0, num_incomplete_items:0, incomplete_bars_at:[], assigned_to:null, creator_du:null, is_favorite_for_user:null, completion_time:1, store:!0, store_tasks:!0, store_as:null, prefix:"", pot_attributes:null, is_public_to_workspace:!0}, function(a) {
    var b = update({}, a.pot_attributes || {});
    update(b, {domain:a.domain, team:a.team, name:b.name || a.name || a.prefix + "Tasks", is_public_to_workspace:a.is_public_to_workspace, creator_du:b.creator_du || a.creator_du || env.user().domainUserForDomain(a.domain)});
    var c = AsanaTesting.createTaskList(b);
    a.is_favorite_for_user !== null && a.is_favorite_for_user.domainUserForDomain(a.domain).favoritesL().requestInsertBefore(c, null);
    a.store && UiTesting.store(a.store_as || b.name, c);
    AsanaTesting.easyAppendTasks(c, {num_complete_items:a.num_complete_items, num_incomplete_items:a.num_incomplete_items, incomplete_bars_at:a.incomplete_bars_at, assigned_to:a.assigned_to, completion_time:a.completion_time, store_tasks:a.store_tasks, creator_du:a.creator_du, prefix:a.prefix});
    return c
}), easyCreateDomain:attributedValueFunc(copyAndUpdate(Domain.create.attribute_spec, {activated:!0, is_work_domain:!1, name:"domain", store:!1, store_as:null, creator:null, with_same_named_team:!1, users:[]}), function(a) {
    var b = a.users;
    delete a.users;
    var c = a.store ? a.store_as || a.name : null;
    delete a.store;
    delete a.store_as;
    var d = a.with_same_named_team;
    delete a.with_same_named_team;
    var e = Domain.create(a);
    b.forEach(function(a) {
        e.addTestUser(a)
    });
    if(d) {
        var f = Team.create({domain:e, name:a.name, creator_du:b.first().domainUserForDomain(e)});
        b.forEach(function(a) {
            f.addTeamMember({domain_user:a.domainUserForDomain(e), limited_access:!1})
        });
        UiTesting.store("team_" + f.name(), f)
    }
    c !== null && UiTesting.store(c, e);
    return e
}), easyCreateAndSwitchToDomain:function(a) {
    var b = a.store_as;
    delete a.store_as;
    var c = AsanaTesting.easyCreateDomain(a);
    UiTesting.store(b || a.name || "domain", c);
    b = c.addTestUser(env.user());
    a.with_same_named_team && c.onlyTeam().addTeamMember({domain_user:b, limited_access:!1});
    a = c.getDomainUser(env.user()).getV("task_list");
    env.isMobile() ? AsanaMobileTesting.setSelection(a) : GridTesting.setSelection(a);
    return c
}, isPotPrivateTo:function(a, b) {
    return!a.isPublicToWorkspace() && a.members().size() === 1 && a.members()[0] === b
}, userDefaultTaskList:function() {
    return UiTesting.user().defaultTaskList()
}, defaultDomainUser:function() {
    return this.userDefaultDomain().getDomainUser(UiTesting.user())
}, userDefaultDomain:function() {
    return UiTesting.user().defaultDomain()
}, assertAddedToPotComment:function(a, b) {
    a.stories().filter(function(a) {
        return a instanceof TaskAddedToListComment && a.getV("indirect_object") === b
    })
}, assertRemovedFromPotComment:function(a, b) {
    a.stories().filter(function(a) {
        return a instanceof TaskRemovedFromListComment && a.getV("indirect_object") === b
    })
}, assertPriorityChangeComment:function(a, b, c) {
    a.stories().filter(function(a) {
        return a instanceof PriorityChangeComment && a.fromGroup() === b && a.toGroup() === c
    })
}, tagsInGridXpath:function(a) {
    return GridTesting.rowTagsElement(GridTesting.rowElementByIndex(a)).locator()
}, tagInRowXpath:function(a, b) {
    return GridTesting.rowTagElementByName(GridTesting.rowElementByIndex(a), b).locator()
}, workspaceElementClass:function() {
    return"workspace"
}, listItemElementClass:function() {
    return"list-item"
}, sidebarListXpath:function(a, b) {
    return"(//*[" + XpathUtils.hasClassExpression(this.workspaceElementClass()) + "]//*[. = '" + a + "'][starts-with(@class, '" + this.listItemElementClass() + "')])" + (b ? "[" + b + "]" : "")
}, sidebarListElement:function(a) {
    return UiTesting.element(AsanaTesting.sidebarListXpath(a))
}, tagFilterXpath:function(a, b, c, d) {
    var e = "(//*[" + XpathUtils.hasClassExpression("filter-buttons") + "]//*[" + XpathUtils.hasClassExpression("button") + "])";
    d !== void 0 && (e += "[" + d + "]");
    c !== void 0 && (e += c ? "[" + XpathUtils.hasClassExpression("selected") + "]" : "[not(" + XpathUtils.hasClassExpression("selected") + ")]");
    e += "[. = '" + a + b + "']";
    return e
}, taskNameArrayFromProject:function(a) {
    return a.items().map(function(a) {
        return a.name()
    })
}};
__FILE__ = "luna/browser/dynamic_loader.js";
DynamicLoader = AsanaObject.subclass("DynamicLoader", {_nextCallbackCount:makeCounter(), _onAllUrlsDoneLoading:noop, _onLoadingUrls:noop, _callbackName:function(a) {
    return"__DynamicLoader_callback_" + a
}, get:Memoize.memoizeFew("DynamicLoader", function() {
    return DynamicLoader.create()
}), UrlStatus:{NEW:makeUniqueValue("NEW"), LOADING:makeUniqueValue("LOADING"), LOADED:makeUniqueValue("LOADED")}}, {_url_to_state:SET_IN_CONSTRUCTOR, _idle_callbacks:SET_IN_CONSTRUCTOR, _num_urls_loading:0, constructor:function() {
    DynamicLoader.superproto.constructor.call(this);
    this._url_to_state = Map.create();
    this._idle_callbacks = []
}, load:attributedFunc({url:ATTRIBUTE_REQUIRED, allow_cached:!0, callback:null, callback_param_name:null}, function(a) {
    var b = a.url, c = this._url_to_state.getOr(b, null);
    c || (c = {status:DynamicLoader.UrlStatus.NEW, callbacks:[], success:!1}, this._url_to_state.put(b, c));
    c.status === DynamicLoader.UrlStatus.LOADED ? a.callback !== null && safeTimeout(function() {
        a.callback(b, c.success)
    }, 0) : (a.callback !== null && c.callbacks.push(a.callback), c.status === DynamicLoader.UrlStatus.NEW && this._loadUrl(a))
}), onNextIdle:function(a) {
    var b = this;
    b._idle_callbacks.push(a);
    safeTimeout(function() {
        b._callbackIfIdle()
    }, 0)
}, _loadUrl:function(a) {
    var b = this, c = a.url;
    b._num_urls_loading === 0 && DynamicLoader._onLoadingUrls();
    b._num_urls_loading++;
    var d = document.getElementsByTagName("head")[0], e = document.createElement("script");
    e.type = "text/javascript";
    var f = b._url_to_state.get(c), g = function(a) {
        f.status = DynamicLoader.UrlStatus.LOADED;
        f.success = a;
        f.callbacks.forEach(function(a) {
            a(c, f.success)
        });
        f.callbacks = [];
        b._num_urls_loading--;
        b._callbackIfIdle()
    }, h, i, j = function(a) {
        return host.wrapInExceptionHandler({name:"DynamicLoader.onLoaded", url:h}, ExceptionHandler.ReentryStrategy.DELAY, function() {
            g(a);
            i && delete globals[i]
        })
    }, l = {};
    a.callback_param_name ? (i = DynamicLoader._callbackName(DynamicLoader._nextCallbackCount()), l[a.callback_param_name] = i, globals[i] = j(!0)) : e.addEventListener("load", j(!0), !0);
    if(!a.allow_cached) {
        l.cb = env.clock.now()
    }
    h = URI.appendQuery(c, l);
    e.addEventListener("error", j(!1), !0);
    e.src = h;
    f.status = DynamicLoader.UrlStatus.LOADING;
    d.appendChild(e)
}, _callbackIfIdle:function() {
    if(this._num_urls_loading === 0) {
        var a = this._idle_callbacks;
        this._idle_callbacks = [];
        a.forEach(function(a) {
            a()
        });
        DynamicLoader._onAllUrlsDoneLoading()
    }
}});
__FILE__ = "luna/browser/browser_google_auth.js";
BrowserGoogleAuth = function(a) {
    this._callbackOnComplete = a
};
BrowserGoogleAuth.InitializationState = {NOT_STARTED:"NOT_STARTED", STARTED:"STARTED", COMPLETE:"COMPLETE"};
BrowserGoogleAuth._running_instance = null;
BrowserGoogleAuth._initialization_state = BrowserGoogleAuth.InitializationState.NOT_STARTED;
BrowserGoogleAuth._test_data = void 0;
BrowserGoogleAuth._registered_button_ids = [];
BrowserGoogleAuth.setTestData = function(a) {
    if(a === null) {
        BrowserGoogleAuth._test_data = null
    }else {
        if(a.access_token !== void 0) {
            BrowserGoogleAuth._test_data = {access_token:a.access_token}
        }else {
            var b = {};
            b.status = a.status || 0;
            b.out = JSON.stringify({email:a.email, name:a.name || a.email, verified_email:a.verified_email === void 0 ? !0 : a.verified_email});
            BrowserGoogleAuth._test_data = {access_token:JSON.stringify(b)}
        }
    }
};
BrowserGoogleAuth.registerButtonIdForUpdates = function(a) {
    BrowserGoogleAuth._registered_button_ids.push(a)
};
BrowserGoogleAuth.enableButtons = function() {
    for(var a = BrowserGoogleAuth._registered_button_ids, b = 0;b < a.length;b++) {
        var c = document.getElementById(a[b]);
        c.className = c.className.replace("disabled", "enabled")
    }
};
BrowserGoogleAuth.disableButtons = function() {
    for(var a = BrowserGoogleAuth._registered_button_ids, b = 0;b < a.length;b++) {
        var c = document.getElementById(a[b]);
        c.className = c.className.replace("enabled", "disabled")
    }
};
BrowserGoogleAuth.reset = function() {
    if(BrowserGoogleAuth._running_instance !== null) {
        BrowserGoogleAuth._running_instance._callbackOnComplete = noop, BrowserGoogleAuth._running_instance = null
    }
    window.onAuthorizedNewUserInPopup = noop
};
BrowserGoogleAuth.authorizeUsingRedirects = function(a, b) {
    window.location.href = "https://accounts.google.com/o/oauth2/auth?redirect_uri=" + a + "&response_type=code&client_id=1032199425885.apps.googleusercontent.com&scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email+https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile+http%3A%2F%2Fwww.google.com%2Fm8%2Ffeeds&state=" + b
};
BrowserGoogleAuth.init = function() {
    if(BrowserGoogleAuth._test_data === void 0 && BrowserGoogleAuth._initialization_state === BrowserGoogleAuth.InitializationState.NOT_STARTED) {
        BrowserGoogleAuth._initialization_state = BrowserGoogleAuth.InitializationState.STARTED, BrowserGoogleAuth._ensureGoogleApiLoaded()
    }
};
BrowserGoogleAuth._ensureGoogleApiLoaded = function() {
    if(!(typeof env !== "undefined" && env.is_server)) {
        if(typeof DynamicLoader !== "undefined") {
            DynamicLoader.get().load({url:"https://apis.google.com/js/client.js", callback:function() {
                BrowserGoogleAuth._onGoogleApiLoaded()
            }, callback_param_name:"onload"})
        }else {
            var a = document.createElement("script");
            a.type = "text/javascript";
            a.src = "https://apis.google.com/js/client.js";
            a.addEventListener("load", BrowserGoogleAuth._onGoogleApiLoaded, !0);
            document.getElementsByTagName("head")[0].appendChild(a)
        }
    }
};
BrowserGoogleAuth._onClientLoaded = function() {
    gapi.client.setApiKey("Asana-ContactImporter");
    gapi.auth.init(function() {
        BrowserGoogleAuth._initialization_state = BrowserGoogleAuth.InitializationState.COMPLETE
    })
};
BrowserGoogleAuth._onGoogleApiLoaded = function() {
    try {
        gapi.client.load("oauth2", "v2", BrowserGoogleAuth._onClientLoaded)
    }catch(a) {
        setTimeout(BrowserGoogleAuth._onGoogleApiLoaded, 5)
    }
};
BrowserGoogleAuth.start = function(a, b, c) {
    BrowserGoogleAuth._test_data !== void 0 ? (globals.safeTimeout || setTimeout)(function() {
        a(BrowserGoogleAuth._test_data)
    }, 0) : b ? (b = new BrowserGoogleAuth(a), b._authorizeNewUser()) : BrowserGoogleAuth._initialization_state !== BrowserGoogleAuth.InitializationState.COMPLETE ? (console.log("Attempted to Google SSO before it was initialized."), a(null)) : BrowserGoogleAuth._running_instance === null ? (BrowserGoogleAuth.disableButtons(), b = new BrowserGoogleAuth(a), b._start(c)) : a(null)
};
BrowserGoogleAuth.prototype._authorizeNewUser = function() {
    var a = this;
    BrowserGoogleAuth._running_instance = a;
    var b = {redirect_uri:"https://" + Flags.secure_web_host_port + "/-/oauth2callback_new_login", response_type:"code", client_id:"1032199425885.apps.googleusercontent.com", scope:URI.encodeComponent("http://www.google.com/m8/feeds")}, b = {service:"lso", "continue":"https://accounts.google.com/o/oauth2/auth?" + URI.buildQueryStringNoEncoding(b, "%3D", "%26")}, b = "https://www.google.com/accounts/AddSession?" + URI.buildQueryStringNoEncoding(b);
    window.openAsync(b, "name", "height=518,width=879");
    window.onAuthorizedNewUserInPopup = function(b) {
        BrowserGoogleAuth._onAuthorizedNewUserInPopup(a, b)
    };
    BrowserGoogleAuth._running_instance = null
};
BrowserGoogleAuth._onAuthorizedNewUserInPopup = function(a, b) {
    a._onAuthorized(b)
};
BrowserGoogleAuth.prototype._start = function(a) {
    BrowserGoogleAuth._running_instance = this;
    this._authorize(a)
};
BrowserGoogleAuth.prototype._authorize = function(a) {
    var b = this;
    gapi.auth.authorize({client_id:"1032199425885.apps.googleusercontent.com", scope:["https://www.googleapis.com/auth/userinfo.email", "https://www.googleapis.com/auth/userinfo.profile", "http://www.google.com/m8/feeds/"], authuser:a || ""}, function(a) {
        b._onAuthorized(a)
    })
};
BrowserGoogleAuth.prototype._onAuthorized = function(a) {
    a !== null ? this._onComplete(a) : this._onComplete(null)
};
BrowserGoogleAuth.prototype._onComplete = function(a) {
    BrowserGoogleAuth._running_instance = null;
    this._callbackOnComplete.call(null, a);
    BrowserGoogleAuth.enableButtons()
};
__FILE__ = "luna/common/dom/dom_flags.js";
DomFlags = AsanaObject.subclass("DomFlags", {domFlagsClassArray:function(a) {
    var b = FeatureFlags.get().getEnabledFeatureNames();
    a.isWebKit() ? b.push("webkit") : a.name() === "Firefox" && b.push("firefox");
    return b
}, domFlagsClassString:function(a) {
    return this.domFlagsClassArray(a).join(" ")
}}, {});
__FILE__ = "luna/common/view/autogrow_textarea_view.js";
AutogrowTextareaView = View.subclass("AutogrowTextareaView", {}, {data:ATTRIBUTE_REQUIRED, "class":"", textarea_attributes:ATTRIBUTE_REQUIRED, _render:function() {
    return this._renderAsShadowedTextarea(TEXTAREA({"class":this["class"], style:{marginTop:0, borderTop:0, paddingTop:0, height:0, minHeight:0, paddingBottom:0, borderBottom:0, marginBottom:0, paddingLeft:0, paddingRight:0}}))
}, _renderAsShadowedTextarea:function(a) {
    var b = this, c = DIV({"class":$rval(function() {
        return"shadow " + $v(b["class"])
    }), style:{width:a.dimensions.content_width_r}}, []);
    b.data.watchScalar(function(a) {
        c.setChildren(isKnown(a) ? [document.createTextNode(a + " |")] : []);
        if(a = c.parentNode) {
            a.removeChild(c), a.appendChild(c)
        }
    });
    var d = TEXTAREA(update({data:b.data, "class":b["class"], style:{height:c.dimensions.height_r}}, b.textarea_attributes));
    return SPAN({"class":"autogrow-textarea"}, [a, c, d])
}, _isContentEmpty:function(a, b) {
    return a === "" || b.innerText !== void 0 && b.innerText.trim() === "" || b.textContent !== void 0 && b.textContent.trim() === ""
}, _showPlaceholder:function(a, b) {
    return!$v(a) && this._isContentEmpty(this.data.peekAllowingUnknown(), b)
}});
__FILE__ = "apps/asana/view/all_my_tasks_bar_view.js";
AllMyTasksBarView = View.subclass("AllMyTasksBarView", {}, {show_all_my_tasks_l:ATTRIBUTE_REQUIRED, _render:function() {
    var a = this;
    return DIV({"class":"all-my-tasks-bar", onclick:function() {
        a.show_all_my_tasks_l.requestSet(!$v(a.show_all_my_tasks_l))
    }}, [DIV({"class":"collapser " + ($v(a.show_all_my_tasks_l) ? "open" : "closed")}), SPAN({"class":"label", tooltip:"The Later section has the tasks you're not planning to work on for a while", tooltip_delay:200}, ["LATER"])])
}});
__FILE__ = "apps/asana/view/task_grouper.js";
TaskGrouper = AsanaObject.subclass("TaskGrouper", {Type:{NONE:"none", ASSIGNEE:"assignee", PROJECT:"project", DUE_DATE:"due_date", PROJECT_IN_ASSIGNEE_VIEW:"project_in_assignee_view", DUE_DATE_IN_ASSIGNEE_VIEW:"due_date_in_assignee_view"}, implementations:{}, create:function(a) {
    var b = a.groupBy(), c = this.implementations[b];
    c === void 0 && ufu("unknown group_by", b);
    return c.create(a)
}}, {SpecialGroup:SET_IN_CONSTRUCTOR, constructor:function(a) {
    TaskGrouper.superproto.constructor.call(this);
    this.SpecialGroup = {NULL:a.getV("SPECIAL_GROUP_NULL"), UPCOMING:a.getV("SPECIAL_GROUP_UPCOMING"), TODAY:a.getV("SPECIAL_GROUP_TODAY"), COMPLETED:a.getV("SPECIAL_GROUP_COMPLETED"), NEW:a.getV("SPECIAL_GROUP_NEW"), DUE:a.getV("SPECIAL_GROUP_DUE")};
    this.expanded_groups_l = a.getX("expanded_groups");
    a = a.potOrUnknown();
    this.view_pot = isKnown(a) ? a : null
}, rankForGroup:function(a) {
    return a !== this.SpecialGroup.NULL ? "1" + a.name() : "2"
}, nameForGroup:function(a) {
    return a.name()
}, tooltipForGroupHeader:function(a) {
    switch(a) {
        case this.SpecialGroup.NEW:
            return"These are tasks that people have assigned to you. Click on the blue dot to mark how soon you plan to work on these tasks and take them out of the inbox.";
        case this.SpecialGroup.TODAY:
            return"The Today section has the tasks you're planning to work on today.";
        case this.SpecialGroup.UPCOMING:
            return"The Upcoming section stores the tasks you're planning to work on soon";
        default:
            return""
    }
}, isCollapsable:function() {
    return!1
}, isGroupCollapsable:function() {
    return!1
}, isGroupSpecial:function(a) {
    for(var b in this.SpecialGroup) {
        if(a === this.SpecialGroup[b]) {
            return!0
        }
    }
    return!1
}, groupsCouldBeUnderLater:function() {
    return!1
}, isGroupUnderLater:function(a) {
    return!this.isGroupSpecial(a) || a === this.SpecialGroup.NULL
}, hideEmptyBars:function() {
    return!1
}, classNameForGroup:ABSTRACT, groupsForTask:ABSTRACT, defaultGroupForTask:function(a) {
    for(var a = this.groupsForTask(a), b = a.length, c = 0;c < b;c++) {
        if(this.isGroupSpecial(a[c])) {
            return a[c]
        }
    }
    return a.length > 0 ? a[0] : this.SpecialGroup.NULL
}, groupPotForViewPotAndGroup:ABSTRACT, visibleListForGroupR:function(a, b, c) {
    return c
}, makeItemConform:ABSTRACT, shouldOnlyShowMainPart:function() {
    return!1
}, shouldShowPotInGrid:function() {
    return!0
}, shouldShowAssignee:function(a) {
    return!a.isUserTaskList()
}, shouldAlwaysShowUpcoming:function() {
    return!1
}, shouldAlwaysShowNull:function() {
    return!1
}});
TaskGrouper.None = TaskGrouper.implementations[TaskGrouper.Type.NONE] = TaskGrouper.subclass("TaskGrouper.None", {}, {nameForGroup:function() {
    ufu("do not display groups when not grouping")
}, classNameForGroup:function() {
    return"no-group"
}, groupsForTask:function() {
    return[this.SpecialGroup.NULL]
}, groupPotForViewPotAndGroup:function(a) {
    return a
}, makeItemConform:function() {
}});
TaskGrouper.Assignee = TaskGrouper.implementations[TaskGrouper.Type.ASSIGNEE] = TaskGrouper.subclass("TaskGrouper.Assignee", {}, {nameForGroup:function(a) {
    return a === this.SpecialGroup.NULL ? "Unassigned" : TaskGrouper.Assignee.superproto.nameForGroup.call(this, a)
}, classNameForGroup:function() {
    return"assignee_group"
}, groupsForTask:function(a) {
    a = a.getAssigneeOrNull();
    return[a !== null ? a : this.SpecialGroup.NULL]
}, groupPotForViewPotAndGroup:function(a) {
    return a
}, visibleListForGroupR:function(a, b, c) {
    return MergedListRvalue.createAllowingDuplicates(c, a.barsX())
}, makeItemConform:function(a, b, c) {
    a.getV("domain");
    c.getAssigneeOrNullR() !== b && b !== this.SpecialGroup.NULL && c.assignTo(b.getV("task_list"), env.user().domainUserForDomain(c.domain()))
}, shouldShowAssignee:function() {
    return!1
}, hideEmptyBars:function() {
    return!0
}, shouldAlwaysShowNull:function() {
    return!0
}});
TaskGrouper.Project = TaskGrouper.implementations[TaskGrouper.Type.PROJECT] = TaskGrouper.subclass("TaskGrouper.Project", {}, {rankForGroup:function(a) {
    return a !== this.SpecialGroup.NULL ? "1" + this._rankForProjectGroup(a) : "2"
}, nameForGroup:function(a) {
    return a === this.SpecialGroup.NULL ? this.view_pot && this.view_pot.isRegularProject() ? "No other " + Vocab.projects : "No " + Vocab.project : TaskGrouper.Project.superproto.nameForGroup.call(this, a)
}, classNameForGroup:function(a) {
    return a === this.SpecialGroup.NULL ? "null_group" : "project_group"
}, groupsForTask:function(a) {
    var b = this, a = a.ownProjects().filter(function(a) {
        return a !== b.view_pot
    });
    return a.length > 0 ? a : [this.SpecialGroup.NULL]
}, groupPotForViewPotAndGroup:function(a, b) {
    return this.isGroupSpecial(b) ? a : b
}, visibleListForGroupR:function(a, b, c) {
    return this.isGroupSpecial(b) ? c : MergedListRvalue.createAllowingDuplicates(c, b.loadedBarsX())
}, makeItemConform:function(a, b, c) {
    View.runWithoutLvalueChecking(function() {
        return!a.getX("items").containsObject(c)
    }) && a.insertBefore(c, null)
}, shouldShowPotInGrid:function(a, b) {
    return a !== b
}, hideEmptyBars:function() {
    return!0
}, _rankForProjectGroup:function(a) {
    return a.getV("domain").getX("lists").rankForObject(a)
}});
TaskGrouper.ProjectInAssigneeView = TaskGrouper.implementations[TaskGrouper.Type.PROJECT_IN_ASSIGNEE_VIEW] = TaskGrouper.Project.subclass("TaskGrouper.ProjectInAssigneeView", {}, {rankForGroup:function(a) {
    return a === this.SpecialGroup.COMPLETED ? "0" : a === this.SpecialGroup.NEW ? "1" : a === this.SpecialGroup.TODAY ? "2" : a === this.SpecialGroup.UPCOMING ? "3" : a === this.SpecialGroup.NULL ? "5" : "4" + this._rankForProjectGroup(a)
}, nameForGroup:function(a) {
    return a === this.SpecialGroup.NEW ? "New Tasks" : a === this.SpecialGroup.UPCOMING ? "Upcoming" : a === this.SpecialGroup.TODAY ? "Today" : a === this.SpecialGroup.COMPLETED ? "" : TaskGrouper.ProjectInAssigneeView.superproto.nameForGroup.call(this, a)
}, isCollapsable:function() {
    return!0
}, isGroupCollapsable:function(a) {
    return a !== this.SpecialGroup.COMPLETED
}, classNameForGroup:function(a) {
    return a === this.SpecialGroup.TODAY ? "today_group" : a === this.SpecialGroup.UPCOMING ? "upcoming_group" : a === this.SpecialGroup.NEW ? "new_tasks_group" : TaskGrouper.ProjectInAssigneeView.superproto.classNameForGroup.call(this, a)
}, groupsForTask:function(a) {
    switch(a.scheduleStatus()) {
        case Task.ScheduleStatus.COMPLETED:
            return[this.SpecialGroup.COMPLETED];
        case Task.ScheduleStatus.NEW:
            return[this.SpecialGroup.NEW];
        case Task.ScheduleStatus.TODAY:
            return[this.SpecialGroup.TODAY];
        case Task.ScheduleStatus.UPCOMING:
            return[this.SpecialGroup.UPCOMING];
        default:
            return a = a.ownProjects(), a.length > 0 ? a : [this.SpecialGroup.NULL]
    }
}, makeItemConform:function(a, b, c) {
    if(b === this.SpecialGroup.TODAY) {
        c.setScheduleStatus(Task.ScheduleStatus.TODAY)
    }else {
        if(b === this.SpecialGroup.UPCOMING) {
            c.setScheduleStatus(Task.ScheduleStatus.UPCOMING)
        }else {
            if(b === this.SpecialGroup.NEW) {
                c.setScheduleStatus(Task.ScheduleStatus.NEW)
            }else {
                return c.setScheduleStatus(Task.ScheduleStatus.OK), TaskGrouper.ProjectInAssigneeView.superproto.makeItemConform.call(this, a, b, c)
            }
        }
    }
}, shouldOnlyShowMainPart:function(a) {
    return this.SpecialGroup.TODAY === a || this.SpecialGroup.UPCOMING === a || this.SpecialGroup.NULL === a
}, shouldShowAssignee:function() {
    return!1
}, shouldAlwaysShowUpcoming:function() {
    return!0
}, groupsCouldBeUnderLater:function() {
    return!0
}, hideEmptyBars:function(a) {
    return!this.isGroupSpecial(a)
}});
TaskGrouper.DueDate = TaskGrouper.implementations[TaskGrouper.Type.DUE_DATE] = TaskGrouper.subclass("TaskGrouper.DueDate", {makeItemConform:function(a, b, c, d) {
    c !== a.SpecialGroup.DUE && d.setDueDate(null, env.realAppSession().activeDomainUser())
}}, {nameForGroup:function(a) {
    if(a === this.SpecialGroup.DUE) {
        return""
    }else {
        if(a === this.SpecialGroup.NULL) {
            return"No due date"
        }else {
            ufu("bad group", a)
        }
    }
}, rankForGroup:function(a) {
    if(a === this.SpecialGroup.DUE) {
        return"1"
    }else {
        if(a === this.SpecialGroup.NULL) {
            return"2"
        }else {
            ufu("bad group", a)
        }
    }
}, classNameForGroup:function() {
    return"null_group"
}, groupsForTask:function(a) {
    return[a.dueDate() ? this.SpecialGroup.DUE : this.SpecialGroup.NULL]
}, groupPotForViewPotAndGroup:function(a) {
    return a
}, makeItemConform:function(a, b, c) {
    TaskGrouper.DueDate.makeItemConform(this, a, b, c)
}, hideEmptyBars:function() {
    return!1
}, shouldAlwaysShowNull:function() {
    return!0
}});
TaskGrouper.DueDateInAssigneeView = TaskGrouper.implementations[TaskGrouper.Type.DUE_DATE_IN_ASSIGNEE_VIEW] = TaskGrouper.ProjectInAssigneeView.subclass("TaskGrouper.DueDateInAssigneeView", {}, {_project_in_assignee_view_grouper:SET_IN_CONSTRUCTOR, constructor:function(a) {
    TaskGrouper.DueDateInAssigneeView.superproto.constructor.call(this, a);
    this._project_in_assignee_view_grouper = TaskGrouper.DueDateInAssigneeView.superproto
}, groupsForTask:function(a) {
    if(a.dueDate()) {
        return[this.SpecialGroup.DUE]
    }else {
        switch(a.scheduleStatus()) {
            case Task.ScheduleStatus.COMPLETED:
                return[];
            case Task.ScheduleStatus.TODAY:
                return[this.SpecialGroup.TODAY];
            default:
                return a = a.ownProjects(), a.length > 0 ? a : [this.SpecialGroup.NULL]
        }
    }
}, rankForGroup:function(a) {
    return a === this.SpecialGroup.DUE ? "0" : "1" + this._project_in_assignee_view_grouper.rankForGroup.call(this, a)
}, nameForGroup:function(a) {
    return a === this.SpecialGroup.DUE ? "" : a === this.SpecialGroup.TODAY ? "Marked for Today" : this._project_in_assignee_view_grouper.nameForGroup.call(this, a)
}, isGroupCollapsable:function(a) {
    return a !== this.SpecialGroup.DUE && this._project_in_assignee_view_grouper.isGroupCollapsable.call(this, a)
}, makeItemConform:function(a, b, c) {
    TaskGrouper.DueDate.makeItemConform(this, a, b, c);
    b !== this.SpecialGroup.DUE && this._project_in_assignee_view_grouper.makeItemConform.call(this, a, b, c)
}, shouldAlwaysShowUpcoming:function() {
    return!1
}});
__FILE__ = "apps/asana/asana_drag_drop_region.js";
AsanaDragDropRegion = AsanaObject.subclass("AsanaDragDropRegion", {}, {constructor:function(a) {
    AsanaDragDropRegion.superproto.constructor.call(this);
    updateWithAttributes(this, a)
}, dragDropData:function(a) {
    return AsanaDragDropData.create({objects:a, region:this})
}, regionNodeOptions:function(a) {
    var b = this;
    return update({action:function(a) {
        return b.action(a)
    }, onReorder:function(a, d, e) {
        b.onReorder(a, d, e)
    }, onLink:function(a, d, e) {
        b.onLink(a, d, e)
    }, onDrop:function(a, d, e) {
        b.onDrop(a, d, e)
    }, onChangeDropTarget:function(a, d) {
        b.onChangeDropTarget(a, d)
    }}, a || {})
}, action:ABSTRACT, onLink:ABSTRACT, onReorder:ABSTRACT, onDrop:noop, onChangeDropTarget:function(a, b) {
    if(!this.is_empty) {
        if(this._previous_drop_target) {
            this._previous_drop_target.setAttribute("is_current_drop_target", !1), this._previous_drop_target = null
        }
        if(b) {
            a.setAttribute("is_current_drop_target", !0), this._previous_drop_target = a
        }
    }
}});
AsanaDragDropData = AsanaObject.subclass("AsanaDragDropData", {}, {objects:ATTRIBUTE_REQUIRED, region:ATTRIBUTE_REQUIRED, constructor:function(a) {
    AsanaDragDropData.superproto.constructor.call(this);
    updateWithAttributes(this, a)
}});
WorkspaceDragDropRegion = AsanaDragDropRegion.subclass("WorkspaceDragDropRegion", {}, {list_r:ATTRIBUTE_REQUIRED, action:function() {
    return DragDrop.Helper.Action.REORDER
}, onReorder:function(a, b, c) {
    $L(this.list_r).requestInsertBefore(b.objects.first(), c ? c.objects.first() : null)
}, onLink:noop});
TaskDragDropRegion = AsanaDragDropRegion.subclass("TaskDragDropRegion", {}, {onDropTask:ATTRIBUTE_REQUIRED, rows_are_reorderable:ATTRIBUTE_REQUIRED, is_empty:ATTRIBUTE_REQUIRED, pot:ATTRIBUTE_REQUIRED, _previous_drop_target:null, action:function(a) {
    if(a.region instanceof TaskDragDropRegion) {
        if(this.rows_are_reorderable) {
            return DragDrop.Helper.Action.REORDER
        }
    }else {
        if(a.region instanceof NavigationDragDropRegion && !this.is_empty) {
            return DragDrop.Helper.Action.LINK
        }
    }
    return DragDrop.Helper.Action.NONE
}, onReorder:function(a, b, c) {
    this.onDropTask(a, b.objects, c ? c.objects.first() : null)
}, onLink:function(a, b, c) {
    a = c.objects[0];
    b = b.objects[0];
    b.domain() === a.domain() && (b instanceof ItemList ? a.addTag(b) : b instanceof DomainUser && a.assignTo(b.taskList(), env.user().domainUserForDomain(a.domain())))
}, onDrop:function(a, b) {
    if(!this.rows_are_reorderable && b.region instanceof TaskDragDropRegion) {
        this.onDropTask(a, b.objects, null)
    }
}});
NavigationDragDropRegion = AsanaDragDropRegion.subclass("TaskDragDropRegion", {}, {list_r:ATTRIBUTE_REQUIRED, reorderable:!1, action:function(a) {
    if(a.region === this) {
        if(this.reorderable) {
            return DragDrop.Helper.Action.REORDER
        }
    }else {
        if(a.region instanceof TaskDragDropRegion) {
            return DragDrop.Helper.Action.LINK
        }
    }
    return DragDrop.Helper.Action.NONE
}, onReorder:function(a, b, c) {
    $L(this.list_r).requestInsertBefore(b.objects.first(), c ? c.objects.first() : null)
}, onLink:function(a, b, c) {
    var a = b.objects, d = c.objects[0], a = a.filter(function(a) {
        return a.domain() === d.domain()
    });
    a.length !== 0 && (d instanceof DomainUser ? a.forEach(function(a) {
        a.assignTo(d.taskList(), env.user().domainUserForDomain(a.domain()))
    }) : !b.region.pot.isUserTaskList() && !d.isTag() ? (c = env.world_store.createStateObject(MoveAsanaStateObjectsAction, {creator:env.user(), from_object:b.region.pot, to_object:d, objects:a}), UserActionContext.get().start(c), a.forEach(function(a) {
        a.removePot(b.region.pot);
        a.addTag(d)
    })) : a.forEach(function(a) {
        a.addTag(d)
    }))
}});
__FILE__ = "apps/asana/view/item_list_section_view.js";
ItemListSectionView = View.subclass("ItemListSectionView", {renderSections:function(a, b) {
    return DIV({style:"position: relative;", key_map:b}, [DIV({style:"position: relative;"}, [TABLE({id:"grid"}, a)])])
}}, {model:ATTRIBUTE_REQUIRED, section_name:ATTRIBUTE_REQUIRED, dnd_helper:ATTRIBUTE_REQUIRED, first_item_number:ATTRIBUTE_REQUIRED, rows_are_reorderable:ATTRIBUTE_REQUIRED, common_row_view_attributes:ATTRIBUTE_REQUIRED, task_grouper:ATTRIBUTE_REQUIRED, enclosing_item_list_view:ATTRIBUTE_REQUIRED, onDrop:ATTRIBUTE_REQUIRED, _drag_drop_region:SET_IN_CONSTRUCTOR, _row_view_class:SET_IN_CONSTRUCTOR, constructor:function(a) {
    if(a.view_name === void 0) {
        a.view_name = this.__type_name + "." + a.section_name
    }
    ItemListSectionView.superproto.constructor.call(this, a);
    this._drag_drop_region = TaskDragDropRegion.create({onDropTask:this.onDrop, rows_are_reorderable:this.rows_are_reorderable, is_empty:!1, pot:this.model.pot});
    this._row_view_class = this.enclosing_item_list_view.row_view_class === void 0 ? TaskRowView : this.enclosing_item_list_view.row_view_class
}, _render:function() {
    var a = this, b = a._mainGridCellKeyMap(), c = $rval(function() {
        return MapListWithIndexRvalue.create(a.model.list_items_r, function(c, e) {
            return $rval(function() {
                return a.createView(a._row_view_class, update({dnd_helper:a.dnd_helper, drag_drop_region:a._drag_drop_region, model:c, first_item_number:a.first_item_number, item_number_offset:e, draggable:!0, drop_target:!0, section_name:a.section_name, enclosing_item_list_view:a.enclosing_item_list_view, task_grouper:a.task_grouper, group:a.model.group, main_grid_cell_key_map:b}, a.common_row_view_attributes)).render()
            })
        })
    });
    return a.dnd_helper.regionNode("TBODY", {children:c}, a._drag_drop_region.regionNodeOptions())
}, _mainGridCellKeyMap:function() {
    var a = this;
    return[{key:"BACKSPACE", up:!0, handler:function(a) {
        a.target().had_text_on_backspace_keydown = !1
    }}, {key:"BACKSPACE", handler:View.publicFunction(a, function(b) {
        env.datastore_manager.setCurrentHandlerName("DeleteTask-GridPane-Backspace");
        var c = a.enclosing_item_list_view;
        if(c.inMultiSelect()) {
            c.deleteSelectedRowsInUserAction()
        }else {
            if(c.grid_state.mostRecentlySelectedItemOrNull() !== null) {
                var d = (b.target().value || b.target().textContent).length > 0;
                if(d) {
                    b.target().had_text_on_backspace_keydown = !0
                }
                if(!d && !b.target().had_text_on_backspace_keydown) {
                    b = c.upGroupItem(), b === null && (b = c.downGroupItem()), c._deleteSelectedRowsInUserActionNoSelect() && c.selectGroupItem(b, !1)
                }else {
                    return Node.DEFAULT_AND_BUBBLE
                }
            }
        }
    })}]
}});
__FILE__ = "apps/asana/view/due_date_item_list_view.js";
DueDateItemListView = ItemListSectionView.subclass("DueDateItemListView", {}, {section_name:"due_date", rows_are_reorderable:!1, first_item_number:0, onDrop:noop, _render:function() {
    var a = DueDateItemListView.superproto._render.call(this);
    return ItemListSectionView.renderSections([a], this._keyMap())
}, _keyMap:function() {
    var a = this;
    return[{key:KeyMap.Keys.ENTER, handler:function() {
        var b = a.enclosing_item_list_view.grid_state.mostRecentlySelectedItemOrNull();
        a.enclosing_item_list_view._insertRowAfter(a.model.pot, null).setDueDate(b.dueDate(), env.user().domainUserForDomain(a.model.pot.domain()))
    }}, {key:"DOWN", meta_or_ctrl:!0, handler:function() {
        a._slideDueDate(1)
    }}, {key:"UP", meta_or_ctrl:!0, handler:function() {
        a._slideDueDate(-1)
    }}]
}, _slideDueDate:function(a) {
    var b = this;
    b._keyboardMovableSelectedItemsInOrder().forEach(function(c) {
        c.setDueDate(c.dueDate().add(a, Date.Units.DAYS), b.user.domainUserForDomain(c.domain()))
    })
}, _keyboardMovableSelectedItemsInOrder:function() {
    var a = this.enclosing_item_list_view.movableSelectedItemsInDisplayOrder();
    return a.all(function(a) {
        return a instanceof Task && a.dueDate()
    }) ? a : []
}});
__FILE__ = "apps/asana/computed_model/grid_block.js";
GridBlock = ComputedModel.subclass("GridBlock", {_null_block:null, nullBlock:function() {
    if(GridBlock._null_block === null) {
        GridBlock._null_block = GridBlock.NullBlock.create()
    }
    return GridBlock._null_block
}}, {constructor:function(a) {
    GridBlock.superproto.constructor.call(this, a);
    this.display_order_key = (this.parent_block === null ? "" : this.parent_block.display_order_key + "/") + this.display_order_key_part
}, blockAbove:ATTRIBUTE_REQUIRED, blockBelow:ATTRIBUTE_REQUIRED, childBlockForGroupItem:ATTRIBUTE_REQUIRED, parent_block:ATTRIBUTE_REQUIRED, display_order_key_part:ATTRIBUTE_REQUIRED, display_order_key:SET_IN_CONSTRUCTOR, displayOrderKeyPartForLeaf:function() {
    ufu("implement this for blocks that contain leave group items")
}, displayOrderKeyForGroupItem:function(a) {
    var b = this.childBlockForGroupItem(a);
    return b === null ? this.display_order_key + "/" + this.displayOrderKeyPartForLeaf(a) : b.displayOrderKeyForGroupItem(a)
}, groupItemAboveOrNull:function() {
    for(var a = this;;) {
        a = a.blockAbove();
        if(a === GridBlock.nullBlock()) {
            return null
        }
        var b = a.lastGroupItemOrNull();
        if(b) {
            return b
        }
    }
}, groupItemBelowOrNull:function() {
    for(var a = this;;) {
        a = a.blockBelow();
        if(a === GridBlock.nullBlock()) {
            return null
        }
        var b = a.firstGroupItemOrNull();
        if(b) {
            return b
        }
    }
}, firstGroupItemOrNull:ABSTRACT, lastGroupItemOrNull:ABSTRACT, groupItemBeforeGroupItemOrNull:ABSTRACT, groupItemAfterGroupItemOrNull:ABSTRACT, makeItemConform:function(a) {
    this._makeItemConform(a);
    this.parent_block !== null && this.parent_block.makeItemConform(a)
}, _makeItemConform:function() {
}});
GridBlock.NullBlock = GridBlock.subclass("GridBlock.NullBlock", {}, {blockAbove:function() {
    ufu("This is the null block. blockAbove/Below should not be called")
}, blockBelow:function() {
    ufu("This is the null block. blockAbove/Below should not be called")
}, childBlockForGroupItem:function() {
    ufu("null blocks do not contain items")
}, parent_block:null, firstGroupItemOrNull:function() {
    return null
}, lastGroupItemOrNull:function() {
    return null
}, groupItemBeforeGroupItemOrNull:function() {
    return null
}, groupItemAfterGroupItemOrNull:function() {
    return null
}, display_order_key_part:null});
__FILE__ = "apps/asana/computed_model/item_list_section.js";
ItemListSection = GridBlock.subclass("ItemListSection", {}, {pot:ATTRIBUTE_REQUIRED, group:ATTRIBUTE_REQUIRED, list_items_r:ATTRIBUTE_REQUIRED, constructor:function(a) {
    ItemListSection.superproto.constructor.call(this, a)
}, childBlockForGroupItem:function() {
    return null
}, firstGroupItemOrNull:function() {
    var a = toValueAllowingUnknown(this.list_items_r);
    return isUnknown(a) ? null : (a = a.firstValueOrNull()) ? ItemListView.GroupItem.create(this.group, a) : null
}, lastGroupItemOrNull:function() {
    var a = toValueAllowingUnknown(this.list_items_r);
    return isUnknown(a) ? null : (a = a.lastValueOrNull()) ? ItemListView.GroupItem.create(this.group, a) : null
}, groupItemBeforeGroupItemOrNull:function(a) {
    return(a = $v(this.list_items_r).valueBeforeValueOrNull(a.item)) ? ItemListView.GroupItem.create(this.group, a) : this.groupItemAboveOrNull()
}, groupItemAfterGroupItemOrNull:function(a) {
    return(a = $v(this.list_items_r).valueAfterValueOrNull(a.item)) ? ItemListView.GroupItem.create(this.group, a) : this.groupItemBelowOrNull()
}, displayOrderKeyPartForLeaf:ATTRIBUTE_REQUIRED});
__FILE__ = "apps/asana/computed_model/due_date_item_list_section.js";
DueDateItemListSection = ItemListSection.subclass("DueDateItemListSection", {}, {constructor:function(a) {
    var b = this;
    a.list_items_r = computed_lists.sort(a.list_items_r, function(a) {
        return b._displayOrderKeyForItem(a)
    });
    DueDateItemListSection.superproto.constructor.call(this, a)
}, _displayOrderKeyForItem:function(a) {
    return zeroPadLeft(a.dueDate().getTime(), 16) + "/" + zeroPadLeft(a.getV("__creation_time") * 1E3, 16)
}, displayOrderKeyPartForLeaf:function(a) {
    return this._displayOrderKeyForItem(a.item)
}});
__FILE__ = "apps/asana/view/item_list_group_view.js";
ItemListGroupView = View.subclass("ItemListGroupView", {}, {model:ATTRIBUTE_REQUIRED, show_header_x:ATTRIBUTE_REQUIRED, id:ATTRIBUTE_REQUIRED, enclosing_item_list_view:ATTRIBUTE_REQUIRED, constructor:function(a) {
    this.parent_block = a.model.parent_block;
    ItemListGroupView.superproto.constructor.call(this, a);
    var a = this.model.task_grouper.nameForGroup(this.model.group), b = this.model.shouldShowAssignee(), c = this.model.innerModel();
    this._inner_block_view = c instanceof DueDateItemListSection ? this.createView(DueDateItemListView, {model:c, common_row_view_attributes:{grid_state:this.enclosing_item_list_view.grid_state, show_assignee:b}, task_grouper:this.model.task_grouper, enclosing_item_list_view:this.enclosing_item_list_view, dnd_helper:this.enclosing_item_list_view.dnd_helper}) : this.createView(TriPartItemListView, {model:c, show_assignee:b, id:this.id, enclosing_item_list_view:this.enclosing_item_list_view, view_name:a})
}, _render:function() {
    var a = this, b = function() {
        a.model.isExpanded() ? a.model.expanded_groups_l.requestRemove(a.model.group) : a.model.expanded_groups_l.requestInsertBefore(a.model.group, null)
    }, c = $rval(function() {
        var b = $v(a.model.visible_list_r).map(function(a) {
            return a.getX("task_type")
        });
        env.world_store.peekXvaluesAndStateObjectScalars(b, []);
        var c = 0;
        $v(a.model.visible_list_r).forEach(function(a) {
            a.isBar() || c++
        });
        return c
    }), d = $rval(function() {
        var d = $v(c);
        return d === 0 ? "" : a.model.isExpanded() ? A({"class":"toggle-link", tabindex:-1, onclick:b}, ["Collapse"]) : A({"class":"toggle-link", tabindex:-1, onclick:b}, ["Show ", d, " ", d > 1 ? "tasks" : "task"])
    }), e = a.model.task_grouper.nameForGroup(a.model.group), f = "";
    if(a.model.task_grouper instanceof TaskGrouper.Assignee) {
        var g = a.model.group;
        g instanceof DomainUser && (f = $rval(function() {
            return a.createView(PhotoView, {who:g.user(), size:PhotoView.Size.SMALL, show_initials:!1, domain_user:g, silhouette_class:"photoless-assignee-group-header"}).render()
        }))
    }
    var h = $rval(function() {
        return $v(c) === 0 ? "" : SPAN({"class":"group_header count-indicator"}, [c])
    }), i = $rval(function() {
        return e !== "" && $v(a.show_header_x) ? DIV({"class":"group_header"}, [SPAN({"class":"group_header_icon"}, [f]), SPAN({"class":"expandable", tooltip:a.model.task_grouper.tooltipForGroupHeader(a.model.group), tooltip_delay:200, onclick:b}, [e]), " ", a.model.task_grouper.SpecialGroup.NEW === a.model.group ? h : "", a.model.isCollapsable() ? d : ""]) : ""
    }), j;
    j = a.model.isExpanded() ? a._inner_block_view.render() : a.model.task_grouper.SpecialGroup.UPCOMING === a.model.group ? $rval(function() {
        return $v(c) === 0 ? a._inner_block_view.render() : ""
    }) : "";
    return P({"class":"group " + a.model.task_grouper.classNameForGroup(a.model.group), group_id:ItemListView._groupId(a.model.group)}, [i, j])
}});
__FILE__ = "apps/asana/view/tri_part_item_list_view.js";
TriPartItemListView = View.subclass("TriPartItemListView", {}, {show_assignee:ATTRIBUTE_REQUIRED, model:ATTRIBUTE_REQUIRED, id:ATTRIBUTE_REQUIRED, enclosing_item_list_view:ATTRIBUTE_REQUIRED, _main_list_l:SET_IN_CONSTRUCTOR, _completed_view:SET_IN_CONSTRUCTOR, _main_view:SET_IN_CONSTRUCTOR, _domain_user:SET_IN_CONSTRUCTOR, constructor:function(a) {
    var b = this;
    this.parent_block = a.model.parent_block;
    TriPartItemListView.superproto.constructor.call(this, a);
    b.enclosing_item_list_view._tri_part_view_by_identifier.put(b.id, this);
    b._domain_user = env.user().domainUserForDomain(b.model.pot.domain());
    b._main_list_l = b.model.pot.getX("items");
    b.model.pot instanceof Pot && b.model.pot.isPrivate();
    var a = b.enclosing_item_list_view.dnd_helper, c = b.model.completedModel();
    b._completed_view = c === null ? null : b.createView(ItemListSectionView, {model:c, section_name:"completed", dnd_helper:a, rows_are_reorderable:!1, first_item_number:0, common_row_view_attributes:b._commonRowViewAttributes(), enclosing_item_list_view:b.enclosing_item_list_view, task_grouper:b.model.task_grouper, onDrop:function(a, c) {
        c.forEach(function(a) {
            b._makeDroppedItemConform(a);
            a.setCompleted(!0, b._domain_user)
        })
    }});
    var c = View.publicFunction(b, function(a, c, d) {
        b._beforeMoving(c);
        c.forEach(function(a) {
            b._makeDroppedItemConform(a);
            b.model.only_show_main_part || a.getV("completed") && a.setCompleted(!1, b._domain_user)
        });
        a = b.model.pot.getX("items");
        if(!d || !a.containsObject(d)) {
            d = null
        }
        a.requestInsertMultipleBefore(c, d);
        b._afterMoving()
    }), a = {enclosing_item_list_view:b.enclosing_item_list_view, dnd_helper:a, onDrop:c}, c = b.model.mainModel(), d = this.enclosing_item_list_view.grid_state;
    b._main_view = c === null ? null : b.model.mainListIsEmpty() && (!(this.model.task_grouper instanceof TaskGrouper.None) || d.allTasksLoaded(b.model.pot)) ? b.createView(EmptyItemListSectionView, update({pot:b.model.pot, onClick:View.publicFunction(b, function() {
        b.insertRowAfter(null)
    }), show_assignee:b.show_assignee}, a)) : b.createView(ItemListSectionView, update({model:b.model.mainModel(), section_name:"main", rows_are_reorderable:!0, first_item_number:$rval(function() {
        return function(a) {
            a = toValueAllowingUnknown(a);
            return isKnown(a) ? a.size() : 0
        }(b.model.completedListX())
    }), common_row_view_attributes:b._commonRowViewAttributes(), task_grouper:b.model.task_grouper}, a))
}, insertRowBefore:function(a) {
    if(a === null) {
        var b = this.model.lastVisibleTask();
        if(b !== null) {
            this.insertRowAfter(b);
            return
        }
    }
    a = a !== null && this._sectionIdForItem(a) === ItemListView.SECTION_ID_MAIN ? this.enclosing_item_list_view._insertRowBefore(this.model.pot, a) : this.enclosing_item_list_view._insertRowBefore(this.model.pot, null);
    a !== null && this.model.makeItemConform(a);
    b = this.model.task_grouper.defaultGroupForTask(a);
    b !== null && this.enclosing_item_list_view.grid_state.selectGroupItem(ItemListView.GroupItem.create(b, a))
}, insertRowAfter:function(a) {
    a = a !== null && this._sectionIdForItem(a) === ItemListView.SECTION_ID_MAIN ? this.enclosing_item_list_view._insertRowAfter(this.model.pot, a) : this.enclosing_item_list_view._insertRowAfter(this.model.pot, null);
    a !== null && this.model.makeItemConform(a);
    var b = this.model.task_grouper.defaultGroupForTask(a);
    b !== null && this.enclosing_item_list_view.grid_state.selectGroupItem(ItemListView.GroupItem.create(b, a))
}, _makeDroppedItemConform:function(a) {
    var b = this.enclosing_item_list_view.grid_state, c = b.getTaskGrouper(), b = b.getV("selected_group");
    c instanceof TaskGrouper.Project && b !== this.model.group && !c.isGroupSpecial(b) && (!(c instanceof TaskGrouper.ProjectInAssigneeView) || !c.isGroupSpecial(this.model.group)) && a.removePot(b);
    this.model.pot.onBeforeInsert(a);
    this.model.makeItemConform(a)
}, _commonRowViewAttributes:function() {
    return{grid_state:this.enclosing_item_list_view.grid_state, show_assignee:this.show_assignee}
}, _keyMap:function() {
    var a = this;
    return[{key:"DOWN", meta_or_ctrl:!0, handler:function() {
        env.datastore_manager.setCurrentHandlerName("MoveTask-GridPane-ArrowKey");
        a._moveDown(!1)
    }}, {key:"DOWN", meta_or_ctrl:!0, shift:!0, handler:function() {
        env.datastore_manager.setCurrentHandlerName("JumpTask-GridPane-ArrowKey");
        a._moveToBottom()
    }}, {key:"UP", meta_or_ctrl:!0, handler:function() {
        env.datastore_manager.setCurrentHandlerName("MoveTask-GridPane-ArrowKey");
        a._moveUp(!1)
    }}, {key:"UP", meta_or_ctrl:!0, shift:!0, handler:function() {
        env.datastore_manager.setCurrentHandlerName("JumpTask-GridPane-ArrowKey");
        a._moveToTop()
    }}]
}, _render:function() {
    var a = this, b = [];
    a._completed_view && b.push($rval(function() {
        return a._completed_view.render()
    }));
    a._main_view && b.push($rval(function() {
        return a._main_view.render()
    }));
    return $rval(function() {
        $rval(function() {
            a._bars()
        }).becomeWatch().peek();
        return ItemListSectionView.renderSections(b, a._keyMap())
    })
}, _sectionIdForItem:function(a) {
    (null === a || !this.enclosing_item_list_view.isItemVisible(a)) && ufu("unknown section -- should not get here");
    if(a.getV("completed") && !this.model.only_show_main_part) {
        return ItemListView.SECTION_ID_COMPLETED
    }
    return ItemListView.SECTION_ID_MAIN
}, _keyboardMovableSelectedItemsInOrder:function() {
    var a = this, b = a.enclosing_item_list_view.movableSelectedItemsInDisplayOrder();
    if(b.find(function(b) {
        return a.model.sectionIdForItemOrNull(b) === null
    }) !== null) {
        return[]
    }
    return b.filter(function(b) {
        return a.model.sectionIdForItemOrNull(b) === ItemListView.SECTION_ID_MAIN
    })
}, _moveDown:View.publicMethod(function(a) {
    var b = this, c = b._keyboardMovableSelectedItemsInOrder();
    if(c.length !== 0) {
        var d = c[c.length - 1];
        b._beforeMoving(c);
        var e = null, f = $v(b.model.mainListX());
        a ? (a = b._main_list_l.rankForObject(d), a = b._bars().valueAfterRankOrNull(a), e = f.contains(a) ? a : f.lastValueOrNull()) : e = f.valueAfterValueOr(d, d);
        c.forEach(function(a) {
            a !== e && (b._main_list_l.requestInsertAfter(a, e), e = a)
        });
        b._afterMoving()
    }
}), _moveUp:View.publicMethod(function(a) {
    var b = this._keyboardMovableSelectedItemsInOrder();
    if(b.length !== 0) {
        var c = b[0];
        this._beforeMoving(b);
        var d = $v(this.model.mainListX());
        if(d.valueBeforeValueOrNull(c)) {
            if(a) {
                if(a = d.rankForValueOrNull(c), a = this._bars().valueBeforeRankOrNull(a), a === null || !d.contains(a)) {
                    a = d.firstValueOrNull()
                }
            }else {
                a = d.valueBeforeValueOrNull(c)
            }
            this._main_list_l.requestInsertMultipleBefore(b, a)
        }
        this._afterMoving()
    }
}), _selectAdjacentTask:function(a) {
    var b = this.enclosing_item_list_view.grid_state.getV("selected_group"), c = this.groupItemAfterGroupItemOrNull(ItemListView.GroupItem.create(b, a[a.length - 1]));
    c === null && (c = this.groupItemBeforeGroupItemOrNull(ItemListView.GroupItem.create(b, a[0])));
    c !== null && this.enclosing_item_list_view.grid_state.selectGroupItem(c)
}, _moveToBottom:View.publicMethod(function() {
    this._keyboardMovableSelectedItemsInOrder().length !== 0 && this._moveDown(!0)
}), _moveToTop:View.publicMethod(function() {
    this._keyboardMovableSelectedItemsInOrder().length !== 0 && this._moveUp(!0)
}), _beforeMoving:function(a) {
    var b = this;
    if(b._shouldRegisterPriorityChangeComments()) {
        b._old_sections = Map.create(), a.forEach(function(a) {
            b._old_sections.put(a, b.model.pot.barForPriorityGroupOrNull(a))
        })
    }
}, _afterMoving:function() {
    var a = this;
    if(a._shouldRegisterPriorityChangeComments()) {
        a._old_sections.forEach(function(b, c) {
            var d = a.model.pot.barForPriorityGroupOrNull(b);
            c !== d && b.addStoryOfSubtype(PriorityChangeComment, {creator_du:a._domain_user, from_group:c, to_group:d, project:a.model.pot})
        }), a._old_sections = void 0
    }
}, _shouldRegisterPriorityChangeComments:function() {
    if(this.model.task_grouper instanceof TaskGrouper.ProjectInAssigneeView && this.model.task_grouper.isGroupSpecial(this.model.group)) {
        return!1
    }
    return!0
}, _bars:function() {
    return $v(this._barsX())
}, _barsX:Memoize.memoizeInThis("TriPartItemLIstView._barsX", function() {
    var a = this.model.group === this.model.task_grouper.SpecialGroup.TODAY;
    return FilterRvalue.createWithRvalues(this.model.pot.barsX(), function(b) {
        return a === (b.scheduleStatus() === Task.ScheduleStatus.TODAY)
    }).setAsSafelyPeekableByAncestor()
}), markComplete:function() {
    this.enclosing_item_list_view.markComplete()
}});
__FILE__ = "apps/asana/view/widgets/idropdown_stack.js";
IDropdownStack = Interface.create("IDropdownStack", [], {}, {push:ABSTRACT, close:ABSTRACT, anyOpen:ABSTRACT, isOpen:ABSTRACT, indexOf:ABSTRACT});
__FILE__ = "apps/asana/view/widgets/dropdown_stack.js";
DropdownStack = AsanaObject.subclass("DropdownStack", [IDropdownStack], {}, {stack_l:SET_IN_CONSTRUCTOR, constructor:function(a) {
    DropdownStack.superproto.constructor.call(this);
    this.stack_l = a
}, push:function(a) {
    this._stack().isEmpty() && this._setupCloseHandlers();
    a = DropdownStack._Frame.create(a);
    this._stackL().requestInsertBefore(a, null)
}, close:function(a) {
    return this._frameForDropdown(a).close(!1, this)
}, anyOpen:function() {
    return!this._stack().isEmpty()
}, isOpen:function(a) {
    return this._frameForDropdown(a) !== null
}, indexOf:function(a) {
    for(var b = this._stack().peekValuesArray(), c = 0;c < b.length;++c) {
        if(b[c].isForDropdown(a)) {
            return c
        }
    }
    return-1
}, _topFrame:function() {
    return this._stack().lastValueOrNull()
}, _closeAllAbove:function(a) {
    for(var b;(b = this._topFrame()) !== a;) {
        b.close(!1, this)
    }
}, _frameForDropdown:function(a) {
    return this._stack().findValueOrNull(function(b) {
        return b.isForDropdown(a)
    })
}, _setupCloseHandlers:function() {
    var a = this;
    if(!a._close_listeners) {
        a._close_listeners = [document.listen("mousedown", function(b) {
            if(a._canStillHandleDocumentEvents() && !a._stack().isEmpty()) {
                for(var c = Node.DEFAULT_AND_BUBBLE, b = b.target;b !== null;b = b.parentNode) {
                    if(b.__is_open_dropdown_menu_link) {
                        c = Node.STOP
                    }
                    if(b.__dropdown) {
                        return(b = a._frameForDropdown(b.__dropdown)) && a._closeAllAbove(b), c
                    }
                }
                a._closeAllAbove(null);
                return c
            }
        }, !0), document.listen("keydown", function(b) {
            if(a._canStillHandleDocumentEvents()) {
                if(b.keyCode === KeyMap.Keys.ESC && (b = a._topFrame())) {
                    return b.close(!0, a), Node.STOP
                }
                return Node.DEFAULT_AND_BUBBLE
            }
        }, !0)]
    }
}, _teardownCloseHandlers:function() {
    this._close_listeners && (this._close_listeners.forEach(function(a) {
        document.unlisten(a)
    }), delete this._close_listeners)
}, _canStillHandleDocumentEvents:function() {
    return isUnknown(this._stackL().peekAllowingUnknown()) ? (this._teardownCloseHandlers(), !1) : !0
}, _stack:function() {
    return $v(this.stack_l)
}, _stackL:function() {
    return this.stack_l
}});
DropdownStack._Frame = SessionObject.subclass("DropdownStack._Frame", {property_descs:{fully_qualified_view_name:{type:String}, old_focused_element_id:{type:String, default_value:null}}, create:function(a) {
    return env.session_store.createStateObject(DropdownStack._Frame, {fully_qualified_view_name:a.fully_qualified_view_name, old_focused_element_id:env.focusedElementId()})
}}, {close:function(a, b) {
    b._closeAllAbove(this);
    a && env.setFocus(this.oldFocusedElementId());
    b._stackL().requestRemove(this);
    b._stack().isEmpty() && b._teardownCloseHandlers()
}, isForDropdown:function(a) {
    return this.fullyQualifiedViewName() === a.fully_qualified_view_name
}});
__FILE__ = "apps/asana/view/widgets/dropdown_view.js";
DropdownView = View.subclass("DropdownView", {MAX_HEIGHT:250, LEFT:"left", RIGHT:"right", BOTTOM_Z_INDEX:2E3}, {align:"left", enforce_max_dropdown_height:!0, relative_to_element_id:ATTRIBUTE_REQUIRED, contents:null, renderContents:null, onOpen:null, class_name:"", id:null, y_coordinate_under_mouse:null, padding_x:0, padding_y:0, has_arrow:!1, align_arrow:"center", dropdown_stack:SET_IN_CONSTRUCTOR, constructor:function(a) {
    DropdownView.superproto.constructor.call(this, a);
    this.dropdown_stack = env.app_interfaces.get(IDropdownStack)
}, renderIfOpen:function() {
    this.isOpen() && this.renderIntoBody();
    return this
}, open:function() {
    this.dropdown_stack.push(this);
    if(this.onOpen !== null) {
        this.onOpen()
    }
}, close:function() {
    this.isOpen() && this.dropdown_stack.close(this)
}, isOpen:computedProperty("isOpen", function() {
    return this.dropdown_stack.isOpen(this)
}), renderIntoBody:function() {
    var a = DropdownView.superproto.render.call(this);
    a.liveAppendToBody();
    return a
}, render:function() {
    ufu("Dropdowns are to be rendered via renderIntoBody instead ofbeing inserted as a child of  another DOM node in a render() method.This may not be necessary in all cases, but it seems good to beconsistent.  Use renderIntoBody() instead, and ask Jack (or Malcolm or JR) if you have questions.")
}, _render:function() {
    var a = this;
    if(a.has_arrow) {
        var b = DIV({"class":"dropdown-arrow"});
        b.watchProperty("style", $rval(function() {
            var c = document.getElementById(a.relative_to_element_id);
            if(!c) {
                return{}
            }
            return{top:c.dimensions.bottom() + a.padding_y, left:a.align_arrow === "center" ? c.dimensions.center() - b.dimensions.width() / 2 : c.dimensions.x()}
        }))
    }else {
        b = ""
    }
    var c = a.contents || a.renderContents(), d;
    d = DIV({"class":"dropdown " + a.class_name + (a.has_arrow ? " has-arrow" : ""), onmousedown:function(a) {
        if(["INPUT", "TEXTAREA"].contains(a.target.tagName)) {
            return Node.DEFAULT_AND_BUBBLE
        }
        return Node.JUST_BUBBLE
    }}, [c]);
    if(!env.is_server) {
        d.__dropdown = this;
        if(a.id !== null) {
            d.id = a.id
        }
        var e = d.dimensions;
        d.watchProperty("style", $rval(function() {
            var f = document.getElementById(a.relative_to_element_id);
            if(!f) {
                return log.warn("relative_to_element_id not found", a.relative_to_element_id), {}
            }
            d.style.maxHeight = 1E5;
            var g = c.dimensions.height();
            a.enforce_max_dropdown_height && (g = Math.min(g, DropdownView.MAX_HEIGHT));
            g = a._getPosition(f, e.width(), g + 6);
            if(a.y_coordinate_under_mouse !== null) {
                f = f.dimensions.y() + f.dimensions.contentHeight() / 2, g.top = Math.max(2, f - a.y_coordinate_under_mouse)
            }
            a.has_arrow && (g.top += b.dimensions.height() - 2);
            f = a.browser.height() - g.top - 10;
            a.enforce_max_dropdown_height && (f = Math.min(f, DropdownView.MAX_HEIGHT));
            g.maxHeight = f;
            f = a.dropdown_stack.indexOf(a);
            g.zIndex = DropdownView.BOTTOM_Z_INDEX + (f === -1 ? 10 : f);
            return g
        }))
    }
    return FRAG([d, b])
}, _getPosition:function(a, b, c) {
    var d = a.dimensions.x(), e = a.dimensions.y(), f = d + a.dimensions.width(), a = e + a.dimensions.height(), g = this.browser.width(), h = this.browser.height(), i = this.padding_x, j = this.padding_y;
    return{left:this.align === DropdownView.LEFT && d + b - this.padding_x < g ? d - i : f - b + i, top:a + c < h || e - c < 0 ? a + j : e - c - j}
}});
__FILE__ = "apps/asana/view/dialog/contact_importer_dialog_state.js";
ContactImporterDialogState = DialogState.subclass("ContactImporterDialogView.State", {INVITE_MESSAGE:"I'm using Asana and thought you might like it as well.", registry_name:"ContactImporterDialogState", property_descs:{imported_contacts_json:{type:String}, default_selected_contacts_json:{type:String, default_value:"[]"}, selected_tab:{type:String}, on_complete:{type:StateObject}, invite_inline:{type:Boolean}, invited_message:{type:String, default_value:"I'm using Asana and thought you might like it as well."},
    save_contacts:{type:Boolean}, send_invites:{type:Boolean, default_value:!0}}}, {hide:function() {
    this._onComplete([]);
    return ContactImporterDialogState.superproto.hide.call(this)
}, _onComplete:function(a) {
    var b = this.onComplete();
    b !== null && (this.setOnComplete(null), b.run(a, this.invitedMessage(), this.sendInvites()))
}});
__FILE__ = "apps/asana/view/dialog/contact_importer_dialog_view.js";
ContactImporterDialogView = DialogView2.subclass("ContactImporterDialogView", {State:ContactImporterDialogState, show:attributedValueFunc({imported_contacts_json:ATTRIBUTE_REQUIRED, on_complete:ATTRIBUTE_REQUIRED, select_all:!1, onclose_runnable:null, invite_inline:!1, save_contacts:!1}, function(a) {
    var b = JSON.parse(a.imported_contacts_json);
    a.selected_tab = b[ContactImporterDialogView.TABS.TOP].size() < 15 ? ContactImporterDialogView.TABS.ALL : ContactImporterDialogView.TABS.TOP;
    if(a.select_all) {
        a.default_selected_contacts_json = JSON.stringify(b[a.selected_tab].map(function(a) {
            return a.email
        }))
    }
    delete a.select_all;
    return ContactImporterDialogView.superclass.show.call(this, a)
}), getContactsForGoogleUser:function(a, b) {
    var c = env.serverCall("google_contacts", Map.create([["access_token", a]]));
    c.addCallback(function(a) {
        log.debug("Got contacts from server");
        b.call(null, a)
    });
    c.addErrback(function(a) {
        log.debug("Error getting contacts from server, response", a);
        b.call(null, "")
    })
}, titleElementForSaveContactsFlow:function() {
    return DIV([DIV({"class":"title-main"}, [DIV({"class":"number-box"}, ["1"]), "Import your address book"]), DIV({"class":"title-note"}, ["Make sharing easier with quick access to your contacts"])])
}, TABS:{TOP:"top", ALL:"all"}}, {dialog_name:"contact_importer_dialog", _email_to_checked_state_map:null, _email_to_name_map:null, _contacts:null, defaultFocusAndSelection:function() {
    return{focused_element_id:"contact_importer_dialog_view:contact_list"}
}, constructor:function(a) {
    var b = this;
    ContactImporterDialogView.superproto.constructor.call(b, a);
    b._contacts = JSON.parse(b._state.importedContactsJson());
    b._email_to_name_map = Map.create();
    b._email_to_checked_state_map = Map.create();
    var c = Set.create();
    c.addAll(JSON.parse(b._state.defaultSelectedContactsJson()));
    a = function(a) {
        b._email_to_name_map.put(a.email, a.name);
        b._email_to_checked_state_map.put(a.email, LocalLvalue.create(c.contains(a.email)))
    };
    b._contacts.top.forEach(a);
    b._contacts.all.forEach(a)
}, _render:function() {
    var a = this, b = function(b, c) {
        var d = a._contacts[b];
        return{value:b, enabled:!d.isEmpty(), display_name:c + " (" + d.size() + ")", renderContents:function() {
            return a._renderContactList(d)
        }}
    }, c = a.createView(TabView, {selected_tab_l:a._state.selectedTabL(), tab_configs:[b(ContactImporterDialogView.TABS.TOP, "My Contacts"), b(ContactImporterDialogView.TABS.ALL, "All Contacts")]}), d = null, d = a._state.inviteInline() ? a._renderFooterForInlineInvite() : a._state.saveContacts() ? a._renderFooterForSaveContactsInvite() : a._renderFooterForMultiStepInvite();
    return $rval(function() {
        return a.createView(DialogView, {element_id:a.dialog_name, flush_body_style:!1, title_x:a._state.saveContacts() ? ContactImporterDialogView.titleElementForSaveContactsFlow() : a._headerInviteFriends(), tab_view:c, body_x:$rval(function() {
            return c.renderSelectedTabContents()
        }), footer_x:d}).render()
    })
}, _headerInviteFriends:function() {
    return DIV({"class":"import_contacts_title"}, [DIV({"class":"title-header"}, ["Everyone", BR(), "needs Asana."]), DIV({"class":"title-comment"}, ["Invite your friends so", BR(), "they can get organized now."])])
}, _renderContactList:function(a) {
    var b = this;
    return DIV({id:"contact_importer_dialog_view:contact_list"}, [DIV({"class":"select-links"}, [A({"class":"select-link", tabindex:-1, onclick:function() {
        b._setAllEmailsSelected(!0)
    }}, ["Select All"]), SPAN({"class":"select-link"}, ["|"]), A({"class":"select-link", tabindex:-1, onclick:function() {
        b._setAllEmailsSelected(!1)
    }}, ["Clear Selection"])]), TABLE({tabindex:0, "class":"contacts-table"}, a.map(function(a) {
        return b._renderContactRow(a)
    }))])
}, _setAllEmailsSelected:function(a) {
    var b = this;
    a ? b._contacts[b._state.selectedTab()].forEach(function(a) {
        b._email_to_checked_state_map.get(a.email).requestSet(!0)
    }) : b._email_to_checked_state_map.forEach(function(a, b) {
        b.requestSet(!1)
    })
}, _renderContactRow:function(a) {
    var b = this._email_to_checked_state_map.get(a.email), c = function() {
        b.requestSet(!$v(b))
    }, d = $rval(function() {
        return AsanaForms.renderCheckbox({tabIndex:-1, id:"contact_importer_dialog_view:contact:" + a.email, data:b, key_map:[{key:KeyMap.Keys.SPACE, handler:c}]})
    });
    return TR({"class":"contact-row", onclick:c}, [TD({"class":"contact-checkbox-cell"}, [d]), TD({"class":"contact-name-cell"}, [a.name]), TD({"class":"contact-email-cell"}, [a.email])])
}, _renderFooterForMultiStepInvite:function() {
    var a = this;
    return DIV({"class":"buttons"}, [DIV({"class":"invite-action"}, [DIV({"class":"invite-note"}, ["People you select will be invited to create a new workspace;", BR(), "they will not be able to access any of your data."]), AsanaForms.renderButton({label:"Continue", id:"contact_importer_dialog_view:continue", "class":"primary", tabindex:0, onclick:function() {
        a._state._onComplete(a._getSelectedEmailAddresses());
        a._state.hide()
    }})])])
}, _renderFooterForInlineInvite:function() {
    var a = this, b = TEXTAREA({"class":"generic-input showing email-message", data:a._state.invitedMessageL(), data_type:"text", id:"contact_importer_dialog_view:invite_message", tabindex:0, handler:function() {
        b.value = b.value.substr(0, 1E3);
        a._state.setInvitedMessage(b.value);
        return Node.JUST_DEFAULT
    }}, []);
    return DIV({"class":"footer"}, [DIV({"class":"invite-message-note"}, ["Add a message about how you think they could use Asana"]), DIV([b]), DIV({"class":"invite-action"}, [DIV({"class":"invite-note"}, ["People you select will be invited to create a new workspace;", BR(), "they will not be able to access any of your data."]), DIV({"class":"invite-buttons buttons"}, [DIV({"class":$rval(function() {
        return"primary default-button button" + (a._getSelectedEmailCount() > 0 ? "" : " disabled")
    }), tabindex:0, id:"contact_importer_dialog_view:continue", onclick:function() {
        a._onComplete()
    }, key_map:[{key:"ENTER", handler:function() {
        a._onComplete()
    }}, {key:"SPACE", handler:function() {
        a._onComplete()
    }}]}, [SPAN({"class":"button-text"}, ["Share Asana"])])])])])
}, _renderFooterForSaveContactsInvite:function() {
    var a = this, b = function() {
        a._state.setSendInvites(!a._state.sendInvites())
    }, c = $rval(function() {
        return AsanaForms.renderCheckbox({tabIndex:-1, id:"contact_importer_dialog_view:invite-opt-in", data:a._state.sendInvitesL(), key_map:[{key:KeyMap.Keys.SPACE, handler:b}]})
    });
    return DIV({"class":"footer"}, [DIV({"class":"invite-action save-contacts"}, [DIV({"class":"invite-opt-in", onclick:b}, [c, DIV({"class":"invite-opt-in-text"}, ["Also send an invite to Asana"])]), DIV({"class":"invite-buttons buttons"}, [DIV({"class":$rval(function() {
        return"primary default-button button" + (a._getSelectedEmailCount() > 0 ? "" : " disabled")
    }), tabindex:0, id:"contact_importer_dialog_view:continue", onclick:function() {
        a._onComplete()
    }, key_map:[{key:"ENTER", handler:function() {
        a._onComplete()
    }}, {key:"SPACE", handler:function() {
        a._onComplete()
    }}]}, [SPAN({"class":"button-text"}, ["Add to Contacts"])])])])])
}, _onComplete:function() {
    this._getSelectedEmailCount() > 0 && (this._state._onComplete(this._getSelectedEmailAddresses()), this._state.hide())
}, _getSelectedEmailAddresses:function() {
    var a = this, b = [];
    a._email_to_checked_state_map.forEach(function(c, d) {
        $v(d) && b.push(EmailAddress.create(c, a._email_to_name_map.get(c)))
    });
    return b
}, _getSelectedEmailCount:function() {
    var a = 0;
    this._email_to_checked_state_map.forEach(function(b, c) {
        $v(c) && a++
    });
    return a
}});
__FILE__ = "luna/common/email_address.js";
EmailAddress = define("EmailAddress", AsanaObject.subclass("EmailAddress", [ISerializable], {_ASANA_OBJECT_EMAIL_RE:/.*@mail\.asana\.com$/, EMAIL_SUBSTRING_RE:/[\b\<]*([^@^\b^\<^"]+@[^@^\b^"]+\.[a-zA-Z]{2,})[\b\>]*/, parse:function(a) {
    var a = a.replace(/\(.*\)/, ""), b = a.match(EmailAddress.EMAIL_SUBSTRING_RE);
    if(b === null) {
        return null
    }
    var b = b[1], c = a.replace("<" + b + ">", "");
    c === a && (c = a.replace(b, ""), c === a && ufu("raw email not found in name_and_email_str", b, a));
    return EmailAddress.create(EmailAddress._normalizeEmailForParse(b), c.trim().replace(/"/g, ""))
}, _normalizeEmailForParse:function(a) {
    a = a.replace(/prvs=[\d\w]+=/i, "");
    return a.trim()
}, parseMultiple:function(a, b) {
    for(var c = b || [], d = a.replace(/,/g, "\u0001"), e = "", f = !1, g = 0;g < d.length;g++) {
        var h = d[g];
        h === '"' ? (e += h, f = !f) : e += f && h === "\u0001" ? "," : h
    }
    var i = [];
    e.split("\u0001").forEach(function(a) {
        var a = a.trim(), b = EmailAddress.parse(a);
        b === null ? c.push(a) : i.push(b)
    });
    return i
}, couldBeAsanaObjectEmail:function(a) {
    return EmailAddress._ASANA_OBJECT_EMAIL_RE.test(a)
}}, {_email:SET_IN_CONSTRUCTOR, _name:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    EmailAddress.superproto.constructor.call(this);
    this._email = a.replace(/\\/g, "");
    this._name = b
}, toRawJS:function() {
    return{email:this._email, name:this._name}
}, fromRawJS:function(a) {
    this.constructor(a.email, a.name)
}, email:function() {
    return this._email
}, emailUsername:function() {
    return this.email().split("@")[0]
}, canonicalEmailUsername:function() {
    return this.emailUsername().split("+")[0]
}, emailUsernameAfterPlus:function() {
    var a = this.emailUsername().split("+");
    return a.size() === 2 ? a[1] : ""
}, emailDomain:function() {
    return this.email().split("@")[1]
}, name:function() {
    return this._name
}}));
__FILE__ = "apps/asana/view/dialog/invite_to_beta_dialog_view.js";
InviteToBetaDialogView = DialogView2.subclass("InviteToBetaDialogView", {State:InviteToBetaDialogState, show:attributedValueFunc({invited_name:"", invited_email:"", invited_emails:"", last_invite:null, invite_ui_source:ATTRIBUTE_REQUIRED}, function(a) {
    logEvent({name:"AsanaInviteDialog-Opened", invite_ui_source:a.invite_ui_source, invite_ui_type:InviteToBetaDialogState.inviteUiType(), inviter_nps:env.user().latestNpsOrNull()});
    return InviteToBetaDialogView.superclass.show.call(this, a)
}), _IS_SINGLETON_DIALOG:!0, EMAILS_INPUT_ID:"invite_to_beta_dialog_view.invited_emails", INVITE_MESSAGE_INPUT_ID:"invite_to_beta_dialog_view.invite_message", _instance:null}, {session:ATTRIBUTE_REQUIRED, dialog_name:"invite_to_beta_dialog", defaultFocusAndSelection:function() {
    return{focused_element_id:InviteToBetaDialogView.EMAILS_INPUT_ID}
}, _render:function() {
    InviteToBetaDialogView._instance = this;
    var a = this._state.lastInvite();
    a !== null && (a.invitedName(), a.invitedEmail());
    this.session.activeDomain();
    InviteToBetaDialogState.inviteUiType();
    return this.createView(DialogView, {element_id:this.dialog_name, flush_body_style:!0, title_x:"Tell your friends about Asana", body_x:this._cloudSpongeInviteBody(), banner_x:this._bannerR()}).render()
}, _bannerR:function() {
    var a = this;
    return $rval(function() {
        return a._state.hasImportedContacts() ? a._renderImportBannerAlreadyImported() : ""
    })
}, _cloudSpongeInviteBody:function() {
    var a = this;
    env.user().latestNpsOrNull();
    var b = $rval(function() {
        var b = EmailAddress.parseMultiple(a._state.invitedEmails(), []);
        return b.size() > 0 ? b : null
    }), c = $rval(function() {
        var c = $v(b), d = c !== null ? "Send " + pluralize("Invite", c.size()) : "Send Invites", e = c !== null ? View.publicFunction(a, function() {
            a._createBatchInvites(c);
            a._state.resetState();
            a._state.hide();
            UserActionContext.get().start(env.world_store.createStateObject(InviteToAsanaAction, {creator:env.user(), num_invites:c.size()}))
        }) : null;
        return AsanaForms.renderButton({label:d, onclick:e, id:"invite_cloudsponge_submit_button", "class":"primary", tabindex:0})
    }), d = $rval(function() {
        return a._state.hasImportedContacts() ? "" : a._renderImportButtonNotYetImported()
    });
    if(!env.is_server) {
        globals.csPageOptions = {domain_key:Flags.cloudsponge_domain_key, initiallySelectedContacts:!1, beforeDisplayContacts:a._makeCloudSpongeHandler("beforeDisplayContacts", function(a, b, c) {
            a._onContactsDisplayed(b, c)
        }), afterSubmitContacts:a._makeCloudSpongeHandler("afterSubmitContacts", function(a, b, c) {
            a._onCloudSpongeContactsImported(b, c)
        })}, env.isInTest() ? log.debug("Not loading cloudsponge API during testing") : DynamicLoader.get().load({url:"https://api.cloudsponge.com/address_books.js", callback:function() {
            log.debug("Loaded cloudsponge API")
        }})
    }
    var e = TEXTAREA({"class":"generic-input showing email_message", data:a._state.invitedMessageL(), data_type:"text", id:InviteToBetaDialogView.INVITE_MESSAGE_INPUT_ID, tabindex:0, handler:function() {
        e.value = e.value.substr(0, 1E3);
        a._state.setInvitedMessage(e.value);
        return Node.JUST_DEFAULT
    }}, []), d = [P([d]), P({"class":"instructions"}, ["Enter Email Addresses to Invite"]), P([TEXTAREA({"class":"generic-input showing emails", data:a._state.invitedEmailsL(), data_type:"text", id:InviteToBetaDialogView.EMAILS_INPUT_ID, tabindex:0}, [])])], d = d.concat([P({"class":"instructions"}, ["Add a message about how you think they could use Asana"]), P([e])]), d = d.concat([P([TABLE({"class":"footer"}, [TR([TD({"class":"notes"}, ["They will not be able to access any of your workspaces or data. You can separate multiple email addresses with commas."]),
        TD([c])])])])]);
    return DIV(d)
}, _makeCloudSpongeHandler:function(a, b) {
    return host.wrapInExceptionHandler("InviteToBetaDialogView." + a, ExceptionHandler.ReentryStrategy.DELAY, function() {
        var c = $A(arguments);
        if(env.realAppSession().dialogStatesOfType(InviteToBetaDialogState).firstNonNull() !== null) {
            var d = InviteToBetaDialogView._instance;
            View.publicFunction(d, function() {
                processHandler(function() {
                    b.apply(null, concat([d], c))
                })
            })()
        }else {
            log.info("Got CloudSponge callback " + a + " but no invite dialog open.")
        }
    })
}, _createBatchInvites:function(a) {
    env.datastore_manager.enactChange(AsanaInvite.BatchChange.create({email_addresses:a.map(function(a) {
        return EmailAddress.create(a.email(), a.name() !== "" ? a.name() : a.email())
    }), invite_ui_source:this._state.inviteUiSource(), invite_ui_type:InviteToBetaDialogState.inviteUiType(), inviter_nps:env.user().latestNpsOrNull(), invite_message:this._state.invitedMessage(), is_custom_invite_message:this._state.invitedMessage() !== InviteToBetaDialogState.INVITE_MESSAGE}))
}, _makeImportHandler:function(a) {
    var b = this;
    return function() {
        b._state.isImportingContacts() || (logEvent({name:"AsanaInviteDialog-ImportContactsStarted", invite_ui_source:b._state.inviteUiSource(), invite_ui_type:InviteToBetaDialogState.inviteUiType(), inviter_nps:env.user().latestNpsOrNull(), contact_provider:a}), globals.csLaunch ? globals.csLaunch(a) : host.recordWarningOnce("CloudSponge not loaded when user clicked on import button"));
        return Node.STOP
    }
}, _renderImportButtonNotYetImported:function() {
    var a = this, b = [{id:"gmail", title:"Gmail"}, {id:"yahoo", title:"Yahoo"}, {id:"aol", title:"AOL"}, {id:"addressbook", title:"Apple Address Book"}, {id:"windowslive", title:"Windows Live"}].map(function(b) {
        var d = b.id === "gmail" ? function() {
            a._startImportingGoogleContacts()
        } : a._makeImportHandler(b.id);
        return DIV({title:b.title, "class":"import-button import-button-" + b.id, onclick:d, tabindex:0})
    });
    return $rval(function() {
        var c = a._state.isImportingContacts();
        return DIV({id:"invite_cloudsponge_import_section"}, [DIV({"class":"import-table"}, concat([SPAN({"class":"import-label" + (c ? " importing" : "")}, [c ? AsanaHelpers.renderLoadingIndicator(null, null, "Importing...") : "Import your contacts:"])], b))])
    })
}, _renderImportBannerAlreadyImported:function() {
    var a = this;
    return TABLE({}, [TR({}, [TD({"class":"spacer"}, []), TD({"class":"icon check"}, []), TD({}, ["Contacts successfully imported.", A({id:"invite_cloudsponge_import_more_button", onclick:function() {
        a._state.setHasImportedContacts(!1)
    }}, ["Invite more contacts"])])])])
}, _onContactsDisplayed:function(a, b) {
    logEvent({name:"AsanaInviteDialog-ImportContactsDisplayed", invite_ui_source:this._state.inviteUiSource(), invite_ui_type:InviteToBetaDialogState.inviteUiType(), inviter_nps:env.user().latestNpsOrNull(), contact_provider:b, num_contacts:a.size()})
}, _onCloudSpongeContactsImported:function(a, b) {
    this._onContactsImported(a.map(function(a) {
        return EmailAddress.create(a.selectedEmail(), a.fullName())
    }), b)
}, _onContactsImported:View.publicMethod(function(a, b) {
    var c = a.filter(function(a) {
        return!EmailAddress.couldBeAsanaObjectEmail(a.email())
    }).map(function(a) {
            return'"' + a.name() + '" <' + a.email() + ">"
        }).join(", "), d = $(InviteToBetaDialogView.EMAILS_INPUT_ID).value.strip();
    d !== "" && (d += ", ");
    this._state.setInvitedEmails(d + c);
    this._state.setHasImportedContacts(!0);
    logEvent({name:"AsanaInviteDialog-ImportContactsFinished-" + (a.isEmpty() ? "Zero" : "NonZero"), invite_ui_source:this._state.inviteUiSource(), invite_ui_type:InviteToBetaDialogState.inviteUiType(), inviter_nps:env.user().latestNpsOrNull(), contact_provider:b, num_contacts:a.size()})
}), _startImportingGoogleContacts:function() {
    var a = this;
    a._state.isImportingContacts() || (logEvent({name:"AsanaInviteDialog-ImportContactsStarted", invite_ui_source:a._state.inviteUiSource(), invite_ui_type:InviteToBetaDialogState.inviteUiType(), inviter_nps:env.user().latestNpsOrNull(), contact_provider:"gmail"}), a._state.setIsImportingContacts(!0), safeTimeout(function() {
        BrowserGoogleAuth.start(function(b) {
            b !== null ? a._onAuthComplete(b.access_token) : a._onAuthComplete(null)
        })
    }, 0))
}, _onAuthComplete:function(a) {
    var b = this;
    a !== null ? ContactImporterDialogView.getContactsForGoogleUser(a, function(a) {
        b._onContactsRequestComplete(a)
    }) : b._onContactsRequestComplete("")
}, _onContactsRequestComplete:function(a) {
    var b = this;
    b !== InviteToBetaDialogView._instance ? log.debug("Got contact request callback, but view no longer shown") : processHandler(function() {
        b._state.setIsImportingContacts(!1);
        if(a !== "") {
            var c = null;
            try {
                c = JSON.parse(a)
            }catch(d) {
                host.recordWarning("Got exception parsing contacts", d)
            }
            c !== null && (logEvent({name:"AsanaInviteDialog-ImportContactsDisplayed", invite_ui_source:b._state.inviteUiSource(), invite_ui_type:InviteToBetaDialogState.inviteUiType(), inviter_nps:env.user().latestNpsOrNull(), contact_provider:"gmail", num_contacts:c[ContactImporterDialogView.TABS.ALL].size(), num_top_contacts:c[ContactImporterDialogView.TABS.TOP].size()}), ContactImporterDialogView.show({imported_contacts_json:a, on_complete:InviteToBetaDialogView.OnContactsImported.create({}), select_all:!1}))
        }
    })
}});
InviteToBetaDialogView.OnContactsImported = Runnable.subclass("InviteToBetaDialogView.OnContactsImported", {create:attributedValueFunc({}, function() {
    return env.session_store.createStateObject(InviteToBetaDialogView.OnContactsImported, {})
})}, {run:function(a) {
    var b = InviteToBetaDialogView._instance;
    a.isEmpty() || b._onContactsImported(a, "gmail")
}});
__FILE__ = "apps/asana/view/invite_menu_view.js";
InviteMenuView = View.subclass("InviteMenuView", {}, {session:ATTRIBUTE_REQUIRED, dropdown_align:DropdownView.LEFT, _render:function() {
    var a = this, b = function(b) {
        env.user().latestNpsOrNull();
        return View.publicFunction(a, function() {
            InviteToBetaDialogView.show({invited_name:"", invited_email:"", invite_ui_source:b})
        })
    };
    if(ExperimentalFeature.enabled("share_asana_launches_invite_dialog")) {
        return AsanaForms.renderButton({"class":"primary-button blue", label:"Share Asana", onclick:b(Registration.InviteUiSource.SHARE_ASANA_BUTTON)})
    }
    var c = a.session.activeDomain();
    if(c === null) {
        var d = !1
    }else {
        d = a.user.domainUserForDomain(c), d = d.active() && c.isFullyLoaded() && d.isInternal() && !c.isGlobal()
    }
    d && ManageWorkspaceDialogView.touch(c, a.user);
    return a.createView(DropdownMenuView, {id:"invite_menu", include_arrow:!1, label:AsanaForms.renderButton({"class":"primary-button blue", label:"Share Asana", onmousedown:noop}), dropdown_align:a.dropdown_align, menu_items:[!d ? null : {label:"Add Members to the " + c.name() + " Workspace", onselect:View.publicFunction(a, function() {
        ManageWorkspaceDialogView.show({billable_domain_user_group:c, selected_tab:ManageWorkspaceDialogView.TABS.MEMBERS})
    })}, {label:"Invite Friends to Asana", shortcut_nodes:["to create their own workspaces"], onselect:b(Registration.InviteUiSource.LEFT_MENU)}, DropdownMenuView.SEPARATOR, {label:$rval(function() {
        return a.createView(ShareButtonsView, {}).render()
    }), disabled:!0}], onOpen:function() {
        logEvent({name:"AsanaInvitePopup-Opened"})
    }}).render()
}});
__FILE__ = "apps/asana/view/bottom_bar_view.js";
BottomBarView = View.subclass("BottomBarView", {}, {centerPaneView:ATTRIBUTE_REQUIRED, grid_pane_left_x:ATTRIBUTE_REQUIRED, _invite_menu_view:SET_IN_CONSTRUCTOR, constructor:function() {
    BottomBarView.superproto.constructor.apply(this, arguments);
    this._invite_menu_view = this.createView(InviteMenuView, {session:env.realAppSession(), dropdown_align:DropdownView.RIGHT})
}, _render:function() {
    var a = this, b = a.user.showVideosInBottomBar() && !a.user.tourStep();
    return DIV({id:"bottombar_wrapper", "class":b ? "with-videos" : "", style:{left:$rval(function() {
        return $v(a.grid_pane_left_x) - 12
    })}}, [DIV({id:"bottombar_tab"}), DIV({id:"bottombar"}, [b ? a._renderVideoBar() : "", DIV({id:"helpbar"}, [a._renderHelpButton(), SPAN({"class":"invite-link"}, [a._invite_menu_view.render()]), DIV({"class":"bottombar-divider"}, []), a._renderShortcuts()])])])
}, _renderHelpButton:function() {
    var a = this, b = [];
    b.push({label:"Help Center", id:"popout_help_center", onselect:function() {
        window.openAsync("http://help.asana.com/", "help_center", "")
    }});
    a.user.showVideosInBottomBar() || b.push({label:"Help Videos", id:"show_help_videos", onselect:function() {
        a.user.showVideosInBottomBarL().requestSet(!0)
    }});
    b.push({label:"All Keyboard Shortcuts", id:"show_shortcuts_dlg", onselect:function() {
        ShortcutsView.show()
    }});
    return a.createView(DropdownMenuView, {id:"help_menu", additional_class:"bottombar-button", label:"Help", menu_items:b}).render()
}, _renderShortcuts:function() {
    var a = this, b = $rval(function() {
        var b = [];
        (DetailsView.hypertextIsFocusedR().peek() ? [{id:"hypertext_search_button", k:["@"], d:"Link to tasks, people, or projects", shouldShow:!0}] : a.centerPaneView().bottomBarShortcuts()).forEach(function(d) {
            if(d.shouldShow instanceof Function ? d.shouldShow() : d.shouldShow) {
                var e = a._renderShortcut(d);
                d.action ? b.push(A({"class":"shortcut", id:d.id || null, onclick:d.action}, e)) : b.push(SPAN({"class":"shortcut", id:d.id || null}, e))
            }
        });
        b.push(A({id:"more_shortcuts_link", onclick:function() {
            ShortcutsView.show()
        }}, ["more..."]));
        return b
    });
    return SPAN({}, b)
}, _renderShortcut:function(a) {
    return[SPAN({"class":"key-combo"}, Shortcuts.renderKeyCombo(a.k)), SPAN({"class":"key-action"}, [a.d])]
}, _renderVideoBar:function() {
    var a = this, b = function(a, b, e) {
        a = [DIV({"class":"play-icon"}, []), SPAN({"class":"video-major-title"}, [a])];
        b && a.push(SPAN({"class":"video-minor-title"}, [b]));
        return A({"class":"video", onclick:function() {
            AsanaHelpers.playVideoInPopup(e)
        }}, a)
    };
    return DIV({id:"videobar"}, [A({"class":"bottombar-minimize", onclick:function() {
        a.user.showVideosInBottomBarL().requestSet(!1)
    }}, [""]), DIV({"class":"video-column videobar-title"}, ["Videos"]), DIV({"class":"video-column"}, [b("Intro to Asana", "", "intro"), b("Individual Task Management", "", "individual_task_management")]), DIV({"class":"video-column"}, [b("Project Management", "with Asana", "project_management"), b("Getting Your Team Started", "", "getting_your_team_started")]), DIV({"class":"video-column"}, [b("CRM", "with Asana", "crm"), b("Bug Tracking", "with Asana", "bug_tracking")]), DIV({"class":"video-column"},
        [b("Applicant Tracking", "with Asana", "applicant_tracking")])])
}});
__FILE__ = "luna/temp/luna_helpers.js";
LunaHelpers = {relativeUriForEffectivePath:function(a) {
    var b = host.getCurrentUri().path;
    return b[0] === "app" ? "/app/" + b[1] + "/" + toValue(a) : "/" + toValue(a)
}};
__FILE__ = "luna/common/model/oauth_app.js";
OauthApp = StateObject.subclass("OauthApp", [IHasProfileImage], {DEFAULT_ICON_URL_128:"/-/static/apps/asana/media/icon-128.png", property_descs:{owner:{type:User, isWriteableBy:AccessControl.isWriteableOnlyIfNewOrByUser("owner")}, name:{type:String, isWriteableBy:AccessControl.isWriteableOnlyIfNewOrByUser("owner")}, site_url:{type:String, isWriteableBy:AccessControl.isWriteableOnlyIfNewOrByUser("owner")}, secret_key:{type:String, isWriteableBy:AccessControl.isWriteableOnlyIfNewOrByUser("owner")},
    serialized_redirect_urls:{type:String, isWriteableBy:AccessControl.isWriteableOnlyIfNewOrByUser("owner")}, profile_image_version:{type:String, isWriteableBy:AccessControl.isWriteableOnlyIfNewOrByUser("owner")}}, create:attributedValueFunc({owner:ATTRIBUTE_REQUIRED, name:ATTRIBUTE_REQUIRED, site_url:ATTRIBUTE_REQUIRED, redirect_urls:ATTRIBUTE_REQUIRED, secret_key:ATTRIBUTE_OPTIONAL, profile_image_version:null}, function(a) {
    if(!("secret_key" in a)) {
        a.secret_key = Random.id({secure:!0})
    }
    a.serialized_redirect_urls = a.redirect_urls.join("\n");
    delete a.redirect_urls;
    return env.world_store.createStateObject(OauthApp, a)
}), findByOwner:computedPropertyInFirstParam("OAuthApp.findByOwner", function(a) {
    a = QueryBuilder.queryForObjects(OauthApp).where(QueryBuilder.scalarProperty("owner").eq(a)).getQueryRvalue("OAuthApp.findByOwner rvalue").setAsSafelyPeekableByAncestor();
    return $v(a)
}), isValidRedirectUrlFormat:function(a) {
    return typeof a === "string" && Format.VALID_LINK_RE.test(a) && a.indexOf("?") === -1 && a.indexOf("#") === -1
}}, {_computeIsVisibleBy:AccessControl.isVisibleOnlyToUser("owner"), redirectUrls:function() {
    return this.serializedRedirectUrls().split("\n")
}, setRedirectUrls:function(a) {
    return this.setSerializedRedirectUrls(a.join("\n"))
}, isValidRedirectUrl:function(a) {
    return typeof a === "string" && this.redirectUrls().contains(a)
}, setSecretKey:function() {
    ufu("Cannot set directly, use resetSecretKey()")
}, resetSecretKey:function() {
    this.getX("secret_key").requestSet(Random.id({secure:!0}))
}, _profileImageIsVisible:function() {
    return!0
}, _profileImageVersionPropertyName:function() {
    return"profile_image_version"
}});
__FILE__ = "luna/common/model/oauth_app_authorization.js";
OauthAppAuthorization = StateObject.subclass("OauthAppAuthorization", {property_descs:{user:{type:User, isWriteableBy:StateObject.Property.READ_ONLY, preloaded:!0}, app:{type:OauthApp, isWriteableBy:StateObject.Property.READ_ONLY}, scope:{type:String, isWriteableBy:StateObject.Property.READ_ONLY}}, findByUser:computedPropertyInFirstParam("findByUser", function(a) {
    a = QueryBuilder.queryForObjects(OauthAppAuthorization).where(QueryBuilder.scalarProperty("user").eq(a)).getQueryRvalue("findByUser rvalue").setAsSafelyPeekableByAncestor();
    return $v(a)
}), findByUserAndApp:computedPropertyInFirstParam("findByUserAndApp", function(a, b) {
    var c = QueryBuilder.queryForObjects(OauthAppAuthorization).where(QueryBuilder.scalarProperty("user").eq(a), QueryBuilder.scalarProperty("app").eq(b)).allowUnscoped().getQueryRvalue("findByUserAndApp rvalue").setAsSafelyPeekableByAncestor();
    return $v(c).lastValueOrNull()
})}, {_computeIsVisibleBy:AccessControl.isVisibleOnlyToUser("user"), _areTrashPropertiesWriteableBy:function() {
    return!0
}});
__FILE__ = "apps/asana/view/dialog/authorized_apps_view.js";
AuthorizedAppsView = View.subclass("AuthorizedAppsView", {}, {_render:function() {
    var a = OauthAppAuthorization.findByUser(env.user()), b = a.isEmpty() ? [] : env.frp.mapParallel(a, function(a) {
        var b = a.app();
        return DIV({"class":"app-row"}, [DIV({"class":"app-icon"}, [b.hasProfileImage() ? IMG({src:b.profilePhotoUrlSmall()}) : DIV({"class":"icon-client-app-default-small"})]), DIV({"class":"app-name"}, [A({href:b.siteUrl(), target:"_blank"}, [b.name()])]), DIV({"class":"app-deauthorize"}, [A({href:"#", onclick:function() {
            a.trash()
        }}, ["Deauthorize"])])])
    });
    return DIV({"class":"authorized-apps-view"}, [DIV({"class":"message"}, [a.isEmpty() ? "Applications you authorize to interact with your Asana account will appear here." : "You have authorized the following applications to interact with your Asana account."]), DIV({"class":"apps"}, b)])
}});
__FILE__ = "apps/asana/view/dialog/developer_app_edit_view.js";
DeveloperAppEditView = View.subclass("DeveloperAppEditView", {focusableElementId:function(a) {
    return"developer_app_edit_view:" + a
}}, {app:ATTRIBUTE_REQUIRED, name_l:ATTRIBUTE_REQUIRED, redirect_urls_l:ATTRIBUTE_REQUIRED, site_url_l:ATTRIBUTE_REQUIRED, secret_key_r:ATTRIBUTE_REQUIRED, onSubmit:ATTRIBUTE_REQUIRED, onCancel:ATTRIBUTE_REQUIRED, _render:function() {
    var a = this;
    if(a.app !== null) {
        var b = a.createView(PhotoUploadView, {subject:a.app, photo_version_r:a.app.profileImageVersionR(), source:"edit", event_name:"ClientApp-Photo-Uploaded", show_add_icon:!1, add_label:"Add an icon", change_label:"Change icon", clear_label:"Clear icon", image_notes:"Ideal icon size is 128x128, and will be scaled down as appropriate."})
    }
    var c = $rval(function() {
        return{is_valid:$v(a.name_l).length > 0}
    }), d = $rval(function() {
        return{is_valid:Format.VALID_LINK_RE.test($v(a.site_url_l))}
    }), e = $rval(function() {
        return{is_valid:OauthApp.isValidRedirectUrlFormat($v(a.redirect_urls_l))}
    }), f = $rval(function() {
        var b = $v(c).is_valid && $v(d).is_valid && $v(e).is_valid;
        return AsanaForms.renderButton({id:DeveloperAppEditView.focusableElementId("save"), label:"Save", "class":"primary", onclick:b ? function() {
            a.onSubmit()
        } : null, tabindex:0})
    });
    return DIV({"class":"developer-app-edit-view"}, [TABLE({"class":"developer-app-edit-table"}, [a.createView(FormDialogView.SingleFieldRow, {label:"Name", field_name:"name", data_l:a.name_l, data_type:"text", status_x:c, requirement_message:"You must give the application a name."}).render(DeveloperAppEditView.focusableElementId("name")), a.app !== null ? TR({"class":"field"}, [TD({"class":"field-name field-name-icon"}, ["Icon"]), TD({"class":"field-value"}, [DIV({"class":"developer-app-icon-editor"},
        [$rval(function() {
            var c = a.createView(PhotoView, {who:a.app, size:PhotoView.Size.LARGE, show_initials:!1, silhouette_class:"icon-client-app-default-large", show_loading_indicator_r:b.isPhotoUploadingR()}).render();
            c.listen("click", function() {
                b.hidden_file_input !== null && b.hidden_file_input.click()
            });
            return c
        }), $rval(function() {
            return b.render()
        })])])]) : "", a.createView(FormDialogView.SingleFieldRow, {label:"Site Url", field_name:"site-url", data_l:a.site_url_l, data_type:"text", status_x:d, requirement_message:"You must provide a URL for your application."}).render(DeveloperAppEditView.focusableElementId("site_url")), a.createView(FormDialogView.SingleFieldRow, {label:"Redirect Url", field_name:"redirect-url", data_l:a.redirect_urls_l, data_type:"text", status_x:e, requirement_message:"You must provide a redirect URL for Oauth."}).render(DeveloperAppEditView.focusableElementId("redirect_url")),
        a.app !== null ? TR({"class":"field"}, [TD({"class":"field-name"}, [LABEL(["Client ID"])]), TD({"class":"field-value"}, [INPUT({tabindex:-1, id:DeveloperAppEditView.focusableElementId("client_id"), "class":"generic-input showing client-id", readonly:!0, data:a.app.global_id})])]) : "", a.app !== null ? TR({"class":"field"}, [TD({"class":"field-name"}, [LABEL(["Client Secret"])]), TD({"class":"field-value"}, [$rval(function() {
            return INPUT({tabindex:-1, id:DeveloperAppEditView.focusableElementId("secret_key"), "class":"generic-input showing client-secret", readonly:!0, data:$v(a.secret_key_r)})
        })])]) : "", a.app !== null ? TR([TD(), TD({"class":"secret-key-footer"}, [A({onclick:function() {
            a.app.resetSecretKey()
        }}, ["Reset Secret Key"]), Node.NBSP + " Warning! Resetting the secret key will break existing applications using it."])]) : "", TR([TD(), TD({"class":"developer-app-edit-buttons"}, [f, AsanaForms.renderButton({label:"Cancel", id:DeveloperAppEditView.focusableElementId("cancel"), tabindex:0, onclick:function() {
            a.onCancel()
        }})])])])])
}});
__FILE__ = "apps/asana/view/dialog/developer_apps_dialog_view.js";
DeveloperAppsDialogView = DialogView2.subclass("DeveloperAppsDialogView", {State:DialogState.subclass("DeveloperAppsDialogView.State", {registry_name:"DeveloperAppsDialogState", property_descs:{editing_app:{type:OauthApp}, editing_new_app:{type:Boolean}}}, {}), show:attributedFunc({}, function(a) {
    a = update({editing_app:null, editing_new_app:null}, a);
    return DialogView2.show.call(this, a)
})}, {_render:function() {
    var a = this, b = $rval(function() {
        var b = OauthApp.findByOwner(env.user()), b = env.frp.mapParallel(b, function(b) {
            return $rval(function() {
                var c = a._state.editingApp() !== null || a._state.editingNewApp();
                return equals(a._state.editingApp(), b) ? DIV({"class":"app-row app-edit"}, [a._renderEditView(b)]) : DIV({"class":"app-row"}, [DIV({"class":"app-icon"}, [b.hasProfileImage() ? IMG({src:b.profilePhotoUrlSmall()}) : DIV({"class":"icon-client-app-default-small"})]), DIV({"class":"app-name"}, [b.name()]), DIV({"class":"app-edit"}, [c ? "" : A({href:"#", onclick:function() {
                    a._state.setEditingApp(b);
                    env.setFocus(DeveloperAppEditView.focusableElementId("name"));
                    return Node.STOP
                }}, ["Details"])])])
            })
        });
        b.push($rval(function() {
            return a._state.editingNewApp() ? DIV({"class":"app-row new-app-edit"}, [a._renderEditView(null)]) : a._state.editingApp() === null ? DIV({"class":"app-row new-app-edit"}, [A({href:"#", onclick:function() {
                a._state.setEditingNewApp(!0);
                env.setFocus(DeveloperAppEditView.focusableElementId("name"));
                return Node.STOP
            }}, ["+ New Application"])]) : ""
        }));
        return b
    });
    return a.createView(DialogView, {element_id:"developer_apps_dialog_view", flush_body_style:!0, title_x:"Applications", body_x:AsanaHelpers.renderWithinLoadingBoundary("DIV", [$rval(function() {
        var a = $v(b);
        return DIV({"class":"developer-apps-dialog-view"}, [DIV({"class":"message"}, [a.isEmpty() ? "Applications you have created will appear here." : "You are the owner of the following applications:"]), DIV({"class":"apps"}, a)])
    })]), show_header_bottom:!1}).render()
}, _renderEditView:function(a) {
    var b = this;
    return AsanaHelpers.renderWithinLoadingBoundary("DIV", [$rval(function() {
        var c = LocalLvalue.create(a ? a.name() : ""), d = LocalLvalue.create(a ? a.redirectUrls() : ""), e = LocalLvalue.create(a ? a.siteUrl() : "");
        return b.createView(DeveloperAppEditView, {app:a, secret_key_r:a ? a.secretKeyL() : null, name_l:c, redirect_urls_l:d, site_url_l:e, onSubmit:function() {
            b._state.setEditingApp(null);
            b._state.setEditingNewApp(!1);
            a !== null ? (a.setName($v(c)), a.setSiteUrl($v(e)), a.setRedirectUrls([$v(d)])) : a = OauthApp.create({owner:env.user(), name:$v(c), site_url:$v(e), redirect_urls:[$v(d)]})
        }, onCancel:function() {
            b._state.setEditingApp(null);
            b._state.setEditingNewApp(!1)
        }}).render()
    })])
}});
__FILE__ = "apps/asana/view/dialog/photo_upload_view.js";
PhotoUploadView = View.subclass("PhotoUploadView", {UploadStage:{INIT:"init", UPLOADING:"uploading"}, Source:{ACCOUNT_DIALOG:"account_dialog", ATM_HEADER:"atm_header", NUX:"nux", ANNOUNCEMENT:"announcement"}, State:SessionObject2.subclass("PhotoUploadView.State", {property_descs:{upload_stage:{type:String, default_value:"init"}, has_error:{type:Boolean, default_value:!1}}}, {})}, {subject:ATTRIBUTE_REQUIRED, photo_version_r:ATTRIBUTE_REQUIRED, source:ATTRIBUTE_REQUIRED, event_name:"Photo-uploaded",
    show_add_icon:!0, image_notes:null, add_label:"Add a profile photo", change_label:"Change profile photo", clear_label:"Clear photo", photo_file_input:null, _render:function() {
        var a = this;
        a.photo_version_r.peek();
        var b = $v(a.photo_version_r) !== null;
        switch(a._state.uploadStage()) {
            case PhotoUploadView.UploadStage.INIT:
                var c = DIV({"class":"add-picture"}, [a.show_add_icon ? DIV({"class":"add-picture-icon"}, []) : "", DIV({"class":"picture-action-label"}, [b ? a.change_label : a.add_label, DIV({"class":"photo-upload-form"}, [a._renderUploadForm()])])]), d = DIV({"class":"add-picture"}, [DIV({"class":"add-picture-separator"}, ["|"]), DIV({"class":"picture-action-label", onclick:function() {
                    a._removePicture()
                }}, [a.clear_label])]), e = "";
                a._state.hasError() ? e = DIV({"class":"upload-error"}, ["Your upload was not a usable image. Choose a PNG, JPEG, or GIF that's under 5MB and try again."]) : a.image_notes !== null && (e = DIV({"class":"image-notes"}, [a.image_notes]));
                return DIV({id:"edit_photo"}, [c, b ? d : "", e]);
            case PhotoUploadView.UploadStage.UPLOADING:
                return DIV({"class":"loading-text"}, ["Uploading..."])
        }
    }, _removePicture:function() {
        env.datastore_manager.enactChange(RemovePhotoChange.create({subject:this.subject}))
    }, _renderUploadForm:function() {
        var a = this;
        if(env.is_server) {
            return""
        }
        var b = INPUT({tabindex:-1, type:"file", name:"file", title:"", "class":"photo-file-input", onchange:function() {
            forms.getFileFromInput(b) && (a._submitForm(c), a._state.setUploadStage(PhotoUploadView.UploadStage.UPLOADING))
        }, accept:"image/gif,image/png,image/jpeg,image/tiff,image/bmp"}), c = FORM({action:env.is_server ? "" : "https://" + Flags.secure_web_host_port + "/-/photo_upload", method:"post", enctype:"multipart/form-data"}, [b, INPUT({tabindex:-1, type:"hidden", name:Csrf.Params.TICKET, value:Csrf.ticketOnClient()}), INPUT({tabindex:-1, type:"hidden", name:"subject", value:"" + a.subject.global_id}), INPUT({tabindex:-1, type:"hidden", name:"Content-Type", value:""}), INPUT({tabindex:-1, type:"hidden", name:"Content-Disposition",
            value:""})]);
        return c
    }, _submitForm:function(a) {
        var b = this, c = "photo_uploader_" + localUniq(), d = document.createElement("iframe");
        update(d, {"style.width":"0px", "style.height":"0px", "style.border":"0px", src:"about:blank", name:c, id:c, onload:host.wrapInExceptionHandler("photoUpload.onload", ExceptionHandler.ReentryStrategy.ALLOW, function() {
            var a = "PERMISSION DENIED";
            try {
                a = "" + d.contentWindow.location.href
            }catch(c) {
            }
            a !== "about:blank" && (document.body.removeChild(d), b._onUploadComplete(a))
        })});
        document.body.appendChild(d);
        a.target = c;
        a.submit()
    }, _onUploadComplete:function(a) {
        var b = this;
        processHandler(function() {
            var c = URI.parse(a);
            b._state.setHasError(!c.query.containsKey("status") || c.query.get("status") !== "success");
            b._state.setUploadStage(PhotoUploadView.UploadStage.INIT);
            logEvent({name:b.event_name, source:b.source})
        })
    }, isPhotoUploadingR:function() {
        var a = this;
        return $rval(function() {
            return a._state.uploadStage() === PhotoUploadView.UploadStage.UPLOADING
        })
    }});
RemovePhotoChange = define("RemovePhotoChange", Change.subclass("RemovePhotoChange", {}, {subject:ATTRIBUTE_REQUIRED, enact:function() {
    if(env.is_server) {
        var a = this.subject.profileImageVersion();
        this.subject.setProfileImageVersion(null);
        env.remote_job_store.addJob(RemoveProfilePhotoRemoteJob.create({user_id:this.subject.global_id, photo_version:a}))
    }
}, taintedObjectIds:function() {
    return[this.subject.global_id]
}}));
__FILE__ = "apps/asana/view/dialog/update_photo_dialog_view.js";
UpdatePhotoDialogView = DialogView2.subclass("UpdatePhotoDialogView", {DIALOG_ID:"update_photo_dialog", _IS_SINGLETON_DIALOG:!0, State:DialogState.subclass("UpdatePhotoDialogView.State", {property_descs:{who:{type:User}, is_add_picture_promo:{type:Boolean}, source:{type:String}}}, {}), show:attributedFunc({who:void 0, dialog_state_manager:void 0, is_add_picture_promo:!1, source:ATTRIBUTE_REQUIRED, onclose_runnable:null}, function(a) {
    if(a.who === void 0) {
        a.who = env.user()
    }
    env.user() !== a.who && ufu("Setting a photo for another user is not implemented yet, need to update the luna dispatcher endpoint first.");
    return UpdatePhotoDialogView.superclass.show.call(this, a)
})}, {_title:function() {
    return this._state.isAddPicturePromo() ? "Add a profile photo" : "Edit profile photo"
}, _body:function() {
    var a = this, b = DIV({"class":"intro-text"}, ["Add your photo to Asana now, or edit your photo anytime in the Account Settings dialog."]), c = a.createView(PhotoUploadView, {subject:a._state.who(), photo_version_r:a._state.who().profilePhotoVersionR(), source:a._state.source()}), d = a.createView(PhotoView, {who:a._state.who(), size:PhotoView.Size.LARGE, show_initials:!1, show_loading_indicator_r:c.isPhotoUploadingR()}).render(), d = DIV({"class":"edit-photo"}, [d, DIV({"class":"text-column"},
        [DIV({"class":"name"}, [a._state.who().name()]), DIV({"class":"upload-form"}, [$rval(function() {
            return c.render()
        })]), AsanaForms.renderButton({label:"Done Editing", onclick:function() {
            a._state.hide()
        }, "class":"primary", id:"update_photo_submit", tabindex:0})])]);
    return DIV([a._state.isAddPicturePromo() ? b : "", d])
}, _render:function() {
    return this.createView(DialogView, {element_id:UpdatePhotoDialogView.DIALOG_ID, title_x:this._title(), body_x:this._body()}).render()
}});
__FILE__ = "apps/asana/view/widgets/photo_view.js";
PhotoView = View.subclass("PhotoView", {InitialsStyle:{NORMAL:"normal", REVERSED:"reversed"}, Size:{SMALL:"small", MEDIUM:"medium", LARGE:"large", NOTIFICATION_FEED:"inbox-size"}, ClickHandler:{navigate:function() {
    env.app_interfaces.get(INavigator).navigateTo(this.who)
}, setPhoto:function() {
    UpdatePhotoDialogView.show({is_add_picture_promo:!0, who:this.who, source:PhotoUploadView.Source.ATM_HEADER});
    return Node.STOP
}}}, {who:ATTRIBUTE_REQUIRED, domain_user:null, size:ATTRIBUTE_REQUIRED, show_initials:ATTRIBUTE_REQUIRED, show_tooltip:!1, initials_style:"normal", silhouette_class:null, onClick:null, show_loading_indicator_r:null, constructor:function(a) {
    if(a.view_name === void 0) {
        a.view_name = this.__type_name + "." + a.who.global_id
    }
    PhotoView.superproto.constructor.call(this, a);
    assert(this.who.isImplOf(IHasProfileImage))
}, _isPhotoAvailable:function() {
    var a = toValueAllowingUnknown(this.who.profileImageVersionR());
    return isKnown(a) && a !== null
}, _tooltip:function() {
    return this.show_tooltip ? this.onClick === PhotoView.ClickHandler.setPhoto ? "Edit Photo" : this.who.isImplOf(IDescribable) ? this.who.describe() : null : null
}, _render:function() {
    var a = this, b = {"class":"photo-view" + (a.onClick ? " clickable" : ""), onclick:function() {
        return a.onClick ? a.onClick() : void 0
    }, tooltip:a._tooltip()}, b = DIV(b, [a._renderPhoto()]);
    b.subject = a.who.global_id;
    return b
}, _renderPhoto:function() {
    if(this._isPhotoAvailable()) {
        return this._photoFrame(IMG({"class":"profile-photo", src:this._photoUrl()}))
    }else {
        if(this.show_initials) {
            var a = this.who.name().trim().split(" "), b = this.domain_user.colorForInitials(), a = a[0][0] + (a.length > 1 ? a.last()[0] : "");
            return DIV({"class":"initials " + this.size + " color-" + b + " " + this.initials_style}, [ABBR({"class":"initials-text"}, [a])])
        }else {
            return this.silhouette_class !== null ? DIV({"class":this.silhouette_class}) : this._photoFrame(DIV({"class":"profile-photo-silhouette"}, []))
        }
    }
}, _photoUrl:function() {
    switch(this.size) {
        case PhotoView.Size.SMALL:
            return this.who.profilePhotoUrlSmall();
        case PhotoView.Size.MEDIUM:
            return this.who.profilePhotoUrlMedium();
        case PhotoView.Size.LARGE:
            return this.who.profilePhotoUrlLarge();
        case PhotoView.Size.NOTIFICATION_FEED:
            return this.who.profilePhotoUrlInbox()
    }
}, _photoFrame:function(a) {
    var b = this, c = b.show_loading_indicator_r !== null ? DIV({"class":"profile-photo-frame " + this.size + " loading", style:$rval(function() {
        if(!$v(b.show_loading_indicator_r)) {
            return"display: none;"
        }
        return""
    })}, [AsanaHelpers.renderLoadingIndicator("")]) : "";
    return DIV({"class":"profile-photo-frame " + this.size}, [c, a])
}});
__FILE__ = "3rdparty/node-zoneinfo/countrycodes.js";
COUNTRY_CODES = {Afghanistan:"AF", "\u00c5Land Islands":"AX", Albania:"AL", Algeria:"DZ", "American Samoa":"AS", Andorra:"AD", Angola:"AO", Anguilla:"AI", Antarctica:"AQ", "Antigua And Barbuda":"AG", Argentina:"AR", Armenia:"AM", Aruba:"AW", Australia:"AU", Austria:"AT", Azerbaijan:"AZ", Bahamas:"BS", Bahrain:"BH", Bangladesh:"BD", Barbados:"BB", Belarus:"BY", Belgium:"BE", Belize:"BZ", Benin:"BJ", Bermuda:"BM", Bhutan:"BT", "Bolivia, Plurinational State Of":"BO", "Bosnia And Herzegovina":"BA", Botswana:"BW",
    "Bouvet Island":"BV", Brazil:"BR", "British Indian Ocean Territory":"IO", "Brunei Darussalam":"BN", Bulgaria:"BG", "Burkina Faso":"BF", Burundi:"BI", Cambodia:"KH", Cameroon:"CM", Canada:"CA", "Cape Verde":"CV", "Cayman Islands":"KY", "Central African Republic":"CF", Chad:"TD", Chile:"CL", China:"CN", "Christmas Island":"CX", "Cocos (Keeling) Islands":"CC", Colombia:"CO", Comoros:"KM", Congo:"CG", "Congo, The Democratic Republic Of The":"CD", "Cook Islands":"CK", "Costa Rica":"CR", "C\u00d4Te D'Ivoire":"CI",
    Croatia:"HR", Cuba:"CU", Cyprus:"CY", "Czech Republic":"CZ", Denmark:"DK", Djibouti:"DJ", Dominica:"DM", "Dominican Republic":"DO", Ecuador:"EC", Egypt:"EG", "El Salvador":"SV", "Equatorial Guinea":"GQ", Eritrea:"ER", Estonia:"EE", Ethiopia:"ET", "Falkland Islands (Malvinas)":"FK", "Faroe Islands":"FO", Fiji:"FJ", Finland:"FI", France:"FR", "French Guiana":"GF", "French Polynesia":"PF", "French Southern Territories":"TF", Gabon:"GA", Gambia:"GM", Georgia:"GE", Germany:"DE", Ghana:"GH", Gibraltar:"GI",
    Greece:"GR", Greenland:"GL", Grenada:"GD", Guadeloupe:"GP", Guam:"GU", Guatemala:"GT", Guernsey:"GG", Guinea:"GN", "Guinea-Bissau":"GW", Guyana:"GY", Haiti:"HT", "Heard Island And Mcdonald Islands":"HM", "Holy See (Vatican City State)":"VA", Honduras:"HN", "Hong Kong":"HK", Hungary:"HU", Iceland:"IS", India:"IN", Indonesia:"ID", "Iran, Islamic Republic Of":"IR", Iraq:"IQ", Ireland:"IE", "Isle Of Man":"IM", Israel:"IL", Italy:"IT", Jamaica:"JM", Japan:"JP", Jersey:"JE", Jordan:"JO", Kazakhstan:"KZ",
    Kenya:"KE", Kiribati:"KI", "Korea, Democratic People'S Republic Of":"KP", "Korea, Republic Of":"KR", Kuwait:"KW", Kyrgyzstan:"KG", "Lao People'S Democratic Republic":"LA", Latvia:"LV", Lebanon:"LB", Lesotho:"LS", Liberia:"LR", "Libyan Arab Jamahiriya":"LY", Liechtenstein:"LI", Lithuania:"LT", Luxembourg:"LU", Macao:"MO", "Macedonia, The Former Yugoslav Republic Of":"MK", Madagascar:"MG", Malawi:"MW", Malaysia:"MY", Maldives:"MV", Mali:"ML", Malta:"MT", "Marshall Islands":"MH", Martinique:"MQ", Mauritania:"MR",
    Mauritius:"MU", Mayotte:"YT", Mexico:"MX", "Micronesia, Federated States Of":"FM", "Moldova, Republic Of":"MD", Monaco:"MC", Mongolia:"MN", Montenegro:"ME", Montserrat:"MS", Morocco:"MA", Mozambique:"MZ", Myanmar:"MM", Namibia:"NA", Nauru:"NR", Nepal:"NP", Netherlands:"NL", "Netherlands Antilles":"AN", "New Caledonia":"NC", "New Zealand":"NZ", Nicaragua:"NI", Niger:"NE", Nigeria:"NG", Niue:"NU", "Norfolk Island":"NF", "Northern Mariana Islands":"MP", Norway:"NO", Oman:"OM", Pakistan:"PK", Palau:"PW",
    "Palestinian Territory, Occupied":"PS", Panama:"PA", "Papua New Guinea":"PG", Paraguay:"PY", Peru:"PE", Philippines:"PH", Pitcairn:"PN", Poland:"PL", Portugal:"PT", "Puerto Rico":"PR", Qatar:"QA", "R\u00e9union":"RE", Romania:"RO", "Russian Federation":"RU", Rwanda:"RW", "Saint Barth\u00e9lemy":"BL", "Saint Helena, Ascension And Tristan Da Cunha":"SH", "Saint Kitts And Nevis":"KN", "Saint Lucia":"LC", "Saint Martin":"MF", "Saint Pierre And Miquelon":"PM", "Saint Vincent And The Grenadines":"VC",
    Samoa:"WS", "San Marino":"SM", "Sao Tome And Principe":"ST", "Saudi Arabia":"SA", Senegal:"SN", Serbia:"RS", Seychelles:"SC", "Sierra Leone":"SL", Singapore:"SG", Slovakia:"SK", Slovenia:"SI", "Solomon Islands":"SB", Somalia:"SO", "South Africa":"ZA", "South Georgia And The South Sandwich Islands":"GS", Spain:"ES", "Sri Lanka":"LK", Sudan:"SD", Suriname:"SR", "Svalbard And Jan Mayen":"SJ", Swaziland:"SZ", Sweden:"SE", Switzerland:"CH", "Syrian Arab Republic":"SY", "Taiwan, Province Of China":"TW",
    Tajikistan:"TJ", "Tanzania, United Republic Of":"TZ", Thailand:"TH", "Timor-Leste":"TL", Togo:"TG", Tokelau:"TK", Tonga:"TO", "Trinidad And Tobago":"TT", Tunisia:"TN", Turkey:"TR", Turkmenistan:"TM", "Turks And Caicos Islands":"TC", Tuvalu:"TV", Uganda:"UG", Ukraine:"UA", "United Arab Emirates":"AE", "United Kingdom":"GB", "United States":"US", "United States Minor Outlying Islands":"UM", Uruguay:"UY", Uzbekistan:"UZ", Vanuatu:"VU", "Venezuela, Bolivarian Republic Of":"VE", "Viet Nam":"VN", "Virgin Islands, British":"VG",
    "Virgin Islands, U.S.":"VI", "Wallis And Futuna":"WF", "Western Sahara":"EH", Yemen:"YE", Zambia:"ZM", Zimbabwe:"ZW"};
COUNTRY_NAMES = {};
for(var country_name in COUNTRY_CODES) {
    COUNTRY_NAMES[COUNTRY_CODES[country_name]] = country_name
}
__FILE__ = "apps/asana/view/dialog/account_dialog_view.js";
AccountDialogView = FormDialogView.subclass("AccountDialogView", {State:AccountDialogState, show:attributedFunc({user:void 0, selected_tab:void 0, dialog_state_manager:void 0, onclose_runnable:null}, function(a) {
    if(a.user === void 0) {
        a.user = env.user()
    }
    if(a.selected_tab === void 0) {
        a.selected_tab = AccountDialogTabs.PROFILE
    }
    return AccountDialogView.superclass.show.call(this, {name:a.user.name(), email:a.user.email(), password_status:AccountDialogState.UpdateStatus.VISIBLE, email_status:AccountDialogState.UpdateStatus.VISIBLE, selected_tab:a.selected_tab, email_verification_resent:!1, adding_email_for_domain:null, email_verification_resent_for_domain:null, new_email:"", dialog_state_manager:a.dialog_state_manager, onclose_runnable:a.onclose_runnable, local_timezone:a.user.localTimezone(), country_code:a.user.countryCode()})
}), name_element_id:"account_dialog_view.name", new_email_element_id:"account_dialog_view.new_email", current_password_element_id:"account_dialog_view.current_password", ADD_NEW_EMAIL:"ADD_NEW_EMAIL", MIN_PASSWORD_LENGTH:6, touch:function() {
    var a = env.user();
    env.user().email();
    env.world_store.peekStateObjectProperties([a], ["password_state", "email_verification_workflow", "local_timezone", "country_code"]);
    a = a.getV("email_verification_workflow");
    a !== null && env.world_store.peekXvaluesAndStateObjectScalars([a.getX("new_email"), a.getX("expires_at")], [])
}, ensureAndSelectApiKey:function() {
    env.datastore_manager.enactChange(AccountDialogView.EnsureApiSettingsExistChangeObject.create({}));
    env.setFocus("api_key");
    env.setSelectionForFocusedElement(-1, -1)
}}, {dialog_name:"account_dialog", defaultFocusAndSelection:function() {
    return{focused_element_id:"form_view:account_dialog_field:name"}
}, constructor:function(a) {
    AccountDialogView.superproto.constructor.call(this, a);
    this.current_password_lvalue = LocalLvalue.create("");
    this.password_lvalue = LocalLvalue.create("");
    this.confirm_password_lvalue = LocalLvalue.create("")
}, _render:function() {
    var a = this, b = a._state.passwordStatus(), c = a._state.emailStatus(), d = function(a) {
        if(a === AccountDialogState.UpdateStatus.HIDDEN || a === AccountDialogState.UpdateStatus.PENDING || a === AccountDialogState.UpdateStatus.ADDING_NEW || a === AccountDialogState.UpdateStatus.VISIBLE) {
            return null
        }
        return a
    }, e = env.user(), f = null;
    switch(e.passwordState()) {
        case User.PasswordState.OK:
            ;
        case User.PasswordState.NOT_SET_GOOGLE_AUTH:
            !Format.EMAIL_RE.test(e.email()) && c === AccountDialogState.UpdateStatus.VISIBLE && (f = "You win!  This is a very rare error message, and you have found it.  Anyway, we need you to set your email address to something valid");
            break;
        case User.PasswordState.NEVER_SET_NEW_USER:
            f = "Your password was never set when your account was created.  It's probably our fault. Either way, we need you to set a new password now.";
            break;
        case User.PasswordState.NEVER_SET_OLD_USER:
            f = "Asana just added the ability to log in with password and email. Please verify your email address and set a password.";
            break;
        case User.PasswordState.RESET_BY_OTK:
            f = "You logged in from a Forgot-My-Password link.  Please set a new password.";
            break;
        default:
            ufu("User password state is invalid.")
    }
    var g = [{value:AccountDialogTabs.PROFILE, display_name:"Profile", class_name:"profile", renderContents:function() {
        return a._renderProfileTab()
    }, onSelected:function() {
        env.setFocus(a.focusableElementId("name"))
    }}, {value:AccountDialogTabs.EMAIL_NOTIFICATIONS, display_name:Vocab.Email_Messages, class_name:"email_notifications", renderContents:function() {
        return a._renderEmailNotificationsTab()
    }}, {value:AccountDialogTabs.EMAIL_DROPBOX, display_name:"Email Dropbox", class_name:"email_dropbox", renderContents:function() {
        return a._renderEmailDropboxTab()
    }}];
    e.passwordState() !== User.PasswordState.NOT_SET_GOOGLE_AUTH && g.push({value:AccountDialogTabs.PASSWORD, display_name:"Password", class_name:"password", renderContents:function() {
        return a._renderPasswordTab()
    }, onSelected:function() {
        env.setFocus(a.focusableElementId("current-password"))
    }});
    Flags.enable_oauth && g.push({value:AccountDialogTabs.APPS, display_name:"Apps", class_name:"apps", renderContents:function() {
        return a._renderAppsTab()
    }});
    Flags.enable_rest_api && g.push({value:AccountDialogTabs.API, display_name:"API", class_name:"api", renderContents:function() {
        return a._renderApiTab()
    }, onSelected:function() {
        AccountDialogView.ensureAndSelectApiKey()
    }});
    var h = a.createView(TabView, {selected_tab_l:this._state.selectedTabL(), tab_configs:g}), e = function() {
        var e = d(c) || d(b);
        if(e) {
            return a._renderErrorBanner(e)
        }
        return null
    }(), e = e !== null ? e : a._renderExistingEmailVerificationWorkflowBanner();
    return a.createView(DialogView, {element_id:a.dialog_name, key_map:[], flush_body_style:!0, title_x:"Account Settings", tab_view:h, banner_x:e, top_message_x:f, body_x:AsanaHelpers.renderWithinLoadingBoundary("DIV", [$rval(function() {
        return h.renderSelectedTabContents()
    })])}).render()
}, _renderErrorBanner:function(a) {
    return TABLE({}, [TR({}, [TD({"class":"spacer"}, []), TD({"class":"icon error"}, []), TD({}, [a])])])
}, _renderProfileTab:function() {
    var a = this, b = a._nameFieldStatusR(), c = function() {
        env.user().setName(a._state.name());
        env.user().setLocalTimezone(a._state.localTimezone());
        env.user().setCountryCode(a._state.countryCode());
        a._state.hide()
    }, d = $rval(function() {
        return $v(b).is_valid === !0
    }), e = $rval(function() {
        return AsanaForms.renderButton({label:"Update Profile", onclick:$v(d) ? c : null, "class":"primary", id:"account_settings_submit", tabindex:0})
    }), f = a.createView(PhotoUploadView, {subject:env.user(), photo_version_r:env.user().profilePhotoVersionR(), source:PhotoUploadView.Source.ACCOUNT_DIALOG}), g = a.createView(PhotoView, {who:env.user(), size:PhotoView.Size.LARGE, show_initials:!1, show_loading_indicator_r:f.isPhotoUploadingR()}).render(), g = [TR([TD({"class":"profile-row left"}, [g]), TD({"class":"profile-row right"}, [DIV({"class":"name-input"}, [INPUT({"class":"generic-input showing name", data:a._state.nameL(), data_type:"text",
        id:"form_view:" + a.dialog_name + "_field:name"}, [])]), $rval(function() {
        return f.render()
    })])])], h = "", h = "";
    Flags.enable_timezones && (h = a.createView(FormDialogView.SingleFieldRow, {label:"Country", field_name:"country", data_l:a._state.countryCodeL(), data_type:"enum", enum_options:COUNTRY_NAMES}), g.push(h), h = a.createView(FormDialogView.SingleFieldRow, {label:"Time Zone", field_name:"timezone", data_l:a._state.localTimezoneL(), data_type:"enum", enum_options:a._state.timezoneOptions(), requirement_message:"Please enter a timezone"}), g.push(h));
    g.push(TR([TD(), TD([e])]));
    return DIV({"class":"profile-preferences", key_map:[{key:"ENTER", handler:function() {
        $v(d) && c()
    }}]}, [a._renderBody(g)])
}, _nameFieldStatusR:function() {
    var a = this, b = env.isElementIdFocusedR(a.focusableElementId("name"));
    return $rval(function() {
        var c = a._state.name().trim() !== "", d = $v(b);
        return{is_valid:c, is_marked:!c && !d}
    }, "AccountDialogView.nameStatus")
}, _renderEmailNotificationsTab:function() {
    var a = this, b = $v(env.user().activeDomainUsersR()), c = !ExperimentalFeature.enabled("inbox_holdback"), b = b.map(function(b) {
        return TR([TD({"class":"workspace-name"}, [MochiKit.Text.truncate(b.domain().name(), 25, "...")]), TD({"class":"notification-email"}, [a._renderNotificationEmailInput(b)]), TD({"class":"summary-email-preference"}, [a._renderSummaryEmailCheckbox(b, c ? "" : "Send daily summary")]), c ? TD({"class":"notification-email-preference"}, [a._renderNotificationEmailCheckbox(b)]) : ""])
    });
    c && (b = [TR([TH(), TH(), TH({tooltip:"Daily summary emails"}, ["Reminders"]), TH({tooltip:"Updates on tasks and projects you are following"}, ["Activity"])])].concat(b));
    return DIV([DIV({"class":"notification-email-preferences"}, [DIV({"class":"message"}, [c ? "Asana can send activity messages and daily reminders to any email address you choose. Set your preferences here." : "You can set a different email address to receive task notifications for each of your workspaces"]), TABLE({"class":"email-preferences"}, b), a._renderAddEmail()])])
}, _renderEmailDropboxTab:function() {
    var a = this, b = env.user(), c = $v(b.activeDomainUsersR());
    return DIV({"class":"email-dropbox-preferences"}, [DIV({"class":"message"}, ["You can create new tasks by emailing x@mail.asana.com from any email address associated with Asana. Tasks will appear in the Assigned to Me section of the workspace selected below. ", A({href:"http://help.asana.com/customer/portal/articles/70256-can-i-create-tasks-from-email-", target:"_blank"}, ["Learn more \u00bb"])]), TABLE({"class":"email-preferences"}, concat([TR([TH({"class":"task-creation-email"}, ["Emails sent from"]),
        TH({"class":"workspace"}, ["create tasks in"])])], b.verifiedEmails().map(function(b) {
        return TR([TD({"class":"task-creation-email"}, [b.email()]), TD({"class":"workspace"}, [a._renderTaskCreationEmailInput(c, b)])])
    }))), a._renderAddEmail()])
}, _renderPasswordTab:function() {
    var a = this, b = a._state.passwordStatusL(), c = a._state.passwordStatus(), d = a._passwordFieldStatuses(), e = [d.current, d["new"], d.confirm], f = c === AccountDialogState.UpdateStatus.PENDING, g = $rval(function() {
        return null === e.find(function(a) {
            return $v(a).is_valid === !1
        }) && !f && $v(a.password_lvalue) !== ""
    }), h = function() {
        $v(a.password_lvalue) !== "" ? env.user().setPassword($v(a.password_lvalue), $v(a.current_password_lvalue), b) : a.hide()
    }, c = $rval(function() {
        return AsanaForms.renderButton({label:f ? "Saving..." : "Change Password", onclick:$v(g) ? h : null, id:"account_settings_submit", "class":"primary", tabindex:0})
    });
    return DIV({"class":"password-preferences", key_map:[{key:"ENTER", handler:function() {
        $v(g) && h()
    }}]}, [a._renderBody(concat(a._passwordRows(d), [TR([TD(), TD([c])])]))])
}, _passwordFieldStatuses:function() {
    var a = this, b = env.user().passwordState(), c = env.isElementIdFocusedR(a.focusableElementId("current-password")), d = $rval(function() {
        var d = b !== User.PasswordState.OK || !a._isEmailNew() && $v(a.password_lvalue) === "" || $v(a.current_password_lvalue) !== "", e = $v(c);
        return{is_valid:d, is_marked:!d && !e}
    }, "AccountDialogView.newPasswordStatus"), e = env.isElementIdFocusedR(a.focusableElementId("new-password")), f = $rval(function() {
        var c = $v(a.password_lvalue), d = $v(e), f = c.length === 0 && b === User.PasswordState.OK || c.length >= AccountDialogView.MIN_PASSWORD_LENGTH;
        return{is_valid:f, is_marked:!f && !d && c.length > 0}
    }, "AccountDialogView.newPasswordStatus"), g = env.isElementIdFocusedR(a.focusableElementId("confirm-password")), h = $rval(function() {
        var b = $v(a.password_lvalue), c = $v(a.confirm_password_lvalue), d = $v(g);
        return{is_valid:b === c, is_marked:(b.length > 0 || c.length > 0) && !(d || $v(e)) && !$v(f).is_marked}
    }, "AccountDialogView.confirmPasswordStatus");
    return{current:d, "new":f, confirm:h}
}, _passwordRows:function(a) {
    var b = "Confirm" + Node.NBSP + "New" + Node.NBSP + "Password";
    return concat(env.user().passwordState() === User.PasswordState.OK ? [this.createView(FormDialogView.SingleFieldRow, {label:"Current Password", field_name:"current-password", data_l:this.current_password_lvalue, data_type:"password", requirement_message:"Must specify current password to save changes.", status_x:a.current})] : [], [this.createView(FormDialogView.SingleFieldRow, {label:"New Password", field_name:"new-password", data_l:this.password_lvalue, data_type:"password", requirement_message:"Minimum of " +
        AccountDialogView.MIN_PASSWORD_LENGTH + " characters.", status_x:a["new"]}), this.createView(FormDialogView.SingleFieldRow, {label:b, field_name:"confirm-password", data_l:this.confirm_password_lvalue, data_type:"password", requirement_message:"Passwords must match.", status_x:a.confirm})])
}, _renderApiTab:function() {
    var a = this, b = env.user().apiSettings();
    if(!b) {
        return UnknownValue.Loading.create(null, null)
    }
    return DIV({}, [DIV({"class":"message api-key"}, ["Asana has an API which allows integration with external applications. You will need this key for authentication. " + Node.NBSP, A({href:"http://developer.asana.com", target:"_blank"}, ["Learn more \u00bb"])]), TABLE([TR([TD({"class":"field-name api-key"}, [LABEL(["API Key:"])]), TD([INPUT({id:"api_key", "class":"generic-input showing api-key", readonly:!0, data:b.apiKey()})])]), TR([TD(), TD({"class":"api-key-footer"}, [A({onclick:function() {
        b && b.trash();
        AccountDialogView.ensureAndSelectApiKey()
    }}, ["Reset Key"]), Node.NBSP + " Warning! Resetting the key will break existing applications using it."])])]), Flags.enable_oauth ? DIV({"class":"message api-apps-description"}, [A({href:"#", onclick:function() {
        a.hide();
        DeveloperAppsDialogView.show({})
    }}, ["Register and manage your applications"])]) : ""])
}, _renderAppsTab:function() {
    return this.createView(AuthorizedAppsView, {}).render()
}, _isEmailNew:function() {
    return this._state.email() !== env.user().email()
}, _renderSummaryEmailCheckbox:function(a, b) {
    var c = a.summaryEmailPreferenceL(), d = function() {
        $v(c) === DomainUser.SUMMARY_EMAIL_PREFERENCES.DAILY ? c.requestSet(DomainUser.SUMMARY_EMAIL_PREFERENCES.NONE) : c.requestSet(DomainUser.SUMMARY_EMAIL_PREFERENCES.DAILY)
    }, e = SPAN({id:"summary-email-preference-" + a.global_id, "class":$rval(function() {
        var a = ["checkbox"];
        $v(c) === DomainUser.SUMMARY_EMAIL_PREFERENCES.DAILY && a.push("checked");
        return a.join(" ")
    }), onclick:d}, [Node.NBSP]), d = b ? LABEL({"for":e, onclick:d}, [b]) : "";
    return SPAN({"class":"summary-email-preference"}, [e, d])
}, _renderNotificationEmailCheckbox:function(a) {
    var b = SPAN({id:"notification-email-preference-" + a.global_id, onclick:function() {
        var b = a.sendNotificationEmails();
        a.setSendNotificationEmails(!b)
    }, "class":$rval(function() {
        return"checkbox" + (a.sendNotificationEmails() ? " checked" : "")
    })}, [Node.NBSP]);
    return SPAN({"class":"notification-email-preference"}, [b])
}, _renderNotificationEmailInput:function(a) {
    var b = a.notificationVerifiedEmail(), c = SELECT({id:"notification-email-" + a.global_id, data:JavascriptLvalue.create(function() {
        return b
    }, function(b) {
        b = parseInt(b, 10);
        b = b !== 0 ? env.world_store.objectWithoutAC(b) : null;
        a.setNotificationVerifiedEmail(b)
    }, "notification_email_preference"), data_type:"enum"}), d = a.domain().network(), e = d === null ? a.user().verifiedEmails() : a.user().verifiedEmailsForNetwork(d), f = b === null && (d === null || d.ownsEmail(a.user().email())), g = b === null && !f;
    e.forEach(function(d, e) {
        var j = d.email();
        if(!env.is_server) {
            var l = d === b || f && d.email() === a.user().email() || g && e === 0;
            c.options.add(new Option(MochiKit.Text.truncate(j, 23, "..."), d.global_id, !1, l))
        }
    });
    return c
}, _renderTaskCreationEmailInput:function(a, b) {
    env.user();
    var c = b.taskCreationDomainUser(), d = SELECT({id:"task-creation-domain-" + b.global_id, data:JavascriptLvalue.create(function() {
        return c ? c.global_id : 0
    }, function(a) {
        a = parseInt(a, 10);
        a = a !== 0 ? env.world_store.objectWithoutAC(a) : null;
        b.setTaskCreationDomainUser(a)
    }, "notification_email_preference"), data_type:"enum"});
    env.is_server || d.options.add(new Option("---", 0, !1, c === null));
    a.forEach(function(a) {
        var f = a.domain().network();
        if(f === null || f.ownsEmail(b.email())) {
            var f = a.global_id, g = a === c;
            env.is_server || d.options.add(new Option(a.domain().name(), f, !1, g))
        }
    });
    return d
}, _renderNewEmailVerification:function(a) {
    var b = this, c = a.domainUser().domain(), d = b._state.getV("email_verification_resent_for_domain") === c;
    return DIV({"class":"email-verification-notes"}, concat(["You've recently added ", SPAN({"class":"email"}, [a.newEmail()]), " as your notification email address for " + c.name() + "."], d ? [] : ["Please click the verification link we sent to complete the change. Can't find the link? ", A({onclick:function() {
        a.broadcast();
        b._state.emailVerificationResentForDomainL().requestSet(c)
    }}, ["Resend email"])]))
}, _renderAddEmail:function() {
    var a = this, b, c = a._state.emailStatus(), d = c === AccountDialogState.UpdateStatus.PENDING;
    if(d || c === AccountDialogState.UpdateStatus.ADDING_NEW) {
        var e = env.isElementIdFocusedR(a.focusableElementId("new-email")), f = $rval(function() {
            var b = a._state.newEmail(), b = b === "" || Format.testEmailInput(b), c = $v(e);
            return{is_valid:b, is_marked:!b && !c}
        }, "AccountDialogView.emailStatus"), g = env.isElementIdFocusedR(a.focusableElementId("current-password")), h = $rval(function() {
            var b = (a._state.newEmail() === "" || $v(e) || $v(a.current_password_lvalue) !== "") && c !== AccountDialogState.UpdateStatus.EMAIL_IN_USE && c !== AccountDialogState.UpdateStatus.EMAIL_ALREADY_ADDED, d = $v(g);
            return{is_valid:b, is_marked:!b && !d}
        }, "AccountDialogView.newPasswordStatus"), i = function() {
            var b = EmailChange.create({user:env.user(), current_password:$v(a.current_password_lvalue), status_lvalue_pointer:Pointer.create(a._state.emailStatusL()), new_email:Format.sanitizeEmailInput(a._state.newEmail())});
            env.datastore_manager.enactChange(b);
            a.current_password_lvalue.requestSet("");
            a._state.newEmailL().requestSet("");
            a._state.setEmailStatus(AccountDialogState.UpdateStatus.PENDING)
        }, j = $rval(function() {
            return $v(f).is_valid && $v(h).is_valid && a._state.newEmail() !== "" && $v(a.current_password_lvalue) !== ""
        });
        b = $rval(function() {
            return AsanaForms.renderButton({label:d ? "Saving..." : "Add New Email", onclick:$v(j) ? i : null, id:"add_new_email_submit", "class":"primary", tabindex:0})
        });
        var l = c === AccountDialogState.UpdateStatus.ADDING_NEW ? "Please enter a valid email address." : c;
        b = DIV({key_map:[{key:"ENTER", handler:function() {
            $v(j) && i()
        }}]}, [DIV({"class":"message"}, ["Note: When you add a new email, people who know one of your email ", "addresses can discover the email address you use for ", "Personal Projects"]), DIV({"class":"new-email-form"}, [a._renderBody([a.createView(FormDialogView.SingleFieldRow, {label:"New Email Address", field_name:"new-email", data_l:a._state.newEmailL(), data_type:"text", requirement_message:l, status_x:f}), TR([TD(), TD({"class":"password-message"}, ["Please type your Asana password to confirm this change.",
            BR(), BR(), "If you do not have a password, ", A({href:"/-/forgot_password"}, ["request one here."])])]), a.createView(FormDialogView.SingleFieldRow, {label:"Password", field_name:"current-password", data_l:a.current_password_lvalue, data_type:"password", requirement_message:"Please enter your password", status_x:h}), TR([TD(), TD([b])])])])])
    }else {
        b = A({"class":"add-new-email-link", onclick:function() {
            a._state.setEmailStatus(AccountDialogState.UpdateStatus.ADDING_NEW);
            env.setFocus("form_view:account_dialog_field:new-email")
        }}, ["+ Add New Email..."])
    }
    return DIV({"class":"add-new-email"}, [b])
}, _renderExistingEmailVerificationWorkflowBanner:function() {
    var a = this;
    if(AccountDialogState.hasEmailVerificationWorkflow()) {
        var b = env.user().emailVerificationWorkflow(), c = a._state.emailVerificationResent(), d = A({onclick:function() {
            b.broadcast();
            a._state.setEmailVerificationResent(!0)
        }}, ["Resend email"]), d = ["Please click the verification link we sent to ", SPAN({"class":"email"}, [b.newEmail()]), " to verify this new email. Can't find the link? ", d], c = DIV({"class":"email-verification-notes"}, c ? ["A new verification email has been sent to ", SPAN({"class":"email"}, [b.newEmail()])] : d);
        return a._renderErrorBanner(c)
    }else {
        return null
    }
}});
AccountDialogView.EnsureApiSettingsExistChangeObject = define("AccountDialogView.EnsureApiSettingsExistChangeObject", Change.subclass("AccountDialogView.EnsureApiSettingsExistChangeObject", {}, {enact:function() {
    if(env.is_server) {
        var a = env.user();
        a.apiSettings() === null && ApiSettings.create({user:a})
    }
}, taintedObjectIds:function() {
    return[]
}}));
__FILE__ = "apps/asana/view/announcement_view.js";
AnnouncementView = View.subclass("AnnouncementView", {}, {_render:function() {
    env.world_store.peekXvaluesAndStateObjectScalars([env.user().currentAnnouncementL(), env.user().currentMaintenanceL(), env.user().currentDialogAnnouncementL()], []);
    var a = this;
    return AsanaHelpers.renderWithinHiddenLoadingBoundary("DIV", [SPAN([$rval(function() {
        return a._renderOne(Announcements.topbarAnnouncements(), "current_announcement", "_renderTopbarAnnouncement") || a._renderOne(Announcements.MAINTENANCES, "current_maintenance", "_renderTopbarAnnouncement")
    }), $rval(function() {
        return a._renderOne(Announcements.dialogAnnouncements(), "current_dialog_announcement", "_renderDialogAnnouncement")
    })])])
}, _renderOne:function(a, b, c) {
    var d = env.user().getRvalue(b), e = Announcements.getAnnouncementNumber(a, $v(d)), b = a[e];
    if(b === void 0) {
        return""
    }
    a = function() {
        d.requestSet(e + 1);
        var a = document.getElementById("opt_in_to_mailing_list");
        a && a.checked && env.user().setOptedInToMailingList(!0)
    };
    b = b();
    return b === null ? "" : this[c](b, a)
}, _renderTopbarAnnouncement:function(a, b) {
    return DIV({"class":"announcement"}, concat(a, [IMG({"class":"close_button", src:"/-/static/luna/browser/images/close.png", onclick:b})]))
}, _renderDialogAnnouncement:function(a, b) {
    a.onclose = b;
    return this.createView(DialogView, a).render()
}});
__FILE__ = "apps/asana/view/survey_view.js";
SurveyView = View.subclass("SurveyView", {_MINIMUM_NPS_TO_INVITE:4, _makeDismissHandler:function(a) {
    env.world_store.peekXvaluesAndStateObjectScalarsWithoutDependencies([], [env.user().currentSurveyResponseL()]);
    return function() {
        var b = env.user().currentSurveyResponse(), c = $v(env.frp.chronometer.approximate_time_lvalue);
        b.setStopTime(c);
        c = b.freeResponseOrUnknown();
        isUnknown(c) && host.recordWarning("Free response was unknown.");
        logEvent({name:"NPSSurveyCompleted", survey:b, num_questions_answered:b.numQuestionsAnswered(), raw_score:b.howLikelyAreYouToRecommendAsana(), free_response:isKnown(c) ? c : ""});
        a > 0 && (UserActionContext.get().start(env.world_store.createStateObject(CompleteSurveyAction, {creator:env.user()})), env.user().currentSurveyResponse().howLikelyAreYouToRecommendAsana() >= SurveyView._MINIMUM_NPS_TO_INVITE && InviteToBetaDialogView.show({invited_name:"", invited_email:"", invite_ui_source:Registration.InviteUiSource.NPS_SURVEY}))
    }
}, _onAnswerQuestion:function(a, b) {
    var c = a + 1;
    env.user().currentSurveyResponse().numQuestionsAnsweredL().requestSet(c);
    c === b && SurveyView._makeDismissHandler(a)()
}, _renderClose:function(a) {
    return IMG({"class":"close_button", src:"/-/static/luna/browser/images/close.png", onclick:SurveyView._makeDismissHandler(a)})
}, _renderSubmitButton:function(a, b, c) {
    return AsanaForms.renderButton({label:"Submit Answer", onclick:a ? function() {
        SurveyView._onAnswerQuestion(b, c)
    } : null, id:"survey_submit", "class":"primary submit-button", tabindex:0})
}}, {_should_show_survey_r:SET_IN_CONSTRUCTOR, constructor:function(a) {
    SurveyView.superproto.constructor.call(this, a);
    this._should_show_survey_r = $rval(function() {
        var a = env.user(), c = env.user().currentSurveyResponse();
        if(c.stopTime() !== null) {
            return!1
        }
        var d = $v(env.frp.chronometer.approximate_time_lvalue);
        if(!(d > c.startTime() && d < c.expirationTime())) {
            return!1
        }
        c = Announcements.topbarAnnouncements();
        d = Announcements.getAnnouncementNumber(c, a.currentAnnouncement());
        if(c[d] !== void 0) {
            return!1
        }
        a = Announcements.getAnnouncementNumber(Announcements.MAINTENANCES, a.currentMaintenance());
        if(Announcements.MAINTENANCES[a] !== void 0) {
            return!1
        }
        return!0
    }, "SurveyView._should_show_survey_r");
    this._should_show_survey_r.setAsSafelyPeekableByAncestor()
}, _render:function() {
    var a = env.user().currentSurveyResponse().numQuestionsAnswered();
    if(!$v(this._should_show_survey_r)) {
        return SPAN()
    }
    var b = [this._renderNPSQuestion, this._renderFreeResponseQuestion];
    a >= b.length && (a = 0);
    return DIV({id:"nps-survey", "class":"survey clearfix"}, [DIV({"class":"width-limiting-container"}, b[a].call(this, a, b.length))])
}, _renderNPSQuestion:function(a, b) {
    var c = env.user().currentSurveyResponse().howLikelyAreYouToRecommendAsanaL(), d = $v(c), e = function(a) {
        return SPAN({"class":a === d ? "selected-option" : "option", id:"nps-survey-option-" + a, onclick:function() {
            c.requestSet(a)
        }})
    };
    return[SurveyView._renderClose(a), DIV({"class":"floating-container"}, ["We're curious, how likely are you to recommend Asana to a friend?"]), DIV({"class":"floating-container"}, [DIV({"class":"floating-container"}, [e(0), e(1), e(2), e(3), e(4), e(5), e(6), DIV({"class":"labels"}, [SPAN(["not at all likely"]), SPAN(["somewhat likely"]), SPAN(["extremely likely"])])]), SurveyView._renderSubmitButton($v(c) !== null, a, b)])]
}, _renderFreeResponseQuestion:function(a, b) {
    var c = env.user().currentSurveyResponse().freeResponseL();
    return[SurveyView._renderClose(a), DIV({"class":"floating-container"}, [SPAN({"class":"welcome"}, ["Thanks for your feedback. "]), " What could we do to improve?"]), DIV({"class":"floating-container"}, [DIV({"class":"multiline floating-container"}, [TEXTAREA({"class":"generic-input", data:c, placeholder:"Give us your feedback.", id:"free-response", tabindex:0})]), SurveyView._renderSubmitButton(!0, a, b)])]
}});
__FILE__ = "apps/asana/view/shortcuts.js";
Shortcuts = {renderKeyCombo:function(a) {
    return a.map(function(a) {
        return a instanceof Function ? a() : a
    })
}, ALL:function() {
    var a = KeyMap.KeyNameFuncs.META_OR_CTRL, b = KeyMap.KeyNameFuncs.SHIFT, c = KeyMap.KeyNameFuncs.TAB, d = KeyMap.KeyNameFuncs.TAB_ONLY, e = KeyMap.KeyNameFuncs.TAB_THEN, f = KeyMap.KeyNameFuncs.UP, g = KeyMap.KeyNameFuncs.DOWN, h = KeyMap.KeyNameFuncs.ENTER, i = KeyMap.KeyNameFuncs.ESC;
    return[{header:"TASK LIST ACTIONS"}, {k:[h], d:"New Task"}, {k:[c, KeyMap.KeyNameFuncs.BACKSPACE], d:DIV(["Delete Selected Task(s)", BR(), "(or: backspace when task name is empty)"])}, {k:[a, f, " / ", a, g], d:"Move Up/Down"}, {k:[a, "+", b, f, " / ", a, "+", b, g], d:"Jump Up/Down to the next priority heading"}, {k:[a, "C"], d:"Copy Selected Tasks"}, {k:[a, "V"], d:"Paste Tasks (One per line)"}, {k:[c, "M"], d:"Assign to Me"}, {k:[":"], d:"Type a colon at the end of a task name to create a priority heading"},
        {header:"NAVIGATION"}, {k:[c, "C"], d:"Comment on Selected Task"}, {k:[c, "A"], d:"Assign Selected Task"}, {k:[c, "D"], d:"Set Due Date"}, {k:[c, "F"], d:"Add Follower"}, {k:[c, "/"], d:"Search for a project, tag, person, or task"}, {k:[c, h], d:"Jump to the task list"}, {header:"SELECTION"}, {k:[f, "/", g], d:"Change Selection"}, {k:[b, "Click"], d:"Select Range"}, {k:[b, f, " / ", b, g], d:"Select Range"}, {k:[a, "click"], d:"Multi-select Individual Task"}, {header:"APPLICATION"}, {k:[a, "/"],
            d:"Show Keyboard Shortcuts"}, {k:[d], d:"Open Details"}, {k:[i], d:"Close Details"}, {k:[c, "Q"], d:"Quick Add"}, {k:[e, h], d:"Post Comment (From comment field)"}, {header:"INBOX"}, {k:["H"], d:"Hide Read Items"}, {k:["S"], d:"Show Read Items"}, {k:["F"], d:"Follow or Unfollow"}].filter(function(a) {
            if(a.required_flags) {
                var b = !0;
                a.required_flags.forEach(function(a) {
                    a || (b = !1)
                });
                return b
            }else {
                return!0
            }
        })
}};
__FILE__ = "apps/asana/view/dialog/shortcuts_view.js";
ShortcutsView = DialogView2.subclass("ShortcutsView", {State:DialogState.subclass("ShortcutsView.State", {registry_name:"ShortcutsState", property_descs:{}}, {hide:function() {
    return ShortcutsView.State.superproto.hide.call(this)
}}), _IS_SINGLETON_DIALOG:!0, _renderShortcutRow:function(a, b) {
    return TR([TH(Shortcuts.renderKeyCombo(a)), TD([b])])
}, _renderHeaderRow:function(a) {
    return TR([TD([" "]), TH({"class":"heading"}, [a])])
}}, {defaultFocusAndSelection:function() {
    return{focused_element_id:"AsanaView.TabRingView"}
}, _render:function() {
    return this.createView(DialogView, {title_x:"Keyboard Shortcuts", body_x:TABLE({"class":"keyboard_shortcuts_table"}, [TBODY(Shortcuts.ALL().map(function(a) {
        return a.header ? ShortcutsView._renderHeaderRow(a.header) : ShortcutsView._renderShortcutRow(a.k, a.d)
    }))]), flush_body_style:!0}).render()
}});
__FILE__ = "apps/asana/view/top_bar_view.js";
TopBarView = View.subclass("TopBarView", {}, {session:ATTRIBUTE_REQUIRED, blurSelf:ATTRIBUTE_REQUIRED, _render:function() {
    var a = this;
    AccountDialogView.touch();
    return DIV({id:"topbar"}, [a.createView(AnnouncementView, {}).render(), a.createView(SurveyView, {}).render(), AsanaHelpers.renderWithinHiddenLoadingBoundary("DIV", [$rval(function() {
        var b = AsanaHelpers.renderUndoWindow(a.browser), c = a._renderRemoteJobStatusWindow();
        return b || c
    })])])
}, _renderRemoteJobStatusWindow:function() {
    var a = this, b = env.session_store.sessionObject2(RemoteJobState, RemoteJobState.SINGLETON_OBJECT_ID);
    if(b.remoteJobStatus() !== null) {
        var c = b.remoteJobStatus().jobCompleted(), d = c ? b.completionText() : b.inProgressText(), c = c ? "completed" : "in-progress", e = DIV([DIV({id:"remote_job_status_close_box", "class":"close-box", onclick:function() {
            b.setRemoteJobStatus(null)
        }}, []), DIV({"class":"left-icon " + c}, []), d]);
        return DIV({id:"remote_job_status", "class":"dismissable-overlay", style:{left:$rval(function() {
            return(a.browser.width() - e.dimensions.width()) / 2
        })}}, [e])
    }else {
        return""
    }
}});
__FILE__ = "apps/asana/view/widgets/dropdown_menu_view.js";
DropdownMenuView = View.subclass("DropdownMenuView", {SEPARATOR:{}}, {id:ATTRIBUTE_REQUIRED, label:ATTRIBUTE_REQUIRED, relative_to_element_id:null, tooltip:"", tooltip_delay:"", include_arrow:!0, dropdown_align:DropdownView.LEFT, additional_class:"", additional_link_class:"", padding_x:0, padding_y:0, onOpen:null, use_watch_for_focus:!0, menu_items:ATTRIBUTE_REQUIRED, _dropdown:SET_IN_CONSTRUCTOR, constructor:function(a) {
    var b = this;
    DropdownMenuView.superproto.constructor.call(b, a);
    this._dropdown = b.createView(DropdownView, {align:b.dropdown_align, relative_to_element_id:b.relative_to_element_id || b.id, id:b.id + "_dropdown_menu", padding_x:b.padding_x, padding_y:b.padding_y, onOpen:b.onOpen, renderContents:function() {
        return b._renderDropdownContents()
    }});
    b._menu_link = A({id:b.id, tabindex:-1, onmousedown:function() {
        b.open();
        return Node.STOP
    }, tooltip_delay:b.tooltip_delay}, [b.label, b.include_arrow ? SPAN({"class":"arrow"}) : ""])
}, _render:function() {
    function a() {
        var a = b._dropdown.isOpen(), d = "dropdown-menu-link " + b.additional_class + " " + b.additional_link_class;
        a ? (b._menu_link.set("class", d + " open"), b._menu_link.set("tooltip", null), b._dropdown.renderIntoBody()) : (b._menu_link.set("class", d), b._menu_link.set("tooltip", b.tooltip));
        b._menu_link.__is_open_dropdown_menu_link = a
    }
    var b = this, b = this;
    b.use_watch_for_focus ? $rval(a).becomeWatch().peek() : a();
    return b._menu_link
}, _renderDropdownContents:function() {
    var a = this, b = !1, c = null, d = $v(a.menu_items).map(function(d, f) {
        if(d === null) {
            return""
        }
        var g = a._renderMenuItem(d);
        d.should_be_under_mouse && (c !== null && ufu("Marked two menu items with should_be_under_mouse"), c = f);
        d.selected && (b = !0);
        return g
    });
    a._dropdown.y_coordinate_under_mouse = c === null ? null : 16 + c * 29;
    return DIV({"class":"dropdown-menu " + (b ? "some-items-are-selected " : "") + a.additional_class}, d)
}, open:function() {
    this._dropdown.open()
}, close:function() {
    this._dropdown.close()
}, isOpen:function() {
    return this._dropdown.isOpen()
}, runHandlerForMenuItem:function(a) {
    $v(this.menu_items).forEach(function(b) {
        if(b.id === a) {
            throw b.onselect(), IIterable.STOP;
        }
    })
}, _renderMenuItem:function(a) {
    var b = this;
    return a === DropdownMenuView.SEPARATOR ? HR() : A({id:a.id || null, "class":"menu-item" + (a.selected ? " selected" : "") + (a.disabled ? " disabled" : ""), onclick:function() {
        a.disabled || (b.close(), a.onselect());
        return Node.STOP
    }, title:a.title || ""}, [a.shortcut_nodes ? SPAN({"class":"shortcut", children:a.shortcut_nodes}) : "", a.label])
}});
__FILE__ = "apps/asana/view/grid_toolbar_view.js";
GridToolbarView = View.subclass("GridToolbarView", {DIAGNOSTICS_DEBUG_FILTER_OVERFLOW_PREVENTION:!1, State:SessionObject2.subclass("GridToolbarView.State", {property_descs:{filter_menu_opened_ms:{type:Timestamp, default_value:0}}}, {})}, {grid_state:ATTRIBUTE_REQUIRED, pot:ATTRIBUTE_REQUIRED, item_list_view:ATTRIBUTE_REQUIRED, tags_for_filtered_tasks_r:ATTRIBUTE_REQUIRED, tags_for_unfiltered_tasks_r:ATTRIBUTE_REQUIRED, statistics_for_tasks_r:ATTRIBUTE_REQUIRED, _render:function() {
    var a = this;
    return AsanaHelpers.renderWithinHiddenLoadingBoundary("DIV", [$rval(function() {
        return a._renderToolbarContainer()
    })])
}, _renderToolbarContainer:function() {
    var a = this;
    return DIV([a.createView(ToolbarView, {view_name:"main-bar", extra_classes:"main-bar", left_elements:[$rval(function() {
        return a._renderGroupByToggle()
    }), $rval(function() {
        return a._renderTagFilters(null, null)
    })], right_elements:[this._renderTaskCreationMenu(), this._renderArchiveMenu()]}).render(), $rval(function() {
        return a._renderSelectedFilters()
    })])
}, _renderTaskCreationMenu:function() {
    var a = this, b = a.pot;
    isUnknown(b) && ufu("In grid-view, but the current list is unknown.");
    if(!b.getV("is_project")) {
        return""
    }
    return a.createView(DropdownMenuView, {id:"new_menu", tooltip:"Create tasks and headings", tooltip_delay:500, label:DIV({"class":"toolbar-button"}, [SPAN({"class":"button-text"}, ["New"]), SPAN({"class":"button-arrow"})]), menu_items:[{label:"New Task", id:"new_menu_item_new_task", onselect:function() {
        a.item_list_view._insertBelowSelection();
        a.grid_state.mostRecentlySelectedItemOrNull()
    }}, {label:"New Priority Heading", id:"new_menu_item_new_priority_heading", onselect:function() {
        a.item_list_view._insertAboveSelection();
        var b = a.grid_state.mostRecentlySelectedItemOrNull();
        b.setName("New Priority Heading:");
        env.setSelectionForFocusedElement(0, b.name().length - 1)
    }}]}).render()
}, _renderArchiveMenu:function() {
    var a = this, b = a.grid_state.getV("show_archived_items");
    return a.createView(DropdownMenuView, {id:"archive_menu", tooltip:"Hide completed tasks.", tooltip_delay:500, label:DIV({"class":"toolbar-button"}, [SPAN({"class":"button-text"}, ["Archive"]), SPAN({"class":"button-arrow"})]), menu_items:[{label:"Archive completed tasks", id:"archive_menu_item", onselect:function() {
        a.item_list_view._archiveItems()
    }, title:"Celebrate!"}, {label:b ? "Hide archived tasks" : "Show archived tasks", id:"toggle_archived_menu_item", onselect:function() {
        a.item_list_view._setShowArchivedItems(!b)
    }}]}).render()
}, _renderGroupByToggle:function() {
    var a = this;
    if(!a.pot.getV("is_project")) {
        return""
    }
    var b = a.grid_state.groupBy(), c = function(c, d, e, f) {
        var l = f === b;
        return{id:c, label:SPAN([SPAN({"class":"button-icon group-by-icon-" + f}), d]), title:e, selected:l, disabled:!1, onselect:function() {
            a.grid_state.setGroupBy(f);
            var b = a.pot.assignee();
            b !== null && b.user() === env.userOrNull() && b.setAssignedToMeGroupBy(f);
            logEvent({name:"GroupBy-" + f})
        }}
    };
    if(a.pot.isUserTaskList()) {
        var d = a.pot.assignee();
        if(d.user() === env.userOrNull()) {
            var e = "My Priority", f = "View your tasks ordered by when you plan to work on them", d = "View your tasks in the project order"
        }else {
            e = d.firstName() + Vocab.APOSTROPHE + "s Priority", f = "View tasks ordered by when " + d.firstName() + " plans to work on them", d = "View tasks in the project order"
        }
        e = [c("group_by_priority", e, f, TaskGrouper.Type.PROJECT_IN_ASSIGNEE_VIEW)];
        e.push(c("group_by_project", "Project", d, TaskGrouper.Type.PROJECT));
        e.push(c("group_by_due_date", "Date", "View tasks sorted by due date", TaskGrouper.Type.DUE_DATE_IN_ASSIGNEE_VIEW))
    }else {
        e = [c("group_by_priority", "Priority", "View tasks in priority order", TaskGrouper.Type.NONE)], e.push(c("group_by_assignee", "Assignee", "View tasks sorted by assignee", TaskGrouper.Type.ASSIGNEE)), e.push(c("group_by_project", "Project", "View tasks sorted by other projects", TaskGrouper.Type.PROJECT)), e.push(c("group_by_due_date", "Date", "View tasks sorted by due date", TaskGrouper.Type.DUE_DATE))
    }
    return a.createView(DropdownMenuView, {id:"pot_groupby_menu", label:DIV({"class":"toolbar-button"}, [SPAN({"class":"button-text"}, ["Sort"]), SPAN({"class":"button-icon group-by-icon-" + b}), SPAN({"class":"button-arrow"})]), menu_items:e}).render()
}, _someTasksAreAssigned:function() {
    return $v(this.statistics_for_tasks_r).some_tasks_are_assigned
}, _someTasksHaveProjects:function() {
    return $v(this.statistics_for_tasks_r).some_tasks_have_projects
}, _someTasksHaveOtherProjects:function() {
    return $v(this.statistics_for_tasks_r).some_tasks_have_other_project
}, _someTasksHaveDueDate:function() {
    return $v(this.statistics_for_tasks_r).some_tasks_have_due_date
}, _someTasksAreComplete:function() {
    return $v(this.statistics_for_tasks_r).some_tasks_are_complete
}, _renderExpandToggle:function() {
    var a = this;
    if(!a.grid_state.getTaskGrouper().isCollapsable() || a.item_list_view.groups().size() <= 1) {
        return SPAN([""])
    }
    if(a.grid_state.getV("expanded_groups").isEmpty()) {
        var b = function() {
            a.grid_state.getX("show_all_my_tasks").requestSet(!0);
            a.item_list_view.groups().forEachValue(function(b) {
                a.grid_state.getX("expanded_groups").requestInsertBefore(b, null)
            })
        }, c = "Expand All"
    }else {
        b = function() {
            a.grid_state.getX("expanded_groups").requestClear()
        }, c = "Collapse All"
    }
    return DIV({"class":"toolbar-button collapse-expand-all"}, [SPAN({"class":"button-text", onclick:b}, [c])])
}, _filterElements:computedProperty("GridToolbarView._filterElements", function() {
    var a = this, b = $v(a.tags_for_filtered_tasks_r), c = a.grid_state.selectedFilters();
    return $v(a.tags_for_unfiltered_tasks_r).getEntries().sort(function(a, b) {
        return a[0].name() > b[0].name()
    }).map(function(d) {
            var e = d[0], d = b.getOr(e, 0), f = c.contains(e), g = e.name(), h = function() {
                a._toggleFilter(e)
            };
            return{pot:e, selected:f, toolbar_element:a._renderToolbarTagLink(g, d, f, h), menu_item:a._moreMenuTagMenuItem("tag_filter_menu_item_" + e.global_id, g, d, f, h)}
        })
}), _toggleFilter:function(a) {
    this.grid_state.onToggleTag(a);
    env.setFocus(null)
}, _renderTagFilters:function() {
    var a = this, b = a.grid_state.selectedFilters(), c = LatestKnownRvalue.create($rval(function() {
        return a._filterElements()
    }));
    $rval(function() {
        var b = $v(env.frp.chronometer.approximate_time_lvalue), e = a._state.filterMenuOpenedMs();
        b - e < 3E4 && $v(c)
    }).becomeWatch().peek();
    b = a.createView(DropdownMenuView, {id:"more_tag_filters_link", additional_class:"more-tag-filters-link", tooltip:"More tag filters", tooltip_delay:500, dropdown_align:DropdownView.LEFT, label:DIV({"class":" toolbar-button" + (b.isEmpty() ? "" : " pressed")}, [SPAN({"class":"button-text"}, ["Filter"]), SPAN({"class":"button-arrow"})]), include_arrow:!1, onOpen:function() {
        a._state.setFilterMenuOpenedMs($v(env.frp.chronometer.approximate_time_lvalue))
    }, menu_items:$rval(function() {
        var a = c.peekAllowingUnknown();
        if(isUnknown(a)) {
            return[{id:"tag_filter_menu_item_loading", label:SPAN([AsanaHelpers.renderLoadingIndicator()]), title:"Loading...", selected:!1, disabled:!0}]
        }
        a = pull("menu_item", a);
        if(a.size() > 0) {
            return env.is_server && logEvent({name:"GridFilterMenuRendered", num_items:a.size()}), a
        }
        return[{id:"tag_filter_menu_item_empty", label:SPAN(["No filters"]), title:"No filters", selected:!1, disabled:!0}]
    })}).render();
    b = DIV({"class":"toolbar-center-end"}, [b]);
    $rval(function() {
        $v(0)
    }).becomeWatch().peek();
    return DIV({"class":"toolbar-center"}, ["", b])
}, _renderSelectedFilters:function() {
    var a = this;
    if(a.grid_state.selectedFilters().isEmpty()) {
        return""
    }
    return a.createView(ToolbarView, {view_name:"filter-bar", extra_classes:"filter-bar", left_elements:a.grid_state.selectedFilters().map(function(b) {
        return AsanaHelpers.renderToken({parent_view:a, object:b, onRemove:function() {
            a._toggleFilter(b)
        }, onClicked:function() {
            env.realAppSession().setCurrentList(b)
        }, name_x:b.name()})
    }), right_elements:[DIV({"class":"list-item-count"}, [A({onclick:function() {
        a.grid_state.resetSelectedFilters()
    }, tabindex:-1, "class":"show-all"}, ["Show All"])])]}).render()
}, _visibleFilterCount:function(a, b, c, d, e, f) {
    this._resetDebugPos();
    c = $v(c);
    if(!(a.length === 0 || c === 0)) {
        if(b = Math.ceil(b.dimensions.right()), e = Math.floor(c - d.dimensions.width() - e.dimensions.width()), e > b) {
            this._debugPos("x_pos", "blue", b), this._debugPos("x_max", "red", e)
        }else {
            e = a.last().toolbar_element;
            d = Math.floor(c - d.dimensions.width() - f.dimensions.width() - (b - this._rightPositionNonReactive(e)));
            this._debugPos("max_filter_right_pos", "purple", d, 10);
            for(f = 0;f < a.length;f++) {
                if(c = Math.ceil(this._rightPositionNonReactive(a[f].toolbar_element)), this._debugPos("tag " + f, "red", c), c >= d) {
                    return f
                }
            }
        }
    }
    return a.length
}, _debugPos:function(a, b, c, d) {
    if(GridToolbarView.DIAGNOSTICS_DEBUG_FILTER_OVERFLOW_PREVENTION) {
        log.info("_debugPos", a, c);
        if(!this._pos) {
            this._pos = {}
        }
        this._pos[a] || (this._pos[a] = DIV({id:"debug_pos_" + b, style:{background:b, height:"100px", width:"1px", position:"absolute", zIndex:"10000"}}, [DIV({style:{position:"absolute", top:(d || 100) + "%", left:"0px", color:b, "padding-left":"2px", "font-size":"10px", "white-space":"nowrap"}}, [a])]), document.body.appendChild(this._pos[a]));
        this._pos[a].style.left = c + "px";
        this._pos[a].style.top = "0px"
    }
}, _resetDebugPos:function() {
    if(GridToolbarView.DIAGNOSTICS_DEBUG_FILTER_OVERFLOW_PREVENTION) {
        for(var a in this._pos) {
            document.body.removeChild(this._pos[a]), delete this._pos[a]
        }
    }
}, _renderToolbarTagLink:function(a, b, c, d, e) {
    var f = ["button toggle-button"], g = {};
    b === 0 ? f.push("disabled") : (g.onmousedown = d, f.push(c ? "selected" : "unselected"));
    g["class"] = f.join(" ");
    b = MochiKit.Text.truncate(a, 18, "...");
    if(a !== b) {
        g.title = a
    }
    return DIV(g, [SPAN({"class":"button-text"}, [b, e !== void 0 ? e : ""])])
}, _moreMenuTagMenuItem:function(a, b, c, d, e, f) {
    var g = MochiKit.Text.truncate(b, 30, "...");
    return{id:a, label:SPAN([g, f !== void 0 ? f : "", SPAN({"class":"count"}, [" " + c])]), title:b === g ? null : b, onselect:e, selected:d, disabled:c === 0}
}, _computePotCounts:function(a) {
    var b = Map.create();
    a.forEach(function(a) {
        a.forEach(function(a) {
            b.incrementCount(a)
        })
    });
    return b
}, _rightPositionNonReactive:function(a) {
    return MochiKit.Style.getElementDimensions(a, !1).w + this._xPositionNonReactive(a)
}, _xPositionNonReactive:function(a) {
    return MochiKit.Style.getElementPosition(a).x
}});
__FILE__ = "apps/asana/view/icenter_pane_view.js";
ICenterPaneView = Interface.create("ICenterPaneView", [], {}, {bottomBarShortcuts:ABSTRACT});
__FILE__ = "apps/asana/view/grid_pane_view.js";
GridPaneView = View.subclass("GridPaneView", [ICenterPaneView], {}, {allow_deleting:ATTRIBUTE_REQUIRED, grid_state:ATTRIBUTE_REQUIRED, dnd_helper:ATTRIBUTE_REQUIRED, current_asana_list_or_unknown:ATTRIBUTE_REQUIRED, column_visible_l:ATTRIBUTE_REQUIRED, expanded_width_x:ATTRIBUTE_REQUIRED, height_x:ATTRIBUTE_REQUIRED, left_x:null, ontransitionend:null, _item_list_view:SET_IN_CONSTRUCTOR, _filtered_items_list_r:SET_IN_CONSTRUCTOR, constructor:function(a) {
    a.view_name = this.__type_name + "." + isKnown(a.current_asana_list_or_unknown) ? a.current_asana_list_or_unknown.global_id : "unknown";
    GridPaneView.superproto.constructor.call(this, a);
    if(isKnown(this.current_asana_list_or_unknown) && (a = this.current_asana_list_or_unknown, a !== null)) {
        var b = a.getX("items");
        this._filtered_items_list_r = this.grid_state.filteredItemsListR(a);
        this._item_list_view = this.createView(ItemListView, {allow_deleting:this.allow_deleting, placeholder_text:"Add a Task", grid_state:this.grid_state, details_state:env.realAppSession().detailsState(), dnd_helper:this.dnd_helper, root_grid_block_r:this.grid_state.rootGridBlockR(this.current_asana_list_or_unknown, this._filtered_items_list_r), current_asana_list:a, entire_list_r:b, show_assignee:!a.isUserTaskList()})
    }
}, _render:function() {
    var a = this;
    if(isKnown(this.current_asana_list_or_unknown)) {
        if(this.current_asana_list_or_unknown === null) {
            return[]
        }
        var b, c;
        c = a._renderBody();
        b = a._renderHeader();
        return a.createView(ColumnView, {id:"center_pane", header_contents_x:b, body_contents_x:c, height_x:a.height_x, left_x:a.left_x, expanded_width_x:a.expanded_width_x, ontransitionend:a.ontransitionend, column_visible_l:a.column_visible_l, is_navigating_x:$rval(function() {
            return env.isNavigating()
        }), onClickBelowContent:View.publicFunction(a, function() {
            var b = a.itemListViewOrNull();
            if(b.current_asana_list instanceof Pot && b.current_asana_list.isUserTaskList() && !b.current_asana_list.assignee().active()) {
                return Node.STOP
            }
            b !== null && b.isLoaded() && a.grid_state.allTasksLoaded(b.current_asana_list) && (b.current_asana_list.isUserTaskList() || b.insertRowAtBottom());
            return Node.STOP
        }), onScrollToBottom:View.publicFunction(a, function() {
            env.isInTest() || a.grid_state.maybeLoadMoreTasks()
        })}).render()
    }else {
        return a.createView(ColumnView, {id:"center_pane", header_contents_x:a.current_asana_list_or_unknown, body_contents_x:"", left_x:a.left_x, height_x:a.height_x, expanded_width_x:a.expanded_width_x, column_visible_l:a.column_visible_l, ontransitionend:a.ontransitionend}).render()
    }
}, itemListViewOrNull:function() {
    return isKnown(this.current_asana_list_or_unknown) ? this._item_list_view : null
}, _selectedViewCaller:function(a) {
    var b = this;
    return function() {
        var c = b.itemListViewOrNull();
        if(c !== null && c.isLoaded() && (c = c.selectedTriPartViewOrNull(), c !== null)) {
            c[a]()
        }
    }
}, bottomBarShortcuts:function() {
    var a = this;
    return[{id:"quick_add_button", k:[KeyMap.KeyNameFuncs.TAB, "Q"], d:"Quick Add", shouldShow:!0, action:function() {
        env.realAppSession().openQuickAddDialog()
    }}, {id:"new_button", k:[KeyMap.KeyNameFuncs.ENTER], d:"New Task", shouldShow:!0, action:function() {
        var b = a.itemListViewOrNull();
        b !== null && b.isLoaded() && b._insertBelowSelection()
    }}, {id:"delete_button", k:[KeyMap.KeyNameFuncs.TAB, KeyMap.KeyNameFuncs.BACKSPACE], d:"Delete Task", shouldShow:!0, action:function() {
        var b = a.itemListViewOrNull();
        b !== null && b.isLoaded() && b.deleteSelectedRowsInUserAction()
    }}, {k:[KeyMap.KeyNameFuncs.META_OR_CTRL, KeyMap.KeyNameFuncs.DOWN], d:"Move Down", shouldShow:!0, action:a._selectedViewCaller("_moveDown")}, {k:[KeyMap.KeyNameFuncs.META_OR_CTRL, KeyMap.KeyNameFuncs.SHIFT, KeyMap.KeyNameFuncs.DOWN], d:"Jump Down", shouldShow:!0, action:a._selectedViewCaller("_moveToBottom")}, {k:[KeyMap.KeyNameFuncs.META_OR_CTRL, KeyMap.KeyNameFuncs.ENTER], d:"Mark Complete", shouldShow:!0, action:function() {
        var b = a.itemListViewOrNull();
        b !== null && b.isLoaded() && b.markComplete()
    }}, {id:"open_details_button", k:[KeyMap.KeyNameFuncs.TAB_ONLY], d:"Open Details", shouldShow:function() {
        return!env.realAppSession().detailsVisible()
    }, action:function() {
        env.realAppSession().openDetailsPane()
    }}, {id:"close_details_button", k:[KeyMap.KeyNameFuncs.ESC], d:"Close Details", shouldShow:function() {
        return env.realAppSession().detailsVisible()
    }, action:function() {
        env.realAppSession().toggleDetailsPane()
    }}]
}, _renderHeader:function() {
    var a = this, b = a.current_asana_list_or_unknown;
    return DIV({id:"project_header"}, [a._item_list_view.renderListHeading(), $rval(function() {
        return a.createView(GridToolbarView, {grid_state:a.grid_state, item_list_view:a._item_list_view, pot:a.current_asana_list_or_unknown, tags_for_filtered_tasks_r:$rval(function() {
            return a.grid_state.tagsAndCountsForFilteredTasks(b)
        }), tags_for_unfiltered_tasks_r:$rval(function() {
            return a.grid_state.tagsAndCountsForUnfilteredTasks(b)
        }), statistics_for_tasks_r:$rval(function() {
            return a.grid_state.statisticsForFilteredTasks(b)
        })}).render()
    })])
}, _renderBody:function() {
    return DIV([this._item_list_view.render()])
}});
__FILE__ = "apps/asana/view/widgets/toolbar_view.js";
ToolbarView = View.subclass("ToolbarView", {}, {left_elements:null, right_elements:null, extra_classes:"", constructor:function(a) {
    ToolbarView.superproto.constructor.call(this, a);
    if(this.left_elements === null) {
        this.left_elements = []
    }
    if(this.right_elements === null) {
        this.right_elements = []
    }
}, _render:function() {
    return DIV({"class":"toolbar " + this.extra_classes}, [DIV({"class":"gutter-left"}), SPAN({"class":"toolbar-section left"}, this.left_elements), SPAN({"class":"toolbar-section right"}, this.right_elements), DIV({"class":"gutter-right"})])
}});
__FILE__ = "apps/asana/view/inbox/inbox_header_view.js";
InboxHeaderView = View.subclass("InboxHeaderView", {}, {inbox:ATTRIBUTE_REQUIRED, state:ATTRIBUTE_REQUIRED, _isMarkAllAsReadEnabled:function() {
    return this.inbox.hasUnreadNotifications()
}, _isHideReadItemsEnabled:function() {
    return this.inbox.hasItemsToArchive() || this.inbox.isShowingReadItems()
}, _clearReadNotificationsFromSelection:function() {
    this.state.setSelectedNotifications(this.state.selectedNotifications().filter(this.inbox.isNotificationUnread, this.inbox))
}, hideReadItems:function() {
    this._isHideReadItemsEnabled() && (logEvent({name:"Inbox-HideReadItems"}), this._clearReadNotificationsFromSelection(), this.inbox.clearReadItems(), this.inbox.domain_user.setLastInteractedWithNotificationFeedTime(env.clock.now()))
}, _render:function() {
    var a = this, b = a.inbox.domain_user.domain().name();
    return DIV({id:"inbox_header", "class":"inbox-header"}, [a._renderEmailNotificationsButton(), SPAN({"class":"icon-inbox"}), DIV({"class":"title"}, ["My " + b + " " + INBOX_NAME]), a.inbox.isEnabled() ? a.createView(ToolbarView, {extra_classes:"main-bar", left_elements:[DIV({id:"mark_all_as_read_button", tooltip_delay:500, tooltip:$rval(function() {
        return a._isMarkAllAsReadEnabled() ? "Marks all messages as read, except those explicitly marked as Keeping Unread." : ""
    }), "class":$rval(function() {
        return"toolbar-button" + (a._isMarkAllAsReadEnabled() ? "" : " disabled")
    }), onclick:function() {
        a._isMarkAllAsReadEnabled() && (logEvent({name:"Inbox-MarkAllAsRead"}), a.inbox.markAllAsRead(), a.inbox.domain_user.setLastInteractedWithNotificationFeedTime(env.clock.now()))
    }}, [SPAN({"class":"button-text"}, ["Mark All as Read"])])], right_elements:[DIV({id:"hide_read_items_button", "class":$rval(function() {
        return"toolbar-button" + (a._isHideReadItemsEnabled() ? "" : " disabled")
    }), onclick:function() {
        a.hideReadItems()
    }}, [SPAN({"class":"button-text"}, ["Hide Read " + Vocab.Messages])])]}).render() : ""])
}, _renderEmailNotificationsButton:function() {
    var a = this;
    return DIV({"class":"header-button-bar"}, [AsanaHelpers.renderWithinHiddenLoadingBoundary("DIV", [$rval(function() {
        var b = a.inbox.domain_user.sendNotificationEmails();
        return a.createView(DropdownMenuView, {id:"notification_email_menu", tooltip:"Activity emails are currently " + (b ? "enabled" : "disabled"), tooltip_delay:300, label:SPAN({"class":"light-button button"}, [SPAN({"class":"button-icon button-email-" + (b ? "on" : "off")})]), menu_items:a._emailNotificationDropdownMenuItems()}).render()
    })])])
}, _emailNotificationDropdownMenuItems:function() {
    var a = this, b = [], c = a.inbox.domain_user.sendNotificationEmails();
    b.push({label:"Also Send Activity to Email", disabled:!0});
    b.push({id:"email_notifications_on", selected:c, label:"On", onselect:function() {
        logEvent({name:"Inbox-TurnOnEmail"});
        a.inbox.domain_user.setSendNotificationEmails(!0)
    }});
    b.push({id:"email_notifications_off", selected:!c, label:"Off", onselect:function() {
        logEvent({name:"Inbox-TurnOffEmail"});
        a.inbox.domain_user.setSendNotificationEmails(!1)
    }});
    b.push(DropdownMenuView.SEPARATOR);
    AccountDialogView.touch();
    b.push({id:"email_notifications_settings", label:"Settings", onselect:View.publicFunction(a, function() {
        AccountDialogView.show({selected_tab:AccountDialogTabs.EMAIL_NOTIFICATIONS});
        logEvent({name:"Inbox-ShowEmailSettings"})
    })});
    return b
}});
__FILE__ = "apps/asana/view/inbox/notification_view.js";
NotificationView = View.subclass("NotificationView", {elementIdForNotification:function(a) {
    return"__notification_view_" + a.global_id
}}, {model:ATTRIBUTE_REQUIRED, display_selected:ATTRIBUTE_REQUIRED, is_focused:ATTRIBUTE_REQUIRED, selectNotification:ATTRIBUTE_REQUIRED, notification_class:"", followup_elements:null, maybeToggleDetailsPane:noop, _renderStory:function() {
    this.model.recipient();
    this.model.story().parentObject();
    var a = this.followup_elements !== null && this.followup_elements !== "" ? FRAG([this.followup_elements, SPAN({"class":"footer-separator"}, [" \u2022 "])]) : "";
    return DIV({"class":"story-description"}, [DIV({"class":"story-text"}, [DIV({"class":"feed-story-creator"}, [AsanaHelpers.renderObjectLink({object:this.model.creatorDu()})]), this._renderStoryText(), this._textIsSentence() ? "." : ""]), DIV({"class":"feed-story-footer"}, [a, SPAN({"class":"footer-date-separator"}, [" \u2022 "]), SPAN({"class":"feed-story-timestamp"}, [Date.create(this.model.getV("__creation_time")).describeRelativeToToday()])])])
}, _textIsSentence:function() {
    return!0
}, _renderStoryText:function() {
    return this.model.story().text()
}, _render:function() {
    var a = this;
    return DIV({id:NotificationView.elementIdForNotification(a.model), "class":$rval(function() {
        var b = ["story", $v(a.notification_class)];
        a.display_selected && b.push("selected");
        b.push(a.selectNotification ? "selectable" : "nonselectable");
        a.model.isUnread() ? b.push("unread") : b.push("read");
        a.model.newUnreadSinceInitialLoad() && b.push("recently-added-notification");
        return b.join(" ")
    }), onclick:a.selectNotification ? function() {
        env.datastore_manager.setCurrentHandlerName("Inbox-SelectNotification-Click");
        a.selectNotification(a.model);
        return Node.DEFAULT_AND_BUBBLE
    } : null}, [a.selectNotification ? DIV({"class":"button notification-button", tooltip:"Show Details (Keyboard Shortcuts: Tab to show, Esc to hide)", tooltip_delay:500, onmousedown:function() {
        return a.maybeToggleDetailsPane()
    }}, [SPAN({"class":"button-icon show-details"})]) : "", DIV({"class":"story-icon"}, [A({"class":"user-icon"}, [a.createView(PhotoView, {who:a.model.creatorDu().user(), size:PhotoView.Size.NOTIFICATION_FEED, show_initials:!0, domain_user:a.model.creatorDu()}).render()])]), DIV({"class":"content"}, [a._renderStory()])])
}});
AssignmentNotificationView = NotificationView.subclass("AssignmentNotificationView", {}, {_renderStoryText:function() {
    var a = this.model.story().assigneeDu();
    return isKnown(a) && a !== null ? env.user() === a.user() ? "assigned to you" : SPAN({"class":"new-assignee"}, ["reassigned to ", AsanaHelpers.renderObjectLink({object:a})]) : "reassigned this task"
}});
UnassignmentNotificationView = NotificationView.subclass("UnassignmentNotificationView", {}, {_renderStoryText:function() {
    return"unassigned this task from you"
}});
CompletionNotificationView = NotificationView.subclass("CompletionNotificationView", {}, {_renderStoryText:function() {
    return"completed this task"
}});
AddedToProjectNotificationView = NotificationView.subclass("AddedToProjectNotificationView", {}, {_renderStoryText:function() {
    return this.model.story().parentObject().name()
}, _textIsSentence:function() {
    return!1
}});
AttachmentNotificationView = NotificationView.subclass("AttachmentNotificationView", {}, {_renderStoryText:function() {
    var a = this.model.story().asset();
    return SPAN(["attached ", A({"class":"attachment-link-to-file", tabindex:-1, href:a.relativeUrl(), target:"_blank"}, [a.name()])])
}});
FollowerNotificationView = NotificationView.subclass("FollowerNotificationView", {}, {_renderStoryText:function() {
    return"added you as a follower"
}});
DueDateChangedNotificationView = NotificationView.subclass("DueDateChangedNotificationView", {}, {_renderStoryText:function() {
    var a = this.model.story().dueDate();
    return a === null ? "removed the due date" : SPAN(["changed the due date to ", AsanaHelpers.renderDueDate(a, this.model.story().parentObject().completed() === 0)])
}});
CommentNotificationView = NotificationView.subclass("CommentNotificationView", {}, {_textIsSentence:function() {
    return!1
}, _renderStoryText:function() {
    return SPAN({innerHTML:AsanaHelpers.stylizedHtmlFromPlainText(this.model.story().text(), !0)})
}});
ProjectShareNotificationView = NotificationView.subclass("ProjectShareNotificationView", {}, {_renderStoryText:function() {
    return"shared this project with you"
}});
__FILE__ = "apps/asana/view/inbox/inbox_thread_view.js";
InboxThreadView = View.subclass("InboxThreadView", {elementIdForGroup:function(a) {
    return a.id()
}}, {model:ATTRIBUTE_REQUIRED, id:ATTRIBUTE_REQUIRED, domain_user:ATTRIBUTE_REQUIRED, _renderHeader:ABSTRACT, _renderNotifications:ABSTRACT, group_is_selectable:!0, groupIsClickable:function() {
    return!0
}, notificationIsSelected:ATTRIBUTE_REQUIRED, selectNotification:ATTRIBUTE_REQUIRED, keepNotificationUnreadGrouping:ATTRIBUTE_REQUIRED, followupOnThreadObject:ATTRIBUTE_REQUIRED, hide_read_notifications:ATTRIBUTE_REQUIRED, firstNotification:function() {
    return $v(this.model.notifications_r).first()
}, lastNotification:function() {
    return $v(this.model.notifications_r).last()
}, notificationBeforeNotificationOrNull:function() {
    return null
}, notificationAfterNotificationOrNull:function() {
    return null
}, _followupOnThreadObject:View.publicMethod(function(a, b) {
    var c = b !== void 0 ? [b] : $v(this.model.notifications_r);
    this.followupOnThreadObject(a, c);
    this.domain_user.setLastInteractedWithNotificationFeedTime(env.clock.now());
    return Node.STOP
}), _mayBeToggleDetailsPane:function(a) {
    var b = env.realAppSession();
    a ? b.toggleDetailsPane() : b.openDetailsPane();
    return Node.DEFAULT_AND_BUBBLE
}, hasSelectedNotification:function() {
    var a = this;
    return $v(a.model.notifications_r).any(function(b) {
        return a.notificationIsSelected(b)
    })
}, _shouldGrayOutStory:function(a) {
    return Math.min(InboxThread.StoryLevel.COMMENT, this.model.mostImportantStoryLevel()) > this.model.storyLevelForStory(a)
}, renderFollowupElements:function(a, b) {
    var c = this, d = a || c.model.thread_object, e = c.domain_user;
    return FRAG([A({"class":"feed-story-follow followup", onclick:function() {
        logEvent({name:"Inbox-FollowUp"});
        c._followupOnThreadObject(d, b)
    }}, [$rval(function() {
        var a = !e.isFollowingUpOnThreadObject(d) ? "Keep Unread" : SPAN([DIV({"class":"followup-icon"}), "Keeping Unread"]);
        return DIV({}, [a])
    })]), SPAN({"class":"footer-separator"}, [" \u2022 "]), A({"class":"feed-story-follow follow", onclick:function() {
        logEvent({name:"Inbox-FollowButton"});
        d.toggleFollower(e, e);
        e.setLastInteractedWithNotificationFeedTime(env.clock.now());
        return Node.STOP
    }}, [(d.hasFollower(e) ? "Unfollow " : "Follow ") + (d instanceof Task ? "Task" : d.productTypeName())])])
}, _render:function() {
    var a = this, b = $v(a.model.notifications_r), c = a.model.visibleNotifications().all(function(a) {
        return a.newUnreadSinceInitialLoad()
    }), d = $rval(function() {
        var c = "inbox-thread ", d = b.any(function(a) {
            return a.isUnread()
        });
        c += d ? "unread" : "read";
        c += a.groupIsClickable() ? " selectable" : " nonselectable";
        a.group_is_selectable && a.hasSelectedNotification() && (c += " selected");
        return c
    }), e = DIV({id:a.id, "class":d, onclick:a.groupIsClickable() ? function() {
        a.selectNotification(a.firstNotification());
        return Node.DEFAULT_AND_BUBBLE
    } : null}, [a._renderHeader(), a._renderNotifications()]);
    return DIV({"class":c ? "recently-added" : "", style:{height:$rval(function() {
        return c ? e.dimensions.height() : "auto"
    })}}, [e])
}});
__FILE__ = "apps/asana/view/inbox/task_inbox_thread_view.js";
TaskInboxThreadView = InboxThreadView.subclass("TaskInboxThreadView", {}, {notificationsToShow:function() {
    var a = this;
    return a.model.visibleNotifications().filter(function(b) {
        return!a.hideNotification(b)
    })
}, firstNotification:function() {
    return this.notificationsToShow().first()
}, lastNotification:function() {
    return this.notificationsToShow().last()
}, hasSelectedNotification:function() {
    var a = this;
    return a.notificationsToShow().any(function(b) {
        return a.notificationIsSelected(b)
    })
}, _viewTypeForStory:function(a) {
    if(a instanceof TaskAssignedComment) {
        return AssignmentNotificationView
    }
    if(a instanceof TaskUnassignedComment) {
        return UnassignmentNotificationView
    }
    if(a instanceof TaskCompletedComment) {
        return CompletionNotificationView
    }
    if(a instanceof AddAttachmentStory) {
        return AttachmentNotificationView
    }
    if(a instanceof AddedFollowerComment) {
        return FollowerNotificationView
    }
    if(a instanceof TaskDueDateChangedStory) {
        return DueDateChangedNotificationView
    }
    if(a instanceof CommentStory) {
        return CommentNotificationView
    }
    return NotificationView
}, _iconClass:function() {
    if(this.model.thread_object.isCompleted()) {
        return"completion-icon"
    }
    switch(this.model.mostImportantStoryLevel()) {
        case InboxThread.StoryLevel.ASSIGNED:
            return"assigned-icon";
        case InboxThread.StoryLevel.COMPLETE:
            return"completion-icon";
        case InboxThread.StoryLevel.COMMENT:
            return"comment-icon";
        case InboxThread.StoryLevel.INCOMPLETE:
            ;
        case InboxThread.StoryLevel.COMPLETE_THEN_INCOMPLETE:
            return"incomplete-icon";
        case InboxThread.StoryLevel.UNASSIGNED:
            ;
        case InboxThread.StoryLevel.REASSIGNED:
            ;
        case InboxThread.StoryLevel.ASSIGNED_THEN_UNASSIGNED:
            return"unassigned-icon";
        case InboxThread.StoryLevel.DATE_CHANGE:
            return"date-change-icon";
        case InboxThread.StoryLevel.ATTACHMENT:
            return"attachment-icon";
        case InboxThread.StoryLevel.ADD_TO_POT:
            return"add-to-pot-icon";
        case InboxThread.StoryLevel.FOLLOW:
            return"follow-icon";
        case InboxThread.StoryLevel.UNKNOWN:
            return"unknown-icon"
    }
}, _separateFollowUpUi:function(a) {
    return this.notificationsToShow().size() > 1 || !a.story().combineWithFooter()
}, _renderNotification:function(a) {
    var b = a.story(), c = this._viewTypeForStory(b), b = this._shouldGrayOutStory(b) ? "grayed-out" : "", d = !this._separateFollowUpUi(a) ? this.renderFollowupElements() : null;
    return this.createView(c, {model:a, is_focused:this.notificationIsSelected(a), display_selected:!1, notification_class:b, selectNotification:null, followup_elements:d}).render()
}, _renderNotifications:function() {
    var a = this, b = a.notificationsToShow().map(function(b) {
        return a._renderNotification(b)
    });
    a._separateFollowUpUi(a.firstNotification()) && b.push(DIV({"class":"task-footer"}, [a.renderFollowupElements()]));
    return DIV(b)
}, _renderHeader:function() {
    var a = this, b = a.model.thread_object, c = b.getAssigneeOrNull() !== null && b.getAssigneeOrNull().user() === env.user() ? " assignee-task" : "", d = SPAN({"class":"task-name"}, [b.name()]), e = b.findParent();
    e && (d = SPAN({"class":"task-name"}, [b.name(), SPAN({"class":"parent-task-arrow"}, ["\u2039"]), SPAN([AsanaHelpers.renderObjectLink({object:e, class_name:"parent-task-link"})])]));
    return DIV({"class":"notification-header"}, [DIV({"class":a._iconClass() + " icon" + c}), DIV({"class":"notification-title"}, [DIV({"class":"button group-button", tooltip:"Show Details (Keyboard Shortcuts: Tab to show, Esc to hide)", tooltip_delay:500, onmousedown:function() {
        return a._mayBeToggleDetailsPane(a.hasSelectedNotification())
    }}, [SPAN({"class":"button-icon show-details"})]), DIV({"class":"task-pots"}, AsanaHelpers.renderPots(b.pots(), function(c) {
        a.selectNotification(null);
        env.realAppSession().setCurrentItem(b, c)
    })), d])])
}, hideNotification:function(a) {
    return a.story() instanceof TaskAddedToListComment
}});
__FILE__ = "apps/asana/view/inbox/item_list_inbox_thread_view.js";
ItemListInboxThreadView = InboxThreadView.subclass("ItemListInboxThreadView", {}, {group_is_selectable:!1, groupIsClickable:function() {
    return!this.hasSelectedNotification()
}, _viewTypeForStory:function(a) {
    if(a instanceof TaskAddedToListComment) {
        return AddedToProjectNotificationView
    }
    if(a instanceof AddedFollowerComment) {
        return FollowerNotificationView
    }
    return NotificationView
}, _renderHeader:function() {
    return DIV({"class":"notification-header"}, [DIV({"class":"add-to-pot-icon icon"}), DIV({"class":"notification-title"}, ["New ", AsanaHelpers.renderObjectLink({object:this.model.thread_object}), this.model.thread_object instanceof Pot ? " Tasks" : " Subtasks"])])
}, _renderNotification:function(a) {
    var b = this, c = a.story();
    return b.createView(b._viewTypeForStory(c), {model:a, is_focused:b.notificationIsSelected(a), display_selected:b.notificationIsSelected(a), selectNotification:function(a) {
        b.selectNotification(a)
    }, followup_elements:b.renderFollowupElements(c.parentObject(), a), maybeToggleDetailsPane:function() {
        return b._mayBeToggleDetailsPane(b.notificationIsSelected(a))
    }}).render()
}, _renderNotifications:function() {
    var a = this, b = a.model.thread_object;
    b instanceof Pot && b.projectMembershipsR().peek();
    var c = $v(a.model.notifications_r), d = a.model.maxNotificationsToShow();
    c.forEach(function(b, c) {
        a.notificationIsSelected(b) && c >= d && (d = c + 1)
    });
    var e = c.map(function(b) {
        return a._renderNotification(b)
    });
    return DIV([DIV(e.slice(0, d)), DIV({"class":"project-footer"}, [SPAN({"class":"show-more " + (c.size() <= d ? " hidden" : "")}, [SPAN({"class":"show-more-link", onclick:function() {
        a.model.loadMoreNotifications();
        a.domain_user.setLastInteractedWithNotificationFeedTime(env.clock.now())
    }}, ["show more tasks\u2026"]), SPAN({"class":"footer-separator"}, [" \u2022 "])]), A({"class":"feed-story-follow follow", onclick:function() {
        if(b instanceof Pot) {
            return b.toggleFollower(a.domain_user, a.domain_user), a.domain_user.setLastInteractedWithNotificationFeedTime(env.clock.now()), Node.STOP
        }
    }}, [(a.model.thread_object.hasFollower(a.domain_user) ? "Unfollow" : "Follow") + " " + (b instanceof Task ? "Task" : b.productTypeName())])])])
}});
__FILE__ = "apps/asana/view/inbox/pot_inbox_thread_view.js";
PotInboxThreadView = InboxThreadView.subclass("PotInboxThreadView", {}, {_viewTypeForStory:function(a) {
    if(a instanceof ProjectShareStory) {
        return ProjectShareNotificationView
    }
    if(a instanceof AddedFollowerComment) {
        return FollowerNotificationView
    }
    if(a instanceof CommentStory) {
        return CommentNotificationView
    }
    return NotificationView
}, _iconClass:function() {
    switch(this.model.mostImportantStoryLevel()) {
        case InboxThread.StoryLevel.FOLLOW:
            ;
        case InboxThread.StoryLevel.PROJECT_SHARE:
            return"project-share-icon";
        case InboxThread.StoryLevel.COMMENT:
            return"comment-icon";
        default:
            return"unknown-icon"
    }
}, _renderHeader:function() {
    return DIV({"class":"notification-header"}, [DIV({"class":"icon " + this._iconClass()}), DIV({"class":"notification-title"}, [AsanaHelpers.renderObjectLink({object:this.model.thread_object}), " " + this.model.thread_object.productTypeName()])])
}, _renderNotification:function(a) {
    var b = a.story(), c = $v(this.model.notifications_r).size() === 1 ? this.renderFollowupElements() : null, d = this._shouldGrayOutStory(b) ? "grayed-out" : "";
    return this.createView(this._viewTypeForStory(b), {model:a, is_focused:this.notificationIsSelected(a), display_selected:!1, notification_class:d, selectNotification:null, followup_elements:c}).render()
}, _renderFooter:function() {
    return DIV({"class":"project-footer"}, [this.renderFollowupElements()])
}, _renderNotifications:function() {
    var a = this, b = a.model.notifications_r.peek().map(function(b) {
        return a._renderNotification(b)
    });
    $v(a.model.notifications_r).size() > 1 && b.push(a._renderFooter());
    return DIV(b)
}});
__FILE__ = "apps/asana/view/inbox/inbox_body_view.js";
InboxBodyView = View.subclass("InboxBodyView", {}, {inbox:ATTRIBUTE_REQUIRED, state:ATTRIBUTE_REQUIRED, _viewTypeForThread:function(a) {
    if(a instanceof ItemListInboxThread) {
        return ItemListInboxThreadView
    }
    return a.thread_object instanceof Pot ? PotInboxThreadView : TaskInboxThreadView
}, _keyMap:function() {
    var a = this;
    if(!a.inbox.isEnabled()) {
        return[]
    }
    return[{key:KeyMap.Keys.TAB, up:!0, handler:function() {
        var a = env.realAppSession();
        if(a.detailsVisible()) {
            return Node.DEFAULT_AND_BUBBLE
        }else {
            a.openDetailsPane(), a = document.getElementById("property_sheet:details_property_sheet_field:comments"), a !== null && a.requestFocus()
        }
    }}, {key:"DOWN", handler:function() {
        a._selectDown()
    }}, {key:"F", handler:function() {
        a._followOrUnfollow();
        a.inbox.domain_user.setLastInteractedWithNotificationFeedTime(env.clock.now())
    }}, {key:"S", handler:function() {
        a.inbox.hasMoreUnreadNotificationsToLoad() || (a.inbox.showReadItems(), a.inbox.maybeLoadMoreNotifications());
        a.inbox.domain_user.setLastInteractedWithNotificationFeedTime(env.clock.now())
    }}, {key:"J", handler:function() {
        a._selectDown()
    }}, {key:"UP", handler:function() {
        a._selectUp()
    }}, {key:"K", handler:function() {
        a._selectUp()
    }}, {key:"ENTER", meta_or_ctrl:!0, handler:function() {
        a.markComplete()
    }}]
}, _elementToScrollIntoView:function(a) {
    var b = this.inbox.threadForNotification(a), a = b instanceof ItemListInboxThread ? NotificationView.elementIdForNotification(a) : InboxThreadView.elementIdForGroup(b);
    return document.getElementById(a)
}, _followOrUnfollow:function() {
    var a = this.inbox.domain_user, b = this.state.selectedItems();
    b.any(function(b) {
        return!b.hasFollower(a)
    }) ? b.forEach(function(b) {
        b.addFollower(a, a)
    }) : b.forEach(function(b) {
        b.removeFollower(a, a)
    })
}, _selectDown:function() {
    env.datastore_manager.setCurrentHandlerName("Inbox-SelectNotification-KeyDown");
    var a = this.state.selectedNotifications().lastValueOrNull();
    if(a = a ? this.inbox.notificationAfterNotificationOrNull(a) : this.inbox.firstNotificationOrNull()) {
        this._selectNotification(a), this._elementToScrollIntoView(a).ensureTopVisible()
    }
}, _selectUp:function() {
    env.datastore_manager.setCurrentHandlerName("Inbox-SelectNotification-KeyUp");
    var a = this.state.selectedNotifications().lastValueOrNull();
    if(a = a ? this.inbox.notificationBeforeNotificationOrNull(a) : this.inbox.firstNotificationOrNull()) {
        this._selectNotification(a), this._elementToScrollIntoView(a).ensureTopVisible()
    }
}, markComplete:View.publicMethod(function() {
    var a = this.state.selectedItems().filter(function(a) {
        return a instanceof Task
    }), b = a.all(function(a) {
        return a.getV("completed")
    });
    a.forEach(function(a) {
        a.setCompleted(!b, env.user().domainUserForDomain(a.domain()))
    })
}), _selectNotification:function(a) {
    var b = this;
    b.state.setSelectedNotification(a);
    if(Flags.enable_fast_inbox_task_switch) {
        var c = Signal.connect(env, "sync_response_sent", function() {
            Signal.disconnect(c);
            processHandler(function() {
                b.inbox.domain_user.setLastInteractedWithNotificationFeedTime(env.clock.now());
                if(a) {
                    b.inbox.threadForNotification(a).onSelectNotification(a)
                }
            })
        })
    }else {
        if(b.inbox.domain_user.setLastInteractedWithNotificationFeedTime(env.clock.now()), a) {
            b.inbox.threadForNotification(a).onSelectNotification(a)
        }
    }
}, renderFeedStories:function(a) {
    var b = this;
    return computed_lists.mapInRvalues(b.inbox.threadsR(a), function(c) {
        return b.createView(b._viewTypeForThread(c), {model:c, domain_user:b.inbox.domain_user, notificationIsSelected:function(a) {
            return b.state.selectedNotificationsL().containsObject(a)
        }, selectNotification:View.publicFunction(b, function(a) {
            b._selectNotification(a)
        }), keepNotificationUnreadGrouping:function(a) {
            b.inbox.keepNotificationUnreadGrouping(a)
        }, followupOnThreadObject:function(a, c) {
            b.inbox.followupOnThreadObject(a, c)
        }, hide_read_notifications:a, id:InboxThreadView.elementIdForGroup(c)}).render()
    })
}, maybeRenderEmptyInbox:function() {
    var a = !this.inbox.isShowingReadItems();
    if(!this.inbox.hasMoreUnreadNotificationsToLoad() && this.inbox.isUnreadEmpty()) {
        var b = [a ? SPAN({"class":"empty-inbox-picture"}, []) : "", DIV({"class":"empty-inbox-text" + (!a ? " no-empty-inbox-picture" : "")}, ["No new messages in your Inbox"])];
        a && b.push(DIV({"class":"empty-inbox-subtext"}, ["Activity on tasks and projects you're following will appear here"]));
        return DIV({"class":"empty-inbox clearfix"}, b)
    }else {
        return""
    }
}, maybeRenderShowReadItems:function() {
    var a = this;
    return!a.inbox.hasMoreUnreadNotificationsToLoad() && !a.inbox.isShowingReadItems() && !a.inbox.hasNeverReceivedNotifications() ? A({"class":"show-read-items-link", onclick:function() {
        logEvent({name:"Inbox-ShowReadItems"});
        a.inbox.showReadItems();
        a.inbox.maybeLoadMoreNotifications();
        a.inbox.domain_user.setLastInteractedWithNotificationFeedTime(env.clock.now())
    }}, ["Show Read " + Vocab.Messages + "..."]) : ""
}, maybeRenderLoadingIndicator:function() {
    return this.inbox.loadingMoreNotifications() ? AsanaHelpers.renderLoadingIndicator(null) : ""
}, renderDisabledInbox:function() {
    return DIV({"class":"inbox-unavailable"}, ["Your inbox is temporarily unavailable. We apologize for the inconvenience and are working on restoring your access as soon as possible.", BR([]), BR([]), "If this issue persists, please visit the ", A({onclick:function() {
        window.openAsync("http://help.asana.com/", "_blank")
    }}, ["Help Center."])])
}, _render:function() {
    var a = this;
    return DIV({id:"inbox", "class":"inbox", key_map:a._keyMap(), tabindex:0}, [!a.inbox.isEnabled() ? a.renderDisabledInbox() : AsanaHelpers.renderWithinLoadingBoundary("DIV", [$rval(function() {
        return DIV({"class":"empty-inbox-section"}, [a.maybeRenderEmptyInbox()])
    }), $rval(function() {
        return DIV({"class":"unread-section"}, a.renderFeedStories(!0))
    }), $rval(function() {
        return DIV({"class":"read-section"}, a.renderFeedStories(!1))
    }), $rval(function() {
        return DIV({"class":"show-read-section"}, [a.maybeRenderShowReadItems()])
    }), $rval(function() {
        return DIV({"class":"loading-indicator-section"}, [a.maybeRenderLoadingIndicator()])
    })])])
}});
__FILE__ = "apps/asana/view/inbox/inbox_view.js";
InboxView = View.subclass("InboxView", [ICenterPaneView], {State:SessionObject2.subclass("InboxView.State", [ISelectionState], {property_descs:{selected_notifications:{type:List, default_value:[]}}}, {touchForModel:function(a) {
    this.selectedNotifications();
    a.inbox().touch()
}, setSelectedNotification:function(a) {
    this.selectedNotificationsL().requestClear();
    a && this.selectedNotificationsL().requestInsertBefore(a, null);
    env.realAppSession().detailsState().resetSubtaskState()
}, selectedNotification:function() {
    return this.selectedNotifications().firstValueOrNull()
}, selectedItemsR:rvalueProperty("selectedItemsR", function() {
    return this.selectedNotifications().map(function(a) {
        return a.story().parentObject()
    })
})})}, {model:ATTRIBUTE_REQUIRED, inbox:SET_IN_CONSTRUCTOR, column_visible_l:ATTRIBUTE_REQUIRED, expanded_width_x:ATTRIBUTE_REQUIRED, height_x:ATTRIBUTE_REQUIRED, left_x:null, ontransitionend:null, _inbox_header_view:SET_IN_CONSTRUCTOR, _inbox_body_view:SET_IN_CONSTRUCTOR, constructor:function(a) {
    InboxView.superproto.constructor.call(this, a);
    this.inbox = this.model.inbox();
    this._inbox_header_view = this.createView(InboxHeaderView, {inbox:this.inbox, state:this._state});
    this._inbox_body_view = this.createView(InboxBodyView, {inbox:this.inbox, state:this._state})
}, _render:function() {
    var a = this, b = a._renderBody(), c = a._renderHeader();
    return a.createView(ColumnView, {id:"center_pane", "class":" notifications", header_contents_x:c, body_contents_x:b, height_x:a.height_x, left_x:a.left_x, expanded_width_x:a.expanded_width_x, ontransitionend:a.ontransitionend, column_visible_l:!0, is_navigating_x:$rval(function() {
        return env.isNavigating()
    }), onScrollToBottom:View.publicFunction(a, function() {
        !env.isInTest() && a.inbox.isEnabled() && a.inbox.maybeLoadMoreNotifications() && env.datastore_manager.setCurrentHandlerName("Inbox-LoadMore")
    })}).render()
}, _renderHeader:function() {
    return this._inbox_header_view.render()
}, _renderBody:function() {
    var a = this;
    return DIV({key_map:[{key:"H", handler:function() {
        a._inbox_header_view.hideReadItems()
    }}]}, [a._inbox_body_view.render()])
}, bottomBarShortcuts:function() {
    var a = this;
    if(!a.inbox.isEnabled()) {
        return[]
    }
    return[{id:"quick_add_button", k:[KeyMap.KeyNameFuncs.TAB, "Q"], d:"Quick Add", shouldShow:!0, action:function() {
        env.realAppSession().openQuickAddDialog()
    }}, {id:"comment_bottom_button", k:[KeyMap.KeyNameFuncs.TAB, "C"], d:"Comment", shouldShow:!0, action:function() {
        env.realAppSession().openDetailsPaneIfClosedAndRunInHandler(function() {
            env.setFocus(PropertySheetView.focusableElementId(DetailsView.PROPERTY_SHEET_NAME, "comments"))
        })
    }}, {id:"mark_complete_button", k:[KeyMap.KeyNameFuncs.META_OR_CTRL, KeyMap.KeyNameFuncs.ENTER], d:"Mark Complete", shouldShow:!0, action:function() {
        a._inbox_body_view.markComplete()
    }}, {id:"open_details_button", k:[KeyMap.KeyNameFuncs.TAB_ONLY], d:"Open Details", shouldShow:function() {
        return!env.realAppSession().detailsVisible()
    }, action:function() {
        env.realAppSession().openDetailsPane()
    }}, {id:"close_details_button", k:[KeyMap.KeyNameFuncs.ESC], d:"Close Details", shouldShow:function() {
        return env.realAppSession().detailsVisible()
    }, action:function() {
        env.realAppSession().toggleDetailsPane()
    }}]
}});
__FILE__ = "apps/asana/view/header_name_view.js";
HeaderNameView = View.subclass("HeaderNameView", {}, {data_x:ATTRIBUTE_REQUIRED, element_attributes:ATTRIBUTE_REQUIRED, assignee:null, is_user_task_list:!1, is_atm:!1, _renderPhoto:function() {
    var a = this;
    return AsanaHelpers.renderWithinHiddenLoadingBoundary("DIV", [$rval(function() {
        return a.createView(PhotoView, {who:a.assignee, size:PhotoView.Size.MEDIUM, show_initials:!1, silhouette_class:a.is_atm ? null : "no-photo", onClick:a.is_atm ? PhotoView.ClickHandler.setPhoto : null, show_tooltip:a.is_atm}).render()
    })])
}, _render:function() {
    return this.data_x instanceof Lvalue ? this.createView(AutogrowTextareaView, {data:this.data_x, "class":"header-name", textarea_attributes:this.element_attributes}).render() : DIV(update({"class":"header-name read-only"}, this.element_attributes), [this.is_user_task_list ? this._renderPhoto() : "", this.data_x])
}});
__FILE__ = "apps/asana/view/dialog/out_of_date_dialog_view.js";
OutOfDateDialogView = View.subclass("OutOfDateDialogView", {}, {_render:function() {
    if(!$v(env.datastore_manager.out_of_date_dialog_visible_x)) {
        return""
    }
    return this.createView(DialogView, {element_id:"out_of_date_dialog", title_x:"Asana needs to be reloaded.", body_x:DIV(['While you were working, we updated Asana. To take advantage of these improvements, please hit "Reload" in your browser window.', BR(), BR(), "If you were in the middle of writing something, please close this message, copy any unsaved text to your clipboard, reload, and paste it back in. We apologize for this hassle. Thanks for using Asana.", BR(), BR(), AsanaForms.renderButton({label:"Reload",
        "class":"primary", onclick:function() {
            window.location.reload()
        }, tabindex:0})]), onclose:function() {
        env.datastore_manager.out_of_date_dialog_visible_x.requestSet(!1);
        env.datastore_manager.error_message_lvalue.requestSet("Out of date, please refresh")
    }}).render()
}});
__FILE__ = "apps/asana/view/dialog/copy_dialog_view.js";
CopyDialogView = DialogView2.subclass("CopyDialogView", {State:DialogState.subclass("CopyDialogView.State", {registry_name:"CopyDialogState", property_descs:{text_to_copy:{type:String, default_value:""}}}, {})}, {dialog_name:"copy_dialog", _render:function() {
    return this.createView(DialogView, {element_id:this.dialog_name, flush_body_style:!1, title_x:"Copy", banner_x:"You can select the text below and copy it", body_x:DIV({style:{overflowX:"hidden"}}, flattenArguments(this._state.getV("text_to_copy").split("\n").map(function(a) {
        return[a, BR()]
    })))}).render()
}});
__FILE__ = "apps/asana/view/dialog/workspace_invite_dialog_view.js";
WorkspaceInviteDialogView = DialogView2.subclass("WorkspaceInviteDialogView", {State:DialogState.subclass("WorkspaceInviteDialogView.State", {property_descs:{invite_status:{type:String}, domain:{type:Domain}}}, {}), show:attributedValueFunc({domain:ATTRIBUTE_REQUIRED, invite_status:ATTRIBUTE_REQUIRED}, function(a) {
    return WorkspaceInviteDialogView.superclass.show.call(this, a)
})}, {_render:function() {
    var a = this, b, c, d = a._state.inviteStatus();
    d === WorkspaceLinkInviteStatus.DEPRECATED ? (b = "Invite links no longer supported", c = DIV([B(["Workspace invite links are no longer supported. We are very sorry for the inconvenience."]), DIV(["Contact the person who invited you for assistance."])])) : d === WorkspaceLinkInviteStatus.LIMIT_REACHED ? (c = a._state.domain().name(), b = c.toUpperCase() + " IS FULL", c = DIV([B(["Sorry! " + c + " has reached it's 30-person limit."]), DIV(["Contact the person who invited you for assistance."])])) :
        d === WorkspaceLinkInviteStatus.INVITE_INVALID ? (b = "Invalid workspace invite", c = DIV([B(["The invite link you used is no longer valid."]), DIV(["Contact the person who invited you for assistance."])])) : ufu("Invalid dialog status", d);
    return a.createView(MessageDialogView, {id:"workspace_invite_dialog", title_x:b, body_x:TABLE([TR([TD({"class":"icon error"}), TD({"class":"invite-status-message"}, [c])])]), buttons:null, onClose:function() {
        a.hide()
    }}).render()
}});
__FILE__ = "apps/asana/view/dialog/message_dialog_view.js";
MessageDialogView = View.subclass("MessageDialogView", {}, {title_x:ATTRIBUTE_REQUIRED, body_x:ATTRIBUTE_REQUIRED, id:ATTRIBUTE_REQUIRED, icon_class:null, buttons:ATTRIBUTE_REQUIRED, onClose:null, _render:function() {
    var a = this;
    return a.createView(DialogView, {title_x:a.title_x, body_x:DIV({id:a.id, "class":"message-dialog-body"}, [TABLE([TR({}, [a.icon_class !== null ? TD([DIV({"class":"icon " + a.icon_class}, [])]) : "", TD([a.body_x])]), TR({}, [a.icon_class !== null ? TD() : "", TD([DIV({"class":"message-dialog-buttons", children:concat(a.icon_class !== null ? [SPAN({"class":"button-spacer"})] : [], a.buttons)})])])])]), onclose:a.onClose === null ? null : function() {
        a.onClose()
    }}).render()
}});
__FILE__ = "apps/asana/view/dialog/workflow_progress_dialog_view.js";
WorkflowProgressDialogView = DialogView2.subclass("WorkflowProgressDialogView", {State:DialogState.subclass("WorkflowProgressDialogView.State", {property_descs:{workflow:{type:StateObject}, action:{type:String}, result:{type:String}}}, {}), show:attributedValueFunc({workflow:ATTRIBUTE_REQUIRED, action:ATTRIBUTE_REQUIRED, result:ATTRIBUTE_REQUIRED}, function(a) {
    return WorkflowProgressDialogView.superclass.show.call(this, a)
})}, {_render:function() {
    AccountDialogView.touch();
    var a = this._state.getV("result");
    return a === IWorkflow.Result.SUCCESS ? this._renderSuccess(this._state.getV("workflow"), this._state.getV("action")) : this._renderFailure(a)
}, _id:function() {
    return"workflow_progress_dialog"
}, _renderSuccess:function() {
    var a = this, b = function() {
        a.hide()
    }, c = P({}, ["Please go back to your Account Settings if you would like to add another email."]);
    return a.createView(MessageDialogView, {id:a._id(), title_x:"Your email address change has been cancelled", body_x:c, buttons:[AsanaForms.renderButton({label:"OK", onclick:b, id:"workflow_progress_ok", "class":"primary", tabindex:0})], onClose:b}).render()
}, _renderFailure:function() {
    var a = this, b = function() {
        a.hide()
    };
    return a.createView(MessageDialogView, {id:a._id(), title_x:"We couldn't verify your email", body_x:DIV({}, [P({}, ["The email verification link you clicked is invalid."]), P({}, ["Try copying the entire link from your email and pasting it into your browser, or visit your account settings to try adding the new email address again."])]), icon_class:"error", buttons:[AsanaForms.renderButton({label:"Go to Account Settings", onclick:function() {
        b();
        AccountDialogView.show({selected_tab:AccountDialogTabs.EMAIL_NOTIFICATIONS})
    }, id:"workflow_progress_account", "class":"primary", tabindex:0}), AsanaForms.renderButton({label:"Dismiss", onclick:b, id:"workflow_progress_ok", tabindex:0})], onClose:b}).render()
}});
__FILE__ = "apps/asana/view/dialog/ical_dialog_view.js";
IcalDialogView = DialogView2.subclass("IcalDialogView", {}, {State:DialogState.subclass("IcalDialogView.State", {registry_name:"IcalDialogState", property_descs:{pots:{type:List}, ical_uri:{type:String, default_value:intl("Loading...")}}}, {})}, {_render:function() {
    var a = this;
    return a.createView(DialogView, {title_x:"Sync to Calendar", body_x:$rval(function() {
        var b = a._icalUri();
        URI.encodeComponent(b);
        return DIV([P(["Show the due dates of your Asana tasks in Google Calendar, iCal, Outlook, or other programs:"]), DIV({"class":"ical-link-paragraph"}, [AsanaHelpers.renderExternalLink(b, b, {"class":"ical-uri"})]), P([UL({"class":"ical-info"}, [LI(["Feed will include only tasks with due dates."]), LI(["Feed will not include tasks marked complete."]), LI(["Calendaring services update at different frequencies. Due date changes may take a short while to appear on your calendar."])])]), P([A({"class":"ical-help-link",
            href:"http://help.asana.com/customer/portal/articles/243374-view-tasks-in-a-calendar-with-ical-feeds?t=47562"}, ["Learn more from our Asana Help article."])])])
    })}).render()
}, _icalUri:serverComputedPropertyAllowingUnknown("IcalDialogView._icalUrl", function() {
    return ServerUrl.icalUri(this._state.pots())
})});
__FILE__ = "apps/asana/view/dialog/duplicate_project_dialog_view.js";
DuplicateProjectDialogView = DialogView2.subclass("DuplicateProjectDialogView", {State:DialogState.subclass("DuplicateProjectDialogView.State", {property_descs:{pot:{type:Pot}, name:{type:String}, include_description:{type:Boolean}, include_assignee:{type:Boolean}, include_tags:{type:Boolean}, include_task_followers:{type:Boolean}, include_subtasks:{type:Boolean}, include_project_members:{type:Boolean}, include_projects:{type:Boolean}, include_due_date:{type:Boolean}}}, {}), show:attributedFunc({pot:ATTRIBUTE_REQUIRED,
    name:ATTRIBUTE_REQUIRED, include_description:!0, include_assignee:!0, include_tags:!0, include_task_followers:!0, include_subtasks:!0, include_project_members:!0, include_projects:!1, include_due_date:!1}, function(a) {
    DialogView2.show.call(this, a);
    env.setFocus("duplicate_project_name_input");
    env.setSelectionForFocusedElement(0, -1)
})}, {_renderOptionRow:function(a, b, c) {
    var d = b.toLowerCase().replace(/ /g, "_");
    return TR({"class":"option-row"}, [c ? TD({"class":"field-name"}, ["Include"]) : TD([]), TD({"class":"field-value"}, [INPUT({id:"duplicate_project_option_" + d, data:a, data_type:"boolean"}), SPAN([b])])])
}, _renderNameRow:function() {
    return TR({"class":"name-row"}, [TD({"class":"field-name"}, ["Project Name"]), TD({"class":"field-value"}, [INPUT({"class":"generic-input showing", data:this._state.nameL(), id:"duplicate_project_name_input", tabindex:0}, [])])])
}, _render:function() {
    var a = this;
    return a.createView(DialogView, {element_id:"duplicate_project_dialog", title_x:"Duplicate Project", banner_x:"Duplicating a project will create new versions of all tasks, including those that are marked completed and archived in this project.", body_x:DIV({"class":"form-view"}, [TABLE([a._renderNameRow(), a._renderOptionRow(a._state.includeDescriptionL(), "Notes", !0), a._renderOptionRow(a._state.includeAssigneeL(), "Assignee"), a._renderOptionRow(a._state.includeSubtasksL(), "Subtasks"), a._renderOptionRow(a._state.includeTagsL(),
        "Tags"), a._renderOptionRow(a._state.includeTaskFollowersL(), "Task Followers"), a._renderOptionRow(a._state.includeProjectMembersL(), "Project Members"), a._renderOptionRow(a._state.includeProjectsL(), "Other Projects"), a._renderOptionRow(a._state.includeDueDateL(), "Due Date")])]), footer_x:DIV({"class":"buttons", children:[SPAN({"class":"button-spacer"}), AsanaForms.renderButton({label:"Create New Project", onclick:View.publicFunction(a, function() {
        env.datastore_manager.enactChange(DuplicateProjectChange.create({pot:a._state.pot(), name:a._state.name(), include_description:a._state.includeDescription(), include_assignee:a._state.includeAssignee(), include_tags:a._state.includeTags(), include_task_followers:a._state.includeTaskFollowers(), include_subtasks:a._state.includeSubtasks(), include_project_members:a._state.includeProjectMembers(), include_projects:a._state.includeProjects(), include_due_date:a._state.includeDueDate()}));
        a._state.hide()
    }), id:"duplicate_project_dialog_submit", "class":"primary", tabindex:0})]})}).render()
}});
__FILE__ = "apps/asana/view/widgets/filter_helper.js";
FilterHelper = AsanaObject.subclass("FilterHelper", {}, {filter_text_r:ATTRIBUTE_REQUIRED, constructor:attributedConstructorAfterSuper(AsanaObject, noop), _filterTextMatchRegexpsR:rvalueProperty("_filterTextMatchRegexps", function() {
    var a = $v(this.filter_text_r).trim();
    if(a === "") {
        return null
    }
    return a.split(/\s+/).map(function(a) {
        return Typeahead.regexpFromFilterText(a)
    })
}), filteredListR:function(a, b) {
    var c = this, d;
    d = $rval(function() {
        var d = c._filterTextMatchRegexpsR();
        return FilterRvalue.createWithRvalues(a, function(a) {
            var c = b(a), a = d.peek();
            return a === null || a.all(function(a) {
                return a.test(c)
            })
        })
    }, "FilterHelper.filterListR");
    return $rval(function() {
        var b = c.filter_text_r.peek();
        return b === null || b === "" ? a : d
    }, "FilterInputView.filterListR")
}});
__FILE__ = "apps/asana/view/widgets/filter_input_view.js";
FilterInputView = View.subclass("FilterInputView", {}, {id:ATTRIBUTE_REQUIRED, filter_text_l:ATTRIBUTE_REQUIRED, filter_text_handler:null, onFocus:null, onBlur:null, onReset:null, placeholder:"", is_search_box:!1, _input_node:SET_IN_CONSTRUCTOR, constructor:function(a) {
    var b = this;
    FilterInputView.superproto.constructor.call(this, a);
    b._filter_helper = FilterHelper.create({filter_text_r:b.filter_text_l});
    b._input_node = INPUT({onfocus:b.onFocus, onblur:b.onBlur, id:b.id, "class":"generic-input showing" + (b.is_search_box ? " search-box" : ""), data:b.filter_text_l, handler:b.filter_text_handler, placeholder:b.placeholder, key_map:[{key:KeyMap.Keys.ESC, handler:function() {
        if(b._hasFilterText()) {
            $L(b.filter_text_l).requestSet("");
            if(b.onReset) {
                b.onReset()
            }
            return Node.STOP
        }else {
            return Node.DEFAULT_AND_BUBBLE
        }
    }}]})
}, _render:function() {
    return this._input_node
}, _renderIcon:function() {
    var a = this;
    return DIV({"class":$rval(function() {
        return"filter-input-icon" + (a._hasFilterText() ? " has-filter-text" : "")
    }, "FilterInputView.filter_input_icon_class"), onclick:function() {
        $L(a.filter_text_l).requestSet("");
        if(a.onReset) {
            a.onReset()
        }
        env.setFocus(a._input_node.id)
    }})
}, isFocusedR:function() {
    return this._input_node.isFocusedR()
}, _hasFilterText:function() {
    return $v(this.filter_text_l).length > 0
}, filterListR:function(a, b) {
    return this._filter_helper.filteredListR(a, b)
}, inputNode:function() {
    return this._input_node
}});
__FILE__ = "apps/asana/view/widgets/pot_privacy_icon_view.js";
PotPrivacyIconView = View.subclass("PotPrivacyIconView", {ALLOW_DUPLICATES:!0}, {model:ATTRIBUTE_REQUIRED, _render:function() {
    var a = this;
    return a.model.domain().isGlobal() || !a.model.isPrivateToCurrentUser() ? "" : SPAN({"class":"lock-icon", tooltip:function() {
        return ProjectShareButtonView.renderPrivacySummary(a.model)
    }})
}});
__FILE__ = "apps/asana/view/widgets/list_sections_view.js";
ListSectionsView = View.subclass("ListSectionsView", {State:SessionObject2.subclass("ListSectionsView.State", {registry_name:"ListSectionsViewState", property_descs:{serialized_selected_item:{type:String, default_value:null}}}, {})}, {id:ATTRIBUTE_REQUIRED, list_sections_x:ATTRIBUTE_REQUIRED, session:ATTRIBUTE_REQUIRED, filter_text_r:ATTRIBUTE_REQUIRED, min_filter_text_length:1, selection_enabled_r:ATTRIBUTE_REQUIRED, mutable_items_can_be_removed:ATTRIBUTE_REQUIRED, _selected_item_r:SET_IN_CONSTRUCTOR,
    _filter_text_regexp_r:SET_IN_CONSTRUCTOR, constructor:function(a) {
        var b = this;
        ListSectionsView.superproto.constructor.call(this, a);
        var c = b.getSelectedItemInfoR();
        env.world_store.peekXvaluesAndStateObjectScalarsWithoutDependencies([c], []);
        b._filter_text_regexp_r = $rval(function() {
            return Typeahead.regexpFromFilterText($v(b.filter_text_r))
        }, "ListSectionsView._filter_text_regexp_r");
        b._selected_item_info_r = $rval(function() {
            return knownReturnValueOrDefault(function() {
                if($v(b.selection_enabled_r)) {
                    var a = $v(c), e = $v(b.list_sections_x);
                    return a === null || !b._listSectionContainsItem(e, a.get("section_id"), a.get("item")) ? b._defaultSelection(!1) : a
                }else {
                    return null
                }
            }, null)
        }, "LiveFilterInputView._selected_item_info_r");
        b._selected_item_r = $rval(function() {
            var a = $v(b._selected_item_info_r);
            return a !== null ? a.get("item") : null
        }, "ListSectionsView._selected_item_r");
        env.world_store.peekXvaluesAndStateObjectScalarsWithoutDependencies([b._selected_item_r], [])
    }, _render:function() {
        var a = this;
        return DIV({"class":"list-sections-view", id:a.id}, computed_lists.mapInRvalues(a.list_sections_x, function(b) {
            return a.createView(ListSectionView, {session:a.session, list_section:b, list_sections_view:a}).render()
        }))
    }, _defaultSelection:function(a) {
        for(var b = $v(this.list_sections_x), c = null, d = 0;d < b.length;d++) {
            var e = b[d], f = e.firstGroupItemOrNull();
            if(f !== null && (!e.explicit_selection_only || a)) {
                var g = Map.mapize({section_id:e.id, item:e.firstGroupItemOrNull()});
                if(f !== e.newLinkItemOrNull()) {
                    return g
                }else {
                    c === null && (c = g)
                }
            }
        }
        return c
    }, getSelectedItemInfoR:function() {
        var a = this;
        if(this._selected_item_info_r === void 0) {
            this._selected_item_info_r = $rval(function() {
                var b = a._state.serializedSelectedItem();
                return b === null ? null : Deserializer.deserialize(b)
            }, "ListSectionsView.getSelectedItemR")
        }
        return this._selected_item_info_r
    }, setSelectedItemInfo:function(a) {
        this._state.setSerializedSelectedItem(Serializer.serialize(a))
    }, onReset:function() {
        this._state.setSerializedSelectedItem(null)
    }, getSelectedItemR:function() {
        return this._selected_item_r
    }, _selectedListSectionAndItemOrNull:function() {
        var a = $v(this._selected_item_info_r), b = null, c = null;
        if(a !== null) {
            var d = a.get("section_id"), c = a.get("item");
            (b = $v(this.list_sections_x).find(function(a) {
                return a.id === d
            })) && c === b.newLinkItemOrNull() && (c = null)
        }
        return{section:b, item:c}
    }, getSelectedItemOrNull:View.publicMethod(function() {
        return this._selectedListSectionAndItemOrNull().item
    }), selectItemIfSelected:View.publicMethod(function() {
        var a = this._selectedListSectionAndItemOrNull(), b = a.section;
        if(b !== null) {
            return a = a.item, a === null ? b.onNewItem(this._filterTextValueOrBlank()) : b.onSelectItem(a)
        }
    }), moveSelectionDown:function() {
        var a = this, b = $v(a.list_sections_x), c = function() {
            var c = $v(a._selected_item_info_r);
            if(c !== null) {
                for(var e = c.get("item"), c = c.get("section_id"), f = null, g = !1, h = 0;h < b.length;h++) {
                    var i = b[h];
                    if(g || i.id === c) {
                        if(g ? f = i.firstGroupItemOrNull() : (f = i.groupItemAfterGroupItemOrNull(e), g = !0), f !== null) {
                            return Map.mapize({section_id:i.id, item:f})
                        }
                    }
                }
                return null
            }else {
                return a._defaultSelection(!0)
            }
        };
        env.datastore_manager.runUntimelyFunc(function() {
            var d = c();
            if(d !== null) {
                a.setSelectedItemInfo(d);
                var e = a._listSectionById(b, d.get("section_id"));
                document.getElementById(e._itemElementId(a, d.get("item"))).ensureBottomVisible()
            }
        })
    }, moveSelectionUp:function() {
        var a = this;
        env.datastore_manager.runUntimelyFunc(function() {
            var b = $v(a._selected_item_info_r);
            if(b !== null) {
                for(var c = b.get("item"), b = b.get("section_id"), d = $v(a.list_sections_x), e = null, f = !1, g = d.length - 1;g >= 0;g--) {
                    var h = d[g];
                    if(f || h.id === b) {
                        if(f ? e = h.lastGroupItemOrNull() : (e = h.groupItemBeforeGroupItemOrNull(c), f = !0), e !== null) {
                            a.setSelectedItemInfo(Map.mapize({section_id:h.id, item:e}));
                            document.getElementById(h._itemElementId(a, e)).ensureTopVisible();
                            break
                        }
                    }
                }
            }
        })
    }, filterEffectivelyActive:function() {
        return $v(this.filter_text_r).trim().length >= this.min_filter_text_length
    }, _listSectionContainsItem:function(a, b, c) {
        return(a = this._listSectionById(a, b)) && a.containsItem(c)
    }, _listSectionById:function(a, b) {
        return a.find(function(a) {
            return a.id === b
        })
    }, _filterTextValueOrBlank:function() {
        return $v(this.filter_text_r) || ""
    }});
ListSectionView = View.subclass("ListSectionView", {}, {session:ATTRIBUTE_REQUIRED, list_sections_view:ATTRIBUTE_REQUIRED, list_section:ATTRIBUTE_REQUIRED, id:SET_IN_CONSTRUCTOR, constructor:function(a) {
    a.id = a.list_section.id;
    ListSectionView.superproto.constructor.call(this, a)
}, _render:function() {
    var a = this;
    if(a.list_section.hide_when_empty && a.list_section.isEmpty()) {
        return""
    }
    var b = [AsanaHelpers.renderWithinLoadingBoundary("DIV", [a._renderConstantItems(), a._renderNewItemLink()])], c = a.list_section.renderHeader();
    return DIV({"class":"list-section", id:a.list_section.id}, [c ? DIV({"class":"list-section-title"}, [SPAN({"class":"label"}, [c])]) : "", DIV({"class":"list-section-items"}, b), $rval(function() {
        return a.list_section.renderFooter !== null ? DIV({"class":"list-section-footer"}, [a.list_section.renderFooter()]) : ""
    }, "ListSectionView.footer")])
}, _renderNewItemLink:function() {
    var a = this, b = function() {
        a.list_section.onNewItem(a.list_sections_view._filterTextValueOrBlank());
        return Node.STOP
    };
    return $rval(function() {
        if($v(a.list_section.shouldShowNewItemX)) {
            var c = FastEqualsRvalue.create(a.list_section.newLinkItemOrNull(), a.list_sections_view.getSelectedItemR());
            return $rval(function() {
                var d = $v(c) ? " selected" : "";
                return DIV({"class":"new-item" + d, id:a.list_section._itemElementId(a.list_sections_view, a.list_section.newLinkItemOrNull()), onclick:b}, [SPAN({"class":"title"}, [a.list_section.new_item_label_x]), a.list_sections_view.filter_text_r])
            })
        }else {
            return""
        }
    }, "ListSectionView._renderNewItemLink")
}, _renderConstantItems:function() {
    var a = this;
    return DIV(computed_lists.map(a.list_section.constant_items_x, function(b) {
        return a._renderItem(b, null)
    }))
}, _renderItem:function(a, b, c) {
    var c = c || function(a) {
        return a
    }, d = this, e = d.list_section.isActiveX(a), f = FastEqualsRvalue.create(a, d.list_sections_view.getSelectedItemR());
    return $rval(function() {
        var g = $rval(function() {
            var a = $v(e) ? "item active" : "item";
            b || (a += " static");
            $v(f) && (a += " selected");
            return a
        }, "ListSectionsView._renderItem.class_name"), h = $v(d.list_sections_view._filter_text_regexp_r);
        return DIV({id:d.list_section._itemElementId(d.list_sections_view, a), "class":g, onclick:function() {
            d.list_section.onSelectItem(a);
            return Node.STOP
        }, onmouseenter:function() {
            env.datastore_manager.runUntimelyFunc(function() {
                d.list_sections_view.setSelectedItemInfo(Map.mapize({section_id:d.list_section.id, item:a}))
            })
        }}, c(d.list_section.renderHighlightedItem(a, function(a) {
            return isKnown(a) && a !== null ? a.split(h).map(function(a, b) {
                return b % 2 === 1 ? STRONG([a]) : a
            }) : a
        })))
    }, "ListSectionView._renderItem")
}});
ListSectionsView.ListSection = AsanaObject.subclass("ListSectionsView.ListSection", {}, {id:ATTRIBUTE_REQUIRED, header_text:null, renderFooter:null, hide_when_empty:!1, constant_items_x:ATTRIBUTE_REQUIRED, explicit_selection_only:!1, renderHighlightedItem:ATTRIBUTE_REQUIRED, new_item_label_x:ATTRIBUTE_REQUIRED, onSelectItem:ATTRIBUTE_REQUIRED, onNewItem:ATTRIBUTE_REQUIRED, shouldShowNewItemX:ATTRIBUTE_REQUIRED, isActiveX:ATTRIBUTE_REQUIRED, renderHeader:function() {
    return this.header_text || ""
}, _new_link_id:SET_IN_CONSTRUCTOR, constructor:function(a) {
    ListSectionsView.ListSection.superproto.constructor.call(this);
    updateWithAttributes(this, a);
    this._new_link_id = "__new_link" + this.id
}, isEmpty:function() {
    var a = toValueAllowingUnknown(this.constant_items_x);
    return isUnknown(a) || a.isEmpty()
}, containsItem:function(a) {
    return a !== null && a === this.newLinkItemOrNull() ? !0 : $v(this.constant_items_x).contains(a)
}, firstGroupItemOrNull:function() {
    return toValueOrDefaultIfUnknown(this.constant_items_x, List.EMPTY_LIST).first() || this.newLinkItemOrNull()
}, lastGroupItemOrNull:function() {
    var a = toValueOrDefaultIfUnknown(this.constant_items_x, List.EMPTY_LIST);
    return this.newLinkItemOrNull() || a.last() || null
}, groupItemAfterGroupItemOrNull:function(a) {
    var b = toValueOrDefaultIfUnknown(this.constant_items_x, List.EMPTY_LIST);
    return a === this.newLinkItemOrNull() ? null : b.contains(a) ? b.valueAfterValueOrNull(a) || this.newLinkItemOrNull() : null
}, newLinkItemOrNull:function() {
    return $v(this.shouldShowNewItemX) ? this._new_link_id : null
}, groupItemBeforeGroupItemOrNull:function(a) {
    var b = toValueOrDefaultIfUnknown(this.constant_items_x, List.EMPTY_LIST);
    return a === this.newLinkItemOrNull() ? $v(this.constant_items_x).lastValueOrNull() : b.contains(a) ? b.valueBeforeValueOrNull(a) : null
}, _itemElementId:function(a, b) {
    var c = b === this.newLinkItemOrNull() ? b : b.global_id;
    return a.fully_qualified_view_name + "(" + this.id + "." + c + ")"
}});
__FILE__ = "apps/asana/view/widgets/tooltip_view.js";
TooltipView = View.subclass("TooltipView", {LEFT_OF:"tooltip-left-of", RIGHT_OF:"tooltip-right-of", BELOW:"tooltip-below", GRAV_DOWN:"tooltip-gravity-down", GRAV_UP:"tooltip-gravity-up", GRAV_CENTER:"tooltip-gravity-center", GRAV_LEFT:"tooltip-gravity-left", GRAV_RIGHT:"tooltip-gravity-right", assertContentsOk:function() {
}}, {placement:"tooltip-below", gravity:"tooltip-gravity-center", relative_to:ATTRIBUTE_REQUIRED, contents:ATTRIBUTE_REQUIRED, delay:0, "class":"", silhouette:!1, nofade:!1, constructor:function(a) {
    TooltipView.superproto.constructor.call(this, a);
    TooltipView.assertContentsOk(a.contents)
}, _makeContents:function() {
    return typeof this.contents === "string" ? this.contents : this.contents()
}, _render:function() {
    var a = this, b = a.placement, c = a.gravity, d = a.relative_to, e = DIV({"class":"tooltip-arrow"}), f = DIV({"class":"tooltip-body shadow-tooltip-body"}, [a.silhouette ? DIV({"class":"tooltip-silhouette"}) : "", a._makeContents()]), g = f.dimensions, h = e.dimensions, i = $rval(function() {
        if(!d || env.is_server) {
            return"display: none"
        }
        var e = a.browser.width(), f = a.browser.height(), i = 0, j = 0;
        switch(b) {
            case TooltipView.LEFT_OF:
                i = d.dimensions.x() - h.width() - g.width();
                break;
            case TooltipView.RIGHT_OF:
                i = d.dimensions.x() + d.dimensions.width() + h.width();
                break;
            case TooltipView.BELOW:
                j = d.dimensions.y() + d.dimensions.height() + h.height()
        }
        switch(b) {
            case TooltipView.LEFT_OF:
                ;
            case TooltipView.RIGHT_OF:
                var q = d.dimensions.contentTop() + d.dimensions.contentHeight() / 2;
                switch(c) {
                    case TooltipView.GRAV_CENTER:
                        j = q - g.height() / 2;
                        break;
                    case TooltipView.GRAV_DOWN:
                        j = q - l.dimensions.height();
                        break;
                    case TooltipView.GRAV_UP:
                        j = q - g.height() + l.dimensions.height();
                        break;
                    case TooltipView.GRAV_LEFT:
                        ;
                    case TooltipView.GRAV_RIGHT:
                        ufu("Cannot slide a 'left' or 'right' tooltip sideways.")
                }
                break;
            case TooltipView.BELOW:
                switch(q = d.dimensions.contentLeft() + d.dimensions.contentWidth() / 2, c) {
                    case TooltipView.GRAV_CENTER:
                        i = q - g.width() / 2;
                        break;
                    case TooltipView.GRAV_LEFT:
                        i = q - l.dimensions.width();
                        break;
                    case TooltipView.GRAV_RIGHT:
                        i = q - g.width() + l.dimensions.width();
                        break;
                    case TooltipView.GRAV_DOWN:
                        ;
                    case TooltipView.GRAV_UP:
                        ufu("Cannot slide a 'below' tooltip vertically.")
                }
        }
        switch(b) {
            case TooltipView.LEFT_OF:
                ;
            case TooltipView.RIGHT_OF:
                j < 0 && (j = 0);
                j + g.height() > f && (j = f - g.height());
                break;
            case TooltipView.BELOW:
                i < 0 && (i = 0), i + g.width() > e && (i = e - g.width())
        }
        if(!d.isInDocument()) {
            return"display: none;"
        }
        return"left: " + i + "px; top: " + j + "px; "
    }), j = $rval(function() {
        if(!d || env.is_server) {
            return"display: none"
        }
        switch(b) {
            case TooltipView.LEFT_OF:
                var a = d.dimensions.x() - h.width(), c = d.dimensions.contentTop() + d.dimensions.contentHeight() / 2 - h.height() / 2;
                break;
            case TooltipView.RIGHT_OF:
                a = d.dimensions.x() + d.dimensions.width();
                c = d.dimensions.contentTop() + d.dimensions.contentHeight() / 2 - h.height() / 2;
                break;
            case TooltipView.BELOW:
                a = d.dimensions.contentLeft() + d.dimensions.contentWidth() / 2 - h.width() / 2, c = d.dimensions.y() + d.dimensions.height()
        }
        if(!d.isInDocument()) {
            return"display: none;"
        }
        return"left: " + a + "px; top: " + c + "px; "
    }), l = DIV({"class":"tooltip-arrow", style:j}), i = DIV({"class":"tooltip-body", style:i}, [a.silhouette ? DIV({"class":"tooltip-silhouette"}) : "", a._makeContents()]);
    return DIV({"class":["tooltip", b, a["class"]].join(" "), style:$rval(function() {
        if(!d) {
            return"display: none"
        }
        var b = "0s, " + a.delay + "ms", c = a.delay + "ms, " + (a.nofade ? "0ms" : "150ms");
        return"-webkit-animation-delay: " + b + "; -webkit-animation-duration: " + c + "; -moz-animation-delay: " + b + "; -moz-animation-duration: " + c + ";"
    })}, [l, i, e, f])
}});
__FILE__ = "apps/asana/view/nux_tooltip_view.js";
NuxTooltipView = DialogView2.subclass("NuxTooltipView", {State:DialogState.subclass("NuxTooltipView.State", {}, {})}, {_render:function() {
    var a = this;
    document.body.reactiveListen("click", function() {
        a.hide();
        return Node.DEFAULT_AND_BUBBLE
    }, !0);
    if(env.realAppSession().detailsVisible()) {
        var b = TooltipView.LEFT_OF, c = document.getElementsByClassName("details-pane-title")[0], d = "Here are the details of your task.", e = "Get more info on the task and communicate with your team in the comments below."
    }else {
        if(this._userHasNewTasks()) {
            b = TooltipView.BELOW, c = document.getElementsByClassName("group new_tasks_group")[0], d = "Your teammates have given you tasks.", e = "Organize, get more info, and communicate with your team by clicking the arrows on the right to get more detail."
        }else {
            if(this._activeDomainHasProjects()) {
                b = TooltipView.RIGHT_OF, c = env.realAppSession().inOverview() ? document.getElementsByClassName("workspace-header")[0] : document.getElementById("navigation-dock-pot-list"), env.realAppSession().activeDomain().isGlobal() ? (d = "", e = "Check out the projects your friends have shared with you.") : (d = "Check out your team's projects.", e = "Browsing projects is the best way to learn how your team uses Asana.")
            }else {
                if(env.user().shouldShowNewWorkspaceTour()) {
                    return""
                }else {
                    b = TooltipView.RIGHT_OF, c = document.getElementById("add_project_button"), d = "Create the first project for your team.", e = "We recommend setting up a little before inviting the rest of your team."
                }
            }
        }
    }
    if(!c) {
        return log.warn("unable to find NUX tooltip relative-to element; title=", d), ""
    }
    return this.createView(TooltipView, {"class":"nux-tooltip", placement:b, relative_to:c, contents:function() {
        return DIV([DIV({"class":"close-icon"}), STRONG([a._renderSalutation(), SPAN({"class":"nux-tooltip-title"}, [d])]), P([e])])
    }}).render()
}, _renderSalutation:function() {
    var a = env.user().firstName();
    return a && a.indexOf("@") === -1 ? "Hi, " + a + "! " : ""
}, _activeDomainHasProjects:function() {
    var a = env.realAppSession(), a = env.user().domainUserForDomain(a.activeDomain());
    return!$v(a.projectsModel().allKnownPotsR(!1)).isEmpty()
}, _userHasNewTasks:computedProperty("_userHasNewTasks", function() {
    var a = env.realAppSession(), b = a.currentList();
    return b === env.user().taskList(a.activeDomain()) && !b.newTasks().isEmpty()
})});
__FILE__ = "apps/asana/computed_model/item_list_group.js";
ItemListGroup = GridBlock.subclass("ItemListGroup", {}, {task_grouper:ATTRIBUTE_REQUIRED, pot:ATTRIBUTE_REQUIRED, group:ATTRIBUTE_REQUIRED, expanded_groups_l:ATTRIBUTE_REQUIRED, visible_list_r:ATTRIBUTE_REQUIRED, _collapsable:SET_IN_CONSTRUCTOR, _group_pot:SET_IN_CONSTRUCTOR, constructor:function(a) {
    ItemListGroup.superproto.constructor.call(this, a);
    this._collapsable = this.task_grouper.isGroupCollapsable(this.group);
    this._group_pot = this.task_grouper.groupPotForViewPotAndGroup(this.pot, this.group);
    this._inner_model = this.group === this.task_grouper.SpecialGroup.DUE ? DueDateItemListSection.create({pot:this._group_pot, group:this.group, list_items_r:this.visible_list_r, blockAbove:this.blockAbove, blockBelow:this.blockBelow, parent_block:this, display_order_key_part:null}) : TriPartItemList.create({pot:this._group_pot, task_grouper:this.task_grouper, group:this.group, only_show_main_part:this.task_grouper.shouldOnlyShowMainPart(this.group), visible_list_r:this.visible_list_r, blockAbove:this.blockAbove,
        blockBelow:this.blockBelow, parent_block:this, display_order_key_part:null})
}, isCollapsable:function() {
    return this._collapsable
}, isExpanded:function() {
    return!this.isCollapsable() || env.is_server || this.expanded_groups_l.containsObject(this.group)
}, shouldShowAssignee:function() {
    return this.task_grouper.shouldShowAssignee(this._group_pot)
}, innerModel:function() {
    return this._inner_model
}, childBlockForGroupItem:function() {
    return this._inner_model
}, firstGroupItemOrNull:function() {
    return this.isExpanded() ? this._inner_model.firstGroupItemOrNull() : null
}, lastGroupItemOrNull:function() {
    return this.isExpanded() ? this._inner_model.lastGroupItemOrNull() : null
}, groupItemBeforeGroupItemOrNull:function(a) {
    return this.isExpanded() ? this._inner_model.groupItemBeforeGroupItemOrNull(a) : null
}, groupItemAfterGroupItemOrNull:function(a) {
    return this.isExpanded() ? this._inner_model.groupItemAfterGroupItemOrNull(a) : null
}, _makeItemConform:function(a) {
    this.task_grouper.makeItemConform(this.pot, this.group, a)
}});
__FILE__ = "apps/asana/view/item_list_groups_view.js";
ItemListGroupsView = View.subclass("ItemListGroupsView", {}, {grid_state:ATTRIBUTE_REQUIRED, model:ATTRIBUTE_REQUIRED, enclosing_item_list_view:ATTRIBUTE_REQUIRED, _group_to_group_view:SET_IN_CONSTRUCTOR, constructor:function(a) {
    ItemListGroupsView.superproto.constructor.call(this, a);
    this._group_to_group_view = FastMap.create()
}, _render:function() {
    var a = this, b = function(b) {
        return a._renderGroup(b)
    }, c = "";
    a.model.task_grouper.groupsCouldBeUnderLater() && (c = $rval(function() {
        if($v(a.model.sortedGroupsPostLaterR()).isEmpty()) {
            return""
        }else {
            var c = a.enclosing_item_list_view.grid_state.showAllMyTasksL();
            return FRAG([a.createView(AllMyTasksBarView, {show_all_my_tasks_l:c}).render(), $v(c) || env.is_server ? FRAG(computed_lists.mapInRvalues(a.model.sortedGroupsPostLaterR(), b)) : ""])
        }
    }));
    return DIV({"class":"item-list-groups"}, [FRAG(computed_lists.mapInRvalues(a.model.sortedGroupsPreLaterR(), b)), c])
}, _renderGroup:function(a) {
    var b = this, c = b.model.task_grouper.SpecialGroup.UPCOMING === a ? $rval(function() {
        return b.model.sortedGroups().size() > 1
    }) : !0, c = b.createView(ItemListGroupView, {model:b.model.itemListGroup(a), enclosing_item_list_view:b.enclosing_item_list_view, show_header_x:c, id:ItemListView._groupId(a)});
    b._group_to_group_view.put(a, c);
    return c.render()
}});
__FILE__ = "apps/asana/view/row_view.js";
RowView = View.subclass("RowView", {_renderDragIndicatorUnbound:function(a) {
    a = a.objects;
    a.length !== 1 ? (a.length === 0 && host.recordWarning("Dragging zero items - how did we get here?"), a = a.length + " items") : a = a.first().name() || "1 item";
    return DIV({"class":"dragged_object"}, [a])
}}, {grid_state:ATTRIBUTE_REQUIRED, dnd_helper:ATTRIBUTE_REQUIRED, main_grid_cell_key_map:null, model:ATTRIBUTE_REQUIRED, first_item_number:ATTRIBUTE_REQUIRED, item_number_offset:ATTRIBUTE_REQUIRED, draggable:ATTRIBUTE_REQUIRED, drop_target:ATTRIBUTE_REQUIRED, show_assignee:ATTRIBUTE_REQUIRED, section_name:ATTRIBUTE_REQUIRED, enclosing_item_list_view:ATTRIBUTE_REQUIRED, task_grouper:ATTRIBUTE_REQUIRED, group:ATTRIBUTE_REQUIRED, group_item:SET_IN_CONSTRUCTOR, drag_drop_region:ATTRIBUTE_REQUIRED, _is_selected_x:SET_IN_CONSTRUCTOR,
    constructor:function(a) {
        var b = this;
        b.main_grid_cell_key_map = [];
        RowView.superproto.constructor.call(this, a);
        b._is_selected_x = $rval(function() {
            return b.grid_state.isItemSelected(b.model)
        });
        b.group_item = ItemListView.GroupItem.create(b.group, b.model)
    }, _render:ABSTRACT, _isEditable:function(a) {
        a === void 0 && (a = $v(this._is_selected_x));
        return a && !this.enclosing_item_list_view.inMultiSelect() && (!(this.model instanceof ItemList) || !this.model.isUserTaskList())
    }, _renderCell:function(a) {
        var b = this, a = updateWithDefaults(a, {data_type:ATTRIBUTE_REQUIRED, data_r:ATTRIBUTE_REQUIRED, is_main:ATTRIBUTE_REQUIRED, is_editable:!0}), c = a.data_type, d = a.data_r;
        if(c === "boolean") {
            c = "grid_cell_boolean", a = INPUT({type:"checkbox", data:d})
        }else {
            if(c === "number") {
                c = "grid_cell_number", a = $v(data)
            }else {
                var e = a.is_main, c = $rval(function() {
                    return b._isEditable() ? "grid_cell_string insert_mode" : "grid_cell_string non_insert_mode"
                }), f = {key_map:e ? b.main_grid_cell_key_map : [], tabindex:e ? b._getMainInputTabindexR() : -1};
                if(e) {
                    f.id = b.grid_state.mainInputElementIdForGroupItem(ItemListView.GroupItem.create(b.group, b.model))
                }
                a.is_editable ? f.data = d : f.style = {opacity:0};
                a = DIV([INPUT(f), DIV([d, Node.NBSP])])
            }
        }
        return TD({"class":c}, [a])
    }, _getMainInputTabindexR:function() {
        var a = this;
        return $rval(function() {
            return a._isEditable() ? 0 : -1
        })
    }, _getItemNumber:function() {
        var a = $v(this.first_item_number);
        return a === null ? "" : a + $v(this.item_number_offset) + 1
    }, isFirstItem:function() {
        return $v(this.item_number_offset) === 0
    }});
__FILE__ = "apps/asana/view/widgets/schedule_status_views.js";
ScheduleStatusViews = {toLabel:function(a) {
    switch(a) {
        case Task.ScheduleStatus.NEW:
            return"New";
        case Task.ScheduleStatus.TODAY:
            return"Today";
        case Task.ScheduleStatus.UPCOMING:
            return"Upcoming";
        case Task.ScheduleStatus.OK:
            return"Later"
    }
}, renderIcon:function(a, b) {
    if(a === Task.ScheduleStatus.COMPLETED) {
        return""
    }
    var c = "Marked for " + ScheduleStatusViews.toLabel(a);
    switch(a) {
        case Task.ScheduleStatus.NEW:
            var d = "new-task-icon", c = "Not yet prioritized";
            break;
        case Task.ScheduleStatus.TODAY:
            d = "today-icon";
            break;
        case Task.ScheduleStatus.UPCOMING:
            d = "upcoming-icon";
            break;
        case Task.ScheduleStatus.OK:
            d = "later-icon"
    }
    return b ? SPAN({"class":"status-icon " + d, tooltip:c, tooltip_delay:200}) : SPAN({"class":"status-icon " + d})
}, toHotkey:function(a) {
    switch(a) {
        case Task.ScheduleStatus.TODAY:
            return"y";
        case Task.ScheduleStatus.UPCOMING:
            return"u";
        case Task.ScheduleStatus.OK:
            return"l"
    }
}};
__FILE__ = "apps/asana/view/widgets/schedule_status_menu_view.js";
ScheduleStatusMenuView = View.subclass("ScheduleStatusMenuView", {}, {status_objects:ATTRIBUTE_REQUIRED, selected_objects_x:ATTRIBUTE_REQUIRED, id:ATTRIBUTE_REQUIRED, runOnSelect:ATTRIBUTE_REQUIRED, _domain_user:null, constructor:function(a) {
    ScheduleStatusMenuView.superproto.constructor.call(this, a);
    this._status_tasks = this.status_objects.filter(function(a) {
        return a instanceof Task && !a.isBar()
    });
    if(this._status_tasks.length > 0) {
        this._domain_user = env.user().domainUserForDomain(this._status_tasks[0].domain())
    }
}, wrapOnSelectHandler:function(a) {
    var b = this;
    return function() {
        b.runOnSelect === null ? a() : b.runOnSelect(a)
    }
}, _render:function() {
    var a = this;
    if(a._status_tasks.isEmpty()) {
        return""
    }
    assertInstanceof(a._domain_user, DomainUser);
    var b = a._status_tasks[0], c = b.scheduleStatus(), d, e = "", f = [Node.NBSP];
    a._status_tasks.length > 1 ? d = "mixed" : b.isCompleted() ? (d = "complete", e = "Marked complete") : c === Task.ScheduleStatus.NEW ? (c = b.getAssigneeOrNull(), c !== null && c === a._domain_user ? (d = "users_new_task", e = "Choose when you plan to work on this task.") : (d = "other_new_task", e = "Not yet prioritized")) : c === Task.ScheduleStatus.OK ? d = "ok" : c === Task.ScheduleStatus.UPCOMING ? (d = "upcoming", e = "Marked for Upcoming. Click to change.") : c === Task.ScheduleStatus.TODAY ?
        (d = "today", e = "Marked for Today. Click to change.") : ufu("unknown status", c);
    f = SPAN({"class":"schedule-status " + d, tooltip:e, tooltip_delay:200}, f);
    return a._status_tasks.length === 1 && b.getAssigneeOrNull() === null ? (f.set("onclick", function() {
        b.setCompleted(!b.getV("completed"), a._domain_user)
    }), f) : a._renderDropdownMenuView(f)
}, _renderDropdownMenuView:function(a) {
    var b = this, c = [], d = b.createView(DropdownMenuView, {id:"schedule_status_dropdown_" + b.id, additional_class:"schedule-status-dropdown", label:a, include_arrow:!1, menu_items:c, use_watch_for_focus:!1});
    if(d.isOpen()) {
        var e = TaskRowView.tasksToMutateWhenClickingOneMetadataCell($v(b.selected_objects_x), b._status_tasks[0]), f = Map.create();
        e.map(function(a) {
            a = b._menuItemsAttributes(a);
            a.forEach(function(a) {
                a.onselect !== void 0 && f.setDefault(a.id, []).push(a.onselect)
            });
            return a
        })[0].forEach(function(a) {
                var d = f.getOr(a.id, []);
                if(e.length === 1 || d.length === e.length) {
                    var g = {};
                    if(e.length > 1) {
                        g.onselect = function() {
                            d.forEach(function(a) {
                                a.call(null)
                            })
                        }
                    }
                    c.push(b._item(copyAndUpdate(a, g)))
                }
            });
        var g = {};
        c.map(function(a) {
            g[a.id] = a
        });
        var h = function(a) {
            a in g && (g[a].onselect(), d.close())
        };
        return SPAN({key_map:[{key:"L", handler:function() {
            h("ok")
        }}, {key:"U", handler:function() {
            h("upcoming")
        }}, {key:"Y", handler:function() {
            h("today")
        }}, {key:"I", handler:function() {
            h("incomplete")
        }}, {key:"C", handler:function() {
            h("complete")
        }}, {key:KeyMap.Keys.ESC, handler:b.wrapOnSelectHandler(noop)}]}, [d.render()])
    }else {
        return d.render()
    }
}, _menuItemsAttributes:function(a) {
    var b = this, c = a.scheduleStatus(), d = [];
    KeyMap.KeyNameFuncs.META_OR_CTRL();
    KeyMap.KeyNameFuncs.ENTER();
    var e = a.getAssigneeOrNull(), f = e === b._domain_user, e = e !== null;
    !f && e && c === Task.ScheduleStatus.NEW && d.push({id:"not-accepted", text:"Not yet prioritized"});
    c === Task.ScheduleStatus.TODAY ? d.push({id:"today", text:"Marked for Today"}) : f && d.push({id:"today", text:SPAN(["Mark for Toda", U(["y"])]), onselect:View.publicFunction(b, function() {
        a.setCompleted(!1, b._domain_user);
        a.setScheduleStatus(Task.ScheduleStatus.TODAY)
    }), should_be_under_mouse:c === Task.ScheduleStatus.UPCOMING});
    c === Task.ScheduleStatus.UPCOMING ? d.push({id:"upcoming", text:"Marked for Upcoming"}) : f && d.push({id:"upcoming", text:SPAN(["Mark for ", U(["U"]), "pcoming"]), onselect:View.publicFunction(b, function() {
        a.setCompleted(!1, b._domain_user);
        a.setScheduleStatus(Task.ScheduleStatus.UPCOMING)
    }), should_be_under_mouse:!1});
    c === Task.ScheduleStatus.OK && e ? d.push({id:"ok", text:f ? "Marked for Later" : "Accepted"}) : f && d.push({id:"ok", text:SPAN(["Mark for ", U(["L"]), "ater"]), onselect:View.publicFunction(b, function() {
        a.setCompleted(!1, b._domain_user);
        a.setScheduleStatus(Task.ScheduleStatus.OK)
    }), should_be_under_mouse:c === Task.ScheduleStatus.NEW});
    return d
}, _item:attributedFunc({id:ATTRIBUTE_REQUIRED, text:ATTRIBUTE_REQUIRED, onselect:null, should_be_under_mouse:!1, shortcut_nodes:[]}, function(a) {
    return{id:a.id, label:SPAN({"class":a.id + (a.onselect === null ? " selected" : ""), children:[SPAN({"class":"icon"}), a.text]}), onselect:this.wrapOnSelectHandler(a.onselect || function() {
    }), shortcut_nodes:a.shortcut_nodes, should_be_under_mouse:a.should_be_under_mouse}
})});
__FILE__ = "apps/asana/view/widgets/typeahead_view.js";
TypeaheadViewState = SessionObject2.subclass("TypeaheadViewState", {property_descs:{filter_text:{type:String, default_value:""}, is_expanded:{type:Boolean, default_value:!1}, serialized_selected_value:{type:String}}, create:attributedValueFunc({}, function() {
    var a = env.session_store.createStateObject(TypeaheadViewState, {filter_text:"", is_expanded:!1});
    a.requestSetSelectedValue(null);
    return a
})}, {});
TypeaheadView = View.subclass("TypeaheadView", {State:TypeaheadViewState}, {id:ATTRIBUTE_REQUIRED, focusable_element_id:SET_IN_CONSTRUCTOR, onSelectItem:ATTRIBUTE_REQUIRED, blurSelf:noop, dropdown_width:null, enforce_max_dropdown_height:!0, getItemNameX:ATTRIBUTE_REQUIRED, on_focus_text_x:"", require_altered_text_to_expand:!1, allow_clear:!1, new_item_label:"New", should_show_new_item_r:null, renderHighlightedItem:function(a, b) {
    return b($v(this.getItemNameX(a)))
}, renderTypeaheadFooter:function() {
    return""
}, candidate_item_sections:ATTRIBUTE_REQUIRED, blur_on_selection:!1, filter_text_handler:null, placeholder:"", is_search_box:!1, _filter_input_view:SET_IN_CONSTRUCTOR, _list_sections_view:SET_IN_CONSTRUCTOR, filter_text_l:null, min_filter_text_length:1, _is_expanded_r:SET_IN_CONSTRUCTOR, constructor:function(a) {
    var b = this;
    TypeaheadView.superproto.constructor.call(b, a);
    if(!("focusable_element_id" in a)) {
        b.focusable_element_id = b.id + "__input"
    }
    var c = b.isFocusedR();
    b.filter_text_l = b.filter_text_l || b._state.filterTextL();
    b._is_expanded_r = $rval(function() {
        return $v(c) && (b._state.isExpanded() || b.filterText() !== "") && (!b.require_altered_text_to_expand || b.filterText() !== b.on_focus_text_x)
    }, "TypeaheadView._is_expanded_r");
    b._filter_input_view = b.createView(FilterInputView, {id:b.focusable_element_id, filter_text_l:b.filter_text_l, filter_text_handler:b.filter_text_handler, onFocus:function() {
        b.on_focus_text_x && (b.setFilterText($v(b.on_focus_text_x)), env.setSelectionForFocusedElement(0, -1))
    }, onBlur:function() {
        b.collapse();
        b.clearFilterText()
    }, placeholder:b.placeholder, is_search_box:b.is_search_box, onReset:function() {
        b._onReset()
    }});
    b.candidate_item_sections !== null && b._createListSectionsView()
}, _createListSectionsView:function() {
    var a = this;
    a._list_sections_view = a.createView(ListSectionsView, {id:a.id + "_list_sections_view", session:null, list_sections_x:a.candidate_item_sections.map(function(b) {
        return ListSectionsView.ListSection.create({id:b.id, hide_when_empty:b.hide_when_empty, header_text:b.header_text, renderFooter:b.renderSectionFooter, constant_items_x:b.auto_filter ? a._filterListR(b.items_x) : b.items_x, explicit_selection_only:b.explicit_selection_only, renderHighlightedItem:function(b, d) {
            return a.renderHighlightedItem(b, d)
        }, new_item_label_x:a.new_item_label, onSelectItem:function(b) {
            return a._selectItemAndBlur(b)
        }, onNewItem:function(c) {
            return a._selectItemAndBlur(b.onNewItem(c))
        }, shouldShowNewItemX:b.onNewItem === null ? !1 : $rval(function() {
            return a.filterText() !== "" && (a.should_show_new_item_r === null || $v(a.should_show_new_item_r))
        }, "TypeaheadView.shouldShowNewItemX"), isActiveX:function() {
            return!1
        }})
    }), selection_enabled_r:!0, filter_text_r:a.filter_text_l, min_filter_text_length:a.min_filter_text_length, mutable_items_can_be_removed:!1})
}, _onReset:function() {
    this._list_sections_view.onReset();
    this.clearFilterText();
    this.collapse()
}, _selectItemAndBlur:function(a) {
    var b = Node.STOP;
    if(a || this.allow_clear && this.filterText() === "") {
        b = this.onSelectItem(a)
    }
    this._onReset();
    this.blur_on_selection && this.blurSelf();
    return b
}, _filterListR:function(a) {
    var b = this;
    return b._filter_input_view.filterListR(a, function(a) {
        return $v(b.getItemNameX(a))
    })
}, setFilterText:function(a) {
    this.filter_text_l.requestSet(a)
}, filterText:function() {
    return $v(this.filter_text_l)
}, setSelectedValue:function(a) {
    this._state.setSerializedSelectedValue(Serializer.serialize(a))
}, selectedValue:function() {
    return Deserializer.deserialize(this._state.serializedSelectedValue())
}, expand:function() {
    this._state.setIsExpanded(!0);
    this.setSelectedValue(null)
}, collapse:function() {
    this._state.setIsExpanded(!1)
}, clearFilterText:function() {
    this.setFilterText("");
    this.setSelectedValue(null)
}, setCandidateItemSections:function(a) {
    this.candidate_item_sections = a;
    this._createListSectionsView()
}, filterInputNode:function() {
    return this._filter_input_view.inputNode()
}, isFocusedR:function() {
    return env.isElementIdFocusedR(this.focusable_element_id)
}, _renderDropdown:function(a) {
    var b = this, c = $rval(function() {
        var a = b.renderTypeaheadFooter();
        return a ? DIV({"class":"typeahead-footer"}, [a]) : ""
    }, "TypeaheadViewFooter");
    $rval(function() {
        $v(b._is_expanded_r) && b.createView(DropdownView, {relative_to_element_id:b._filter_input_view.inputNode().id, enforce_max_dropdown_height:b.enforce_max_dropdown_height, contents:DIV({id:b.id + "_dropdown", "class":"typeahead-dropdown", onmousedown:function() {
        }, style:{width:b.dropdown_width ? b.dropdown_width : a.dimensions.width() - 4}}, [AsanaHelpers.renderWithinLoadingBoundary("DIV", [b._list_sections_view.render(), c])])}).renderIntoBody()
    }, "TypeaheadView._renderDropdown").becomeWatch().peek()
}, _render:function() {
    var a = this;
    a._rendered_filter_input = a._filter_input_view.render();
    this._renderDropdown(a._rendered_filter_input);
    return SPAN({"class":"typeahead " + (a.candidate_item_sections.length > 1 ? "multi-sectioned" : "single-sectioned"), style:{position:"relative"}, key_map:[{key:"UP", handler:function() {
        a._list_sections_view.moveSelectionUp()
    }}, {key:"DOWN", handler:function() {
        $v(a._is_expanded_r) ? a._list_sections_view.moveSelectionDown() : a.expand()
    }}, {key:"ENTER", handler:function() {
        return $v(a._is_expanded_r) ? a._list_sections_view.selectItemIfSelected() : a.allow_clear && a.filterText() === "" ? a._selectItemAndBlur(null) : Node.DEFAULT_AND_BUBBLE
    }}, {key:"TAB", handler:function() {
        if($v(a._is_expanded_r)) {
            var b = a._list_sections_view.getSelectedItemOrNull();
            if(b !== null) {
                a.onSelectItem(b)
            }else {
                return a._list_sections_view.selectItemIfSelected()
            }
        }else {
            if(a.allow_clear && a.filterText() === "") {
                a.onSelectItem(null)
            }
        }
        return Node.DEFAULT_AND_BUBBLE
    }}]}, [a._rendered_filter_input])
}});
TypeaheadView.ItemSection = AsanaObject.subclass("TypeaheadView.ItemSection", {}, {id:ATTRIBUTE_REQUIRED, items_x:ATTRIBUTE_REQUIRED, auto_filter:!0, explicit_selection_only:!1, header_text:null, hide_when_empty:!1, renderSectionFooter:null, onNewItem:null, constructor:function(a) {
    TypeaheadView.ItemSection.superproto.constructor.call(this);
    updateWithAttributes(this, a)
}});
__FILE__ = "apps/asana/view/search_view.js";
SearchView = View.subclass("SearchView", {State:SessionObject2.subclass("SearchView.State", {property_descs:{filter_text:{type:String, default_value:""}}}, {}), MIN_SEARCH_CHARS:2, NUM_RESULTS:10, _MAX_PARENT_TASK_LENGTH:40, search_status:{UNAVAILABLE:"UNAVAILABLE", TOO_FEW_CHARACTERS:"TOO_FEW_CHARACTERS", NO_MATCHES:"NO_MATCHES", TOO_MANY_MATCHES:"TOO_MANY_MATCHES", OK:"OK", RESULTS_INCOMPLETE:"RESULTS_INCOMPLETE"}, mergeWithLocalFirst:function(a) {
    return function(b) {
        var c = List.create($v(a));
        b.forEach(function(a) {
            c.contains(a) || c.append(a)
        });
        return c
    }
}, serverComputedItemSection:attributedFunc({id:ATTRIBUTE_REQUIRED, header_text:null, hide_when_empty:!1, mergeWithLocalObjects:function(a) {
    return a
}, serverSearch:ATTRIBUTE_REQUIRED, postProcess:null, is_search_active_r:ATTRIBUTE_REQUIRED, fully_qualified_view_name:ATTRIBUTE_REQUIRED, filter_text_r:ATTRIBUTE_REQUIRED, renderFooter:ATTRIBUTE_REQUIRED, onNewItem:null, min_search_chars:null, num_results:null}, function(a) {
    var b = a.min_search_chars === null ? SearchView.MIN_SEARCH_CHARS : a.min_search_chars, c = a.num_results === null ? SearchView.NUM_RESULTS : a.num_results, d = $rval(function() {
        return $v(a.is_search_active_r) ? serverComputedValueAllowingUnknown(a.fully_qualified_view_name + "#" + a.id, function() {
            var b = $v(a.filter_text_r);
            return a.serverSearch(b)
        }) : []
    }), e = $rval(function() {
        return $v(a.is_search_active_r) ? serverComputedValueAllowingUnknown(a.fully_qualified_view_name + "#" + a.id + "#" + $v(a.filter_text_r), function() {
            $v(d);
            return!0
        }) : !0
    }), f = $rval(function() {
        var b = $v(d), c = [];
        $v(a.is_search_active_r) && (c = a.postProcess !== null ? a.postProcess(b) : b.map(function(a) {
            return env.world_store.objectWithoutAC(a)
        }));
        return c.slice(0, SearchView.NUM_RESULTS)
    }), g = $rval(function() {
        var b = f.peekAllowingUnknown();
        return a.mergeWithLocalObjects(isUnknown(b) ? List.EMPTY_LIST : List.create(b))
    });
    return{section:TypeaheadView.ItemSection.create({id:a.id, header_text:a.header_text, hide_when_empty:a.hide_when_empty, items_x:g, renderSectionFooter:function() {
        var f = SearchView._searchStatus({is_search_active_r:a.is_search_active_r, filter_text_r:a.filter_text_r, min_search_chars:b, num_results:c, all_objects_r:g, server_search_done_r:e, server_objects_r:d});
        return a.renderFooter(f)
    }, onNewItem:a.onNewItem}), search_done_r:$rval(function() {
        return toValueAllowingUnknown(e) === !0
    })}
}), renderSectionFooter:function(a) {
    switch(a) {
        case SearchView.search_status.UNAVAILABLE:
            return SearchView._renderSearchUnavailable();
        case SearchView.search_status.TOO_FEW_CHARACTERS:
            return SearchView._renderTooManyMatches();
        case SearchView.search_status.RESULTS_INCOMPLETE:
            return AsanaHelpers.renderLoadingIndicator();
        case SearchView.search_status.NO_MATCHES:
            return SearchView._renderNoMatches();
        case SearchView.search_status.TOO_MANY_MATCHES:
            return SearchView._renderTooManyMatches();
        case SearchView.search_status.OK:
            return"";
        default:
            ufu("Unknown search_status: ", a)
    }
}, _renderNoMatches:function() {
    return DIV({"class":"no-matches"}, ["No matches found"])
}, _renderTooManyMatches:function() {
    return"Too many matches, keep typing to refine"
}, _renderSearchUnavailable:function() {
    return DIV({"class":"search-unavailable"}, [TABLE({}, [TR({}, [TD({"class":"icon"}), TD({}, ["Sorry, search is temporarily unavailable."])])])])
}, _searchStatus:attributedFunc({is_search_active_r:ATTRIBUTE_REQUIRED, filter_text_r:ATTRIBUTE_REQUIRED, min_search_chars:ATTRIBUTE_REQUIRED, num_results:ATTRIBUTE_REQUIRED, all_objects_r:ATTRIBUTE_REQUIRED, server_search_done_r:ATTRIBUTE_REQUIRED, server_objects_r:ATTRIBUTE_REQUIRED}, function(a) {
    var b = $v(a.filter_text_r).length;
    if(b > 0 && b < a.min_search_chars) {
        return SearchView.search_status.TOO_FEW_CHARACTERS
    }
    if(toValueAllowingUnknown(a.server_search_done_r) instanceof UnknownValue.SearchUnavailable) {
        return SearchView.search_status.UNAVAILABLE
    }
    if($v(a.is_search_active_r) && a.server_search_done_r.isUnknown()) {
        return SearchView.search_status.RESULTS_INCOMPLETE
    }
    if($v(a.all_objects_r).size() === 0) {
        return SearchView.search_status.NO_MATCHES
    }
    if($v(a.is_search_active_r) && $v(a.server_objects_r).size() > a.num_results) {
        return SearchView.search_status.TOO_MANY_MATCHES
    }
    return SearchView.search_status.OK
}), renderHighlightedItem:function(a, b, c) {
    var d = SearchView._namesOf, e = a instanceof Task, f = e ? a.getAssigneesR() : [], g = e ? a.tagsX() : [], h = "", i = b(a.name());
    if(e) {
        var j = a.findParent();
        j !== null && i.push(SPAN({"class":"parent"}, [" \u2039 " + j.name()]))
    }
    e && (a.dueDate(), a.completed() && (h += " completed"));
    a instanceof Pot && a.getV("is_archived") && (h += " archived");
    return[DIV({"class":h}, [DIV({"class":"result"}, i), SPAN({"class":"metadata"}, b(concat(!c || a instanceof Domain ? [] : [a.domain().name()], d(f), d(g)).join(", ")))])]
}, _namesOf:function(a, b) {
    return Rvalue.map(a, function(a) {
        return b !== void 0 ? Format.truncateWithEllipses(a.name(), b) : a.name()
    })
}}, {onSelectItem:ATTRIBUTE_REQUIRED, session:ATTRIBUTE_REQUIRED, blurSelf:ATTRIBUTE_REQUIRED, search_all_domains:ATTRIBUTE_OPTIONAL, preloadItem:noop, id_prefix:ATTRIBUTE_REQUIRED, _is_search_active_r:SET_IN_CONSTRUCTOR, _domains_r:SET_IN_CONSTRUCTOR, constructor:function(a) {
    var b = this;
    SearchView.superproto.constructor.call(b, a);
    b._is_search_active_r = $rval(function() {
        return b._state.filterText().length >= SearchView.MIN_SEARCH_CHARS
    }, "SearchView.is_search_active");
    b._domains_r = $rval(function() {
        var a = b.session.activeDomain();
        if(!b.search_all_domains) {
            return a === null ? [] : [a]
        }
        return env.user().domains().toArray().sort(function(b, e) {
            if(b === a) {
                return-1
            }
            if(e === a) {
                return 1
            }
            if(b.name() < e.name()) {
                return-1
            }
            if(b.name() > e.name()) {
                return 1
            }
            return 0
        })
    }, "SearchView.domains_r")
}, _searchClient:Memoize.memoizeInThis("_getSearchClient", function() {
    return AsanaSearchClient.create(SearchClient.create(env.user()))
}), _render:function() {
    var a = this, b = a.session.activeDomain();
    if(b === null) {
        return""
    }
    var c = function(a, b) {
        return List.create(a.map(b).reduce(function(a, b) {
            return concat(a, b)
        }, []))
    }, d = $rval(function() {
        return c($v(a._domains_r), function(a) {
            a = env.user().domainUserForDomain(a);
            return $v(a.projectsModel().allKnownPotsR(!0)).toArray()
        })
    }), e = $rval(function() {
        return c($v(a._domains_r), function(a) {
            a = env.user().domainUserForDomain(a);
            return a.canSeePublicData() ? $v(a.tagsModel().allKnownPotsR()).toArray() : []
        })
    });
    $rval(function() {
        var a = concat($v(d).toArray(), $v(e).toArray());
        env.world_store.peekStateObjectProperties(a, ["is_archived"])
    }).becomeWatch().peek();
    var f = [a._serverComputedItemSection({id:a.id_prefix + "search_projects_section", header_text:"Projects", hide_when_empty:!0, local_objects_x:d, serverObjects:function(b) {
        return c($v(a._domains_r), function(c) {
            return a._searchClient().searchPots(c, b, SearchView.NUM_RESULTS + 1, function(a) {
                return a.isProject()
            })
        }).map(StateObject.globalId)
    }}), UserTypeaheadView.usersTypeaheadSection({id:a.id_prefix + "search_people_section", fully_qualified_view_name:a.fully_qualified_view_name, searchClient:function() {
        return a._searchClient()
    }, domain_user:env.user().domainUserForDomain(b), filter_text_r:a._state.filterTextL(), header_text:"People", hide_when_empty:!0}).section, TypeaheadView.ItemSection.create({id:a.id_prefix + "search_workspaces_section", header_text:"Workspaces", hide_when_empty:!0, items_x:$rval(function() {
        return env.user().domains()
    })}), a._serverComputedItemSection({id:a.id_prefix + "search_tasks_section", header_text:"Tasks", serverObjects:function(b) {
        return c($v(a._domains_r), function(c) {
            return a._searchClient().searchTasks(c, b, SearchView.NUM_RESULTS + 1)
        }).map(StateObject.globalId)
    }}), a._serverComputedItemSection({id:a.id_prefix + "search_tags_section", header_text:"Tags", hide_when_empty:!0, local_objects_x:e, serverObjects:function(b) {
        return c($v(a._domains_r), function(c) {
            if(!env.user().domainUserForDomain(c).canSeePublicData()) {
                return[]
            }
            return a._searchClient().searchPots(c, b, SearchView.NUM_RESULTS + 1, function(a) {
                return!a.isProject()
            })
        }).map(StateObject.globalId)
    }})];
    a._typeahead_view = a.createView(TypeaheadView, {id:a.id_prefix + "search", filter_text_l:a._state.filterTextL(), focusable_element_id:a.id_prefix + "search_input", min_filter_text_length:SearchView.MIN_SEARCH_CHARS, filter_text_handler:function() {
        var b = a._typeahead_view.filterInputNode().value;
        a._state.filterText().length === 0 && logEvent({name:"Search-Started"});
        a._state.setFilterText(b);
        $v(a._is_search_active_r) && env.datastore_manager.setCurrentHandlerName("Search-Jump2Task-KeyPress");
        return Node.JUST_DEFAULT
    }, placeholder:"Search", is_search_box:!0, dropdown_width:"580px", enforce_max_dropdown_height:!1, onSelectItem:a.onSelectItem, blurSelf:a.blurSelf, blur_on_selection:!0, getItemNameX:function(a) {
        return a instanceof DomainUser ? a.name() + " " + a.email() : a.name()
    }, renderHighlightedItem:function(b, c) {
        a.preloadItem(b);
        return SearchView.renderHighlightedItem(b, c, !1)
    }, renderTypeaheadFooter:function() {
        return $v(a._domains_r).size() > 1 ? "Searching in all workspaces" : "Searching in " + b.name()
    }, candidate_item_sections:f});
    return a._typeahead_view.render()
}, _serverComputedItemSection:attributedFunc({id:ATTRIBUTE_REQUIRED, header_text:ATTRIBUTE_REQUIRED, hide_when_empty:!1, local_objects_x:[], serverObjects:ATTRIBUTE_REQUIRED}, function(a) {
    return SearchView.serverComputedItemSection({id:a.id, header_text:a.header_text, hide_when_empty:a.hide_when_empty, mergeWithLocalObjects:SearchView.mergeWithLocalFirst(a.local_objects_x), serverSearch:a.serverObjects, is_search_active_r:this._is_search_active_r, fully_qualified_view_name:this.fully_qualified_view_name, filter_text_r:this._state.filterTextL(), renderFooter:function(a) {
        return SearchView.renderSectionFooter(a)
    }}).section
})});
__FILE__ = "apps/asana/view/user_typeahead_view.js";
UserTypeaheadView = TypeaheadView.subclass("UserTypeaheadView", {DOMAIN_FULL_PLACEHOLDER:"DOMAIN_FULL", NUM_SEARCH_RESULTS:10, getItemNameX:function(a) {
    assertInstanceof(a, DomainUser);
    return a.name() + " " + a.email()
}, usersTypeaheadSection:attributedFunc({id:ATTRIBUTE_REQUIRED, fully_qualified_view_name:ATTRIBUTE_REQUIRED, searchClient:ATTRIBUTE_REQUIRED, domain_user:ATTRIBUTE_REQUIRED, filter_text_r:ATTRIBUTE_REQUIRED, context_pot_or_null:null, only_full_members:!1, onNewItem:null, header_text:null, hide_when_empty:!1}, function(a) {
    var b = a.domain_user, c = b.domain(), d = function(a, b) {
        if(a !== null && b !== null) {
            return b.interactionCount() - a.interactionCount()
        }
        if(a !== null) {
            return-1
        }
        return b === null ? 0 : 1
    }, e = $rval(function() {
        if(a.context_pot_or_null !== null && a.context_pot_or_null.isRegularProject() && a.context_pot_or_null.domain() === b.domain()) {
            var c = a.context_pot_or_null.members();
            a.only_full_members && (c = c.filter(function(a) {
                return a.isInternal()
            }));
            return env.frp.mapParallel(c, function(a) {
                return[a, b.contactForDomainUser(a)]
            }).sort(function(a, b) {
                    return d(a[1], b[1])
                }).map(function(a) {
                    return a[0]
                })
        }else {
            return[]
        }
    }), f = $rval(function() {
        var a = $v(e);
        return b.topContacts(5).filter(function(b) {
            return!a.contains(b)
        })
    }), g = function(b, c) {
        c.forEach(function(c) {
            (!a.only_full_members || c.isInternal()) && !b.contains(c) && isKnown(c.emailR()) && b.append(c)
        })
    };
    return SearchView.serverComputedItemSection({id:a.id, mergeWithLocalObjects:function(d) {
        var i = List.create([b]);
        g(i, $v(e));
        g(i, $v(f));
        g(i, c.usersModel().limitedObjects());
        g(i, d);
        env.frp.forEachParallel(i, function(b) {
            var c = a.context_pot_or_null !== null ? a.context_pot_or_null.team() : null;
            c !== null && b.teamMembershipForTeamOrNull(c)
        });
        return i
    }, serverSearch:function(d) {
        var g = a.searchClient(), j = $v(f), l = $v(e), m = g.searchContacts(b, d, UserTypeaheadView.NUM_SEARCH_RESULTS, function(b) {
            if(b.interactionCount() === 0) {
                return!1
            }
            b = b.addressee();
            return b.active() && !l.contains(b) && !j.contains(b) && (!a.only_full_members || b.isInternal())
        }), o = m.map(function(a) {
            return a.addressee()
        }), d = c.isGlobal() ? [] : g.searchDomainUsers(c, d, UserTypeaheadView.NUM_SEARCH_RESULTS, function(c) {
            return c.active() && c.user().personalInformationIsVisible(b.user()) && !l.contains(c) && !j.contains(c) && !o.contains(c) && (!a.only_full_members || c.isInternal())
        });
        return[m.map(StateObject.globalId), d.map(StateObject.globalId)]
    }, postProcess:function(a) {
        var c = function(a) {
            return env.world_store.objectWithoutAC(a)
        }, f = a[0].map(c), a = a[1].map(c), f = f.sort(d).map(function(a) {
            return a.addressee()
        }).concat(a), g = [];
        env.frp.forEachParallel(concat($v(e), f), function(a) {
            a.email();
            a.name();
            ExperimentalFeature.enabled("new_user_comment_prompt") && (g.push(a.user().isClaimedL()), g.push(a.user().claimedTimeL()));
            b.contactForDomainUser(a);
            g.push(a.user().profilePhotoVersionR())
        });
        env.world_store.peekXvaluesAndStateObjectScalars(g, []);
        return f
    }, is_search_active_r:$rval(function() {
        return $v(a.filter_text_r).length > 0
    }), fully_qualified_view_name:a.fully_qualified_view_name, filter_text_r:a.filter_text_r, renderFooter:function(a) {
        return a === SearchView.search_status.RESULTS_INCOMPLETE ? AsanaHelpers.renderLoadingIndicator() : a === SearchView.search_status.UNAVAILABLE ? DIV({"class":"search-unavailable"}, ["Sorry, search is temporarily unavailable."]) : ""
    }, header_text:a.header_text, hide_when_empty:a.hide_when_empty, onNewItem:a.onNewItem})
})}, {domain:ATTRIBUTE_REQUIRED, onInvite:ATTRIBUTE_REQUIRED, invited_items_text:ATTRIBUTE_REQUIRED, context_pot_or_null:ATTRIBUTE_REQUIRED, placeholder:"Name or Email", only_full_members:!1, require_altered_text_to_expand:!0, onComment:null, selected_tasks:null, constructor:function(a) {
    var b = this, c = a.blurSelf, d = a.onSelectItem;
    UserTypeaheadView.superproto.constructor.call(b, update(a, {getItemNameX:UserTypeaheadView.getItemNameX, renderHighlightedItem:function(a, c) {
        return b._renderHighlightedItem(a, c)
    }, new_item_label:"Invite", should_show_new_item_r:$rval(function() {
        return $v(f) && b.domain.canInviteMoreUsers()
    }), onSelectItem:function(a) {
        a === UserTypeaheadView.DOMAIN_FULL_PLACEHOLDER ? (!b.domain.isPremium() || env.user() === b.domain.billingOwner().user()) && BillingDialogView.showBillingFlow(BillingRoutes.urlForBillingPlans(b.domain.global_id)) : (d(a), ExperimentalFeature.enabled("new_user_comment_prompt") && b.onComment !== null && a && $v(a.user().shouldShowNewUserCommentPrompt()) && a.user() !== b.user && b._new_user_comment_prompt.open(a))
    }, candidate_item_sections:null, blurSelf:c ? function() {
        b._quick_invite_view.isVisible() || (!ExperimentalFeature.enabled("new_user_comment_prompt") || !(b.onComment !== null && b._new_user_comment_prompt.isVisible())) && c()
    } : null}));
    var e = UserTypeaheadView.usersTypeaheadSection({id:a.id + "_section_users", fully_qualified_view_name:b.fully_qualified_view_name, searchClient:function() {
        return b._searchClient()
    }, domain_user:b.user.domainUserForDomain(b.domain), filter_text_r:b.filter_text_l, context_pot_or_null:b.context_pot_or_null, only_full_members:b.only_full_members, onNewItem:b.onInvite === null ? null : function(a) {
        b._showQuickInvite(a)
    }}), f = e.search_done_r, e = [e.section];
    b.onInvite !== null && e.push(TypeaheadView.ItemSection.create({id:a.id + "_section_full", items_x:$rval(function() {
        return List.create(b.domain.canInviteMoreUsers() ? [] : [UserTypeaheadView.DOMAIN_FULL_PLACEHOLDER])
    }), auto_filter:!1, explicit_selection_only:!0}));
    b.setCandidateItemSections(e);
    b._quick_invite_view = b.onInvite === null ? null : b.createView(QuickInviteView, {relative_to_element_id:b.focusable_element_id, domain:b.domain, onInvite:function(a) {
        b.onInvite(a);
        ExperimentalFeature.enabled("new_user_comment_prompt") && b.onComment !== null && b._new_user_comment_prompt.openAfterInvite(a)
    }, invited_items_text:b.invited_items_text});
    if(ExperimentalFeature.enabled("new_user_comment_prompt")) {
        b._new_user_comment_prompt = b.onComment === null || b.selected_tasks === null ? null : b.createView(NewUserCommentPromptView, {relative_to_element_id:b.focusable_element_id, tasksToMutate:function() {
            return b.selected_tasks
        }, onComment:b.onComment})
    }
}, render:function() {
    this._quick_invite_view !== null && this._quick_invite_view.render();
    ExperimentalFeature.enabled("new_user_comment_prompt") && this.onComment !== null && this._new_user_comment_prompt.render();
    return UserTypeaheadView.superproto.render.call(this)
}, _showQuickInvite:function(a) {
    var b = "", c = "";
    a.indexOf("@") === -1 ? c = a : b = a;
    this._quick_invite_view.show(c, b)
}, _searchClient:Memoize.memoizeInThis("_searchClient", function() {
    return AsanaSearchClient.create(SearchClient.create(env.user()))
}), _renderHighlightedItem:function(a, b) {
    if(a === UserTypeaheadView.DOMAIN_FULL_PLACEHOLDER) {
        var c = !this.domain.isPremium() || env.user() === this.domain.billingOwner().user();
        return[DIV({"class":"typeahead-workspace-full"}, ["Workspace is full."]), c ? DIV({"class":"typeahead-upgrade-for-more"}, ["Upgrade for More \u00bb"]) : ""]
    }else {
        return c = this.dropdown_width ? this.dropdown_width : this._rendered_filter_input.dimensions.width(), ExperimentalFeature.enabled("new_user_comment_prompt") && (a.user().isClaimed(), a.user().claimedTime()), [DIV({}, [SPAN({"class":"typeahead-domain-user-name", style:{maxWidth:c - (a.isGuest() ? 50 : 18)}}, b(a.name())), a.isGuest() ? SPAN({"class":"guest-icon", tooltip:function() {
            return GuestIconView.renderGuestTooltip(a)
        }}) : ""]), SPAN({"class":"typeahead-domain-user-email", style:{maxWidth:c - 18}}, b(a.email()))]
    }
}});
__FILE__ = "apps/asana/view/assignee_popup_view.js";
AssigneePopupView = DropdownView.subclass("AssigneePopupView", {}, {tasksToMutate:ATTRIBUTE_REQUIRED, context_pot_or_null:ATTRIBUTE_REQUIRED, class_name:"assignee-popup", has_arrow:!0, renderContents:function() {
    var a = this, b = env.realAppSession(), c = a.tasksToMutate(), d = b.activeDomain(), e = env.frp.mapParallel(c, function(a) {
        return $v(a.getAssigneeOrNullR())
    }), b = e.any(function(a) {
        return a !== null
    }), f = e.pop();
    e.any(function(a) {
        return a !== f
    }) && (f = null);
    var g = function(b) {
        Task.multiAssign(c, b, a.user.domainUserForDomain(d));
        a.close()
    }, e = f === null ? "" : f.name(), h = a.createView(UserTypeaheadView, {id:"assignee_popup_typeahead", focusable_element_id:"assignee_popup_typeahead_input", context_pot_or_null:a.context_pot_or_null, blur_on_selection:!0, blurSelf:function() {
        a.close()
    }, invited_items_text:c.size() > 1 ? "These Tasks" : "This Task", domain:d, onSelectItem:g, onInvite:function(b) {
        env.datastore_manager.enactChange(AssignToNewlyInvitedChange.create({invite:b, tasks:$v(c), actor:a.user.domainUserForDomain(d)}));
        a.close()
    }, on_focus_text_x:e, allow_clear:!0}), e = h.render(), b = [DIV({"class":"dropdown-header"}, [SPAN({"class":"assignee-field-name"}, ["Assignee"]), e, b ? A({tabindex:"-1", onmousedown:function() {
        g(null);
        h.clearFilterText()
    }, tooltip:"Unassign", "class":"token_x", innerHTML:"&nbsp;"}) : SPAN({"class":"no_token_x"}, []), a.createView(AssignToMeButtonView, {id:"assignee_popup_assign_to_me_button", addAssignee:g, selected_objects:c, domain:d}).render(), a._renderAssignAtmLink(f)])];
    return FRAG(b)
}, padding_x:10, onOpen:function() {
    env.setFocus("assignee_popup_typeahead_input")
}, _renderAssignAtmLink:function(a) {
    var b = env.realAppSession().activeDomain();
    if(a) {
        return DIV({"class":"assignee_atm_link"}, [AsanaHelpers.renderObjectLink({object:a, label:"See " + (a === this.user.domainUserForDomain(b) ? "My Tasks" : a.firstName() + "'s Tasks ")})])
    }
    return""
}});
__FILE__ = "apps/asana/view/task_row_view.js";
TaskRowView = RowView.subclass("TaskRowView", {tasksToMutateWhenClickingOneMetadataCell:function(a, b) {
    return a.contains(b) ? a.peekValuesArray() : [b]
}}, {session:ATTRIBUTE_REQUIRED, _assignee_node:null, _render:function() {
    var a = this, b = a.model.getX("name"), c = a.model.getX("schedule_status"), d = a.model.getX("domain"), e = a.model.getX("task_type"), f = a.model.getX("description"), g = a.model.getX("has_details"), h = a.model.getX("__creation_time"), i = a.model.getAssigneesR(), j = a.model.tagsX(a.enclosing_item_list_view.current_asana_list), l = $v(i).firstValueOrNull(), m = null;
    a.show_assignee && (m = a._renderAssigneePopup());
    if(env.is_server) {
        var o = DIV(["**server only**"]);
        return $rval(function() {
            var i = [a.model.getX("completed"), b, f, g, h, a.model.getX("due_date"), d];
            i.push(c);
            i.push(e);
            a.show_assignee && l !== null && (i.push($v(l.getX("task_list"))), i.push(l.user().profilePhotoVersionR()));
            i.push(env.user().profilePhotoVersionR());
            if(a.enclosing_item_list_view.show_ancestry) {
                var m = a.model.findParent();
                m && i.push(m.getX("name"))
            }
            env.world_store.peekXvaluesAndStateObjectScalars(i, []);
            env.world_store.peekStateObjectProperties($v(j).toArray(), ["name", "is_project"]);
            l !== null && l.name();
            return o
        })
    }else {
        i = [];
        if(a.show_assignee) {
            a._assignee_node = TD({"class":"grid_cell_assignee"}, [$rval(function() {
                return a._renderAssignee(l, m)
            })]), i = [a._assignee_node]
        }
        toValueAllowingUnknown(h);
        var n = a.model.isCompleted(), p = TD({"class":"grid_cell_boolean", id:"completed"}, [a._renderCompletedCheckbox(n), a._renderScheduleStatusMenu()]), q = a.main_grid_cell_key_map.toArray();
        a.enclosing_item_list_view.compact && q.push({tab:!0, key:KeyMap.Keys.A, handler:function() {
            logEvent({name:"Subtask-Tab-A"});
            m.open();
            TabRingView.tabIsDownL().requestSet(!1)
        }});
        if(a.enclosing_item_list_view.compact) {
            var q = a.createView(AutogrowTextareaView, {data:b, textarea_attributes:{id:a.enclosing_item_list_view.grid_state.mainInputElementIdForGroupItem(a.group_item), key_map:q, "class":"task-row-text-input", onblur:function(a) {
                a.target.spellcheck = !1;
                var b = a.target.value;
                a.target.value = "";
                a.target.value = b;
                a.target.spellcheck = !0
            }}}).render(), t = (q.innerText || q.textContent).length, w = q.childNodes[2]
        }else {
            q = INPUT({data:b, handler:function(a, b) {
                globals.UiTesting !== void 0 && UiTesting.test_options.perf_mode && env.datastore_manager.setCurrentHandlerName("EditTaskName-TaskRow-Keypress");
                return b()
            }, id:a.enclosing_item_list_view.grid_state.mainInputElementIdForGroupItem(a.group_item), key_map:q, "class":"task-row-text-input"}), t = q.value.length, w = q
        }
        env.hasSelectionForFocusedElementBeenSet() || env.setSelectionForFocusedElement(t, t);
        t = "";
        a.enclosing_item_list_view.show_ancestry && (t = $rval(function() {
            return a._renderSupertaskInfo()
        }));
        var v = a._renderRightJustifiedInfo(j), r = a.model.isBar(), x = r ? TD({colSpan:2 + i.length}, [SPAN({"class":"bar_input_span"}, [q, Node.NBSP]), v, Node.NBSP]) : TD([DIV([t, q, v])]), y = null;
        r ? p = [a._renderDragHandle("TD", {"class":"grid_cell_item_number", children:[SPAN({"class":"bar-container"}, [DIV({"class":"bar"}, [b])]), Node.NBSP]}), x] : (p = [y = a._renderDragHandle("TD", {"class":"grid_cell_item_number"}), p], a.enclosing_item_list_view.compact || p.pushAll(i), p.push(x), a.enclosing_item_list_view.compact && (p.push(TD({"class":"grid-tags-and-dates"}, [a._renderDueDate()])), p.pushAll(i), p.push(TD({"class":"grid_cell_show_details"}, [a._renderCompactDetailsButton()]))));
        a.enclosing_item_list_view.compact && (p = [TABLE({"class":"compact_row_table"}, p)]);
        var D = a._renderDraggableRow({onmousedown:function(b) {
            a._onMouseDown(b);
            return b.target === w ? Node.DEFAULT_AND_BUBBLE : Node.JUST_BUBBLE
        }, onclick:function() {
            return Node.JUST_DEFAULT
        }}, p);
        $rval(function() {
            var b = $v(a._is_selected_x), c = a._isEditable(b), d = w.isFocused(), e = a.isFirstItem() && a.grid_state.selectionIsEmpty(), f = b || e, g = a._getItemNumber();
            y !== null && (y.removeAllChildren(), y.watchChildren([g]));
            w.set("tabindex", f ? 0 : -1);
            w.set("onfocus", !e ? void 0 : function() {
                a.grid_state.selectGroupItem(a.group_item, !0)
            });
            r || x.set("class", "grid_cell_string " + (c ? "insert_mode" : "non_insert_mode"));
            c = [a.section_name, r ? "bar-row" : "task-row", a.task_grouper.classNameForGroup(a.group)];
            b && c.push("grid-row-selected");
            n && (c.push("completed"), a.model.completedL().recentlyChangedNotReactive() && c.push("recently_completed"));
            d && c.push("focused");
            a.task_grouper instanceof TaskGrouper.ProjectInAssigneeView && a.enclosing_item_list_view.current_asana_list.getX("items").containsObject(a.model) && a.model.scheduleStatus() === Task.ScheduleStatus.NEW && c.push("in-assigned-to-me-new-task");
            D.set("class", c.join(" "))
        }).becomeWatch().peek();
        return D
    }
}, _onMouseDown:function(a) {
    var b = this, c = b.enclosing_item_list_view.grid_state;
    if(a.hasMetaOrCtrl()) {
        var d = b.enclosing_item_list_view.current_asana_list;
        c.isItemSelected(d) && c.removeFromSelection(d);
        c.isItemSelected(b.model) ? b._assignee_node instanceof Node ? b._assignee_node.isAncestorOfComputedDownwards(a.target) || c.removeFromSelection(b.model) : c.removeFromSelection(b.model) : c.addGroupItemToSelection(b.group_item)
    }else {
        if(a.shiftKey) {
            a = b.enclosing_item_list_view.mostRecentlySelectedGroupItemOrNull(), a !== null ? (d = ItemListView.GroupItem.create(b.group, b.model), b.enclosing_item_list_view.getItemsBetweenGroupItems(a, d).forEach(function(a) {
                c.addGroupItemToSelection(ItemListView.GroupItem.create(b.group, a))
            })) : c.selectGroupItem(b.group_item)
        }else {
            if(!c.isItemSelected(b.model) || b._assignee_node === null || !b._assignee_node.isAncestorOfComputedDownwards(a.target)) {
                env.datastore_manager.setCurrentHandlerName("SelectTask-GridPane-Click"), c.selectGroupItem(b.group_item)
            }
        }
        b.enclosing_item_list_view.resetSubtaskState()
    }
}, _renderCompletedCheckbox:function(a) {
    var b = this, c = [SPAN({"class":"completed-checkbox-sibling"}), SPAN({"class":"completed-checkbox", tooltip:a ? "Marked Complete. Click to Mark Incomplete." : "Mark Complete", tooltip_delay:500, onmousedown:function() {
        return Node.JUST_DEFAULT
    }, onclick:function() {
        var c = b.grid_state.getV("selected_items"), e = TaskRowView.tasksToMutateWhenClickingOneMetadataCell(c, b.model);
        !a && c.contains(b.model) && b.enclosing_item_list_view.selectAway();
        e.forEach(function(c) {
            c.setCompleted(!a, env.user().domainUserForDomain(b.model.domain()))
        });
        return Node.JUST_DEFAULT
    }}, [Node.NBSP])];
    return b.enclosing_item_list_view.compact ? DIV({"class":"compact-checkbox-container"}, c) : FRAG(c)
}, _renderScheduleStatusMenu:function() {
    var a = this;
    if(!a._showingScheduleStatusMenu()) {
        return""
    }
    return a.createView(ScheduleStatusMenuView, {status_objects:[a.model], selected_objects_x:a.grid_state.getX("selected_items"), id:a.group.global_id + "_" + a.model.global_id, runOnSelect:View.publicFunction(a, function(b) {
        var c = null;
        a.grid_state.isItemSelected(a.model) && (c = a.enclosing_item_list_view.awayGroupItem());
        b();
        c !== null && (a.enclosing_item_list_view.groupsForTask(a.model).indexOf(a.group) === -1 ? a.enclosing_item_list_view.grid_state.selectGroupItem(c) : env.setFocus(a.enclosing_item_list_view.grid_state.mainInputElementIdForGroupItem(a.group_item)))
    })}).render()
}, _renderDraggableRow:function(a, b) {
    return this.drop_target ? (a.children = b, this.dnd_helper.dropTargetNode("TR", a, {drop_data:this.drag_drop_region.dragDropData([this.model])})) : TR(a, b)
}, _renderDragHandle:function(a, b) {
    var c = this;
    return c.draggable ? (b["class"] = (b["class"] || "") + " drag_hand", b.onmousedown = function(a) {
        List.create(c.enclosing_item_list_view.movableSelectedItemsInDisplayOrder()).contains(c.model) || c._onMouseDown(a)
    }, c.dnd_helper.handleNode(a, b, {draggedData:function() {
        var a = c.enclosing_item_list_view.movableSelectedItemsInDisplayOrder();
        a.contains(c.model) || (c.grid_state.selectGroupItem(c.group_item), a = c.enclosing_item_list_view.movableSelectedItemsInDisplayOrder());
        return c.drag_drop_region.dragDropData(a)
    }, renderDragIndicator:RowView._renderDragIndicatorUnbound})) : Node.createLiveNode(a, b)
}, _renderAssigneePopup:function() {
    var a = this;
    return a.createView(AssigneePopupView, {relative_to_element_id:"row__assignee__" + a.group_item.toString(), context_pot_or_null:a.enclosing_item_list_view.context_pot_or_null, tasksToMutate:function() {
        return TaskRowView.tasksToMutateWhenClickingOneMetadataCell(a.grid_state.getV("selected_items"), a.model).filter(function(a) {
            return a instanceof Task && !a.isBar()
        })
    }}).renderIfOpen()
}, _renderAssignee:function(a, b) {
    var c = this, d = "row__assignee__" + c.group_item.toString(), e = function() {
        var a = "Click-AFG";
        c.enclosing_item_list_view.compact && (a = "Subtask-" + a);
        logEvent({name:a});
        b.open();
        return Node.STOP
    };
    if(a === null) {
        return A({id:d, "class":"assign-from-grid-link", tooltip:"Click to assign this task", onclick:e})
    }
    var f = a.name(), d = {id:d, "class":"token tag", tooltip:f, tooltip_delay:500, tooltip_nofade:!0, onclick:e}, e = AsanaHelpers.renderWithinHiddenLoadingBoundary("DIV", [$rval(function() {
        return c.createView(PhotoView, {who:a.user(), size:PhotoView.Size.SMALL, show_initials:!0, domain_user:a}).render()
    })]);
    return DIV(d, [e])
}, _renderPots:function(a) {
    var b = this, a = $v(a).filter(function(a) {
        return b.task_grouper.shouldShowPotInGrid(b.group, a)
    });
    return AsanaHelpers.renderPots(a)
}, _renderDueDate:function() {
    return AsanaHelpers.renderDueDate(this.model.dueDate(), this.model.completed() === 0)
}, _renderRightJustifiedInfo:function(a) {
    if(this.enclosing_item_list_view.compact) {
        return""
    }
    var b = [];
    Flags.proto_grid || b.pushAll(this._renderPots(a));
    b.push(this._renderDueDate());
    this.model.scheduleStatus() === Task.ScheduleStatus.TODAY && !this._showingScheduleStatusMenu() && b.push(ScheduleStatusViews.renderIcon(Task.ScheduleStatus.TODAY, !0));
    b.push(this._renderUncompactDetailsButton());
    return DIV({"class":"task-row-overlay grid-tags-and-date"}, b)
}, _renderSupertaskInfo:function() {
    var a = this.model.findParent();
    if(a === null) {
        return""
    }
    a = " \u2039 " + a.name();
    return DIV({"class":"grid-supertask-info"}, [DIV({"class":"grid-subtask-shadow-text"}, [this.model.nameL()]), DIV({"class":"grid-supertask-ancestry"}, [a])])
}, _renderUncompactDetailsButton:function() {
    var a = this;
    return a._renderDetailsButton({tooltip:"Show Details (Keyboard Shortcuts: Tab to show, Esc to hide)", onmousedown:function() {
        var b = env.realAppSession();
        a.grid_state.isItemSelected(a.model) ? b.toggleDetailsPane() : (b.openDetailsPane(), a.grid_state.selectGroupItem(a.group_item))
    }})
}, _renderCompactDetailsButton:function() {
    var a = this;
    return a._renderDetailsButton({onmousedown:function() {
        env.realAppSession().detailsState().selectRelativeTask(a.model);
        logEvent({name:"Subtask-ZoomInToSubtaskClick"});
        env.setFocus(PropertySheetView.focusableElementId(DetailsView.PROPERTY_SHEET_NAME, "description"));
        return Node.STOP
    }, onclick:function() {
        return Node.STOP
    }, tooltip:function() {
        return SPAN(["Subtask's notes and comments (", KeyMap.KeyNameFuncs.TAB(), KeyMap.KeyNameFuncs.RIGHT(), ")"])
    }})
}, _renderDetailsButton:function(a) {
    return DIV(update(a, {"class":"button" + (this.model.hasMetadata() ? " more-detail" : ""), tooltip_delay:500}), [this.enclosing_item_list_view.compact ? SPAN({"class":"button-icon comment-icon"}) : SPAN({"class":"button-icon show-details"})])
}, _showingScheduleStatusMenu:function() {
    return this.enclosing_item_list_view.isAssignedToMe()
}});
__FILE__ = "apps/asana/view/add_member_to_project_action.js";
AddMemberToProjectAction = UserAction.subclass("AddMemberToProjectAction", {property_descs:{name:{type:String}, project:{type:Pot}}}, {formatString:function() {
    return"Shared %{project} with %{name}."
}, placeholderMap:function() {
    return Map.create([["name", this.name()], ["project", this.getV("project")]])
}});
__FILE__ = "apps/asana/view/project_share_button_view.js";
ProjectShareButtonView = View.subclass("ProjectShareButtonView", {renderPrivacySummary:function(a) {
    var b = a.isProject() ? Vocab.Project : "Tag";
    return a.isInGlobalWorkspace() ? ProjectShareButtonView._renderGlobalPrivacySummary(a, b) : ProjectShareButtonView._renderNonGlobalPrivacySummary(a, b)
}, renderTooltip:function(a) {
    var b = a.memberCount();
    return a.isInGlobalWorkspace() && a.isPrivateToCurrentUser() ? FRAG([ProjectShareButtonView.renderPrivacySummary(a), P([B(["Share it with anyone and they can view and edit it too."])])]) : FRAG([ProjectShareButtonView.renderPrivacySummary(a), P([DIV({"class":"header"}, [b === 1 ? "1 member:" : b + " members:"]), SPAN({children:a.members().map(function(a) {
        return a.isGuest() ? SPAN([a.name(), SPAN({"class":"guest-icon"})]) : a.name()
    }).betwixt(", ")})])])
}, _renderGlobalPrivacySummary:function(a, b) {
    return a.isSharedWithLink() ? b + " is public to anyone with the link." : a.isPrivateToCurrentUser() ? "Right now, only you can see this " + b + "." : b + " is shared with members."
}, _renderNonGlobalPrivacySummary:function(a, b) {
    return a.isPublic() ? b + " is public to everyone in " + a.domain().name() + ProjectShareButtonView._externalMembersString(a) + "." : a.getV("assignee") !== null ? "Tasks created in " + a.name() + " are private  unless added to a public project." : a.isPrivateToCurrentUser() ? b + " is private to you." : b + " is private to members."
}, _externalMembersString:function(a) {
    return a.hasExternalMembers() ? " + " + pluralize("guest", a.externalMemberCount()) : ""
}, _renderExternalMembersText:function(a) {
    return a.hasExternalMembers() ? SPAN({tooltip:a.externalMembers().map(function(a) {
        return a.name()
    }).join(", "), "class":"guest-members-tooltip"}, [ProjectShareButtonView._externalMembersString(a)]) : ""
}, State:SessionObject2.subclass("ProjectShareButtonView.State", {property_descs:{show_premium_ad:{type:Boolean, default_value:!1}, disable_tooltip:{type:Boolean, default_value:!1}}}, {})}, {id:"project_share_button", model:ATTRIBUTE_REQUIRED, _render:function() {
    var a = this;
    $rval(function() {
        a._touch()
    }).becomeWatch().peek();
    a._dropdown = a._createDropdown();
    a._dropdown.renderIfOpen();
    var b = a._dropdown.isOpen(), c = b ? noop : function() {
        a._state.setShowPremiumAd(!1);
        a._dropdown.open();
        DialogState.dialogStates(ShareButtonTooltipView.State).forEach(function(a) {
            a.hide()
        });
        a.focusInput()
    }, d = {"class":"permissions-box", onmousedown:c};
    if(!b && !a._state.disableTooltip()) {
        d.tooltip = function() {
            return ProjectShareButtonView.renderTooltip(a.model)
        }
    }
    return DIV(d, [a.model.isPrivateToCurrentUser() ? "" : SPAN({"class":"member-count"}, [a.model.memberCount()]), a._renderPrivacyIcon(), AsanaForms.renderToggleButton({label:"Share", id:a.id, onmousedown:c, "class":b ? "" : "primary", pressed:b})])
}, focusInput:function() {
    env.setFocus(this.id + "#add-user")
}, _touch:function() {
    this.model.isSharedWithLink()
}, _createDropdown:function() {
    var a = this;
    return a.createView(DropdownView, {align:DropdownView.RIGHT, enforce_max_dropdown_height:!1, relative_to_element_id:a.id, id:a.id + "_dropdown_menu", class_name:"share-dropdown", contents:FRAG([$rval(function() {
        return a._renderDropdownContents()
    })]), padding_x:55, has_arrow:!0, onOpen:function() {
        a.focusInput()
    }})
}, _privateWithoutPremiumPermissions:function() {
    var a = this.model.domain();
    return!a.isGlobal() && !a.hasPremiumPermissions() && !this.model.isPublicToWorkspace()
}, _canShareWithMoreMembers:function() {
    var a = this.model.domain();
    return!this._privateWithoutPremiumPermissions() && !(a.isGlobal() && this.model.members().size() >= Pot.GLOBAL_DOMAIN_MAX_MEMBER_COUNT)
}, _renderDropdownContents:function() {
    var a = this, b = a._privateWithoutPremiumPermissions() || a._state.showPremiumAd(), c = !b && !a._canShareWithMoreMembers();
    return FRAG([DIV({"class":"share-dropdown-workspace-privacy-bar dropdown-header"}, [a._renderPrivacyIcon(), a._renderWorkspacePrivacyBar()]), DIV({"class":"share-dropdown-members"}, [b ? a._renderPremiumAd() : "", c ? a._renderMemberLimitWarning() : "", DIV({"class":"header" + (a._privateWithoutPremiumPermissions() ? " share-dropdown-disabled" : "")}, ["Members"]), $rval(function() {
        return a._renderMembersList()
    })]), $rval(function() {
        return DIV({"class":"share-dropdown-footer"}, [DIV({"class":"header" + (a._canShareWithMoreMembers() ? "" : " share-dropdown-disabled")}, ["Share this project with another person"]), a._renderUserTypeahead()])
    })])
}, _renderMembersList:function() {
    var a = this, b = a.model.members();
    a._privateWithoutPremiumPermissions() && (b = b.filter(function(b) {
        return b.user() !== a.user
    }));
    b.sortBy(function(a) {
        return a.name()
    });
    var c = a.model.domain(), d = a.user.domainUserForDomain(c);
    return TABLE({"class":a._privateWithoutPremiumPermissions()}, b.map(function(b) {
        return $rval(function() {
            var c = a.model.followers().contains(b);
            return TR({"class":"member " + a._privateWithoutPremiumPermissions()}, [TD({"class":"member-name"}, [b.name(), b.isGuest() ? SPAN({"class":"guest-icon", onclick:function() {
                d.isInternal() && (a._dropdown.close(), ManageWorkspaceDialogView.show({billable_domain_user_group:a.model.domain(), selected_tab:ManageWorkspaceDialogView.TABS.MEMBERS}))
            }, tooltip:function() {
                return GuestIconView.renderGuestTooltip(b)
            }}) : ""]), AsanaForms.applyHoveredOnMouseEnter(TD({"class":"member-following " + (c ? "on" : "off"), onclick:function() {
                a._privateWithoutPremiumPermissions() || (c ? a.model.removeFollower(b) : a.model.addFollower(b, a.user.domainUserForDomain(a.model.domain())))
            }}, [SPAN({"class":"icon", style:{visibility:a._privateWithoutPremiumPermissions() ? "hidden" : ""}}), SPAN({"class":"text", style:{visibility:a._privateWithoutPremiumPermissions() ? "hidden" : ""}})])), TD([AsanaForms.renderButton({label:"Remove", "class":"remove-button", style:{visibility:d.isGuest() ? "hidden" : ""}, onclick:function() {
                d.isGuest() || ((a.model.isPrivate() || b.isGuest()) && env.datastore_manager.enactChange(ProjectLostAccessChange.create({actor:d, membership:a.model.membershipForDomainUserOrNull(b)})), a.model.removeProjectMember(b))
            }})])])
        })
    }))
}, _renderUserTypeahead:function() {
    var a = this, b = a.id + "#add-user";
    if(!a._canShareWithMoreMembers()) {
        return INPUT({id:b, type:"text", "class":"generic-input showing share-dropdown-disabled", disabled:!0})
    }
    return a.createView(UserTypeaheadView, {id:b, focusable_element_id:b, placeholder:"Add a person", context_pot_or_null:a.model, domain:this.model.domain(), onSelectItem:function(b) {
        UserActionContext.get().start(env.world_store.createStateObject(AddMemberToProjectAction, {creator:a.user, name:b.name(), project:a.model}));
        b = a.model.addProjectMember(b);
        env.datastore_manager.enactChange(ShareProjectChange.create({actor:a.user.domainUserForDomain(a.model.domain()), membership:b}));
        a.focusInput()
    }, invited_items_text:"This Project", onInvite:function(b) {
        env.datastore_manager.enactChange(AddProjectMemberNewlyInvitedChange.create({invite:b, actor:a.user.domainUserForDomain(a.model.domain()), pot:a.model}));
        a.focusInput()
    }}).render()
}, _renderWorkspacePrivacyBar:function() {
    var a = this._domainName(), b = this.user.domainUserForDomain(this.model.domain());
    return this.model.isInGlobalWorkspace() ? this._renderGlobalWorkspacePrivacyBar(a, b) : this._renderNonGlobalWorkspacePrivacyBar(a, b)
}, _renderGlobalWorkspacePrivacyBar:function() {
    var a = this;
    a.model.shareLinkSaltOrUnknown();
    a.model.shareLink();
    return a.model.isSharedWithLink() ? FRAG(["Public to anyone with the link", SPAN({"class":"share-dropdown-workspace-privacy-dot"}, ["\u2022"]), A({id:"share_dropdown_make_public", onclick:function() {
        a.model.setIsSharedWithLink(!1)
    }}, ["Make Private"]), INPUT({id:"project_share_link_" + a.model.global_id, "class":"generic-input showing share-dropdown-share-link", data:a.model.shareLink(), onclick:function() {
        Node.documentActiveElement().select()
    }, readonly:"readonly"})]) : FRAG([a.model.memberCount() > 1 ? "Shared with members" : "Private", SPAN({"class":"share-dropdown-workspace-privacy-dot"}, ["\u2022"]), A({id:"share_dropdown_make_private", onclick:function() {
        a.model.setIsSharedWithLink(!0);
        a.model.ensureHasShareLinkSalt()
    }}, ["Make Public to Anyone with a Link"])])
}, _renderNonGlobalWorkspacePrivacyBar:function(a, b) {
    var c = this;
    return c.model.isPublicToWorkspace() ? FRAG(["Everyone in " + a, ProjectShareButtonView._renderExternalMembersText(c.model), " can edit", b.isGuest() ? "" : SPAN({"class":"share-dropdown-workspace-privacy-dot"}, ["\u2022"]), b.isGuest() ? "" : A({id:"share_dropdown_make_private", onclick:function() {
        if(c.model.domain().hasPremiumPermissions()) {
            c.model.addProjectMember(b), c.model.setIsPublicToWorkspace(!1), logEvent({name:"PremiumPermissionsProjectMadePrivate"})
        }else {
            var a = c.model.members(), a = a.filter(function(a) {
                return a.user() !== c.user
            });
            a.size() > 0 ? c._state.setShowPremiumAd(!0) : (logEvent({name:"LamePermissionsProjectMadePrivate"}), c.model.makePrivateToCurrentUser())
        }
    }}, ["Make Private"])]) : FRAG([c.model.isPrivateToCurrentUser() ? "Private to you" : FRAG(["Private to members", ProjectShareButtonView._renderExternalMembersText(c.model)]), b.isGuest() ? "" : SPAN({"class":"share-dropdown-workspace-privacy-dot"}, ["\u2022"]), b.isGuest() ? "" : A({id:"share_dropdown_make_public", onclick:function() {
        c.model.setAsPublic(!0);
        logEvent({name:"ProjectMadePublic"})
    }}, ["Make Public to " + a])])
}, _renderMemberLimitWarning:function() {
    return DIV({"class":"premium-ad"}, ["We currently only allow up to " + Pot.GLOBAL_DOMAIN_MAX_MEMBER_COUNT + " members on a project. Please contact sales@asana.com if you need to add more."])
}, _renderPremiumAd:function() {
    var a = this, b = this._privateWithoutPremiumPermissions();
    return DIV({"class":"premium-ad"}, ["Making projects private to a group within " + a._domainName() + " is unavailable in the free version of Asana.", !b ? DIV({style:"margin-top: 1ex;"}, [SPAN({"class":"remove-other"}, ["To make this project private to yourself, you need to remove other members from the project first."])]) : A({onclick:function() {
        BillingDialogView.showBillingFlow(BillingRoutes.urlForBillingPlans(a.model.domain().global_id))
    }}, [" Upgrade \u00bb"]), !b ? DIV({style:"margin-top: 1ex", align:"right"}, [AsanaForms.renderButton({"class":"primary", label:"Upgrade", onclick:function() {
        BillingDialogView.showBillingFlow(BillingRoutes.urlForBillingPlans(a.model.domain().global_id));
        a._dropdown.close()
    }}), AsanaForms.renderButton({style:"margin-left: 1ex", label:"Leave Public to Workspace", onclick:function() {
        a._state.setShowPremiumAd(!1)
    }})]) : ""])
}, _domainName:function() {
    return this.model.domain().name()
}, _renderPrivacyIcon:function() {
    return this.model.isInGlobalWorkspace() ? this._renderGlobalPrivacyIcon() : this._renderNonGlobalPrivacyIcon()
}, _renderNonGlobalPrivacyIcon:function() {
    return this.model.isPrivateToCurrentUser() ? SPAN({"class":"privacy-icon visible-to-you"}) : this.model.hasExternalMembers() ? SPAN({"class":"privacy-icon visible-to-guests"}) : this.model.isPublic() ? SPAN({"class":"privacy-icon visible-to-workspace"}) : SPAN({"class":"privacy-icon visible-to-members"})
}, _renderGlobalPrivacyIcon:function() {
    return this.model.isSharedWithLink() ? SPAN({"class":"privacy-icon global-workspace visible-with-link"}) : this.model.isPrivateToCurrentUser() ? SPAN({"class":"privacy-icon global-workspace visible-to-you"}) : SPAN({"class":"privacy-icon global-workspace visible-to-members"})
}});
__FILE__ = "apps/asana/view/header_row_view.js";
HeaderRowView = RowView.subclass("HeaderRowView", {}, {show_assignee:!1, groupItemBelowOrNull:ATTRIBUTE_REQUIRED, constructor:function(a) {
    a.drag_drop_region = null;
    HeaderRowView.superproto.constructor.call(this, a)
}, _render:function() {
    var a = this;
    env.world_store.peekXvaluesAndStateObjectScalarsWithoutDependencies([], [this.model]);
    var b = function() {
        var b = a.enclosing_item_list_view, c = valueOrUnknown(function() {
            return a.groupItemBelowOrNull()
        });
        isUnknown(c) || (c ? b.grid_state.selectGroupItem(c) : b._insertRowAfter(b.current_asana_list, null))
    }, b = [{key:"DOWN", handler:b}, {key:"ENTER", handler:b}], c = $rval(function() {
        if(a.model.getV("assignee") !== null) {
            return Node.NBSP
        }
        var b = a.model.isProject() ? Vocab.project : Vocab.tag, c = env.user().domainUserForDomain(a.model.domain()), d = a.model.followers().contains(c);
        return AsanaForms.renderToggleButton({label:SPAN({"class":"button-icon button-follow"}), onclick:View.publicFunction(a, function() {
            d ? a.model.removeFollower(c) : a.model.addFollowerWithoutStory(c)
        }), "class":"light-button follow-button", pressed:d, tooltip:d ? "Unfollow this " + b + " to stop receiving " + Vocab.messages_about_activity + "." : "Follow this " + b + " to receive " + Vocab.messages_about_activity + ".", tooltip_delay:300})
    }), d = $rval(function() {
        return a._renderFavoriteButton()
    }), e = isA(a.model.nameX(), String) ? "read-only" : "";
    return DIV({key_map:b}, [DIV({"class":"header-button-bar"}, [AsanaHelpers.renderWithinHiddenLoadingBoundary("DIV", [a._renderPermissions(), c, $rval(function() {
        return a._renderActionMenu()
    }, "PotActionMenu")])]), d, DIV({id:"project_title", "class":"project-title " + e, onclick:View.publicFunction(a, function() {
        a.enclosing_item_list_view.grid_state.selectGroupItem(ItemListView.GroupItem.create(a.group, a.model));
        return Node.DEFAULT_AND_BUBBLE
    })}, [this.createView(HeaderNameView, {data_x:a.model.nameX(), element_attributes:{id:a.enclosing_item_list_view.grid_state.mainInputElementIdForGroupItem(ItemListView.GroupItem.create(a.group, a.model)), tabindex:a._getMainInputTabindexR()}, is_user_task_list:a.model.isUserTaskList(), is_atm:a.model.isUsersATM(env.user()), assignee:a.model.isUserTaskList() ? a.model.assignee().user() : null}).render()]), a._renderPossibleConvertPotDialog(), a._renderPossibleDeletePotDialog()])
}, _showingShareButton:function() {
    return this.model.isRegularProject()
}, _potVocab:function() {
    return this.model.isProject() ? Vocab.Project : "Tag"
}, _renderFavoriteButton:function() {
    var a = env.user().domainUserForDomain(this.model.domain()), b = this.model.assignee() === null ? this.model : this.model.assignee();
    if(b === a) {
        return""
    }
    var c = a.favoritesL(), d = c.containsObject(b);
    return SPAN({"class":d ? "favorite-on" : "favorite-off", tooltip:(d ? "Remove from Favorites" : "Add to Favorites") + " - Favorites appear in the left pane", tooltip_delay:300, onmousedown:function() {
        d ? c.requestRemove(b, null) : c.requestInsertBefore(b, null)
    }})
}, _renderPermissions:function() {
    var a = this;
    return a._showingShareButton() ? $rval(function() {
        return a.createView(ProjectShareButtonView, {model:a.model}).render()
    }) : a.createView(PotPrivacyIconView, {model:a.model}).render()
}, _renderActionMenu:function() {
    var a = this.model.assignee() !== null, b = env.user().domainUserForDomain(this.model.domain()), c = [], d = [];
    c.push(this._icalAction());
    c.push(this._printAction());
    a || (this.model.isProject() && c.push(this._duplicateProjectAction()), b.isInternal() && (this._showingShareButton() || d.push(this._changePrivacyAction()), this.model.isProject() && d.push(this._setArchivedAction()), d.push(this._deleteAction()), this.model.isPublic() && d.push(this._convertPotAction())));
    d.length > 0 && (c.push(DropdownMenuView.SEPARATOR), c.pushAll(d));
    return this.createView(DropdownMenuView, {id:"pot_action_menu", tooltip:(this.model.isProject() ? Vocab.Project : Vocab.Tag) + " Actions", tooltip_delay:500, include_arrow:!1, label:DIV({"class":"button light-button"}, [SPAN({"class":"button-icon button-arrow"})]), menu_items:c}).render()
}, _printAction:function() {
    var a = this;
    return{id:"print", onselect:function() {
        a.enclosing_item_list_view.print()
    }, label:"Print"}
}, _icalAction:function() {
    var a = this;
    return{id:"ical", onselect:function() {
        IcalDialogView.show({pots:[a.model]})
    }, label:"Sync to Calendar"}
}, _setArchivedAction:function() {
    var a = this, b = a.model.getV("is_archived");
    return{id:"set_archived_pot", onselect:View.publicFunction(a, function() {
        a.model.setArchivedInUserAction(!b)
    }), label:(b ? "Unarchive " : "Archive ") + this._potVocab()}
}, _deleteAction:function() {
    var a = this;
    return{id:"delete_pot", onselect:View.publicFunction(a, function() {
        a.enclosing_item_list_view.grid_state.getX("delete_pot_dialog_visible").requestSet(!0)
    }), label:"Delete " + this._potVocab()}
}, _changePrivacyAction:function() {
    var a = this, b = a.model.isPublic() ? "Make private to me" : a.model.domain().isGlobal() ? "Make public" : "Make public to workspace";
    return{id:"change_pot_privacy", onselect:View.publicFunction(a, function() {
        a.model.isPublic() ? a.model.makePrivateToCurrentUser() : a.model.setIsPublicToWorkspace(!0)
    }), label:b}
}, _duplicateProjectAction:function() {
    var a = this;
    return{id:"duplicate_project", onselect:View.publicFunction(a, function() {
        DuplicateProjectDialogView.show({pot:a.model, name:"Copy of " + a.model.name()})
    }), label:"Duplicate " + Vocab.Project}
}, _convertPotAction:function() {
    var a = this;
    return{id:"convert_pot", onselect:View.publicFunction(a, function() {
        a.model.getV("is_project") ? a.enclosing_item_list_view.grid_state.getX("convert_pot_dialog_visible").requestSet(!0) : a._convertPot(!1)
    }), label:a.model.getV("is_project") ? "Convert " + Vocab.Project + " to Tag" : "Convert Tag to " + Vocab.Project}
}, _renderPossibleDeletePotDialog:function() {
    var a = this;
    if(a.enclosing_item_list_view.grid_state.getV("delete_pot_dialog_visible")) {
        var b = function() {
            a.enclosing_item_list_view.grid_state.getX("delete_pot_dialog_visible").requestSet(!1)
        }, c = a.model.isProject() ? Vocab.project : Vocab.tag;
        return a.createView(DialogView, {element_id:"delete_pot_dialog", title_x:'Delete the "' + a.model.name() + '" ' + c + "?", body_x:DIV(["This will delete the " + c + ", and any tasks that are only in this " + c + "."]), footer_x:DIV({"class":"footer-buttons-left", children:[AsanaForms.renderButton({label:"Delete", onclick:View.publicFunction(a, function() {
            b();
            a.model.deleteInUserAction()
        }), id:"delete_pot_dialog_yes", "class":"primary", tabindex:0}), AsanaForms.renderButton({label:"Cancel", onclick:b, id:"delete_pot_dialog_no", tabindex:0})]}), onclose:b}).render()
    }else {
        return""
    }
}, _renderPossibleConvertPotDialog:function() {
    var a = this;
    if(a.enclosing_item_list_view.grid_state.getV("convert_pot_dialog_visible")) {
        var b = function() {
            a.enclosing_item_list_view.grid_state.getX("convert_pot_dialog_visible").requestSet(!1)
        };
        return a.createView(DialogView, {element_id:"convert_pot_dialog", title_x:"Convert from " + Vocab.project + " to tag?", body_x:DIV([P(['"' + a.model.name() + '" will no longer be in a particular prioritized order.  ']), AsanaHelpers.renderExternalLink("Learn more about tags and " + Vocab.projects + ".", "http://help.asana.com/customer/portal/articles/70266-what-s-the-difference-between-a-project-and-a-tag-")]), footer_x:DIV({"class":"footer-buttons-left", children:[AsanaForms.renderButton({label:"Convert",
            onclick:View.publicFunction(a, function() {
                b();
                a._convertPot(!0)
            }), id:"convert_pot_dialog_yes", "class":"primary", tabindex:0}), AsanaForms.renderButton({label:"Cancel", onclick:b, id:"convert_pot_dialog_no", tabindex:0})]}), onclose:b}).render()
    }else {
        return""
    }
}, _convertPot:function(a) {
    this.model.convertPot(a);
    this.enclosing_item_list_view.grid_state.setGroupBy(a ? TaskGrouper.Type.PROJECT : TaskGrouper.Type.NONE)
}});
__FILE__ = "apps/asana/view/empty_item_list_section_view.js";
EmptyItemListSectionView = View.subclass("EmptyItemListSectionView", {}, {enclosing_item_list_view:ATTRIBUTE_REQUIRED, dnd_helper:ATTRIBUTE_REQUIRED, onDrop:SET_IN_CONSTRUCTOR, onClick:SET_IN_CONSTRUCTOR, show_assignee:ATTRIBUTE_REQUIRED, pot:ATTRIBUTE_REQUIRED, _render:function() {
    var a = this, b = TaskDragDropRegion.create({onDropTask:a.onDrop, rows_are_reorderable:!1, is_empty:!0, pot:a.pot});
    return $rval(function() {
        var c = LocalLvalue.create(!1), d = a.enclosing_item_list_view.compact, e = [a.dnd_helper.dropTargetNode("TR", {"class":$rval(function() {
            var a = "grid_pseudorow_no_prioritized";
            $v(c) && (a += " grid_pseudorow_no_prioritized_drop_active");
            return a
        }), onclick:a.onClick, children:concat([TD({"class":"grid_cell_item_number"}), TD({"class":"grid_cell_boolean"}, [a.enclosing_item_list_view.compact ? DIV({"class":"compact-checkbox-container"}, [SPAN({"class":"completed-checkbox"})]) : SPAN({"class":"completed-checkbox"})])], a.show_assignee && !d ? [TD({"class":"grid_cell_assignee"}, [])] : [], [TD({"class":"grid_cell_string"}, [a.enclosing_item_list_view.placeholder_text])], d ? [TD({"class":"grid-tags-and-dates"}, [])] : [], a.show_assignee &&
            d ? [TD({"class":"grid_cell_assignee"}, [])] : [])}, {drop_data:b.dragDropData([null])})];
        d && (e = [TABLE({"class":"compact_row_table"}, e)]);
        return a.dnd_helper.regionNode("TBODY", {children:e}, b.regionNodeOptions({onChangeDropTarget:function(a) {
            a !== null ? c.requestSet(!0) : c.requestSet(!1)
        }}))
    })
}});
__FILE__ = "apps/asana/computed_model/item_list_groups.js";
ItemListGroups = GridBlock.subclass("ItemListGroups", {}, {task_grouper:ATTRIBUTE_REQUIRED, pot:ATTRIBUTE_REQUIRED, visible_list_r:ATTRIBUTE_REQUIRED, expanded_groups_l:ATTRIBUTE_REQUIRED, _tasks_by_group:SET_IN_CONSTRUCTOR, _sorted_groups_r:SET_IN_CONSTRUCTOR, _sorted_groups_pre_later_x:SET_IN_CONSTRUCTOR, _sorted_groups_post_later_x:SET_IN_CONSTRUCTOR, constructor:function(a) {
    var b = this;
    ItemListGroups.superproto.constructor.call(this, a);
    b._tasks_by_group = MultiDict.create(b.visible_list_r, function(a) {
        return $rval(function() {
            return b.task_grouper.groupsForTask(a)
        })
    });
    if(b.task_grouper.shouldAlwaysShowUpcoming() || b.task_grouper.shouldAlwaysShowNull()) {
        var c = List.create(), a = $rval(function() {
            var a = List.create(b._tasks_by_group.keys());
            b.task_grouper.shouldAlwaysShowUpcoming() && !a.contains(b.task_grouper.SpecialGroup.UPCOMING) && a.append(b.task_grouper.SpecialGroup.UPCOMING);
            b.task_grouper.shouldAlwaysShowNull() && !a.contains(b.task_grouper.SpecialGroup.NULL) && a.append(b.task_grouper.SpecialGroup.NULL);
            c.mutateToMatch(a);
            return c
        })
    }else {
        a = b.groupsR()
    }
    b._sorted_groups_r = computed_lists.sort(a, function(a) {
        return b.task_grouper.rankForGroup(a)
    });
    b.task_grouper.groupsCouldBeUnderLater() ? (b._sorted_groups_pre_later_x = FilterRvalue.create(b._sorted_groups_r, function(a) {
        return!b.task_grouper.isGroupUnderLater(a)
    }), b._sorted_groups_post_later_x = FilterRvalue.create(b._sorted_groups_r, function(a) {
        return b.task_grouper.isGroupUnderLater(a)
    })) : (b._sorted_groups_pre_later_x = b._sorted_groups_r, b._sorted_groups_post_later_x = [])
}, groupsR:rvalueProperty("ItemListGroups_groupsR", function() {
    return this._tasks_by_group.keys()
}), sortedGroups:function() {
    return $v(this._sorted_groups_r)
}, sortedGroupsPreLaterR:function() {
    return this._sorted_groups_pre_later_x
}, sortedGroupsPostLaterR:function() {
    return this._sorted_groups_post_later_x
}, itemListGroup:computedProperty("ItemListGroups_itemListGroup", function(a) {
    var b = this;
    return ItemListGroup.create({task_grouper:b.task_grouper, pot:b.pot, group:a, expanded_groups_l:b.expanded_groups_l, visible_list_r:$rval(function() {
        return b._tasks_by_group.values(a)
    }), display_order_key_part:b.task_grouper.rankForGroup(a), blockAbove:function() {
        var c = b.sortedGroups().valueBeforeValueOr(a, -1);
        return c === -1 ? b.blockAbove() : b.itemListGroup(c)
    }, blockBelow:function() {
        var c = b.sortedGroups().valueAfterValueOr(a, -1);
        return c !== -1 ? b.itemListGroup(c) : b.blockBelow()
    }, parent_block:null})
}), childBlockForGroupItem:function(a) {
    return this.itemListGroup(a.group)
}, firstGroupItemOrNull:function() {
    var a = this.sortedGroups();
    return a.isEmpty() ? null : this.itemListGroup(a.firstValueOrNull()).firstGroupItemOrNull()
}, lastGroupItemOrNull:function() {
    var a = this.sortedGroups();
    return a.isEmpty() ? null : this.itemListGroup(a.lastValueOrNull()).lastGroupItemOrNull()
}, groupItemBeforeGroupItemOrNull:function(a) {
    Flags.diagnostics_do_expensive_error_checking && this.task_grouper.groupsForTask(a.item);
    return this.itemListGroup(a.group).groupItemBeforeGroupItemOrNull(a)
}, groupItemAfterGroupItemOrNull:function(a) {
    Flags.diagnostics_do_expensive_error_checking && this.task_grouper.groupsForTask(a.item);
    return this.itemListGroup(a.group).groupItemAfterGroupItemOrNull(a)
}, display_order_key_part:null});
__FILE__ = "apps/asana/computed_model/tri_part_item_list.js";
TriPartItemList = GridBlock.subclass("TriPartItemList", {}, {pot:ATTRIBUTE_REQUIRED, task_grouper:ATTRIBUTE_REQUIRED, group:ATTRIBUTE_REQUIRED, only_show_main_part:ATTRIBUTE_OPTIONAL, visible_list_r:ATTRIBUTE_REQUIRED, _completed_list_x:SET_IN_CONSTRUCTOR, _main_list_x:SET_IN_CONSTRUCTOR, _completed_model:SET_IN_CONSTRUCTOR, _main_model:SET_IN_CONSTRUCTOR, constructor:function(a) {
    var b = this;
    TriPartItemList.superproto.constructor.call(this, a);
    if(b.only_show_main_part === ATTRIBUTE_OPTIONAL) {
        b.only_show_main_part = ExperimentalFeature.enabled("completed_tasks_remain_inline")
    }
    b._main_list_l = b.pot.getX("items");
    if(b.only_show_main_part) {
        b._completed_list_x = List.EMPTY_LIST, b._main_list_x = b.visible_list_r, b._completed_model = null
    }else {
        var c = MultiDict.create(b.visible_list_r, function(a) {
            return $rval(function() {
                var c = $v(a);
                return c.completed() > 0 ? MultiDict.KeyAndRank.create("completed", b._rankForCompletedItem(c)) : MultiDict.KeyAndRank.create("main", b._rankForIncompleteItem(c))
            })
        });
        b._completed_list_x = $rval(function() {
            return c.values("completed")
        });
        var d = b.task_grouper.visibleListForGroupR(b.pot, b.group, $rval(function() {
            return c.values("main")
        }));
        if(b.task_grouper.hideEmptyBars(b.group)) {
            var e = $rval(function() {
                var a = null, b = Set.create();
                $v(d).forEachValue(function(c) {
                    c.isBar() ? (a !== null && a.getAssigneeOrNull() !== env.user().domainUserForDomain(a.domain()) && b.add(a), a = c) : a = null
                });
                a !== null && a.getAssigneeOrNull() !== env.user().domainUserForDomain(a.domain()) && b.add(a);
                return b
            }), f = Set.create();
            b._main_list_x = FilterRvalue.createWithRvalues(d, function(a) {
                var b = env.is_server || !$v(e).contains(a);
                b && f.add(a);
                return b || f.contains(a)
            })
        }else {
            b._main_list_x = d
        }
        b._completed_model = ItemListSection.create({pot:b.pot, group:b.group, list_items_r:b._completed_list_x, display_order_key_part:"1-Completed", blockAbove:b.blockAbove, blockBelow:function() {
            return b._main_model || b.blockBelow()
        }, parent_block:b, displayOrderKeyPartForLeaf:function(a) {
            return b._rankForCompletedItem(a.item)
        }})
    }
    a = {pot:b.pot, blockAbove:function() {
        return b.completedModel() || b.blockAbove()
    }, blockBelow:function() {
        return b.blockBelow()
    }, parent_block:b};
    b._main_model = b.mainListIsEmpty() ? b.task_grouper instanceof TaskGrouper.ProjectInAssigneeView && !b.completedListIsEmpty() ? null : ItemListSection.create(update({group:b.group, list_items_r:$rval(function() {
        return List.EMPTY_LIST
    }), display_order_key_part:"2-Main", displayOrderKeyPartForLeaf:function(a) {
        return b._rankForIncompleteItem(a.item)
    }}, a)) : ItemListSection.create(update({group:b.group, list_items_r:b._main_list_x, display_order_key_part:"2-Main", displayOrderKeyPartForLeaf:function(a) {
        return b._rankForIncompleteItem(a.item)
    }}, a))
}, completedListX:function() {
    return this._completed_list_x
}, mainListX:function() {
    return this._main_list_x
}, lastVisibleTask:function() {
    if(!this.mainListIsEmpty()) {
        return $v(this.mainListX()).lastValueOrNull()
    }
    return $v(this.completedListX()).lastValueOrNull()
}, completedListIsEmpty:computedProperty("completedListIsEmpty", function() {
    return $v(this.completedListX()).isEmpty()
}), mainListIsEmpty:computedProperty("mainListIsEmpty", function() {
    return $v(this.mainListX()).isEmpty()
}), _rankForCompletedItem:function(a) {
    return"" + a.completed() + "." + a.global_id
}, _rankForIncompleteItem:function(a) {
    return this._main_list_l.rankForObject(a)
}, completedModel:function() {
    return this._completed_model
}, mainModel:function() {
    return this._main_model
}, sectionIdForItemOrNull:function(a) {
    var b = this;
    if($v(b.completedListX()).contains(a)) {
        return ItemListView.SECTION_ID_COMPLETED
    }
    return View.runWithoutLvalueChecking(function() {
        if($v(b.mainListX()).contains(a)) {
            return ItemListView.SECTION_ID_MAIN
        }
        return null
    })
}, itemListSectionForSectionId:function(a) {
    switch(a) {
        case ItemListView.SECTION_ID_NONE:
            return null;
        case ItemListView.SECTION_ID_COMPLETED:
            return this._completed_model;
        case ItemListView.SECTION_ID_MAIN:
            return this._main_model;
        default:
            ufu("Bad section", a)
    }
}, childBlockForGroupItem:function(a) {
    return this.sectionIdForItemOrNull(a.item) === ItemListView.SECTION_ID_COMPLETED ? this._completed_model : this._main_model
}, firstGroupItemOrNull:function() {
    if(this._completed_model) {
        var a = this._completed_model.firstGroupItemOrNull();
        if(a) {
            return a
        }
    }
    if(this._main_model && (a = this._main_model.firstGroupItemOrNull())) {
        return a
    }
    return null
}, lastGroupItemOrNull:function() {
    if(this._main_model) {
        var a = this._main_model.lastGroupItemOrNull();
        if(a) {
            return a
        }
    }
    if(this._completed_model && (a = this._completed_model.lastGroupItemOrNull())) {
        return a
    }
    return null
}, groupItemBeforeGroupItemOrNull:function(a) {
    var b = this.sectionIdForItemOrNull(a.item);
    if(b !== null) {
        return this.itemListSectionForSectionId(b).groupItemBeforeGroupItemOrNull(a)
    }
    return this.groupItemAboveOrNull()
}, groupItemAfterGroupItemOrNull:function(a) {
    var b = this.sectionIdForItemOrNull(a.item);
    if(b !== null) {
        return this.itemListSectionForSectionId(b).groupItemAfterGroupItemOrNull(a)
    }
    return this.groupItemBelowOrNull()
}});
__FILE__ = "apps/asana/view/dialog/print_pot_dialog_view.js";
PrintPotDialogView = DialogView2.subclass("PrintPotDialogView", {State:DialogState.subclass("PrintPotDialogView.State", {property_descs:{grid_state:{type:GridState}}}, {}), _print:function(a) {
    var b = IFRAME({"class":"offscreen"});
    document.body.appendChild(b);
    b.contentDocument.write('<link type="text/css" rel="stylesheet" href="/-/static/build/css/apps/asana/css/print.css" />');
    b.contentDocument.write(a);
    b.contentDocument.close();
    b.contentWindow.print()
}}, {_render:function() {
    var a = this, b = a._renderPrintable(), c = DIV({is_unknown_boundary:!0}, [b]);
    return a.createView(DialogView, {title_x:"Printing...", body_x:DIV({style:"display: none"}, [$rval(function() {
        return $v(c.hasUnknownChildrenR()) ? c.firstUnknownValue() : (env.is_server || reactiveTimeout(function() {
            processHandler(function() {
                var b = Node.renderInDeadMode(function() {
                    return DIV([a._renderPrintable()])
                }).innerHTML;
                PrintPotDialogView._print(b);
                a.hide()
            })
        }), "")
    })])}).render()
}, _renderPrintable:function() {
    return this.createView(PrintableItemListView, {grid_state:this._state.gridState()}).render()
}});
__FILE__ = "luna/common/drag_drop/drag_drop_context.js";
defineNamespace("DragDrop");
DragDrop.Context = AsanaObject.subclass("DragDrop.Context", {NOT_DRAGGING:makeUniqueValue("DragDrop.Context.NOT_DRAGGING"), DEFAULT_BEGIN_DRAG_DISTANCE:5, firstIntersect:function(a, b, c) {
    for(var d = a.length - 1;d >= 0;d--) {
        var e = a.item(d), f = MochiKit.Style.getElementPosition(e);
        if(c >= f.y && b >= f.x) {
            var g = MochiKit.Style.getElementDimensions(e, !1);
            if(c < f.y + g.h && b < f.x + g.w) {
                return e
            }
        }
    }
    return null
}, _firstScrollableNode:function(a) {
    if(a) {
        if(a.clientHeight !== a.scrollHeight) {
            var b = document.defaultView.getComputedStyle(a).overflowY;
            if(b === "scroll" || b === "auto") {
                return a
            }
        }
        return this._firstScrollableNode(a.parentNode)
    }else {
        return null
    }
}}, {browser:ATTRIBUTE_REQUIRED, wait_for_long_press:!1, top_scrolling_region_height:0, bottom_scrolling_region_height:0, _handle_options:null, _drag_indicator_element:null, _cached_dimensions:null, _grab_handle_event:null, _grab_handle_coordinates:null, _last_move_coordinates:null, _dragged_data:SET_IN_CONSTRUCTOR, _scroll_interval:null, _last_mouse_move_region:null, _body_listeners:null, _down_event:SET_IN_CONSTRUCTOR, _move_event:SET_IN_CONSTRUCTOR, _up_event:SET_IN_CONSTRUCTOR, _move_cancel_event:SET_IN_CONSTRUCTOR,
    _use_touch_events:SET_IN_CONSTRUCTOR, _long_press_timeout:null, constructor:function(a) {
        DragDrop.Context.superproto.constructor.call(this);
        updateWithAttributes(this, a);
        this._dragged_data = LocalLvalue.create(DragDrop.Context.NOT_DRAGGING);
        this._down_event = (this._use_touch_events = this.browser.isMobile()) ? "touchstart" : "mousedown";
        this._move_event = this._use_touch_events ? "touchmove" : "mousemove";
        this._up_event = this._use_touch_events ? "touchend" : "mouseup";
        this._move_cancel_event = this._use_touch_events ? "touchcancel" : null;
        this._setupIsDraggingWatch()
    }, handleNode:function(a, b, c) {
        var d = this, e = b.onmousedown;
        updateWithDefaults(c, {onBeginDrag:noop, onEndDrag:noop, onDrop:noop, draggedData:ATTRIBUTE_REQUIRED, renderDragIndicator:ATTRIBUTE_REQUIRED});
        b["on" + d._down_event] = function(a) {
            e && e(a);
            if(d._isDragDropAction(a) && d._handle_options === null) {
                d._handle_options = c;
                d._grab_handle_event = a;
                d._grab_handle_coordinates = d._coordinatesForEvent(a);
                log.info("drag_drop_context: Initializing grab handle event", d._grab_handle_event === null);
                if(d.wait_for_long_press) {
                    d._long_press_timeout = safeTimeout(function() {
                        processHandler(function() {
                            d._startDrag()
                        });
                        if(d._last_move_coordinates === null) {
                            d._last_move_coordinates = d._grab_handle_coordinates
                        }
                    }, 200)
                }
                d._setupDragHandlers();
                return d.wait_for_long_press ? Node.DEFAULT_AND_BUBBLE : Node.STOP
            }
        };
        return Node.createLiveNode(a, b)
    }, regionNode:function(a, b, c) {
        updateWithDefaults(c, {onDrag:noop, onDrop:noop, onEndDrag:noop});
        b.drag_drop_id = localID(this);
        a = Node.createLiveNode(a, b);
        a.drag_drop_options = c;
        return a
    }, draggedData:function() {
        return this._dragged_data.peek()
    }, _cancelDrag:function() {
        this._dragged_data.requestSet(DragDrop.Context.NOT_DRAGGING);
        this._cancelWaitingForLongPress();
        this._onEndDrag()
    }, isDragging:function() {
        return this.draggedData() !== DragDrop.Context.NOT_DRAGGING
    }, _setupIsDraggingWatch:function() {
        var a = this;
        $rval(function() {
            a.isDragging() && a._renderAndAttachDragIndicator()
        }).becomeWatch().peek()
    }, _isSafeToFireBodyListener:function(a) {
        return this._grab_handle_event ? !0 : (host.recordWarningOnce("A drag and drop event listener was called when it should have already been unregistered, ignoring event. This is likely do to some other code (chrome extension?) overriding addEventListener so that we cannot remove events.", a, "Event listener overriden by some extension?", document.addEventListener.toString().indexOf("native") > -1 ? "probably not" : "probably", "Event listener function code:", document.addEventListener.toString()),
            !1)
    }, _setupDragHandlers:function() {
        var a = this;
        a._last_mouse_move_region = null;
        log.info("drag_drop_context: Setting up drag handlers", a._grab_handle_event === null);
        a._body_listeners = [document.listen(a._move_event, function(b) {
            if(a._isSafeToFireBodyListener(a._move_event)) {
                var c = a._distanceMoved(b);
                if(!a.isDragging()) {
                    if(a.wait_for_long_press) {
                        return c >= DragDrop.Context.DEFAULT_BEGIN_DRAG_DISTANCE && a._cancelWaitingForLongPress(), Node.DEFAULT_AND_BUBBLE
                    }else {
                        c >= DragDrop.Context.DEFAULT_BEGIN_DRAG_DISTANCE && a._startDrag()
                    }
                }
                a.isDragging() && (a._onDrag(b), a._maybeScroll(b))
            }
        }), document.listen(a._up_event, function(b) {
            if(a._isSafeToFireBodyListener(a._up_event) && a._isDragDropAction(b)) {
                var c = Node.JUST_DEFAULT;
                if(a.isDragging()) {
                    var d = a._use_touch_events ? a._last_move_coordinates : a._coordinatesForEvent(b), e = a._findRegionUnderCursor(d.pageX, d.pageY) || a._last_mouse_move_region;
                    e && (a._handle_options.onDrop(b, d), e.drag_drop_options.onDrop(b, d), e.drag_drop_options.onEndDrag(b, d))
                }else {
                    if(a.wait_for_long_press && (a._last_move_coordinates === null || a._distanceFromGrabHandle(a._last_move_coordinates) < DragDrop.Context.DEFAULT_BEGIN_DRAG_DISTANCE)) {
                        c = Node.DEFAULT_AND_BUBBLE
                    }
                }
                a._cancelDrag();
                return c
            }
        }, !0), document.listen(a._down_event, function(b) {
            if(a._isSafeToFireBodyListener(a._down_event) && a.isDragging() && b.keyCode === KeyMap.Keys.ESC) {
                var c = a._coordinatesForEvent(b);
                if(c = a._findRegionUnderCursor(c.pageX, c.pageY) || a._last_mouse_move_region) {
                    c.drag_drop_options.onEndDrag(b)
                }
                a._cancelDrag();
                return Node.STOP
            }
        }, !0)];
        a._move_cancel_event !== null && a._body_listeners.push(document.listen(a._move_cancel_event, function(b) {
            if(a._isSafeToFireBodyListener(a._down_event) && a.isDragging()) {
                var c = a._coordinatesForEvent(b);
                if(c = a._findRegionUnderCursor(c.pageX, c.pageY) || a._last_mouse_move_region) {
                    c.drag_drop_options.onEndDrag(b)
                }
                a._cancelDrag();
                return Node.STOP
            }
        }, !0))
    }, _onDrag:function(a, b) {
        this._updateDragIndicatorPosition(a, b);
        var c = this._coordinatesForEvent(a, b);
        this._last_mouse_move_region = this._findRegionUnderCursor(c.pageX, c.pageY) || this._last_mouse_move_region;
        this._last_move_coordinates = c;
        if(this._last_mouse_move_region) {
            this._last_mouse_move_region.drag_drop_options.onDrag(a, this._last_move_coordinates)
        }
    }, _maybeScroll:function(a) {
        if(!env.isInTest()) {
            var b = this;
            b._cancelScroll();
            var c = DragDrop.Context._firstScrollableNode(b._eventTarget(b._grab_handle_event));
            if(c) {
                var d = c === document.body, e;
                e = d ? window.innerHeight : MochiKit.Style.getElementDimensions(c, !1).h;
                var f = MochiKit.Style.getElementPosition(c), g = f.y + b.top_scrolling_region_height;
                e = f.y + e - b.bottom_scrolling_region_height;
                var h = 0, f = b._coordinatesForEvent(a), f = d ? f.pageY - document.body.scrollTop : f.pageY;
                f < g ? h = f - g : f > e && (h = f - e);
                if(h !== 0) {
                    c.total_scroll_amount = 0, b._scroll_interval = safeInterval(function() {
                        c.scrollTop += h;
                        d && c.scrollTop > 0 && c.scrollTop < window.innerHeight && (c.total_scroll_amount += h);
                        b._onDrag(a, c.total_scroll_amount)
                    }, 50)
                }
            }
        }
    }, _cancelScroll:function() {
        if(this._scroll_interval) {
            clearInterval(this._scroll_interval), this._scroll_interval = null
        }
    }, _onEndDrag:function() {
        log.info("drag_drop_context: Ending drag", this._grab_handle_event === null);
        this._handle_options.onEndDrag();
        this._body_listeners.forEach(function(a) {
            document.unlisten(a)
        });
        this._cached_dimensions = this._last_move_coordinates = this._grab_handle_coordinates = this._grab_handle_event = this._drag_indicator_element = this._handle_options = this._body_listeners = null;
        this._cancelScroll()
    }, _findRegionUnderCursor:function(a, b) {
        var c = document.body.querySelectorAll("[drag_drop_id='" + localID(this) + "']");
        return DragDrop.Context.firstIntersect(c, a, b)
    }, _renderAndAttachDragIndicator:function() {
        var a = this;
        a._drag_indicator_element = DIV({"class":"drag-indicator", style:{position:"absolute", visibility:"hidden", zIndex:300}}, [$rval(function() {
            return a._handle_options.renderDragIndicator(a.draggedData())
        })]);
        a._drag_indicator_element.liveAppendToBody();
        var b = MochiKit.Style.getElementDimensions(a._drag_indicator_element, !1), c = MochiKit.Style.getElementPosition(a._use_touch_events ? a._grab_handle_event.touches[0].target : a._grab_handle_event.target);
        a._cached_dimensions = {indicator_width:b.w, indicator_height:b.h, browser_width:a.browser.width(), browser_height:a.browser.height(), indicator_y_offset:a._use_touch_events && c ? c.y - this._grab_handle_coordinates.pageY : 0, indicator_x_offset:a._use_touch_events && c ? c.x - this._grab_handle_coordinates.pageX : 10};
        a._updateDragIndicatorPosition(a._grab_handle_event);
        a._drag_indicator_element.setStyleAttr("visibility", "");
        safeTimeout(function() {
            a._drag_indicator_element !== null && a._drag_indicator_element.addClass("drag-indicator-animation")
        }, 1)
    }, _updateDragIndicatorPosition:function(a, b) {
        if(this._cached_dimensions !== null) {
            var c = b === void 0 ? 0 : b, d = Math.min(this._coordinatesForEvent(a).pageX + this._cached_dimensions.indicator_x_offset, this._cached_dimensions.browser_width - this._cached_dimensions.indicator_width);
            this._drag_indicator_element.setStyleAttr("top", Math.min(this._coordinatesForEvent(a).pageY + this._cached_dimensions.indicator_y_offset + c, this._cached_dimensions.browser_height - this._cached_dimensions.indicator_height + document.body.scrollTop));
            this._drag_indicator_element.setStyleAttr("left", d)
        }
    }, _coordinatesForEvent:function(a, b) {
        var c = this._use_touch_events ? a.touches[0] : a;
        return{pageX:c.pageX, pageY:c.pageY + (b !== void 0 ? b : 0)}
    }, _eventTarget:function(a) {
        return this._use_touch_events ? a.touches[0].target : a.target
    }, _isDragDropAction:function(a) {
        if(!this._use_touch_events) {
            return a._event.button === 0
        }
        if(a.type === this._up_event) {
            return a.touches.length === 0
        }
        if(a.type === this._down_event) {
            return a.touches.length === 1
        }
        return!1
    }, _distanceMoved:function(a) {
        return this._distanceFromGrabHandle(this._coordinatesForEvent(a))
    }, _distanceFromGrabHandle:function(a) {
        return Math.sqrt(Math.pow(this._grab_handle_coordinates.pageX - a.pageX, 2) + Math.pow(this._grab_handle_coordinates.pageY - a.pageY, 2))
    }, _cancelWaitingForLongPress:function() {
        safeClearTimeout(this._long_press_timeout);
        this._long_press_timeout = null
    }, _startDrag:function() {
        this._dragged_data.requestSet(this._handle_options.draggedData());
        this._handle_options.onBeginDrag(this._grab_handle_event)
    }});
__FILE__ = "luna/common/drag_drop/drag_drop_helper.js";
defineNamespace("DragDrop");
DragDrop.Helper = AsanaObject.subclass("DragDrop.Helper", {_onLinkDefault:function() {
    ufu("Link action called but onLink attribute was not provided")
}, _onReorderDefault:function() {
    ufu("Link action called but onLink attribute was not provided")
}}, {_drag_drop_context:SET_IN_CONSTRUCTOR, _reorder_position_indicator:SET_IN_CONSTRUCTOR, _previous_region_options:null, _previous_drop_target:null, constructor:function(a) {
    DragDrop.Helper.superproto.constructor.call(this);
    this._drag_drop_context = a;
    this._reorder_position_indicator = DragDrop.Helper.ReorderPositionIndicator.create()
}, handleNode:function(a, b, c) {
    updateWithDefaults(c, {draggedData:ATTRIBUTE_REQUIRED, renderDragIndicator:ATTRIBUTE_REQUIRED, onBeginDrag:noop, onEndDrag:noop});
    return this._drag_drop_context.handleNode(a, b, {draggedData:c.draggedData, renderDragIndicator:c.renderDragIndicator, onBeginDrag:c.onBeginDrag, onEndDrag:c.onEndDrag})
}, dropTargetNode:function(a, b, c) {
    updateWithDefaults(c, {drop_data:ATTRIBUTE_REQUIRED});
    b.drop_target_context_id = localID(this._drag_drop_context);
    a = Node.createLiveNode(a, b);
    a.drop_data = c.drop_data;
    return a
}, regionNode:function(a, b, c) {
    var d = this;
    updateWithDefaults(c, {action:ATTRIBUTE_REQUIRED, onLink:DragDrop.Helper._onLinkDefault, onReorder:DragDrop.Helper._onReorderDefault, onDrop:noop, onChangeDropTarget:noop});
    if(c.is_drop_target) {
        b.drop_target_context_id = localID(d._drag_drop_context)
    }
    var e = d._drag_drop_context.regionNode(a, b, {onDrag:function(a, b) {
        d._onDrag(a, b, e, c)
    }, onDrop:function(a, b) {
        d._onDrop(a, b, e, c)
    }, onEndDrag:function(a, b) {
        d._onEndDrag(a, b, e, c)
    }});
    if(c.is_drop_target) {
        e.drop_data = c.drop_data
    }
    return e
}, _onDrag:function(a, b, c, d) {
    a = d.action(this._drag_drop_context.draggedData());
    a !== DragDrop.Helper.Action.REORDER && this._reorder_position_indicator.hide();
    a === DragDrop.Helper.Action.LINK ? (b = this._findDropOnNode(b.pageX, b.pageY, c), this._maybeFireOnChangeDropTarget(d, b)) : (a === DragDrop.Helper.Action.REORDER && this._findDropBeforeNodeAndRenderIndicator(b.pageY, c), this._maybeFireOnChangeDropTarget(d, null));
    this._previous_region_options = d
}, _onDrop:function(a, b, c, d) {
    var e = d.action(this._drag_drop_context.draggedData());
    if(e === DragDrop.Helper.Action.LINK) {
        if(b = this._findDropOnNode(b.pageX, b.pageY, c)) {
            d.onLink(a, this._drag_drop_context.draggedData(), b.drop_data)
        }
    }else {
        e === DragDrop.Helper.Action.REORDER ? (b = this._findDropBeforeNodeAndRenderIndicator(b.pageY, c), d.onReorder(a, this._drag_drop_context.draggedData(), b ? b.drop_data : null)) : e !== DragDrop.Helper.Action.NONE && ufu("Invalid drop action", e)
    }
    d.onDrop(a, this._drag_drop_context.draggedData())
}, _onEndDrag:function(a, b, c, d) {
    this._reorder_position_indicator.hide();
    this._maybeFireOnChangeDropTarget(d, null);
    this._previous_drop_target_node = this._previous_region_options = null
}, _maybeFireOnChangeDropTarget:function(a, b) {
    if(this._previous_drop_target_node !== b) {
        this._previous_drop_target_node = b;
        if(this._previous_region_options && this._previous_region_options !== a) {
            this._previous_region_options.onChangeDropTarget(b, null)
        }
        a.onChangeDropTarget(b, b ? b.drop_data : null)
    }
}, _findDropBeforeNodeAndRenderIndicator:function(a, b) {
    for(var c = this._dropTargets(b), d = null, e = null, f = null, g = null, h = null, i = c.length - 1;i >= 0;i--) {
        var j = c.item(i), l = MochiKit.Style.getElementDimensions(j, !1), m = MochiKit.Style.getElementPosition(j);
        g === null && (g = l, h = m);
        a < m.y + l.h / 2 && (d = j, e = m, f = l)
    }
    d !== null ? this._reorder_position_indicator.show(e.y - 1, e.x, f.w) : c.length > 0 && this._reorder_position_indicator.show(h.y + g.h - 1, h.x, g.w);
    return d
}, _findDropOnNode:function(a, b, c) {
    return DragDrop.Context.firstIntersect(this._dropTargets(c), a, b)
}, _dropTargets:function(a) {
    return a.querySelectorAll("[drop_target_context_id='" + localID(this._drag_drop_context) + "']")
}});
DragDrop.Helper.ReorderPositionIndicator = AsanaObject.subclass("DragDrop.Helper.ReorderPositionIndicator", {}, {_element:SET_IN_CONSTRUCTOR, constructor:function() {
    DragDrop.Helper.ReorderPositionIndicator.superproto.constructor.call(this);
    this._element = DIV({"class":"reorder-position-indicator", style:{position:"absolute", backgroundColor:"black", height:"1px", display:"none", zIndex:300}});
    this._element.liveAppendToBody()
}, show:function(a, b, c) {
    this._element.setStyleAttr("display", "");
    this._element.setStyleAttr("top", a);
    this._element.setStyleAttr("left", b);
    this._element.setStyleAttr("width", c)
}, hide:function() {
    this._element.setStyleAttr("display", "none")
}});
DragDrop.Helper.Action = {REORDER:"reoder", LINK:"link", NONE:"none"};
__FILE__ = "luna/common/drag_drop.js";
__FILE__ = "apps/asana/view/item_list_view.js";
ItemListView = View.subclass("ItemListView", {SECTION_ID_NONE:makeUniqueValue("ItemListView.SECTION_ID_NONE"), SECTION_ID_COMPLETED:makeUniqueValue("ItemListView.SECTION_ID_COMPLETED"), SECTION_ID_MAIN:makeUniqueValue("ItemListView.SECTION_ID_MAIN"), SECTION_ID_TOP:makeUniqueValue("ItemListView.SECTION_ID_TOP"), SECTION_ID_BOTTOM:makeUniqueValue("ItemListView.SECTION_ID_BOTTOM"), _groupId:function(a) {
    return a.global_id
}}, {grid_state:ATTRIBUTE_REQUIRED, allow_deleting:ATTRIBUTE_REQUIRED, current_asana_list:ATTRIBUTE_REQUIRED, context_pot_or_null:ATTRIBUTE_OPTIONAL, entire_list_r:ATTRIBUTE_REQUIRED, show_assignee:ATTRIBUTE_REQUIRED, placeholder_text:"", use_loading_boundary:!0, root_grid_block_r:ATTRIBUTE_REQUIRED, show_ancestry:!0, details_state:null, compact:!1, _task_grouper:SET_IN_CONSTRUCTOR, dnd_helper:ATTRIBUTE_REQUIRED, row_view_class:void 0, list_heading_view:SET_IN_CONSTRUCTOR, _show_archived_items_l:SET_IN_CONSTRUCTOR,
    _tri_part_view_by_identifier:SET_IN_CONSTRUCTOR, _is_assigned_to_me:SET_IN_CONSTRUCTOR, constructor:function(a) {
        var b = this;
        if(a.context_pot_or_null === void 0) {
            a.context_pot_or_null = a.current_asana_list
        }
        ItemListView.superproto.constructor.call(this, a);
        b._show_archived_items_l = b.grid_state.getX("show_archived_items");
        b._task_grouper = b.grid_state.getTaskGrouper();
        b.list_heading_view = b.createView(HeaderRowView, {grid_state:b.grid_state, model:b.current_asana_list, task_grouper:b._task_grouper, group:b._task_grouper.SpecialGroup.NULL, groupItemBelowOrNull:View.publicFunction(this, function() {
            return $v(b.root_grid_block_r).firstGroupItemOrNull()
        }), first_item_number:-1, item_number_offset:0, draggable:!1, drop_target:!1, section_name:"header", dnd_helper:null, enclosing_item_list_view:b});
        b._tri_part_view_by_identifier = FastMap.create();
        a = b.current_asana_list.getV("assignee");
        b._is_assigned_to_me = a && a.user() === env.userOrNull()
    }, isItemVisible:View.publicMethod(function(a) {
        if(!this.isLoaded()) {
            return!1
        }
        var b = $v(this.root_grid_block_r).visible_list_r.peekAllowingUnknown();
        return isKnown(b) && b.contains(a) || a.isBar()
    }), mostRecentlySelectedGroupItemOrNull:View.publicMethod(function() {
        var a = this.grid_state.mostRecentlySelectedItemOrNull();
        return a === null || !this.isItemVisible(a) ? null : this.grid_state.mostRecentlySelectedGroupItemOrNull()
    }), focusSelectedItems:View.publicMethod(function() {
        this.grid_state.focusSelectedItems()
    }), groupsForTask:View.publicMethod(function(a) {
        return this._task_grouper.groupsForTask(a)
    }), logItemListViewEvent:function(a) {
        logEvent({name:this.compact ? "Subtask-" + a : a, parent:this.current_asana_list})
    }, movableSelectedItemsInDisplayOrder:View.publicMethod(function() {
        var a = this, b = a.grid_state.getV("selected_group"), c = a._task_grouper instanceof TaskGrouper.Project, d = a.grid_state.getV("selected_items").peekValuesArray().filter(function(d) {
            if(!(d instanceof Task)) {
                return!1
            }
            if(a.isItemVisible(d)) {
                if(c && a.groupsForTask(d).indexOf(b) === -1) {
                    return!1
                }
                return!0
            }else {
                return!1
            }
        }), e = $v(a.root_grid_block_r);
        return d.sort(function(d, g) {
            var h = e.displayOrderKeyForGroupItem(ItemListView.GroupItem.create(c ? b : a._task_grouper.defaultGroupForTask(d), d)), i = e.displayOrderKeyForGroupItem(ItemListView.GroupItem.create(c ? b : a._task_grouper.defaultGroupForTask(g), g));
            return h < i ? -1 : h > i ? 1 : 0
        })
    }), getItemsBetweenGroupItems:View.publicMethod(function(a, b) {
        for(var c = $v(this.root_grid_block_r), d = c.displayOrderKeyForGroupItem(a), e = c.displayOrderKeyForGroupItem(b), f = a, g = [a.item];f.group !== b.group || f.item !== b.item;) {
            f = d < e ? c.groupItemAfterGroupItemOrNull(f) : c.groupItemBeforeGroupItemOrNull(f), f === null && ufu("Never found second item", b), g.push(f.item)
        }
        return g
    }), _render:function() {
        var a = this;
        if(a.current_asana_list instanceof Pot && a.current_asana_list.isUserTaskList() && !a.current_asana_list.assignee().active()) {
            return DIV({"class":"inactive-user-warning"}, ["The user has been removed from this workspace"])
        }
        a.current_asana_list instanceof Pot && !a.current_asana_list.isUserTaskList() && $rval(function() {
            $v(a.current_asana_list.projectMembershipsR())
        }).becomeWatch().peek();
        env.world_store.peekXvaluesAndStateObjectScalarsWithoutDependencies([a.grid_state.getX("selected_items"), a.grid_state.getX("expanded_groups")], []);
        return $rval(function() {
            var b = a.grid_state.getTaskGrouper(), c = $rval(function() {
                var c;
                c = $v(a.root_grid_block_r);
                c = c instanceof ItemListGroups ? a.createView(ItemListGroupsView, {model:c, grid_state:a.grid_state, enclosing_item_list_view:a}) : a.createView(TriPartItemListView, {model:c, show_assignee:a.show_assignee, id:ItemListView._groupId(b.SpecialGroup.NULL), enclosing_item_list_view:a});
                a._child_view = c;
                return c.render()
            }, "ItemListView.childView"), d = $rval(function() {
                return a._maybeRenderLoadingIndicator()
            }), c = a.use_loading_boundary ? [AsanaHelpers.renderWithinLoadingBoundary("DIV", [c, d])] : [c, d];
            return DIV({key_map:a._keyMap(), "class":a.compact ? "grid-compact" : "grid-uncompact", oncopy:function() {
                a.logItemListViewEvent("ItemListCopy");
                var b = a.grid_state.getV("selected_items");
                if(b.size() > 1) {
                    var c = $v($v(a.root_grid_block_r).visible_list_r), b = computed_lists.sort(b, function(a) {
                        return c.rankForValueOrNull(a)
                    }), b = $v(b).peekValuesArray().map(function(a) {
                        return a.name()
                    }).join("\n");
                    a._openCopyDialog(b);
                    return Node.STOP
                }else {
                    return Node.JUST_DEFAULT
                }
            }, onpaste:function(b) {
                a.logItemListViewEvent("ItemListPaste");
                b = b.clipboardText();
                if(b !== null && (b = b.trim().replace(/\r\n?/g, "\n"), b.contains("\n"))) {
                    return a._multilinePaste(b), Node.STOP
                }
                return Node.DEFAULT_AND_BUBBLE
            }}, c)
        })
    }, _maybeRenderLoadingIndicator:function() {
        return this.grid_state.loadingMoreTasks(this.current_asana_list) ? AsanaHelpers.renderLoadingIndicator(null) : ""
    }, _keyMap:function() {
        var a = this;
        return[{key:"ENTER", handler:function() {
            env.datastore_manager.setCurrentHandlerName("CreateTask-GridPane-Enter");
            var b = document.activeElement;
            b && b.selectionStart === 0 && b.selectionEnd === 0 && b.value !== "" ? a._insertAboveSelection() : a._insertBelowSelection()
        }}, {key:KeyMap.Keys.TAB, up:!0, handler:function() {
            var a = env.realAppSession();
            if(a.detailsVisible()) {
                return Node.DEFAULT_AND_BUBBLE
            }else {
                a.openDetailsPane(), a = document.getElementById("property_sheet:details_property_sheet_field:description"), a !== null && a.requestFocus()
            }
        }}, {key:"DOWN", handler:function() {
            a._selectDown(!1)
        }}, {key:"DOWN", shift:!0, handler:function() {
            a.logItemListViewEvent("ShiftDown");
            a._selectDown(!0)
        }}, {key:"UP", handler:function() {
            a._selectUp(!1, !0)
        }}, {key:"UP", shift:!0, handler:function() {
            a.logItemListViewEvent("ShiftUp");
            a._selectUp(!0, !1)
        }}, {key:"ENTER", meta_or_ctrl:!0, handler:function() {
            a.markComplete();
            a.logItemListViewEvent("CmdEnterCompletion")
        }}]
    }, renderListHeading:function() {
        return this.list_heading_view.render()
    }, inMultiSelect:function() {
        return this.grid_state.getV("selected_items").size() > 1
    }, groups:View.publicMethod(function() {
        var a = $v(this.root_grid_block_r);
        return $v(a.groupsR())
    }), _archiveItems:View.publicMethod(function() {
        var a = $v(env.frp.chronometer.instant_time_rvalue);
        this.current_asana_list.getX("archive_time").requestSet(a);
        this._setShowArchivedItems(!1)
    }), _setShowArchivedItems:View.publicMethod(function(a) {
        this._show_archived_items_l.requestSet(a)
    }), _insertAboveSelection:View.publicMethod(function() {
        var a = this.grid_state.mostRecentlySelectedItemOrNull(), b = null;
        a !== null && a !== this.current_asana_list && this.isItemVisible(a) && (b = this.selectedTriPartViewOrNull());
        b !== null ? b.insertRowBefore(a) : this._insertRowBefore(this.current_asana_list, null)
    }), _insertBelowSelection:View.publicMethod(function() {
        var a = this.grid_state.mostRecentlySelectedItemOrNull(), b = null;
        a !== null && a !== this.current_asana_list && this.isItemVisible(a) && (b = this.selectedTriPartViewOrNull());
        b !== null ? b.insertRowAfter(a) : this._insertRowAfter(this.current_asana_list, null)
    }), insertRowAtBottom:View.publicMethod(function() {
        var a = $v(this.root_grid_block_r).lastGroupItemOrNull();
        a === null ? this._insertRowBefore(this.current_asana_list, null) : a.item.name() === "" ? this.grid_state.selectGroupItem(a) : this._tri_part_view_by_identifier.get(ItemListView._groupId(a.group)).insertRowBefore(null)
    }), isLoaded:View.publicMethod(function() {
        var a = toValueAllowingUnknown(this.root_grid_block_r);
        return isKnown(a) && isKnown(toValueAllowingUnknown(a.visible_list_r))
    }), _insertRowBefore:View.publicMethod(function(a, b) {
        var c = a.insertNewBefore(this.user.domainUserForDomain(a.domain()), b);
        this.grid_state.selectGroupItem(ItemListView.GroupItem.create(this.grid_state.getV("selected_group"), c));
        c instanceof Task && this.grid_state.getV("selected_filters").forEach(function(a) {
            c.addTag(a)
        });
        return c
    }), _insertRowAfter:View.publicMethod(function(a, b) {
        var c = a.insertNewAfter(this.user.domainUserForDomain(a.domain()), b);
        this.grid_state.selectGroupItem(ItemListView.GroupItem.create(this.grid_state.getV("selected_group"), c));
        c instanceof Task && this.grid_state.getV("selected_filters").forEach(function(a) {
            c.addTag(a)
        });
        return c
    }), selectedTriPartViewOrNull:View.publicMethod(function() {
        var a = this.grid_state.getTaskGrouper(), b = this.grid_state.mostRecentlySelectedItemOrNull();
        if(b === null) {
            return null
        }
        var c = a.SpecialGroup.NULL;
        if(b instanceof Task) {
            var c = this.grid_state.getV("selected_group"), d = this._triPartViewOrNullForGroup(c);
            if(d === null || !$v(d.model.mainListX()).contains(b)) {
                c = a.defaultGroupForTask(b)
            }
        }
        return this._triPartViewOrNullForGroup(c)
    }), _triPartViewOrNullForGroup:function(a) {
        return this._tri_part_view_by_identifier.getOr(ItemListView._groupId(a), null)
    }, _deleteSelectedRowsInUserActionNoSelect:function() {
        var a = this, b = a.grid_state.mostRecentlySelectedItemOrNull();
        return a.current_asana_list !== b && null !== b && a.allow_deleting ? AsanaHelpers.deleteItems(a.grid_state.selectedItems(), function(b) {
            b instanceof Task ? b.trash() : $L(a.entire_list_r).requestRemove(b);
            return!0
        }) : ImmutableSet.empty_set
    }, deleteSelectedRowsInUserAction:View.publicMethod(function() {
        var a = this.awayGroupItem(), b = this._deleteSelectedRowsInUserActionNoSelect();
        b.isEmpty() || (a !== null && b.contains(a.item) && (a = null), this.selectGroupItem(a))
    }), _multilinePaste:function(a) {
        var b = this, c = b.grid_state.mostRecentlySelectedItemOrNull(), d = c !== null && c.name() === "";
        a.split(/\r?\n/).forEach(function(a, c) {
            c === 0 && d || b._insertBelowSelection();
            b.grid_state.mostRecentlySelectedItemOrNull().setName(a)
        })
    }, _openCopyDialog:function(a) {
        CopyDialogView.show({text_to_copy:a})
    }, print:View.publicMethod(function() {
        PrintPotDialogView.show({grid_state:this.grid_state})
    }), isAssignedToMe:function() {
        return this._is_assigned_to_me
    }, selectGroupItem:function(a, b) {
        var c = this.grid_state;
        if(b) {
            if(a.item === c.secondMostRecentlySelectedItemOrNull()) {
                var d = c.mostRecentlySelectedItemOrNull();
                c.removeFromSelection(d)
            }
            c.addGroupItemToSelection(a)
        }else {
            c.selectGroupItem(a)
        }
        this.resetSubtaskState()
    }, downGroupItem:View.publicMethod(function() {
        var a = this.mostRecentlySelectedGroupItemOrNull();
        if(a === null) {
            return null
        }
        return $v(this.root_grid_block_r).groupItemAfterGroupItemOrNull(a)
    }), _selectDown:View.publicMethod(function(a) {
        var b = this.downGroupItem();
        if(b === null) {
            return!1
        }
        this.selectGroupItem(b, a);
        return!0
    }), upGroupItem:View.publicMethod(function(a) {
        var b = $v(this.root_grid_block_r), c = this.mostRecentlySelectedGroupItemOrNull();
        if(c === null) {
            return null
        }
        b = b.groupItemBeforeGroupItemOrNull(c);
        return!b && a && !this.compact ? ItemListView.GroupItem.create(this._task_grouper.SpecialGroup.NULL, this.current_asana_list) : b
    }), _selectUp:View.publicMethod(function(a, b) {
        var c = this.upGroupItem(b);
        if(c === null) {
            return!1
        }
        this.selectGroupItem(c, a);
        return!0
    }), markComplete:View.publicMethod(function() {
        var a = this.movableSelectedItemsInDisplayOrder(), b = a.all(function(a) {
            return a.getV("completed")
        });
        b || this.selectAway();
        a.forEach(function(a) {
            a.setCompleted(!b, env.user().domainUserForDomain(a.domain()))
        })
    }), awayGroupItem:View.publicMethod(function() {
        var a = this.downGroupItem();
        a === null && (a = this.upGroupItem(!1));
        return a
    }), selectAway:View.publicMethod(function() {
        var a = this.awayGroupItem();
        a !== null && this.selectGroupItem(a)
    }), resetSubtaskState:function() {
        this.details_state && this.details_state.resetSubtaskState()
    }});
ItemListView.GroupItem = AsanaObject.subclass("ItemListView.GroupItem", {}, {group:SET_IN_CONSTRUCTOR, item:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    ItemListView.GroupItem.superproto.constructor.call(this);
    this.group = a;
    this.item = b
}, toString:function() {
    return this.group.global_id + "_" + this.item.global_id
}});
__FILE__ = "apps/asana/view/navigation_search_view.js";
NavigationSearchView = View.subclass("NavigationSearchView", {}, {session:ATTRIBUTE_REQUIRED, blurSelf:ATTRIBUTE_REQUIRED, onAfterNavigate:ATTRIBUTE_OPTIONAL, search_all_domains:ATTRIBUTE_OPTIONAL, _render:function() {
    var a = this;
    return a.createView(SearchView, {session:a.session, blurSelf:a.blurSelf, preloadItem:function(a) {
        a.navigationTarget().navigationContextForUser(env.user())
    }, onSelectItem:function(b) {
        a.session.navigateTo(b);
        var c, d = b.navigationTarget();
        c = d instanceof Task ? "" : a.session.potCached(d) ? "Cached" : "Uncached";
        env.datastore_manager.setCurrentHandlerName("SearchResult-" + b.typeName() + c + "-Selection");
        if(a.onAfterNavigate) {
            a.onAfterNavigate(d)
        }
    }, id_prefix:"nav_", search_all_domains:a.search_all_domains}).render()
}});
__FILE__ = "apps/asana/view/navigation_dock_title_bar_view.js";
NavigationDockTitleBarView = View.subclass("NavigationDockTitleBarView", {}, {domain:ATTRIBUTE_REQUIRED, selectWorkspace:ATTRIBUTE_REQUIRED, show_archived_projects_l:ATTRIBUTE_REQUIRED, _renderNetworkDropdown:function() {
    var a = this, b = a.user.domains().filter(function(b) {
        return b !== a.domain
    }), c = [];
    c.push({id:"network-menu_domain_overview", label:DIV({"class":"menu-item-contents"}, ["Workspace Overview", DIV({"class":"other-inbox-notification"})]), onselect:function() {
        logEvent({name:"WorkspaceSelection-BackButton:Overview"});
        a.selectWorkspace(null)
    }});
    b.forEach(function(b) {
        if(b !== a.domain) {
            var e = a.user.domainUserForDomain(b).inbox().hasNewNotifications();
            c.push({id:"network-menu_domain_" + b.global_id, label:DIV({"class":"menu-item-contents" + (e ? " glowing" : "")}, [b.name(), DIV({"class":"other-inbox-notification"})]), onselect:function() {
                logEvent({name:"WorkspaceSelection-BackButton:Workspace"});
                a.selectWorkspace(b)
            }})
        }
    });
    return DIV({}, [a.createView(DropdownMenuView, {id:"nav_dock_header_network_menu", include_arrow:!1, label:SPAN({"class":"network-menu"}, [a._renderOtherInboxesGlower(), a._renderTitleText(), SPAN({"class":"button-icon"})]), menu_items:c}).render()])
}, _renderOtherInboxesGlower:function() {
    var a = this, b = a.user.activeDomainUsers().filter(function(b) {
        return b.domain() !== a.domain
    }).any(function(a) {
            return a.inbox().hasNewNotifications()
        });
    return DIV({"class":"inbox-glower " + (b ? "glowing" : "")}, [])
}, _renderBackButton:function() {
    var a = this, b = a.user.domains().filter(function(b) {
        return b !== a.domain
    });
    if(b.size() > 0) {
        var c = [];
        c.push({id:"network-menu_domain_overview", label:"Workspace Overview", onselect:function() {
            logEvent({name:"WorkspaceSelection-BackButton:Overview"});
            a.selectWorkspace(null)
        }});
        c.push(DropdownMenuView.SEPARATOR);
        b.forEach(function(b) {
            b !== a.domain && c.push({id:"network-menu_domain_" + b.global_id, label:b.name(), onselect:function() {
                logEvent({name:"WorkspaceSelection-BackButton:Workspace"});
                a.selectWorkspace(b)
            }})
        });
        return DIV({style:{visibility:!a.domain ? "hidden" : "visible"}}, [a.createView(DropdownMenuView, {id:"nav_dock_back_button_menu", padding_y:-1, include_arrow:!1, label:SPAN({"class":"back-button button"}, [SPAN({"class":"button-icon"})]), menu_items:c}).render()])
    }else {
        return AsanaForms.renderIconButton({"class":"back-button", onclick:function() {
            logEvent({name:"WorkspaceSelection-BackButton:Overview"});
            a.selectWorkspace(null)
        }, style:{visibility:!a.domain ? "hidden" : "visible"}})
    }
}, _renderTitleText:function() {
    return DIV({"class":"title-text"}, [this.domain ? this.domain.name() : "Workspace Overview", DIV({"class":"premium-icon"})])
}, _renderWorkspaceMenu:function() {
    return this.domain === null ? this._renderOverviewMenu() : this._renderNetworkMenu()
}, _renderOverviewMenu:function() {
    return this.createView(DropdownMenuView, {id:"workspace_menu", include_arrow:!1, tooltip:"Settings: Add a workspace", tooltip_delay:300, label:SPAN({"class":"button"}, [SPAN({"class":"button-icon button-arrow"})]), menu_items:[{id:"new_workspace", label:"New Workspace", onselect:function() {
        View.publicFunction(this, function() {
            CreateWorkspaceDialogView.show({})
        })();
        logEvent({name:"WorkspaceMenuClick"})
    }}]}).render()
}, _renderNetworkMenu:function() {
    var a = this, b = a.domain;
    if(!b.isFullyLoaded()) {
        return""
    }
    var c = a.user.domainUserForDomain(b), d = [];
    c.isInternal() && !b.isGlobal() && (d.push({id:"manage_members", label:"Invite and Manage Members", onselect:View.publicFunction(a, function() {
        ManageWorkspaceDialogView.show({billable_domain_user_group:b, selected_tab:ManageWorkspaceDialogView.TABS.MEMBERS, requested_remove_self:!1})
    })}), d.push({id:"edit_workspace_settings", label:"Edit Workspace Settings", onselect:View.publicFunction(a, function() {
        ManageWorkspaceDialogView.show({billable_domain_user_group:b, selected_tab:ManageWorkspaceDialogView.TABS.SETTINGS, requested_remove_self:!1})
    })}), b.billingPlan().isPremium() ? d.push({id:"manage_payments", label:"Manage Billing", onselect:View.publicFunction(a, function() {
        a._openManageWorkspaceDialogView(b, ManageWorkspaceDialogView.TABS.PAYMENT)
    })}) : d.push({id:"upgrade_workspace", label:"Upgrade Workspace", onselect:View.publicFunction(a, function() {
        BillingDialogView.showBillingFlow(BillingRoutes.urlForBillingPlans(b.global_id))
    })}));
    !b.isGlobal() && !c.isBillingOwner() && d.push({id:"remove_self", label:"Remove Me From This Workspace", onselect:View.publicFunction(a, function() {
        ManageWorkspaceDialogView.show({billable_domain_user_group:b, selected_tab:ManageWorkspaceDialogView.TABS.MEMBERS, requested_remove_self:!0})
    })});
    d.length && d.push(DropdownMenuView.SEPARATOR);
    d.push({id:"toggle_show_archived_projects", label:$v(a.show_archived_projects_l) ? "Hide Archived Projects" : "Show Archived Projects", onselect:View.publicFunction(a, function() {
        a.show_archived_projects_l.requestSet(!$v(a.show_archived_projects_l))
    })});
    return a.createView(DropdownMenuView, {id:"workspace_menu", include_arrow:!1, tooltip:"Workspace Settings: Change the workspace name, add and remove members", tooltip_delay:200, label:DIV({"class":"button"}, [SPAN({"class":"button-icon edit"})]), menu_items:d}).render()
}, _touch:function() {
    this.domain && ManageWorkspaceDialogView.touch(this.domain, this.user)
}, _openManageWorkspaceDialogView:function(a, b) {
    ManageWorkspaceDialogView.show({billable_domain_user_group:a, selected_tab:b, requested_remove_self:!1})
}, _render:function() {
    var a = this.domain;
    this._touch();
    return ExperimentalFeature.enabled("networks_left_pane_header") ? a === null ? DIV({id:"navigation_dock_header"}, [this._renderTitleText(), this._renderOverviewMenu()]) : DIV({id:"navigation_dock_header", "class":a.billingPlan().isPremium() ? "premium" : ""}, [this._renderNetworkMenu(), this._renderNetworkDropdown()]) : DIV({id:"navigation_dock_header_old", "class":a && a.billingPlan().isPremium() ? "premium" : ""}, [this._renderWorkspaceMenu(), this._renderBackButton(), this._renderTitleText()])
}});
__FILE__ = "apps/asana/view/navigation_dock_body_view.js";
NavigationDockBodyView = View.subclass("NavigationDockBodyView", {}, {session:ATTRIBUTE_REQUIRED, selectList:ATTRIBUTE_REQUIRED, selectInbox:ATTRIBUTE_REQUIRED, dnd_helper:ATTRIBUTE_REQUIRED, _listForItem:function(a) {
    return a instanceof DomainUser ? a.taskList() : a
}, renderItem:attributedFunc({item:ATTRIBUTE_REQUIRED, label:ATTRIBUTE_OPTIONAL, show_favorite_star:!1, show_recent_icon:!1, onSelectItem:noop, sectionIsSelected:function() {
    return!0
}}, function(a) {
    var b = a.item, c = this, d = b.domain(), e = c.user.domainUserForDomain(d), f = a.label === void 0 ? b.name() : a.label, g = c._listForItem(b), h = FastEqualsRvalue.create(g, c.session.currentListL()), i = a.sectionIsSelected() && c.session.currentViewType() === AsanaSession.CURRENT_VIEW_TYPE.LIST, j = g.isArchived(), l = b === e.taskList(), m = a.show_favorite_star && e.favoritesL().containsObject(b), o = !m && a.show_recent_icon && e.recents().contains(b), n = ["list-item"];
    j && n.push("archived");
    l && (n.push("atm"), b.domain() === c.session.activeDomain() && n.push("active-domain-atm"));
    var p = this.__type_name;
    p += m ? "-Favorite" : o ? "-Recent" : "-Regular";
    p += l ? "-ATM" : "-" + b.productTypeName();
    p += "-ListSelection";
    var q = n.join(" ");
    return A({"class":$rval(function() {
        return q + (i && $v(h) ? " selected" : "")
    }), href:g.getPermalink(e), onclick:View.publicFunction(c, function(d) {
        if(d.hasMetaOrCtrl() || d.shiftKey) {
            return Node.JUST_DEFAULT
        }
        c.selectList(g);
        logEvent({name:p});
        a.onSelectItem(b)
    })}, [l ? SPAN({"class":"atm-icon " + AsanaHelpers.classForWorkspaceIcon(d)}) : "", m ? SPAN({"class":"favorite-on", tooltip:"Marked as Favorite"}) : "", o ? SPAN({"class":"recent", tooltip:"Recently Viewed"}) : "", f, b instanceof Pot ? c.createView(PotPrivacyIconView, {model:b}).render() : "", b instanceof DomainUser && b.isGuest() ? SPAN({"class":"guest-icon"}) : ""])
}), renderDraggableItems:attributedFunc({name:ATTRIBUTE_REQUIRED, list_r:ATTRIBUTE_REQUIRED, list_l:ATTRIBUTE_REQUIRED, renderLoadingMoreIndicator:ATTRIBUTE_OPTIONAL, id:ATTRIBUTE_OPTIONAL, "class":"", show_favorite_star:!1, show_recent_icon:!1, onSelectItem:noop, sectionIsSelected:function() {
    return!0
}}, function(a) {
    var b = this;
    return DIV({"class":"list-section " + a["class"], id:a.id !== void 0 ? a.id : ""}, [b.createView(DraggableListView, {dnd_helper:b.dnd_helper, drag_drop_region:NavigationDragDropRegion.create({list_r:a.list_l, reorderable:!0}), list_r:a.list_r, renderItem:function(c) {
        return b.renderItem({item:c, show_favorite_star:a.show_favorite_star, show_recent_icon:a.show_recent_icon, onSelectItem:a.onSelectItem, sectionIsSelected:a.sectionIsSelected})
    }, renderItemLabel:function(a) {
        return a.name()
    }, name:a.name}).render(), a.renderLoadingMoreIndicator !== void 0 ? a.renderLoadingMoreIndicator() : ""])
}), renderStaticItems:attributedFunc({name:ATTRIBUTE_REQUIRED, list_r:ATTRIBUTE_REQUIRED, renderLoadingMoreIndicator:ATTRIBUTE_OPTIONAL, "class":"", id:ATTRIBUTE_OPTIONAL, show_favorite_star:!1, show_recent_icon:!1, onSelectItem:noop, sectionIsSelected:function() {
    return!0
}}, function(a) {
    var b = this;
    return DIV({"class":"list-section " + a["class"], id:a.id !== void 0 ? a.id : ""}, [b.createView(DraggableListView, {dnd_helper:b.dnd_helper, drag_drop_region:NavigationDragDropRegion.create({list_r:a.list_r, reorderable:!1}), list_r:a.list_r, renderItem:function(c) {
        return b.renderItem({item:c, show_favorite_star:a.show_favorite_star, show_recent_icon:a.show_recent_icon, onSelectItem:a.onSelectItem, sectionIsSelected:a.sectionIsSelected})
    }, renderItemLabel:function(a) {
        return a.name()
    }, name:a.name}).render(), a.renderLoadingMoreIndicator !== void 0 ? a.renderLoadingMoreIndicator() : ""])
})});
__FILE__ = "apps/asana/view/navigation_dock_overview_view.js";
NavigationDockOverviewView = NavigationDockBodyView.subclass("NavigationDockOverviewView", {State:SessionObject2.subclass("NavigationDockOverviewView.State", {property_descs:{global_domain_ad_button_tooltip_disabled:{type:Boolean, default_value:!1}}}, {})}, {selectWorkspace:ATTRIBUTE_REQUIRED, _workspace_dnd_helper:SET_IN_CONSTRUCTOR, _workspace_drag_drop_region:SET_IN_CONSTRUCTOR, constructor:function(a) {
    NavigationDockView.superproto.constructor.call(this, a);
    this._workspace_drag_drop_region = WorkspaceDragDropRegion.create({list_r:this.user.domainUsersL()});
    this._workspace_dnd_helper = DragDrop.Helper.create(DragDrop.Context.create({browser:this.browser}))
}, _renderATMs:function() {
    var a = this, b = a.user.activeDomainUsers().peekValuesArray();
    return DIV({id:"overview_atms"}, computed_lists.mapInRvalues(b, function(b) {
        return ExperimentalFeature.enabled("inbox_holdback") ? a._renderAtmRow(b) : a._renderAtmInboxRow(b)
    }))
}, _renderAtmInboxRow:function(a) {
    var b = this, c = a.domain(), d = c.name(), c = c.isGlobal() ? "My Personal Tasks" : "My " + d + " Tasks", e = a.taskList(), d = b.session.currentListOrUnknown() === e && b.session.currentViewType() === AsanaSession.CURRENT_VIEW_TYPE.LIST, f = View.publicFunction(b, function(a) {
        if(a.hasMetaOrCtrl() || a.shiftKey) {
            return Node.JUST_DEFAULT
        }
        b.selectList(e)
    }), g = b.session.inboxModelOrUnknown() === a, h = View.publicFunction(b, function(c) {
        logEvent({name:"InboxClicked-Overview"});
        if(c.hasMetaOrCtrl() || c.shiftKey) {
            return Node.JUST_DEFAULT
        }
        b.selectInbox(a)
    }), i = a.inbox().hasNewNotifications() ? "unread" : "read", j = i === "unread" ? "You have new " + Vocab.inbox_messages : "You have no new " + Vocab.inbox_messages;
    return DIV({}, [A({"class":"list-item feed" + (g ? " selected" : ""), href:AsanaHelpers.renderInboxPath(a, null, null), onclick:h, tooltip:j, tooltip_delay:500}, [SPAN({"class":"feed-icon " + i})]), A({"class":"list-item atm" + (d ? " selected" : ""), href:e.getPermalink(a), onclick:f}, [SPAN({"class":"atm-name"}, [c])])])
}, _renderAtmRow:function(a) {
    var b = a.domain();
    return this.renderItem({item:a.taskList(), label:SPAN({"class":"atm-name"}, [b.isGlobal() ? "My Personal Tasks" : "My " + b.name() + " Tasks"])})
}, _renderWorkspaceHeader:function(a) {
    var b = this, c = a.domain(), d = ["workspace-title"];
    c.activated() || d.push("unactivated");
    return b._workspace_dnd_helper.dropTargetNode("DIV", {"class":"workspace-header" + (c.billingPlan().isPremium() ? " premium" : ""), children:[b._workspace_dnd_helper.handleNode("DIV", {"class":d.join(" "), onclick:function() {
        c.isGlobal() || c.activated() || a.isGuest() ? (logEvent({name:"WorkspaceSelection-Title", selected_workspace:c}), b.selectWorkspace(c)) : ManageWorkspaceDialogView.show({billable_domain_user_group:c, selected_tab:ManageWorkspaceDialogView.TABS.SETTINGS, requested_remove_self:!1})
    }, children:[DIV({"class":"workspace-icon " + AsanaHelpers.classForWorkspaceIcon(c)}, [DIV({"class":"premium-icon"})]), SPAN({"class":"workspace-name"}, [c.name()])]}, {draggedData:function() {
        return b._workspace_drag_drop_region.dragDropData([a])
    }, renderDragIndicator:function(a) {
        return DIV({"class":"dragged_object"}, [a.objects[0].domain().name()])
    }})]}, {drop_data:b._workspace_drag_drop_region.dragDropData([a])})
}, _renderWorkspaceTopLists:function(a) {
    return this.renderStaticItems({name:a.domain().global_id + "-TopLists", list_r:a.topListsR(), show_favorite_star:!0, show_recent_icon:!0})
}, _maybeRenderEmptyWorkspaceAdR:function(a) {
    var b = this;
    return $rval(function() {
        if($v(a.topListsR()).size() > 0) {
            return""
        }else {
            if(a.domain().isGlobal()) {
                var c = "Personal Projects allows you to share single projects and tasks with anyone.  No fuss, no muss. "
            }else {
                c = a.user().domains().findValueOrNull(function(a) {
                    return!a.isGlobal()
                }), c = a.domain() === c ? "Use Asana with a team. Projects you create here will be automatically shared with your teammates. " : "Coordinate with another team.  Projects you create here will be shared with everyone in this workspace. "
            }
        }
        return DIV({"class":"workspace-ad-content", onclick:b._emptyWorkspaceAdOnClick(a)}, [c, A({"class":a.domain().isGlobal() ? "empty-workspace-ad-action global-workspace-ad" : "empty-workspace-ad-action"}, ["Get Started"])])
    })
}, _emptyWorkspaceAdOnClick:function(a) {
    var b = this;
    return function() {
        logEvent({name:"EmptyWorkspaceAd-CreateNewProject"});
        b._createAndSelectProject(a)
    }
}, _renderWorkspaceLink:function(a) {
    var b = this, c = a.domain();
    return A({"class":"workspace-link", onclick:function() {
        logEvent({name:"WorkspaceSelection-Link", selected_workspace:c});
        b.selectWorkspace(c)
    }}, [!a.canSeePublicData() ? "View all projects and people" : "View all projects, tags, and people"])
}, _renderWorkDomainAdIfNeeded:function() {
    if(this.user.domains().size() > 1 || this.user.domains().size() === 1 && !this.user.domains().first().isGlobal()) {
        return""
    }
    return DIV({"class":"workspace workspace-ad work-workspace-ad", onclick:function() {
        logEvent({name:"WorkWorkspaceAd-Click"});
        CreateWorkspaceDialogView.show({})
    }}, [DIV({"class":"workspace-header"}, [DIV({"class":"workspace_title workspace-title-grayed"}, [DIV({"class":"workspace-icon work-icon"}), SPAN({"class":"workspace-name"}, ["Your Company Here"])])]), DIV({"class":"workspace-ad-content"}, ["Use Asana to organize your projects at work. ", this._renderGetStartedLink()])])
}, _renderGetStartedLink:function() {
    return A({"class":"workspace-ad-action-element"}, ["Get Started"])
}, _createAndSelectProject:function(a) {
    var b = a.domain();
    if(!b.allowProjectsWithNullTeam()) {
        null.domain.onlyTeam()
    }
    var c = Pot.create({name:"New " + Vocab.Project, creator_du:a, domain:b, team:null, is_project:!0});
    b.getX("lists").requestInsertBefore(c, null);
    this.selectList(c);
    env.setSelectionForFocusedElement(-1, -1);
    a.domain().isGlobal() && (env.session_store.sessionObject2(ProjectShareButtonView.State, "AsanaView/" + c.global_id + "/ItemListView/HeaderRowView." + c.global_id + "/ProjectShareButtonView." + c.global_id).setDisableTooltip(!0), ShareButtonTooltipView.show({placement:TooltipView.BELOW, gravity:TooltipView.GRAV_CENTER, pot_id:c.global_id, close_method:InstructiveTooltipView.CLOSE_METHOD.CLICK_ANYWHERE, onclose_runnable:ShareButtonTooltipViewOncloseRunnable.create({pot_id:c.global_id})}));
    return c
}, _renderWorkspaceSummaries:function() {
    var a = this, b = computed_lists.mapInRvalues(a.user.activeDomainUsersR(), function(b) {
        b.domain();
        return DIV({"class":"workspace"}, [a._renderWorkspaceHeader(b), a._renderWorkspaceTopLists(b), a._maybeRenderEmptyWorkspaceAdR(b), a._renderWorkspaceLink(b)])
    });
    return a._workspace_dnd_helper.regionNode("DIV", {children:b}, a._workspace_drag_drop_region.regionNodeOptions())
}, _touch:function() {
    var a = this;
    $rval(function() {
        env.frp.forEachParallel([function() {
            a.user.mergedIntoUser()
        }, function() {
            var b = a.user.activeDomainUsers().toArray();
            if(a.user.globalDomainUserOrNull() !== null) {
                var c = a.user.globalDomainUser();
                b.push(c);
                env.world_store.peekStateObjectProperties([c], ["last_notification_creation_time", "last_interacted_with_notification_feed_time"])
            }
            env.frp.forEachParallel(b, function(a) {
                env.frp.forEachParallel([function() {
                    a.favorites()
                }, function() {
                    a.teams()
                }, function() {
                    a.recents()
                }, function() {
                    a.topListsR().peek()
                }, function() {
                    env.session_store.sessionObject2(InboxView.State, "AsanaView/InboxView." + a.global_id).touchForModel(a)
                }, function() {
                    env.world_store.peekStateObjectProperties([a.domain()], ["activated", "premium_plan_name"])
                }])
            })
        }])
    }).becomeWatch().peek()
}, _render:function() {
    var a = this;
    a._touch();
    a._rendered_contents = DIV({id:"navigation_dock_overview", "class":"overview"}, [$rval(function() {
        return a._renderATMs()
    }), a._renderWorkspaceSummaries(), a._renderWorkDomainAdIfNeeded()]);
    return a._rendered_contents
}});
__FILE__ = "apps/asana/view/widgets/photo_pile_view.js";
PhotoPileView = View.subclass("PhotoPileView", {}, {id:"", max_photos:ATTRIBUTE_REQUIRED, domain_users_x:ATTRIBUTE_REQUIRED, size:PhotoView.Size.SMALL, onClick:PhotoView.ClickHandler.navigate, onClickEmptySlot:null, _render:function() {
    var a = this, b = $v(a.domain_users_x), c = env.frp.mapParallel(range(a.max_photos), function(c) {
        return c < b.size() ? a.createView(PhotoView, {who:b.atIndex(c).user(), domain_user:b.atIndex(c), size:a.size, show_initials:!0, show_tooltip:!0, initials_style:PhotoView.InitialsStyle.REVERSED, onClick:a.onClick}).render() : a._renderEmptySlot(c)
    });
    return DIV({"class":"photo-pile"}, c.map(function(a) {
        return DIV({"class":"photo-pile-slot"}, [a])
    }))
}, _renderEmptySlot:function(a) {
    var b = this, c = {"class":"photo-pile-empty-slot"};
    if(b.onClickEmptySlot !== null) {
        c["class"] += " clickable", c.onclick = function() {
            return b.onClickEmptySlot(a)
        }
    }
    return DIV(c, [""])
}});
__FILE__ = "apps/asana/view/navigation_dock_network_view.js";
NavigationDockNetworkView_Tabs = {PROJECTS:"projects", TAGS:"tags", PEOPLE:"people"};
NavigationDockNetworkView_Sections = {FAVORITES:"favorites", RECENTS:"recents", ALL:"all"};
NavigationDockNetworkView = NavigationDockBodyView.subclass("NavigationDockNetworkView", {INFINITE_SCROLL_MARGIN:100, TOP_CONTACTS_COUNT:50, USER_PHOTO_COUNT:8, enableInfiniteScroll:function(a) {
    NavigationDockNetworkView._infinite_scroll_enabled = a
}, _infinite_scroll_enabled:!0, State:SessionObject2.subclass("NavigationDockNetworkView.State", {property_descs:{selected_tab:{type:String, default_value:NavigationDockNetworkView_Tabs.PROJECTS}, selected_section:{type:String, default_value:NavigationDockNetworkView_Sections.ALL}}}, {})}, {domain:ATTRIBUTE_REQUIRED, show_archived_projects:ATTRIBUTE_REQUIRED, _addProject:function(a) {
    var b = this.user.domainUserForDomain(this.domain), a = Pot.create({name:"New " + Vocab.Project, creator_du:b, domain:this.domain, team:a, is_project:!0});
    this.domain.listsL().requestInsertBefore(a, null);
    this.selectList(a);
    env.setSelectionForFocusedElement(-1, -1);
    Tour.onPotCreated()
}, _renderPhotoAtmAndFeed:function() {
    return DIV({id:"photo_atm_and_feed"}, [this.createView(PhotoView, {who:this.user, size:PhotoView.Size.MEDIUM, show_initials:!1}).render(), this._renderAtmAndFeed()])
}, _renderAtmAndFeed:function() {
    var a = this, b = a.user.domainUserForDomain(a.domain), c = b.taskList();
    return DIV({"class":"list-section atm-and-feed"}, [$rval(function() {
        return a.renderItem({item:c, label:SPAN({"class":"atm-name list-item-caption", tooltip:"See all tasks assigned to you", tooltip_delay:500}, ["My Tasks"])})
    }), $rval(function() {
        if(ExperimentalFeature.enabled("inbox_holdback")) {
            return""
        }
        env.session_store.sessionObject2(InboxView.State, "AsanaView/InboxView." + b.global_id).touchForModel(b);
        var c = a.session.inboxModelOrUnknown() === b;
        return A({"class":"list-item feed " + (c ? "selected" : ""), href:AsanaHelpers.renderInboxPath(b, null, null), onclick:View.publicFunction(a, function(c) {
            logEvent({name:"InboxClicked-Zoomed"});
            if(c.hasMetaOrCtrl() || c.shiftKey) {
                return Node.JUST_DEFAULT
            }
            a.selectInbox(b)
        })}, [SPAN({"class":$rval(function() {
            return"feed-icon " + (b.inbox().hasNewNotifications() ? "unread" : "read")
        }), tooltip:$rval(function() {
            return b.inbox().hasNewNotifications() ? "You have new " + Vocab.inbox_messages : "You have no new " + Vocab.inbox_messages
        }), tooltip_delay:500}), SPAN({"class":"list-item-caption"}, [INBOX_NAME])])
    })])
}, _renderFavoritesAndRecents:function() {
    var a = this, b = a.user.domainUserForDomain(a.domain), c = $rval(function() {
        var c = b.projectsModel();
        return c.isLoadingNow() || $v(c.limitedPotsR(a.show_archived_projects)).size() >= Domain.POTS_TO_LOAD_INITIALLY
    }), d = $rval(function() {
        return c.peek() ? a.renderStaticItems({"class":"recents", name:"Browse Workspace Recents: " + b.global_id, list_r:b.sortedNonFavoriteRecentsR(), show_recent_icon:!0, sectionIsSelected:function() {
            return a._state.selectedSection() === NavigationDockNetworkView_Sections.RECENTS
        }, onSelectItem:function() {
            a._state.setSelectedSection(NavigationDockNetworkView_Sections.RECENTS)
        }}) : ""
    });
    return DIV({"class":"list-section photo-pile-and-favorites"}, [$rval(function() {
        if(!ExperimentalFeature.enabled("networks_left_pane_ui")) {
            return""
        }
        return a.domain.shouldHideTeamHierarchyFromUser(env.user()) ? a._renderTeamPhotoPile(b.teamMemberships().first()) : ""
    }), DIV({"class":"favorites-and-recents"}, [a.renderDraggableItems({"class":"favorites", name:"Browse Workspace Favorites: " + b.global_id, list_r:b.favoritesL(), list_l:b.favoritesL(), show_favorite_star:!0, sectionIsSelected:function() {
        return a._state.selectedSection() === NavigationDockNetworkView_Sections.FAVORITES
    }, onSelectItem:function() {
        a._state.setSelectedSection(NavigationDockNetworkView_Sections.FAVORITES)
    }}), d])])
}, _tabConfigs:function() {
    var a = this, b = a.user.domainUserForDomain(a.domain), c = a.show_archived_projects, d = b.projectsModel().limitedPotsR(c), c = a.domain.isGlobal() ? b.topContacts(NavigationDockNetworkView.TOP_CONTACTS_COUNT) : a.domain.usersModel().limitedObjectsR(), e = a.domain.isGlobal() ? computed_lists.sort(c, function(a) {
        return a.name().toLowerCase()
    }) : c, f = function(a) {
        return function() {
            return $rval(function() {
                return a() ? AsanaHelpers.renderLoadingIndicator(null, {"class":"loading-indicator-blue"}) : ""
            })
        }
    }, c = [{value:NavigationDockNetworkView_Tabs.PROJECTS, display_name:"Projects", class_name:"projects_tab", tooltip:"Projects are ordered lists of tasks", tooltip_delay:500, renderContents:function() {
        var c;
        c = {name:"Non-Favorite-Projects", id:"navigation-dock-pot-list", list_r:LatestKnownRvalue.create(d), renderLoadingMoreIndicator:f(function() {
            return b.projectsModel().isLoadingNow()
        }), sectionIsSelected:function() {
            return a._state.selectedSection() === NavigationDockNetworkView_Sections.ALL
        }, onSelectItem:function() {
            a._state.setSelectedSection(NavigationDockNetworkView_Sections.ALL)
        }};
        b.canSeePublicData() ? (c.list_l = a.domain.listsL(), c = a.renderDraggableItems(c)) : c = a.renderStaticItems(c);
        env.user().tourStep();
        return c
    }}, {value:NavigationDockNetworkView_Tabs.PEOPLE, display_name:a.domain.isGlobal() ? "Top Contacts" : "People", class_name:"people_tab", tooltip:"People views show you the tasks assigned to each person", tooltip_delay:500, renderContents:function() {
        return a.renderStaticItems({name:"People", list_r:e, renderLoadingMoreIndicator:f(function() {
            return!a.domain.isGlobal() && a.domain.usersModel().isLoadingNow()
        }), sectionIsSelected:function() {
            return a._state.selectedSection() === NavigationDockNetworkView_Sections.ALL
        }, onSelectItem:function() {
            a._state.setSelectedSection(NavigationDockNetworkView_Sections.ALL)
        }})
    }}];
    if(b.canSeePublicData()) {
        var g = b.tagsModel().limitedPotsR();
        c.splice(1, 0, {value:NavigationDockNetworkView_Tabs.TAGS, display_name:"Tags", class_name:"tags_tab", tooltip:"Tags create filtered views across projects", tooltip_delay:500, renderContents:function() {
            return a.renderStaticItems({name:"Tags", list_r:LatestKnownRvalue.create(g), renderLoadingMoreIndicator:f(function() {
                return b.tagsModel().isLoadingNow()
            }), sectionIsSelected:function() {
                return a._state.selectedSection() === NavigationDockNetworkView_Sections.ALL
            }, onSelectItem:function() {
                a._state.setSelectedSection(NavigationDockNetworkView_Sections.ALL)
            }})
        }})
    }
    return ExperimentalFeature.enabled("networks_left_pane_ui") ? c.slice(0, 1) : c
}, _touch:function() {
    var a = this;
    $rval(function() {
        var b = a.user.domainUserForDomain(a.domain);
        env.frp.forEachParallel([function() {
            b.recents()
        }, function() {
            env.frp.forEachParallel(b.teams(), function(a) {
                b.teamMembershipForTeamOrNull(a)
            })
        }, function() {
            b.favorites()
        }, function() {
            b.lastInteractedWithNotificationFeedTime()
        }, function() {
            b.lastNotificationCreationTime()
        }, function() {
            var b = a.domain.isGlobal() ? a.user.domainUserForDomain(a.domain).topContacts(NavigationDockNetworkView.TOP_CONTACTS_COUNT) : $v(a.domain.usersModel().limitedObjectsR());
            env.frp.forEachParallel(b, function(a) {
                a.name();
                a.user().profilePhotoUrlSmall()
            })
        }])
    }).becomeWatch().peek()
}, _renderTeamSettingsMenu:function(a) {
    var b = a.team();
    b.domain();
    var c = [];
    a.limitedAccess() || (c.push({id:"manage_members", label:"Invite and Manage Members", onselect:View.publicFunction(this, function() {
        ManageWorkspaceDialogView.show({billable_domain_user_group:b, selected_tab:ManageWorkspaceDialogView.TABS.MEMBERS, requested_remove_self:!1})
    })}), c.push({id:"edit_team_settings", label:"Edit " + Vocab.Team + " Settings", onselect:View.publicFunction(this, function() {
        ManageWorkspaceDialogView.show({billable_domain_user_group:b, selected_tab:ManageWorkspaceDialogView.TABS.SETTINGS, requested_remove_self:!1})
    })}));
    c.push({id:"remove_self", label:"Remove Me From This " + Vocab.Team, onselect:View.publicFunction(this, function() {
        ManageWorkspaceDialogView.show({billable_domain_user_group:b, selected_tab:ManageWorkspaceDialogView.TABS.MEMBERS, requested_remove_self:!0})
    })});
    return this.createView(DropdownMenuView, {id:"team_menu_" + b.global_id, additional_class:"team-menu", include_arrow:!1, tooltip:Vocab.Team + " Settings: Change the team name, add and remove members", tooltip_delay:200, label:DIV({"class":"cog"}, []), menu_items:c}).render()
}, _renderTeamPhotoPile:function(a) {
    var b = a.team(), a = function() {
        logEvent({name:"NavDockNetworks-PhotoPileClick"});
        ManageWorkspaceDialogView.show({billable_domain_user_group:b, selected_tab:ManageWorkspaceDialogView.TABS.MEMBERS, requested_remove_self:!1})
    }, c = this.createView(PhotoPileView, {max_photos:NavigationDockNetworkView.USER_PHOTO_COUNT, domain_users_x:b.fullMembershipsModel().limitedMembers().sort(function(a, b) {
        return compare(a.name(), b.name())
    }), onClickEmptySlot:a, id:"team_photo_pile_" + b.global_id}).render(), d = b.fullMembershipsModel().numObjects(), e = d > NavigationDockNetworkView.USER_PHOTO_COUNT;
    return DIV({"class":"team-member-photo-pile"}, [c, d === 1 ? DIV({"class":"team-invite-overlay", onclick:a}, ["+ Invite People"]) : "", DIV({"class":"team-member-add " + (e ? "team-member-add-large-team" : "team-member-add-small-team"), onclick:a}, [e ? DIV({"class":"team-member-count-overlay-outer"}, [DIV({"class":"team-member-count-overlay-inner"}, [d])]) : ""])])
}, _renderTeamProjects:function(a) {
    var b = this, c;
    c = b.show_archived_projects;
    c = a.projectsModel().limitedPotsR(c);
    c = {name:"Team-Projects " + a.global_id, list_r:LatestKnownRvalue.create(c), renderLoadingMoreIndicator:function(a) {
        return function() {
            return $rval(function() {
                return a() ? AsanaHelpers.renderLoadingIndicator(null, {"class":"loading-indicator-blue"}) : ""
            })
        }
    }(function() {
        return a.projectsModel().isLoadingNow()
    }), sectionIsSelected:function() {
        return b._state.selectedSection() === NavigationDockNetworkView_Sections.ALL
    }, onSelectItem:function() {
        b._state.setSelectedSection(NavigationDockNetworkView_Sections.ALL)
    }};
    a.limitedAccess() ? c = b.renderStaticItems(c) : (c.list_l = b.domain.listsL(), c = b.renderDraggableItems(c));
    env.user().tourStep();
    return DIV({"class":"team-projects"}, [DIV({"class":"new-project-row", onclick:function() {
        b._addProject(a.team())
    }}, [A({"class":"new-project-link", id:"add_project_button"}, ["New " + Vocab.Project]), SPAN({"class":"new-project-icon"}, [])]), c, $rval(function() {
        return a.projectsModel().canLoadMoreNow() ? A({"class":"more-projects-link", onclick:function() {
            logEvent({name:"NavDockNetworks-ClickMoreProjects"});
            a.projectsModel().loadMore(Domain.POTS_TO_LOAD_PER_PORTION)
        }}, ["More " + Vocab.Projects]) : ""
    }, "NavigationDockNetworkView.renderTeamProjects.MoreProjectsLink")])
}, _renderTeamHeader:function(a) {
    var b = a.team();
    return DIV({"class":"team-header"}, [this._renderTeamSettingsMenu(a), SPAN({"class":"collapse-click-target", onclick:function() {
        logEvent({name:"NavDockNetworks-ToggleCollapsedTeam", new_collapsed_state:!a.collapsed()});
        a.setCollapsed(!a.collapsed())
    }}, [SPAN({"class":"collapse-arrow " + (a.collapsed() ? "collapsed" : "expanded")}), SPAN({"class":"team-name"}, [b.name()])])])
}, _renderExpandedTeam:function(a) {
    var b = this;
    return AsanaHelpers.renderWithinLoadingBoundary("DIV", [$rval(function() {
        return DIV({"class":"expanded-team"}, [b.domain.shouldHideTeamHierarchyFromUser(env.user()) ? "" : b._renderTeamPhotoPile(a), b._renderTeamProjects(a)])
    }, "NavigationDockNetworkView._renderExpandedTeam")])
}, _renderTeam:function(a) {
    var b = a.team();
    this.user.domainUserForDomain(this.domain);
    return DIV({"class":"team", id:"team_" + b.global_id}, [this.domain.shouldHideTeamHierarchyFromUser(env.user()) ? "" : this._renderTeamHeader(a), !a.collapsed() ? this._renderExpandedTeam(a) : ""])
}, _renderScrollableSection:function() {
    var a = this, b = a.user.domainUserForDomain(a.domain);
    return FRAG({}, b.teamMemberships().map(function(b) {
        return $rval(function() {
            return a._renderTeam(b)
        }, "NavigationDockNetworkView.renderTeam")
    }))
}, _render:function() {
    var a = this;
    a._touch();
    var b = a._state.selectedTabL(), b = a.createView(TabView, {selected_tab_l:b, tab_configs:a._tabConfigs(), view_name:"TabView." + a.domain.global_id});
    if(!ExperimentalFeature.enabled("networks_left_pane_ui")) {
        var c = b.render()
    }
    var d = a.user.domainUserForDomain(a.domain), e = function() {
        var b = ExperimentalFeature.enabled("networks_left_pane_ui") ? NavigationDockNetworkView_Tabs.PROJECTS : a._state.selectedTab(), c, e;
        if(b === NavigationDockNetworkView_Tabs.PROJECTS || b === NavigationDockNetworkView_Tabs.TAGS) {
            c = b === NavigationDockNetworkView_Tabs.PROJECTS ? d.projectsModel() : d.tagsModel(), b = c.canLoadMoreNow(), e = function(a) {
                c.loadMore(a)
            }
        }else {
            var f = a.domain.usersModel(), b = !a.domain.isGlobal() && f.canLoadMoreNow();
            e = function(a) {
                f.loadMore(a)
            }
        }
        b && e(Domain.POTS_TO_LOAD_PER_PORTION)
    }, f = null, g = function() {
        NavigationDockNetworkView._infinite_scroll_enabled && f && !(NavigationDockNetworkView.INFINITE_SCROLL_MARGIN < 0) && f.scrollHeight - (f.scrollTop + f.dimensions.height()) <= NavigationDockNetworkView.INFINITE_SCROLL_MARGIN && e()
    }, h = null, i = ElementDimensionsLvalue.create({name:"NavigationDockNetworkView.style_edl", element:null, func:function() {
        if(!f) {
            return""
        }
        h = safeTimeout(function() {
            i.isCached() && (h = null, processHandler(g))
        }, 500);
        return null
    }, _onUnused:function() {
        h !== null && (safeClearTimeout(h), h = null)
    }});
    i.watchScalar(noop);
    f = DIV({"class":"scroll-wrapper tab-contents", onscroll:g}, [ExperimentalFeature.enabled("networks_left_pane_ui") ? a._renderScrollableSection() : b.renderSelectedTabContents()]);
    return DIV({id:"navigation_dock_network", "class":"network-zoom"}, [ExperimentalFeature.enabled("networks_left_pane_header") ? a._renderPhotoAtmAndFeed() : a._renderAtmAndFeed(), a._renderFavoritesAndRecents(), !ExperimentalFeature.enabled("networks_left_pane_ui") ? c : "", f])
}});
__FILE__ = "apps/asana/view/navigation_dock_action_bar_view.js";
NavigationDockActionBarView = View.subclass("NavigationDockActionBarView", {}, {selectList:ATTRIBUTE_REQUIRED, domain:ATTRIBUTE_REQUIRED, _addPot:function(a, b) {
    var c = this.user.domainUserForDomain(a), c = Pot.create({name:"New " + (b ? Vocab.Project : "Tag"), creator_du:c, domain:a, team:a.allowProjectsWithNullTeam() ? null : a.onlyTeam(), is_project:b});
    a.getX("lists").requestInsertBefore(c, null);
    this.selectList(c);
    env.setSelectionForFocusedElement(-1, -1)
}, _addPerson:function(a) {
    logEvent({name:"AddPersonButtonClick"});
    ManageWorkspaceDialogView.show({billable_domain_user_group:a, selected_tab:ManageWorkspaceDialogView.TABS.MEMBERS, requested_remove_self:!1})
}, _addProject:function(a) {
    this._addPot(a, !0);
    Tour.onPotCreated()
}, _renderButton:function(a, b, c, d) {
    var e = this, f = "add-" + a.toLowerCase(), g = [];
    if(e.domain) {
        var h = e.user.domainUserForDomain(e.domain);
        (!h.isGuest() || d) && g.push(h.domain())
    }else {
        e.user.activeDomainUsers().forEach(function(a) {
            (!a.isGuest() || d) && g.push(a.domain())
        })
    }
    if(g.length === 0) {
        return""
    }
    if(g.length === 1) {
        var i = g[0];
        return DIV({id:"add_" + a.toLowerCase() + "_button", "class":"action-button toolbar-button " + f, onclick:function() {
            c(i)
        }}, [SPAN({"class":"button-icon " + f}), SPAN({"class":"button-text"}, [b])])
    }else {
        var j = [];
        g.forEach(function(b) {
            j.push({id:"add_" + a + "_" + b.global_id, label:b.name(), onselect:View.publicFunction(e, function() {
                c(b)
            })})
        });
        return e.createView(DropdownMenuView, {id:"add_" + a.toLowerCase() + "_button", include_arrow:!1, label:DIV({"class":"action-button toolbar-button " + f}, [SPAN({"class":"button-icon " + f}), SPAN({"class":"button-text"}, [b])]), menu_items:j}).render()
    }
}, _renderAddProjectButton:function() {
    env.user().tourStep();
    return this._renderButton("Project", "New Project", this._addProject.bind(this), !0)
}, _renderAddPersonButton:function() {
    return this._renderButton("Person", "Add Person", this._addPerson.bind(this), !1)
}, _render:function() {
    var a = this;
    return DIV({id:"navigation_dock_action_bar"}, [$rval(function() {
        return a._renderAddProjectButton()
    }), $rval(function() {
        return a._renderAddPersonButton()
    })])
}});
__FILE__ = "apps/asana/view/navigation_dock_footer_view.js";
NavigationDockFooterView = View.subclass("NavigationDockFooterView", {}, {_renderUserMenu:function() {
    AccountDialogView.touch();
    return this.createView(DropdownMenuView, {id:"user_menu", include_arrow:!0, label:this.user.name(), menu_items:[{id:"user_menu_account_settings", label:"Account Settings", onselect:View.publicFunction(this, function() {
        AccountDialogView.show({selected_tab:AccountDialogTabs.PROFILE})
    })}, {label:"New Workspace", id:"user_menu_new_workspace", onselect:View.publicFunction(this, function() {
        CreateWorkspaceDialogView.show({})
    })}, {label:"Log Out", id:"user_menu_logout", onselect:function() {
        window.location.replace(LunaHelpers.relativeUriForEffectivePath("-/logout"))
    }}]}).render()
}, _renderAboutMenu:function() {
    var a = function(a, c) {
        return{label:a, onselect:function() {
            window.openAsync(c, "_blank")
        }}
    };
    return this.createView(DropdownMenuView, {id:"about_menu", include_arrow:!1, label:"About", menu_items:[a("Blog", "http://asana.com/blog"), a("Developers/API", "http://developers.asana.com"), a("Jobs", "http://asana.com/jobs"), a("About", "http://asana.com/about"), DropdownMenuView.SEPARATOR, a("Terms", "http://www.asana.com/terms"), a("Privacy", "http://www.asana.com/privacy")]}).render()
}, _renderFeedbackLink:function() {
    return A({onclick:function() {
        window.openAsync("http://help.asana.com/customer/portal/emails/new", "_blank")
    }}, ["Feedback"])
}, _render:function() {
    return DIV({id:"footer"}, [this._renderUserMenu(), BR(), this._renderFeedbackLink(), " | ", this._renderAboutMenu()])
}});
__FILE__ = "apps/asana/view/share_buttons_view.js";
ShareButtonsView = View.subclass("ShareButtonsView", {setup:Memoize.memoizeInThis("ShareButtonsView.setup", function() {
    env.is_server || (document.body.appendChild(DIV({id:"fb-root"})), window.setTimeout(function() {
        (function(a, b, c) {
            var d = a.getElementsByTagName(b)[0];
            if(!a.getElementById(c)) {
                a = a.createElement(b), a.id = c, a.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=71987885912", d.parentNode.insertBefore(a, d)
            }
        })(document, "script", "facebook-jssdk")
    }, 1), document.body.appendChild(SCRIPT({src:"//platform.twitter.com/widgets.js"})))
}), _tryParsingFBML:function() {
    globals.FB ? FB.XFBML.parse() : window.setTimeout(ShareButtonsView._tryParsingFBML, 100)
}}, {_render:function() {
    ShareButtonsView.setup();
    env.is_server || window.setTimeout(ShareButtonsView._tryParsingFBML, 1);
    return FRAG([DIV({"class":"fb-like", "data-href":"http://asana.com", "data-send":"true", "data-layout":"button_count", "data-width":"90", "data-show-faces":"false"}), A({href:"https://twitter.com/share", "class":"twitter-share-button", "data-url":"http://asana.com", "data-text":"I've been really enjoying using Asana: it's the best way to keep teams in sync with less effort.", "data-count":"horizontal"}, ["Tweet"])])
}});
__FILE__ = "apps/asana/view/instructive_tooltip_view.js";
InstructiveTooltipView = DialogView2.subclass("InstructiveTooltipView", {State:DialogState.subclass("InstructiveTooltipView.State", {property_descs:{placement:{type:String, default_value:TooltipView.RIGHT_OF}, gravity:{type:String, default_value:TooltipView.GRAV_DOWN}, close_method:{type:String, default_value:"CLOSE_BUTTON"}}}, {}), CLOSE_METHOD:{CLOSE_BUTTON:"CLOSE_BUTTON", CLICK_ANYWHERE:"CLICK_ANYWHERE"}, show:function(a) {
    a = InstructiveTooltipView.superclass.show.call(this, a);
    env.setFocus(a.savedFocusElementId());
    return a
}}, {renderContent:ABSTRACT, findRelativeTo:ABSTRACT, _render:function() {
    var a = this, b = [];
    switch(a._state.closeMethod()) {
        case InstructiveTooltipView.CLOSE_METHOD.CLICK_ANYWHERE:
            document.body.reactiveListen("click", function() {
                a._state.hide();
                return Node.DEFAULT_AND_BUBBLE
            }, !0);
            break;
        case InstructiveTooltipView.CLOSE_METHOD.CLOSE_BUTTON:
            b.push(DIV({"class":"close-icon", onclick:function() {
                a._state.hide()
            }}, []));
            break;
        default:
            ufu("Specified Close method is wrong")
    }
    b.push(a.renderContent());
    return a.createView(TooltipView, {"class":"instructive-tooltip", placement:a._state.placement(), gravity:a._state.gravity(), relative_to:a.findRelativeTo(), contents:function() {
        return DIV(b)
    }}).render()
}});
__FILE__ = "apps/asana/view/share_button_tooltip_view.js";
ShareButtonTooltipView = InstructiveTooltipView.subclass("ShareButtonTooltipView", {State:InstructiveTooltipView.State.subclass("ShareButtonTooltipView.State", {property_descs:{pot_id:{type:Integer}}}, {}), _findProjectShareButtonViewState:function(a) {
    return env.session_store.sessionObject2(ProjectShareButtonView.State, "AsanaView/" + a + "/ItemListView/HeaderRowView." + a + "/ProjectShareButtonView." + a)
}, show:function(a) {
    ShareButtonTooltipView._findProjectShareButtonViewState(a.pot_id).setDisableTooltip(!0);
    return ShareButtonTooltipView.superclass.show.call(this, a)
}}, {renderContent:function() {
    var a = env.datastoreObject(this._state.potId());
    return ProjectShareButtonView.renderTooltip(a)
}, findRelativeTo:function() {
    return document.getElementById("project_share_button")
}});
ShareButtonTooltipViewOncloseRunnable = Runnable.subclass("ShareButtonTooltipViewOncloseRunnable", {property_descs:{pot_id:{type:Integer}}}, {run:function() {
    ShareButtonTooltipView._findProjectShareButtonViewState(this.potId()).setDisableTooltip(!1)
}});
__FILE__ = "apps/asana/view/global_domain_ad_button_tooltip_view.js";
GlobalDomainAdButtonTooltipView = InstructiveTooltipView.subclass("GlobalDomainAdButtonTooltipView", {State:InstructiveTooltipView.State.subclass("GlobalDomainAdButtonTooltipView.State", {}, {}), renderContent:function() {
    return DIV({"class":"instructive-tooltip"}, [STRONG({"class":"tooltip-bold"}, ["Create a project and share it."]), UL({type:"disc", "class":"tooltip-list"}, [LI({"class":"tooltip-list-item"}, [SPAN({"class":"tooltip-list-item-contents"}, ["Plan a trip, party, or another event."])]), LI({"class":"tooltip-list-item"}, [SPAN({"class":"tooltip-list-item-contents"}, ["Get your household better organized."])]), LI({"class":"tooltip-list-item"}, [SPAN({"class":"tooltip-list-item-contents"}, ["Organize your side project."])])])])
}}, {renderContent:function() {
    return GlobalDomainAdButtonTooltipView.renderContent()
}, findRelativeTo:function() {
    return document.getElementsByClassName("workspace-ad-action-element")[0]
}});
GlobalDomainAdButtonTooltipViewOncloseRunnable = Runnable.subclass("GlobalDomainAdButtonTooltipViewOncloseRunnable", {}, {run:function() {
    env.session_store.sessionObject2(NavigationDockOverviewView.State, "AsanaView/NavigationDockView/NavigationDockOverviewView").setGlobalDomainAdButtonTooltipDisabled(!1)
}});
__FILE__ = "apps/asana/view/navigation_dock_view.js";
NavigationDockView = View.subclass("NavigationDockView", {State:SessionObject2.subclass("NavigationDockView.State", {property_descs:{is_hovering:{type:Boolean, default_value:!1}, domain:{type:Domain, default_value:null}, inbox_model:{type:DomainUser, default_value:null}}, maybeSetDomainCookie:function(a) {
    env.is_server || env.setCookie({name:"navigation_dock_domain", value:a ? a.global_id : "null"})
}}, {domain:function() {
    var a = this.domainOrUnknown();
    return a && !(a instanceof UnknownValue.AccessDenied) && a.hasActiveUser(env.user()) ? a : null
}, setDomain:function(a) {
    logEvent({name:"NavigationDock-DomainSet", to_domain:a, to_overview:a === null});
    NavigationDockView.State.maybeSetDomainCookie(a);
    this.domainL().requestSet(a)
}, inOverview:function() {
    return this.domain() === null
}, switchToOverview:function() {
    this.setDomain(null)
}, setInboxModel:function(a) {
    this.inboxModelL().requestSet(a);
    a !== null && (env.session_store.sessionObject2(InboxView.State, "AsanaView/InboxView." + a.global_id).setSelectedNotification(null), env.is_server || env.datastore_manager.setCurrentHandlerName("Inbox-SelectInbox"), a.inbox().reset(), a.setLastInteractedWithNotificationFeedTime(env.clock.now()), env.setFocus("inbox"))
}}), classForWorkspaceIcon:function(a) {
    var b = a.isFor();
    return a.isGlobal() ? "personal-icon" : b === "PERSONAL_HOUSEHOLD" ? "home-icon" : b === Domain.NullValue || b === null ? "" : b === "BUSINESS" || b === "NONPROFIT" ? "work-icon" : b === "SCHOOL" ? "school-icon" : b === "CLUB_TEAM" ? "club-icon" : b === "OTHER" ? "other-icon" : (host.recordWarning("Unknown value for is_for", b), "work-icon")
}}, {session:ATTRIBUTE_REQUIRED, height_x:ATTRIBUTE_REQUIRED, dnd_helper:ATTRIBUTE_REQUIRED, collapsable_x:ATTRIBUTE_REQUIRED, blurSelf:ATTRIBUTE_REQUIRED, onAfterNavigateFromSearch:ATTRIBUTE_OPTIONAL, constructor:function(a) {
    NavigationDockView.superproto.constructor.call(this, a)
}, inboxModelOrUnknown:function() {
    return this._state.inboxModelOrUnknown()
}, selectInbox:function(a) {
    return this._state.setInboxModel(a)
}, selectList:function(a) {
    this.session.potCached(a) ? env.datastore_manager.setCurrentHandlerName("SelectListCached-NavigationPane-Click") : env.datastore_manager.setCurrentHandlerName("SelectListUncached-NavigationPane-Click");
    this.session.setCurrentList(a)
}, selectWorkspace:function(a) {
    env.session_store.sessionObject2(NavigationDockView.State, "AsanaView/NavigationDockView/NavigationDockNetworkView").reset();
    this._state.setDomain(a);
    if(a) {
        var b = this.session.currentModel();
        (isUnknown(b) || b.domain() !== a) && this.session.setCurrentList(this.user.taskList(a))
    }
}, wantsToBeExpanded:function() {
    var a = env.lunaSession().focusedElementId();
    return this._state.isHovering() || a === "nav_search_input" || a === "user_menu" || a === "domain_menu"
}, _touch:function() {
    var a = this;
    a.user.activeDomainUsers();
    env.frp.forEachParallel(a.user.domains(), function(b) {
        ManageWorkspaceDialogView.touch(b, a.user);
        b = a.user.domainUserForDomain(b);
        b.isBillingOwner();
        b.inbox().hasNewNotifications()
    })
}, _renderSearchView:function() {
    return this.createView(NavigationSearchView, {session:this.session, blurSelf:this.blurSelf, onAfterNavigate:this.onAfterNavigateFromSearch, search_all_domains:this._state.inOverview()}).render()
}, _renderHeader:function() {
    var a = this;
    return DIV({id:"header"}, [DIV({id:"logo"}, [IMG({src:$rval(function() {
        return!$v(a.collapsable_x) || a.wantsToBeExpanded() ? "/-/static/apps/asana/view/logo_glow.png" : "/-/static/apps/asana/view/logo_collapsed.png"
    })})]), $rval(function() {
        return a._renderSearchView()
    })])
}, _renderTitleBar:function() {
    return this.createView(NavigationDockTitleBarView, {domain:this._state.domain(), show_archived_projects_l:this.session.showArchivedProjectsL(), selectWorkspace:this.selectWorkspace.bind(this)}).render()
}, _renderBody:function() {
    var a = this._state.domain();
    return a ? this.createView(NavigationDockNetworkView, {session:this.session, dnd_helper:this.dnd_helper, domain:a, selectList:this.selectList.bind(this), selectInbox:this.selectInbox.bind(this), show_archived_projects:this.session.showArchivedProjects()}).render() : this.createView(NavigationDockOverviewView, {session:this.session, dnd_helper:this.dnd_helper, selectWorkspace:this.selectWorkspace.bind(this), selectInbox:this.selectInbox.bind(this), selectList:this.selectList.bind(this)}).render()
}, _renderActionBar:function() {
    return this.createView(NavigationDockActionBarView, {domain:this._state.domain(), selectList:this.selectList.bind(this)}).render()
}, _renderFooter:function() {
    return this.createView(NavigationDockFooterView, {}).render()
}, _render:function() {
    var a = this, b, c;
    env.frp.forEachParallel([function() {
        b = a._renderHeader()
    }, function() {
        c = a._renderFooter()
    }, function() {
        $rval(function() {
            a._touch()
        }).becomeWatch().peek()
    }], function(a) {
        a()
    });
    var d = DIV({id:"left_pane", onmousemove:function(b) {
        env.datastore_manager.runUntimelyFunc(function() {
            b._event.clientX < 35 && a._state.setIsHovering(!0)
        })
    }, onmouseleave:function() {
        env.datastore_manager.runUntimelyFunc(function() {
            a._state.setIsHovering(!1)
        })
    }}, [DIV({"class":"bg-pattern"}, []), b, $rval(function() {
        return DIV({id:"navigation_dock_main_contents"}, [a._renderTitleBar(), DIV({id:"navigation_dock_body"}, [AsanaHelpers.renderWithinLoadingBoundary("DIV", [$rval(function() {
            return a._renderBody()
        })], {"class":"loading-indicator-blue"})]), !ExperimentalFeature.enabled("networks_left_pane_ui") ? a._renderActionBar() : ""])
    }), c]);
    return DIV({id:"navigation_dock", style:{height:a.height_x}}, [d])
}});
__FILE__ = "apps/asana/view/printable_item_list_view.js";
PrintableItemListView = View.subclass("PrintableItemListView", {}, {grid_state:ATTRIBUTE_REQUIRED, _render:function() {
    var a = this.grid_state.pot(), b = a.getX("items"), b = this.createView(ItemListView, {row_view_class:PrintableItemListView.TaskRowView, dnd_helper:DragDrop.Helper.create(DragDrop.Context.create({browser:this.browser})), allow_deleting:!1, grid_state:this.grid_state, root_grid_block_r:this.grid_state.rootGridBlockR(a, this.grid_state._allTasksR(a, !0)), current_asana_list:a, entire_list_r:b, show_assignee:!a.isUserTaskList(), use_loading_boundary:!1});
    return DIV([DIV({"class":"header-name"}, [a.name()]), DIV({"class":"asana-attribution"}, ["Printed from Asana"]), DIV([b.render()])])
}});
PrintableItemListView.TaskRowView = RowView.subclass("PrintableItemListView.TaskRowView", {}, {_render:function() {
    var a = this.model, b = a.getAssigneeOrNull();
    return DIV({"class":"task" + (a.isCompleted() ? " completed" : "")}, [a.dueDate() ? SPAN({"class":"due_date"}, ["due " + a.dueDate().strftime("%b %#d")]) : "", a.isBar() ? "" : IMG({"class":"checkbox", src:a.isCompleted() ? "/-/static/apps/asana/view/checkbox-checked.png" : "/-/static/apps/asana/view/checkbox-unchecked.png"}), this.show_assignee && b ? SPAN({"class":"assignee"}, [b.name() + ": "]) : "", SPAN({"class":"name"}, [a.name()]), DIV({"class":"description", innerHTML:AsanaHelpers.stylizedHtmlFromPlainText(a.description())})])
}});
__FILE__ = "apps/asana/view/widgets/tokenizer_view.js";
TokenizerView = View.subclass("TokenizerView", {}, {typeahead_view:ATTRIBUTE_REQUIRED, placeholder:ATTRIBUTE_REQUIRED, remove_text:"Remove", selected_items_x:ATTRIBUTE_REQUIRED, extra_element_for_token:"", is_multi:ATTRIBUTE_REQUIRED, is_add_disabled_x:!1, onRemoveToken:ATTRIBUTE_REQUIRED, onTokenClicked:ATTRIBUTE_REQUIRED, tokenTooltip:null, getItemNameX:function(a) {
    return this.typeahead_view.getItemNameX(a)
}, getLabelNodes:function(a) {
    return[this.getItemNameX(a)]
}, extraClassesForToken:function() {
    return""
}, constructor:function(a) {
    if(a.view_name === void 0) {
        a.view_name = this.__type_name + "." + a.typeahead_view.id
    }
    TokenizerView.superproto.constructor.call(this, a);
    if(!this.is_multi) {
        this.typeahead_view.blur_on_selection = !0
    }
}, _renderSelectedItems:function() {
    var a = this;
    return SPAN(computed_lists.mapInRvalues(a.selected_items_x, function(b) {
        return a._renderToken(b)
    }))
}, _renderToken:function(a) {
    var b = this;
    return AsanaHelpers.renderToken({parent_view:this, object:a, onRemove:function() {
        b.onRemoveToken(a)
    }, onClicked:function() {
        b.onTokenClicked(a)
    }, name_x:b.getItemNameX(a), extra_classes:b.extraClassesForToken(a), extra_element_for_token:b.extra_element_for_token, tooltip:b.tokenTooltip ? b.tokenTooltip(a) : null, photos_ok:!this.is_multi, remove_text:b.remove_text, label_nodes:b.getLabelNodes(a)})
}, _render:function() {
    var a = this, b = a.typeahead_view.isFocusedR();
    b.setAsSafelyPeekableByAncestor();
    var c = a.is_multi || !$v(b), d = $rval(function() {
        return!$v(b) && $v(a.selected_items_x).size() === 0 ? SPAN({"class":"placeholder"}, [a.placeholder]) : ""
    });
    return SPAN({"class":"tokenizer-view", style:{position:"relative"}}, [a.is_multi ? c ? a._renderSelectedItems() : "" : "", SPAN({style:$rval(function() {
        var c = $v(b) && !$v(a.is_add_disabled_x);
        return{visibility:c ? "visible" : "hidden", position:c ? "relative" : "absolute"}
    }, "TypeaheadView.render.style")}, [a.typeahead_view.render()]), !a.is_multi ? c ? a._renderSelectedItems() : "" : "", d])
}});
__FILE__ = "apps/asana/view/quick_invite_state.js";
QuickInviteState = SessionObject.subclass("QuickInviteState", {}, {});
NewlyInvitedChange = define("NewlyInvitedChange", Change.subclass("NewlyInvitedChange", {}, {invite:ATTRIBUTE_REQUIRED, actor:ATTRIBUTE_REQUIRED, _stepTwo:ABSTRACT, enact:function() {
    env.is_server && this._stepTwo(this.invite.createdDomainUser())
}}));
AssignToNewlyInvitedChange = define("AssignToNewlyInvitedChange", NewlyInvitedChange.subclass("AssignToNewlyInvitedChange", {}, {tasks:ATTRIBUTE_REQUIRED, _stepTwo:function(a) {
    var b = this;
    b.tasks.forEach(function(c) {
        c.assignTo(a.taskList(), b.actor)
    });
    logEvent({name:"AssignToNewlyInvitedChange"})
}, taintedObjectIds:function() {
    return concat([this.actor.global_id], this.tasks.map(function(a) {
        return a.global_id
    }))
}}));
AddFollowerNewlyInvitedChange = define("AddFollowerNewlyInvitedChange", NewlyInvitedChange.subclass("AddFollowerNewlyInvitedChange", {}, {tasks:ATTRIBUTE_REQUIRED, _stepTwo:function(a) {
    this.tasks.forEach(function(b) {
        b.addFollowerWithoutStory(a)
    });
    logEvent({name:"AddFollowerNewlyInvitedChange"})
}, taintedObjectIds:function() {
    return concat([this.actor.global_id], this.tasks.map(function(a) {
        return a.global_id
    }))
}}));
AddProjectMemberNewlyInvitedChange = define("AddProjectMemberNewlyInvitedChange", NewlyInvitedChange.subclass("AddProjectMemberNewlyInvitedChange", {}, {pot:ATTRIBUTE_REQUIRED, _stepTwo:function(a) {
    var b = this.pot.addProjectMember(a);
    logEvent({name:"AddProjectMemberNewlyInvitedChange"});
    b.sendShareEmail(this.actor);
    UserActionContext.get().start(env.world_store.createStateObject(AddMemberToProjectAction, {creator:this.actor.user(), name:a.name(), project:this.pot}))
}, taintedObjectIds:function() {
    return[this.pot.global_id]
}}));
__FILE__ = "apps/asana/view/quick_invite_view.js";
QuickInviteView = View.subclass("QuickInviteView", {State:SessionObject2.subclass("QuickInviteView.State", {property_descs:{invited_name:{type:String, default_value:""}, invited_email:{type:String, default_value:""}, invite_as_guest:{type:Boolean, default_value:!1}, invite:{type:DomainInvite, default_value:null}}}, {})}, {id:"quick_invite_view", relative_to_element_id:ATTRIBUTE_REQUIRED, domain:ATTRIBUTE_REQUIRED, onInvite:ATTRIBUTE_REQUIRED, invited_items_text:null, constructor:function(a) {
    var b = this;
    QuickInviteView.superproto.constructor.call(this, a);
    b._dropdown = b.createView(DropdownView, {relative_to_element_id:b.relative_to_element_id, renderContents:function() {
        return b._renderDropdownContents()
    }, class_name:"quick-invite-view-dropdown", onOpen:InviteUserView.focusEmail})
}, _touch:function() {
    this.domain.canInviteMoreUsers()
}, _render:function() {
    this._touch();
    if(!this.isVisible()) {
        return""
    }
    this._dropdown.renderIfOpen();
    return""
}, _renderDropdownContents:function() {
    var a = this;
    return a.domain.canInviteMoreUsers() ? DIV({"class":"quick-invite-view"}, [a.createView(InviteUserView, {invited_name_l:a._state.invitedNameL(), invited_email_l:a._state.invitedEmailL(), invite_as_guest_l:a.domain.isGlobal() ? null : a._state.inviteAsGuestL(), submit_label_x:$rval(function() {
        return a.isPending() ? "Adding..." : a._state.inviteAsGuest() || a.domain.isGlobal() ? "Share " + a.invited_items_text : "Add to " + a.domain.name()
    }), submit_enabled_x:$rval(function() {
        return!a.isPending()
    }), is_compact:!0, invited_items_text:a.invited_items_text, onInvite:function(b, c, d) {
        a._onInvite(b, c, d)
    }}).render()]) : DIV({"class":"message"}, [WorkspaceUsersView.renderCapReachedMessage(a.domain)])
}, _onInvite:function(a, b, c) {
    a = DomainInvite.create({creator:env.user(), invited_name:a ? a : b, invited_email:b, invite_domain:this.domain, is_guest:c});
    this._state.setInvite(a);
    this.onInvite(a)
}, show:function(a, b) {
    this._state.setInvitedName(a);
    this._state.setInvitedEmail(b);
    this._state.setInviteAsGuest(!1);
    this._state.setInvite(null);
    this._dropdown.open()
}, isPending:function() {
    var a = this._state.invite();
    return a && a.createdDomainUser() === null
}, isVisible:function() {
    return this._dropdown.isOpen() && (!this._state.invite() || this.isPending())
}});
__FILE__ = "apps/asana/view/assign_to_me_button_view.js";
AssignToMeButtonView = View.subclass("AssignToMeButtonView", {}, {id:ATTRIBUTE_REQUIRED, addAssignee:ATTRIBUTE_REQUIRED, selected_objects:ATTRIBUTE_REQUIRED, domain:ATTRIBUTE_REQUIRED, _render:function() {
    var a = this, b = a.user.taskList(a.domain), c = 0, d = 0;
    Rvalue.forEachValue(a.selected_objects, function(a) {
        ++c;
        a.getAssigneeListOrNull() === b && ++d
    });
    if(d === c) {
        return""
    }
    var e = "Assign to Me", f = "";
    c > 1 && (e = "Assign all to Me", f = "You are currently assigned " + d + " out of " + c + " tasks.");
    return AsanaForms.renderButton({label:e, onclick:function() {
        a.addAssignee(a.domain.getDomainUser(a.user));
        return Node.STOP
    }, tooltip:f, "class":"assign-to-me-button", id:a.id})
}});
__FILE__ = "apps/asana/view/new_user_comment_prompt_view.js";
NewUserCommentPromptView = View.subclass("NewUserCommentPromptView ", {State:SessionObject2.subclass("NewUserCommentPromptState.State", {property_descs:{invite:{type:DomainInvite, default_value:null}, comment_contents:{type:String, default_value:""}}}, {}), COMMENT_ELEMENT_ID:"comment_prompt_text_area", OK_ELEMENT_ID:"comment_prompt_ok_button", DROPDOWN_CLASS_NAME:"new-user-comment-popup"}, {tasksToMutate:ATTRIBUTE_REQUIRED, relative_to_element_id:ATTRIBUTE_REQUIRED, onComment:ATTRIBUTE_REQUIRED,
    constructor:function(a) {
        var b = this;
        NewUserCommentPromptView.superproto.constructor.call(this, a);
        b._dropdown = b.createView(DropdownView, {relative_to_element_id:b.relative_to_element_id, class_name:NewUserCommentPromptView.DROPDOWN_CLASS_NAME, has_arrow:!0, align_arrow:"left", align:DropdownView.LEFT, padding_x:50, enforce_max_dropdown_height:!1, renderContents:function() {
            return b._renderDropdownContents()
        }, onOpen:function() {
            env.setFocus(NewUserCommentPromptView.COMMENT_ELEMENT_ID)
        }})
    }, open:function(a) {
        this._state.setInvite(null);
        this._state.setCommentContents("");
        logEvent({name:"NewUserComment-Open", is_claimed:a.user().isClaimed(), time_since_claimed:a.user().claimedTime() ? env.clock.now() - a.user().claimedTime() : null});
        this._dropdown.open()
    }, openAfterInvite:function(a) {
        this._state.setInvite(a);
        this._state.setCommentContents("");
        logEvent({name:"NewUserComment-OpenAfterInvite"});
        this._dropdown.open()
    }, isVisible:function() {
        if(!this._dropdown.isOpen()) {
            return!1
        }
        var a = this._state.invite();
        return a === null || a.createdDomainUser() !== null
    }, _render:function() {
        if(!this.isVisible()) {
            return""
        }
        this._dropdown.renderIfOpen();
        return""
    }, _renderDropdownContents:function() {
        var a = this, b = a.tasksToMutate(), b = env.frp.mapParallel(b, function(a) {
            return $v(a.getAssigneeOrNullR())
        }), c = b.pop();
        b.any(function(a) {
            return a !== c
        }) && (c = null);
        var b = c === null ? "" : c.firstName(), d = a.createView(AutogrowTextareaView, {"class":"generic-input showing", data:a._state.commentContentsL(), textarea_attributes:{id:NewUserCommentPromptView.COMMENT_ELEMENT_ID, placeholder:"eg. Let me know if you have any questions, and update this task as you make progress."}}).render(), e = AsanaForms.renderButton({label:"Ok", onclick:function() {
            logEvent({name:"NewUserComment-CommentAdded"});
            a.onComment(a._state.commentContents());
            a._dropdown.close()
        }, "class":"primary", tabindex:0, id:NewUserCommentPromptView.OK_ELEMENT_ID}), b = [DIV({"class":"comment-to-assignee dropdown-header"}, [SPAN({"class":"headline"}, [b, " is new to Asana. "]), BR(), "What should ", b, " do next with this task?"]), d, e];
        return FRAG(b)
    }});
__FILE__ = "luna/common/email_utils.js";
EmailUtils = {quotesForSingleLine:function(a) {
    for(var b = [], c = 0;c < a;c++) {
        b.push("> ")
    }
    return b.join("")
}, quotePlainText:function(a, b) {
    if(b > 0) {
        var c = EmailUtils.quotesForSingleLine(b);
        return a.replace(/(.*\r?\n|.+$)/g, c + "$1")
    }else {
        return a
    }
}};
__FILE__ = "luna/browser/luna_text_lib.js";
LunaText = {TOKEN_CLASS_NAME:"is_luna_token", BEGIN_SELECTION_MARKER:"begin_asana_cursor", END_SELECTION_MARKER:"end_asana_cursor", IGNORE_TAGS:{SCRIPT:1, STYLE:1}, BLOCK_TAGS:{ADDRESS:1, ARTICLE:1, ASIDE:1, AUDIO:1, BLOCKQUOTE:1, CANVAS:1, DD:1, DIV:1, DL:1, FIELDSET:1, FIGCAPTION:1, FIGURE:1, FOOTER:1, FORM:1, H1:1, H2:1, H3:1, H4:1, H5:1, H6:1, HEADER:1, HGROUP:1, HR:1, NOSCRIPT:1, OL:1, OUTPUT:1, P:1, PRE:1, SECTION:1, TABLE:1, TFOOT:1, UL:1, LI:1, VIDEO:1}};
LunaText.Node = AsanaObject.subclass("LunaText.Node", {}, {accept:ABSTRACT, equals:ABSTRACT});
LunaText.Node.Text = LunaText.Node.subclass("LunaText.Node.Text", {}, {text:SET_IN_CONSTRUCTOR, constructor:function(a) {
    LunaText.Node.Text.superproto.constructor.call(this);
    this.text = a
}, accept:function(a) {
    a.visitText(this)
}, equals:function(a) {
    return a instanceof LunaText.Node.Text && a.text === this.text
}});
LunaText.Node.Token = LunaText.Node.subclass("LunaText.Node.Token", {}, {url:SET_IN_CONSTRUCTOR, constructor:function(a) {
    LunaText.Node.Token.superproto.constructor.call(this);
    this.url = a
}, accept:function(a) {
    a.visitToken(this)
}, equals:function(a) {
    return a instanceof LunaText.Node.Token && a.url === this.url
}});
LunaText.Node.InputField = LunaText.Node.subclass("LunaText.Node.InputField", {}, {children:SET_IN_CONSTRUCTOR, constructor:function(a) {
    LunaText.Node.Token.superproto.constructor.call(this);
    this.children = a
}, accept:function(a) {
    a.visitInputField(this)
}, equals:function(a) {
    if(!(a instanceof LunaText.Node.InputField)) {
        return!1
    }
    if(a.children.length !== this.children.length) {
        return!1
    }
    return this.children.all(function(b, c) {
        return a.children[c].equals(b)
    })
}});
LunaText.Node.SelectionMarker = LunaText.Node.subclass("LunaText.Node.SelectionMarker", {}, {is_start:SET_IN_CONSTRUCTOR, constructor:function(a) {
    LunaText.Node.SelectionMarker.superproto.constructor.call(this);
    this.is_start = a
}, accept:function(a) {
    a.visitSelectionMarker(this)
}, equals:function(a) {
    return a instanceof LunaText.Node.SelectionMarker && a.is_start === this.is_start
}});
LunaText.fromDomNode = function(a) {
    return LunaText.DomToLunaTranslater.create().lunaTextFromNode(a)
};
LunaText.DomToLunaTranslater = AsanaObject.subclass("LunaText.DomToLunaTranslater", {}, {_skip_next_block_start:!1, lunaTextFromNode:function(a) {
    this._skip_next_block_start = !0;
    return this._lunaTextFromNodes({dom_nodes:$A(a.childNodes), is_block_start:!1})
}, _lunaTextFromNodes:attributedFunc({dom_nodes:ATTRIBUTE_REQUIRED, is_block_start:ATTRIBUTE_REQUIRED}, function(a) {
    var b = this, c = [], d = a.is_block_start;
    a.dom_nodes.forEach(function(a) {
        var f = a.nodeName.toUpperCase(), g = a.nodeType === Node.TEXT_NODE;
        if(g) {
            var h = LunaText._nodeTextContent(a);
            if(h === "") {
                return
            }else {
                b._skip_next_block_start = !1, b._appendTextNode(c, d ? "\n" + h : h)
            }
        }else {
            if(f === "A") {
                if(a.className === LunaText.TOKEN_CLASS_NAME && LunaText._nodeTextContent(a) !== "") {
                    var h = b._lunaTextFromNodes({dom_nodes:$A(a.childNodes), is_block_start:!1}), i = LunaText.Node.Token.create(a.href), j = !1;
                    h.forEach(function(a) {
                        a instanceof LunaText.Node.SelectionMarker ? c.push(a) : j || (c.push(i), j = !0)
                    });
                    j || c.push(i)
                }else {
                    h = b._lunaTextFromNodes({dom_nodes:$A(a.childNodes), is_block_start:d}), c = b._mergeLunaNodes(c, h)
                }
            }else {
                f === "BR" ? b._appendTextNode(c, d ? "\n\n" : "\n") : b._isSelectionMarkerNode(f, a) ? (d && (b._appendTextNode(c, "\n"), d = !1), c.push(LunaText.Node.SelectionMarker.create(a.getAttribute("id") === LunaText.BEGIN_SELECTION_MARKER))) : f === "SPAN" && a.getAttribute("id") === "luna_field" ? (d && (b._appendTextNode(c, "\n"), d = !1), h = b._lunaTextFromNodes({dom_nodes:$A(a.childNodes), is_block_start:!1}), c.push(LunaText.Node.InputField.create(h))) : b._isIgnoreTag(f) || (h = d || b._isBlockTag(f) &&
                    !b._skip_next_block_start, c = b._mergeLunaNodes(c, b._lunaTextFromNodes({dom_nodes:$A(a.childNodes), is_block_start:h})), d = b._isBlockTag(f, a) || d && LunaText._nodeTextContent(a) === "")
            }
        }
        d = !b._skip_next_block_start && !g && (b._isBlockTag(f, a) || d && (LunaText._nodeTextContent(a) === "" || b._isIgnoreTag(f) || f === "BR"))
    });
    return c
}), _isSelectionMarkerNode:function(a, b) {
    return a === "SPAN" && (b.getAttribute("id") === LunaText.BEGIN_SELECTION_MARKER || b.getAttribute("id") === LunaText.END_SELECTION_MARKER)
}, _isBlockTag:function(a) {
    return LunaText.BLOCK_TAGS[a] !== void 0
}, _isIgnoreTag:function(a) {
    return LunaText.IGNORE_TAGS[a] !== void 0
}, _appendTextNode:function(a, b) {
    a[a.length - 1] instanceof LunaText.Node.Text ? a[a.length - 1].text += b : a.push(LunaText.Node.Text.create(b));
    if(b.endsWith("\n")) {
        this._skip_next_block_start = !0
    }
}, _mergeLunaNodes:function(a, b) {
    return b.length === 0 ? a : b[0] instanceof LunaText.Node.Text && a[a.length - 1] instanceof LunaText.Node.Text ? (a[a.length - 1].text += b[0].text, a.concat(b.slice(1))) : a.concat(b)
}});
LunaText.Visitor = AsanaObject.subclass("LunaText.Visitor", {}, {visitText:ABSTRACT, visitToken:ABSTRACT, visitInputField:ABSTRACT, visitSelectionMarker:ABSTRACT, visit:function(a) {
    var b = this;
    a.forEach(function(a) {
        a.accept(b)
    });
    return b
}});
LunaText.ToPlainTextVisitor = LunaText.Visitor.subclass("LunaText.ToPlainTextVisitor", {}, {_plain_text_buffer:SET_IN_CONSTRUCTOR, constructor:function() {
    LunaText.ToPlainTextVisitor.superproto.constructor.call(this);
    this._buffer = []
}, plainText:function() {
    return this._buffer.join("")
}, visitText:function(a) {
    this._buffer.push(a.text)
}, visitToken:function(a) {
    this._buffer.push(a.url)
}, visitInputField:noop, visitSelectionMarker:noop});
LunaText.ToDomNodesVisitor = LunaText.Visitor.subclass("LunaText.ToDomNodesVisitor", {}, {_tokenFunc:SET_IN_CONSTRUCTOR, _linkify_at_selection:SET_IN_CONSTRUCTOR, _linkFunc:SET_IN_CONSTRUCTOR, constructor:attributedFunc({tokenFunc:ATTRIBUTE_REQUIRED, linkify_at_selection:ATTRIBUTE_REQUIRED, linkFunc:ATTRIBUTE_OPTIONAL}, function(a) {
    LunaText.ToDomNodesVisitor.superproto.constructor.call(this);
    this._nodes = [];
    this._previous_non_text_node = null;
    this._text_buffer = [];
    this._selection_buffer = [];
    this._linkify_at_selection = a.linkify_at_selection;
    this._tokenFunc = a.tokenFunc;
    this._linkFunc = a.linkFunc || this._linkNode
}), nodes:function() {
    this._flushText(null);
    return this._nodes
}, visitText:function(a) {
    this._text_buffer.push(a.text)
}, visitToken:function(a) {
    this._flushText(a);
    this._previous_non_text_node = a;
    this._nodes.push(this._linkFunc(a.url, this._tokenFunc(a.url)))
}, visitSelectionMarker:function(a) {
    var b = this._selectionMarkerNode(a);
    this._linkify_at_selection ? this._selection_buffer.push({position:this._text_buffer.join("").length, node:b}) : (this._flushText(a), this._previous_non_text_node = a, this._nodes.push(b))
}, visitInputField:function(a) {
    var b = this;
    b._flushText(a);
    b._previous_non_text_node = a;
    var c = document.createElement("SPAN");
    c.setAttribute("id", "luna_field");
    a.children.forEach(function(a) {
        a instanceof LunaText.Node.Text ? c.appendChild(document.createTextNode(a.text)) : a instanceof LunaText.Node.SelectionMarker ? c.appendChild(b._selectionMarkerNode(a)) : log.warn("Dropping node in input field", a)
    });
    b._nodes.push(c)
}, _selectionMarkerNode:function(a) {
    var b = document.createElement("SPAN");
    b.setAttribute("id", a.is_start ? LunaText.BEGIN_SELECTION_MARKER : LunaText.END_SELECTION_MARKER);
    return b
}, _flushText:function(a) {
    if(this._text_buffer.length !== 0) {
        this._linkify_at_selection ? this._appendLinkifiedTextEvenAtSelection(this._text_buffer.join("")) : this._appendLinkifiedTextWithAttentionToSelection(this._text_buffer.join(""), this._previous_non_text_node, a), this._text_buffer.length = 0, this._selection_buffer.length = 0, this._previous_non_text_node = null
    }
}, _linkNode:function(a, b) {
    var c = document.createElement("A");
    c.setAttribute("href", a);
    b !== null ? (b.preload && valueOrUnknown(function() {
        b.preload()
    }), c.set("onclick", b.onclick), c.appendChild(document.createTextNode(b.label)), c.set("class", LunaText.TOKEN_CLASS_NAME)) : (c.appendChild(document.createTextNode(a)), c.setAttribute("target", "_blank"), c.set("onclick", function(a) {
        window.openAsync(a.target.href);
        return Node.STOP
    }));
    return c
}, _appendLinkifiedTextEvenAtSelection:function(a) {
    var b = this, c = {position:0, selection_idx:0};
    a.split(Format._CAPTURING_LINK_RE).forEach(function(a, e) {
        if(e % 2 === 0) {
            b._appendTextAndSelectionTo(b._nodes, a, c, !0)
        }else {
            var f = document.createElement("A"), g = b._tokenFunc(a);
            g ? (b._nodes.push(b._linkFunc(a, g)), b._appendTextAndSelectionTo(b._nodes, a, c, !1)) : (g = [], b._appendTextAndSelectionTo(g, a, c, !0), g.forEach(function(a) {
                f.appendChild(a)
            }), f.setAttribute("href", a), f.setAttribute("target", "_blank"), f.set("onclick", function(a) {
                window.openAsync(a.target.href);
                return Node.STOP
            }), b._nodes.push(f))
        }
    })
}, _appendTextAndSelectionTo:function(a, b, c, d) {
    for(var e = c.selection_idx, f = c.position, g = this._selection_buffer;e < g.length;e++) {
        var h = g[e];
        if(!h || h.position < f || h.position > f + b.length) {
            break
        }else {
            var i = h.position - f, j = b.slice(0, i);
            d && this._appendNonlinkifiedTextTo(a, j);
            a.push(h.node);
            f += j.length;
            b = b.slice(i)
        }
    }
    b.length > 0 && (d && this._appendNonlinkifiedTextTo(a, b), f += b.length);
    c.selection_idx = e;
    c.position = f
}, _appendLinkifiedTextWithAttentionToSelection:function(a, b, c) {
    b instanceof LunaText.Node.SelectionMarker ? (b = a.match(/(.*?\s)/)) ? (this._appendNonlinkifiedTextTo(this._nodes, a.slice(0, b[1].length)), this._appendLinkifiedTextTo(this._nodes, a.slice(b[1].length))) : this._appendNonlinkifiedTextTo(this._nodes, a) : c instanceof LunaText.Node.SelectionMarker ? (b = a.match(/(\s[^\s]*)$/)) ? (b = a.length - b[1].length, this._appendLinkifiedTextTo(this._nodes, a.slice(0, b)), this._appendNonlinkifiedTextTo(this._nodes, a.slice(b))) : this._appendNonlinkifiedTextTo(this._nodes,
        a) : this._appendLinkifiedTextTo(this._nodes, a)
}, _appendNonlinkifiedTextTo:function(a, b) {
    for(var c = b.split("\n"), d = 0;d < c.length;d++) {
        a.push(document.createTextNode(c[d])), d < c.length - 1 && a.push(document.createElement("BR"))
    }
}, _appendLinkifiedTextTo:function(a, b) {
    var c = this;
    b.split(Format._CAPTURING_LINK_RE).forEach(function(b, e) {
        e % 2 === 0 ? b.length > 0 && c._appendNonlinkifiedTextTo(a, b) : b.length > 0 && a.push(c._linkFunc(b, c._tokenFunc(b)))
    })
}});
LunaText._nodeTextContent = function(a) {
    var b = a.innerText || a.textContent, c = null, a = window.getComputedStyle(a.parentNode);
    if(a !== null) {
        c = a.whiteSpace
    }
    switch(c) {
        case "pre":
            ;
        case "pre-wrap":
            return b;
        case "pre-line":
            return b.replace(/(\s)\s+/g, "$1");
        default:
            return b.replace(/(\s)\s+/g, "$1").replace(/\n/g, "")
    }
};
__FILE__ = "apps/asana/view/hypertext_search_view.js";
HypertextSearchView = DropdownView.subclass("HypertextSearchView", {}, {search_text_l:ATTRIBUTE_REQUIRED, domain:ATTRIBUTE_REQUIRED, onSelectItem:ATTRIBUTE_REQUIRED, enforce_max_dropdown_height:!1, relative_to_element_id:"luna_field", _filter_helper:SET_IN_CONSTRUCTOR, constructor:function(a) {
    HypertextSearchView.superproto.constructor.call(this, a);
    this._filter_helper = FilterHelper.create({filter_text_r:this.search_text_l});
    this._list_sections_view = this._createListSectionsView()
}, renderContents:function() {
    var a = this;
    return DIV({id:a.view_name + "_dropdown", "class":"typeahead-dropdown", style:{width:350}}, [Flags.diagnostics_show_hypertext_query ? DIV(['"', a.search_text_l, '"']) : "", AsanaHelpers.renderWithinLoadingBoundary("DIV", [valueOrUnknown(function() {
        return a._hasSearchText() ? a._list_sections_view.render() : SPAN({"class":"hypertext-tip"}, ["Link to a task, project, or person by typing their name and selecting from the list."])
    })])])
}, moveSelectionUp:function() {
    if(this._hasSearchText()) {
        return this._list_sections_view.moveSelectionUp()
    }
}, moveSelectionDown:function() {
    if(this._hasSearchText()) {
        return this._list_sections_view.moveSelectionDown()
    }
}, selectItem:function() {
    return this._list_sections_view.selectItemIfSelected()
}, _hasSearchText:computedProperty("_hasSearchText", function() {
    return this.search_text_l.peek().trim().length > 0
}), _searchClient:Memoize.memoizeInThis("_getSearchClient", function() {
    return AsanaSearchClient.create(SearchClient.create(env.user()))
}), _createListSectionsView:function() {
    var a = this, b = env.user().domainUserForDomain(a.domain);
    return a.createView(ListSectionsView, {id:a.view_name + "_list_sections_view", session:null, list_sections_x:[a._listSectionFromTypeaheadViewItemSection(UserTypeaheadView.usersTypeaheadSection({id:"search_people_section_hypertext", fully_qualified_view_name:a.fully_qualified_view_name, searchClient:function() {
        return a._searchClient()
    }, domain_user:b, filter_text_r:a.search_text_l, header_text:"People", hide_when_empty:!0}).section), a._searchListSection({id:"projects", header_text:"Projects", local_objects_r:$rval(function() {
        return $v(b.projectsModel().allKnownPotsR(!0)).toArray()
    }), serverSearch:function() {
        return a._searchClient().searchPots(a.domain, a.search_text_l.peek(), SearchView.NUM_RESULTS + 1, function(a) {
            return a.isProject()
        }).map(StateObject.globalId)
    }}), a._searchListSection({id:"tasks", header_text:"Tasks", hide_when_empty:!1, serverSearch:function() {
        return a._searchClient().searchTasks(a.domain, a.search_text_l.peek(), SearchView.NUM_RESULTS + 1, !1).map(StateObject.globalId)
    }}), a._searchListSection({id:"tags", header_text:"Tags", local_objects_r:$rval(function() {
        return b.canSeePublicData() ? $v(b.tagsModel().allKnownPotsR()).toArray() : []
    }), serverSearch:function() {
        if(!b.canSeePublicData()) {
            return[]
        }
        return a._searchClient().searchPots(a.domain, a.search_text_l.peek(), SearchView.NUM_RESULTS + 1, function(a) {
            return!a.isProject()
        }).map(StateObject.globalId)
    }})], selection_enabled_r:$rval(function() {
        return a.search_text_l.peek() !== null
    }), filter_text_r:a.search_text_l, min_filter_text_length:1, mutable_items_can_be_removed:!1})
}, _isSearchActiveR:rvalueProperty("_isSearchActiveR", function() {
    var a = this.search_text_l.peek();
    return a !== null && a.length > 0
}), _searchListSection:attributedFunc({id:ATTRIBUTE_REQUIRED, header_text:ATTRIBUTE_REQUIRED, local_objects_r:null, serverSearch:ATTRIBUTE_REQUIRED, hide_when_empty:!0}, function(a) {
    return this._listSectionFromTypeaheadViewItemSection(SearchView.serverComputedItemSection({id:this.fully_qualified_view_name + "_" + a.id, header_text:a.header_text, hide_when_empty:a.hide_when_empty, mergeWithLocalObjects:this.local_objects_r !== null ? SearchView.mergeWithLocalFirst(this.local_objects_r) : function(a) {
        return a
    }, serverSearch:a.serverSearch, is_search_active_r:this._isSearchActiveR(), fully_qualified_view_name:this.fully_qualified_view_name, filter_text_r:this.search_text_l, renderFooter:function(a) {
        return SearchView.renderSectionFooter(a)
    }, min_search_chars:1}).section)
}), _listSectionFromTypeaheadViewItemSection:function(a) {
    return ListSectionsView.ListSection.create({id:a.id, hide_when_empty:a.hide_when_empty, header_text:a.header_text, renderFooter:a.renderSectionFooter, constant_items_x:a.auto_filter ? this._filter_helper.filteredListR(a.items_x, function(a) {
        return a.name()
    }) : a.items_x, explicit_selection_only:a.explicit_selection_only, renderHighlightedItem:function(a, c) {
        a.navigationTarget().getPermalinkForCurrentUser();
        return SearchView.renderHighlightedItem(a, c, !1)
    }, new_item_label_x:null, onSelectItem:this.onSelectItem, onNewItem:noop, shouldShowNewItemX:!1, isActiveX:function() {
        return!1
    }})
}});
__FILE__ = "apps/asana/view/widgets/hypertext_input_view.js";
HyperTextInputView = View.subclass("HyperTextInputView", {STORE_AND_UPDATE_DELAY:400, ADVANCE_UNDO_STACK_DELAY:3E3, State:SessionObject2.subclass("HyperTextInputView.State", {property_descs:{search_text:{type:String, default_value:null}}}, {})}, {data:ATTRIBUTE_REQUIRED, element_attributes:ATTRIBUTE_REQUIRED, "class":"", domain:ATTRIBUTE_REQUIRED, onTabEnter:null, _element:SET_IN_CONSTRUCTOR, _dom_subtree_modified_timeout_id:null, _last_plain_text_value_stored:null, _last_luna_text_value_stored_with_selection:null,
    _ignore_subtree_modified_event:!1, _undo_stack:SET_IN_CONSTRUCTOR, _undo_stack_index:0, _advance_undo_stack_timeout_id:null, _defer_dom_listener_timeouts:!0, _recompute_count_l:SET_IN_CONSTRUCTOR, _restore_selection:!0, _linkify_at_selection:!1, _content_editable_in_use:!0, constructor:function(a) {
        var b = this;
        HyperTextInputView.superproto.constructor.call(b, a);
        b._undo_stack = [];
        b._undo_stack_index = 0;
        b._recompute_count_l = LocalLvalue.create(0, "HypertextInputView._recompute_count_l");
        b._hyper_text_view = b.createView(HypertextSearchView, {domain:b.domain, search_text_l:b._state.searchTextL(), onSelectItem:function(a) {
            b._runIgnoringDomModifiedEvents(function() {
                var d = b._searchInputNode();
                if(d) {
                    var e = a.navigationTarget().getPermalinkForCurrentUser() + Node.NBSP, f = document.createTextNode(e);
                    d.parentNode.replaceChild(f, d);
                    b._setSelection({anchor:{container:f, offset:e.length}, focus:{container:f, offset:e.length}});
                    b._exitSearchMode()
                }
            })
        }});
        b._element = DIV(update({contenteditable:!0, disable_highlighting_for_diagnostics:!0, tab_index:0, "class":b["class"] + " hypertext-input", key_map:[{key:"Z", meta_or_ctrl:!0, shift:!1, handler:function() {
            b._onUndo()
        }}, {key:"Z", meta_or_ctrl:!0, shift:!0, handler:function() {
            b._onRedo()
        }}, {key:"O", meta_or_ctrl:!0, shift:!0, handler:function() {
            b._debugSelection()
        }}, {key:KeyMap.Keys.BACKSPACE, handler:function(a) {
            return b._onDeleteOrBackspace(a, b._tokenNextToCursorOrNull(!1))
        }}, {key:KeyMap.Keys.DELETE, handler:function(a) {
            return b._onDeleteOrBackspace(a, b._tokenNextToCursorOrNull(!0))
        }}, {key:KeyMap.Keys.ENTER, tab:!0, handler:function() {
            b.onTabEnter && (TabRingView.tabIsDownL().requestSet(!1), b._triggerRecomputation(), b.onTabEnter())
        }}]}, b.element_attributes));
        JavaScriptRvalue.create({name:"HypertextInputWatch", computeValue:function() {
            var a = b.data.peekAllowingUnknown();
            if(!isUnknown(a)) {
                if(b._recompute_count_l.peek(), a === b._last_plain_text_value_stored) {
                    b._updateDomFromLunaText(b._last_luna_text_value_stored_with_selection, b._restore_selection, b._linkify_at_selection), a = b._searchInputNode(), b._state.searchText() !== null ? a || b._updateDomToEnterSearchMode() : a && b._updateDomToExitSearchMode()
                }else {
                    b._debugUndoStack("Resetting undo stack");
                    b._undo_stack_index = 0;
                    var d = [LunaText.Node.Text.create(a)];
                    b._undo_stack = [{luna_text_nodes:d, plain_text:a}];
                    b._updateDomFromLunaText(d, !1, !1);
                    b._last_plain_text_value_stored = null;
                    b._last_luna_text_value_stored_with_selection = null
                }
            }
        }, onUnused:function() {
            if(b._advance_undo_stack_timeout_id !== null) {
                safeClearTimeout(b._advance_undo_stack_timeout_id), b._advance_undo_stack_timeout_id = null
            }
            if(b._dom_subtree_modified_timeout_id !== null) {
                safeClearTimeout(b._dom_subtree_modified_timeout_id), b._dom_subtree_modified_timeout_id = null
            }
        }}).becomeWatch().peek();
        Flags.diagnostics_print_pasted_data && b._element.addEventListener("paste", function(a) {
            a.clipboardData && a.clipboardData.getData && (log.debug("pasted text data", prettyProof("\n" + a.clipboardData.getData("text/plain"))), log.debug("pasted html data", prettyProof("\n" + a.clipboardData.getData("text/html"))))
        });
        b._element.onpaste = function(a) {
            b._defer_dom_listener_timeouts = !1;
            if(a.clipboardData && a.clipboardData.getData && a.clipboardData.getData("text/html").length > 0) {
                var d = document.createElement("span");
                d.innerHTML = a.clipboardData.getData("text/html");
                d.style.display = "none";
                document.body.appendChild(d);
                var e = LunaText.fromDomNode(d), e = LunaText.ToDomNodesVisitor.create({tokenFunc:AsanaHelpers.hypertextTokenFunc, linkify_at_selection:!1}).visit(e).nodes();
                document.body.removeChild(d);
                var d = null, f = document.createElement("span");
                e.forEach(function(a) {
                    f.appendChild(a)
                });
                if((d = window.getSelection()) && d.rangeCount > 0) {
                    return e = d.getRangeAt(0), e.deleteContents(), e.insertNode(f), d.removeAllRanges(), e.setStartAfter(f), e.setEndAfter(f), d.addRange(e), a.stopPropagation(), !1
                }
            }
        };
        b._element.addEventListener("DOMSubtreeModified", function() {
            if(!b._ignore_subtree_modified_event) {
                b._advance_undo_stack_timeout_id && safeClearTimeout(b._advance_undo_stack_timeout_id), b._advance_undo_stack_timeout_id = safeTimeout(function() {
                    b._maybeAdvanceUndoStack()
                }, b._defer_dom_listener_timeouts ? HyperTextInputView.ADVANCE_UNDO_STACK_DELAY : 0), b._dom_subtree_modified_timeout_id !== null && safeClearTimeout(b._dom_subtree_modified_timeout_id), b._dom_subtree_modified_timeout_id = safeTimeout(function() {
                    processHandler(function() {
                        b._saveToDatastore()
                    });
                    b._dom_subtree_modified_timeout_id = null
                }, b._defer_dom_listener_timeouts ? HyperTextInputView.STORE_AND_UPDATE_DELAY : 0), b._defer_dom_listener_timeouts = !0
            }
        });
        b._element.listen("keydown", function(a) {
            if(b._isSearching()) {
                switch(a.keyCode) {
                    case KeyMap.Keys.UP:
                        return b._hyper_text_view.moveSelectionUp(), Node.STOP;
                    case KeyMap.Keys.DOWN:
                        return b._hyper_text_view.moveSelectionDown(), Node.STOP;
                    case KeyMap.Keys.ENTER:
                        if(b._state.searchText().trim().length === 0) {
                            b._exitSearchMode();
                            break
                        }else {
                            return b._hyper_text_view.selectItem(), Node.STOP
                        }
                        ;
                    case KeyMap.Keys.ESC:
                        return b._exitSearchMode(), Node.STOP
                }
            }
            return Node.DEFAULT_AND_BUBBLE
        });
        b._element.listen("keyup", function(a) {
            b._maybeExitSearchMode();
            a = DomEvent.create(a);
            switch(a.keyCode) {
                case KeyMap.Keys.UP:
                    ;
                case KeyMap.Keys.DOWN:
                    ;
                case KeyMap.Keys.LEFT:
                    ;
                case KeyMap.Keys.RIGHT:
                    ;
                case KeyMap.Keys.PAGE_UP:
                    ;
                case KeyMap.Keys.PAGE_DOWN:
                    b._moveSelectionAroundTokens(a.keyCode);
                    b._triggerRecomputation();
                    break;
                default:
                    a = a.keyCode, (a >= 65 && a <= 90 || a >= 48 && a <= 57 || a >= 188 && a <= 222) && b._searchInputNode() === null && b._cursorPrecededByHyperTextCharacters() && b._enterSearchMode()
            }
            return Node.DEFAULT_AND_BUBBLE
        });
        b._element.listen("click", function() {
            b._maybeExitSearchMode();
            b._triggerRecomputation();
            return Node.DEFAULT_AND_BUBBLE
        });
        b._element.listen("mouseup", function() {
            b._moveSelectionAroundTokens(null);
            return Node.DEFAULT_AND_BUBBLE
        });
        b._element.listen("blur", function() {
            b._restore_selection = !1;
            b._linkify_at_selection = !0;
            b._exitSearchMode();
            b._triggerRecomputation();
            return Node.DEFAULT_AND_BUBBLE
        });
        b._element.addEventListener("focus", function() {
            b._restore_selection = !0;
            b._linkify_at_selection = !1;
            b._restoreSelectionFromMarkers();
            return Node.DEFAULT_AND_BUBBLE
        })
    }, _textBeforeCursor:function(a) {
        var b = this._selectionInfo(), c = "";
        if(b !== null && b.collapsed) {
            var d = b.anchor.container, b = b.anchor.offset;
            d.nodeType === Node.TEXT_NODE ? (c = d.nodeValue.slice(0, b) + c, d = this._nodeBeforeNodeOrNull(d, "previousSibling")) : d = b > 0 ? d.childNodes[b] || null : d;
            for(;d !== null && d.nodeType === Node.TEXT_NODE && c.length < a;) {
                c = d.nodeValue + c, d = this._nodeBeforeNodeOrNull(d, "previousSibling")
            }
        }
        return c.slice(-a)
    }, _cursorPrecededByHyperTextCharacters:function() {
        var a = this._textBeforeCursor(2);
        return a === "@" || /\s\@/.test(a)
    }, _parentTokenOrNull:function(a) {
        return this._findParentOrNull(a, function(a) {
            return a.nodeType === Node.ELEMENT_NODE && a.className === LunaText.TOKEN_CLASS_NAME
        })
    }, _isSearching:function() {
        return this._state.searchText() !== null
    }, _tokenNextToCursorOrNull:function(a) {
        var b = this._selectionInfo();
        if(b === null) {
            return null
        }
        var c = a ? "nextSibling" : "previousSibling";
        if(b.collapsed) {
            var d = b.focus, b = d.container, d = d.offset;
            if(b.nodeType !== Node.TEXT_NODE) {
                if(a = this._nodeNextToNodeOrNull(d === 0 ? b : b.childNodes[d - 1], c)) {
                    return this._tokenNextToNodeOrNull(a, c)
                }
            }else {
                if(d === (a ? b.nodeValue.length : 0)) {
                    if(a = this._nodeNextToNodeOrNull(b, c)) {
                        return this._tokenNextToNodeOrNull(a, c)
                    }
                }else {
                    return this._tokenNextToNodeOrNull(b, c)
                }
            }
        }
        return null
    }, _tokenNextToNodeOrNull:function(a, b) {
        if(a !== this._element) {
            var c = this._parentTokenOrNull(a);
            if(c) {
                return c
            }
            if(a.tagName === "BR") {
                return null
            }
            if(a.nodeType === Node.TEXT_NODE && this._textContent(a).length > 0) {
                return null
            }
            if(c = this._nodeNextToNodeOrNull(a, b)) {
                return this._tokenNextToNodeOrNull(c, b)
            }
        }
        return null
    }, _nodeBeforeNodeOrNull:function(a) {
        return this._nodeNextToNodeOrNull(a, "previousSibling")
    }, _nodeNextToNodeOrNull:function(a, b) {
        var c = a[b];
        if(c) {
            return c
        }else {
            if(a.parentNode && a.parentNode !== this._element) {
                return this._nodeNextToNodeOrNull(a.parentNode, b)
            }
        }
        return null
    }, _onDeleteOrBackspace:function(a, b) {
        if(b !== null) {
            return this._deleteTokenAndUpdateSelection(b), Node.STOP
        }
        return Node.DEFAULT_AND_BUBBLE
    }, _deleteTokenAndUpdateSelection:function(a) {
        var b = document.createTextNode("");
        a.parentNode.insertBefore(b, a);
        a.parentNode.removeChild(a);
        this._setSelection({anchor:{container:b, offset:0}, focus:{container:b, offset:0}, collapsed:!0})
    }, _triggerRecomputation:function() {
        this._recompute_count_l.requestSet(this._recompute_count_l.peek() + 1);
        this._saveToDatastore()
    }, _maybeAdvanceUndoStack:function() {
        var a = this._plainTextValue();
        this._debugUndoStack("Maybe advance undo stack", a, a !== this._undo_stack[this._undo_stack_index].plain_text);
        if(a !== this._undo_stack[this._undo_stack_index].plain_text) {
            this._undo_stack_index++, this._undo_stack[this._undo_stack_index] = {luna_text_nodes:this._lunaTextValueWithSelection(), plain_text:a}, this._undo_stack.length = this._undo_stack_index + 1
        }
        if(this._advance_undo_stack_timeout_id) {
            safeClearTimeout(this._advance_undo_stack_timeout_id), this._advance_undo_stack_timeout_id = null
        }
    }, _debugUndoStack:function() {
        vlogEnabled("hypertext_undo") && (vlog.apply(null, ["hypertext_undo"].concat($A(arguments))), vlog("hypertext_undo", "Undo stack index is " + this._undo_stack_index + ", stack:", this._undo_stack))
    }, _onUndo:function() {
        this._maybeAdvanceUndoStack();
        this._maybeRestoreFromUndoStack(this._undo_stack_index - 1)
    }, _onRedo:function() {
        this._maybeRestoreFromUndoStack(this._undo_stack_index + 1)
    }, _maybeRestoreFromUndoStack:function(a) {
        var b = this._undo_stack[a];
        this._debugUndoStack("_maybeRestoreFromUndoStack", a, "empty", b === void 0);
        if(b !== void 0) {
            this._last_plain_text_value_stored = b.plain_text, this._last_luna_text_value_stored_with_selection = b.luna_text_nodes, this.data.requestSet(this._last_plain_text_value_stored), this._undo_stack_index = a, this._recompute_count_l.requestSet(this._recompute_count_l.peek() + 1)
        }
    }, _updateDomFromLunaText:function(a, b, c) {
        var d = this, e = null;
        $rval(function() {
            e === null || env.is_server ? assertDoesNotThrowInstanceOf(ValueIsUnknownError, function() {
                e = LunaText.ToDomNodesVisitor.create({tokenFunc:AsanaHelpers.hypertextTokenFunc, linkify_at_selection:c}).visit(a).nodes()
            }) : reactiveTimeout(function() {
                processHandler(function() {
                    d._triggerRecomputation()
                })
            })
        }).becomeWatch().peek();
        d._runIgnoringDomModifiedEvents(function() {
            if(!d._equalToCurrentNodes(e)) {
                d._element.innerHTML = "", e.forEach(function(a) {
                    d._element.appendChild(a)
                }), b && d._restoreSelectionFromMarkers()
            }
        })
    }, _equalToCurrentNodes:function(a) {
        var b = document.createElement("div");
        a.forEach(function(a) {
            (a.nodeType === Node.TEXT_NODE || a.getAttribute("id") !== LunaText.BEGIN_SELECTION_MARKER && a.getAttribute("id") !== LunaText.END_SELECTION_MARKER) && b.appendChild(a)
        });
        return this._element.innerHTML === b.innerHTML
    }, _saveToDatastore:function() {
        this._last_plain_text_value_stored = this._plainTextValue();
        this._last_luna_text_value_stored_with_selection = this._lunaTextValueWithSelection();
        this.data.requestSet(this._last_plain_text_value_stored);
        if(this._state.searchText() !== null) {
            var a = this._searchInputNode();
            a ? (this._debugHelper("_saveToDatastore"), this._state.setSearchText(this._textContent(a).trim().substring(1))) : this._state.setSearchText(null)
        }
    }, _debugHelper:function() {
    }, _lunaTextValueWithSelection:function() {
        this._addSelectionMarkersToDomIfFocused();
        var a = LunaText.fromDomNode(this._element), b = window.getSelection();
        this._restore_selection && (b && b.rangeCount > 0 && b.isCollapsed ? this._removeSelectionMarkersFromDom() : this._restoreSelectionFromMarkers());
        return a
    }, _plainTextValue:function() {
        return LunaText.ToPlainTextVisitor.create().visit(LunaText.fromDomNode(this._element)).plainText()
    }, _dataIsKnown:computedProperty("_dataIsKnown", function() {
        return isKnown(this.data.peek())
    }), _render:function() {
        var a = this;
        return this._dataIsKnown() ? ($rval(function() {
            a._isSearching() && a._hyper_text_view.renderIntoBody()
        }).becomeWatch().peek(), DIV([this._element])) : this.data
    }, _restoreSelectionFromMarkers:function() {
        if(!env.is_server) {
            var a = this;
            a._runIgnoringDomModifiedEvents(function() {
                window.getSelection();
                document.createRange();
                var b = document.getElementById(LunaText.BEGIN_SELECTION_MARKER), c = document.getElementById(LunaText.END_SELECTION_MARKER) || b;
                b && (vlogEnabled("luna_text") && vlog("luna_text", "selection found in dom, restoring"), a._setSelection({anchor:{container:b, offset:0}, focus:{container:c, offset:0}, collapsed:!1}), b.parentNode && b.parentNode.removeChild(b), c !== b && c.parentNode && c.parentNode.removeChild(c))
            })
        }
    }, _removeSelectionMarkersFromDom:function() {
        this._runIgnoringDomModifiedEvents(function() {
            [LunaText.BEGIN_SELECTION_MARKER, LunaText.END_SELECTION_MARKER].forEach(function(a) {
                (a = document.getElementById(a)) && a.parentNode.removeChild(a)
            })
        })
    }, _debugSelection:function() {
        var a = function(a, c) {
            var d = document.createElement("SPAN");
            d.style.backgroundColor = a;
            d.appendChild(document.createTextNode(c));
            return d
        };
        this._runIgnoringDomModifiedEvents(function() {
            var b = window.getSelection();
            if(b && b.rangeCount > 0) {
                var c = b.getRangeAt(0);
                if(c.collapsed) {
                    c.insertNode(a("lightblue", "middle"))
                }else {
                    var d = c.cloneRange();
                    d.setStart(b.anchorNode, b.anchorOffset);
                    d.setEnd(b.focusNode, b.focusOffset);
                    d.collapsed ? (b = c, d = c.cloneRange(), d.collapse(!1)) : (d = c, b = c.cloneRange(), b.collapse(!1));
                    d.insertNode(a("lightgreen", "begin"));
                    b.insertNode(a("red", "end"))
                }
            }
        })
    }, _createSelectionMarker:function(a) {
        var b = document.createElement("span");
        b.setAttribute("id", a);
        return b
    }, _enterSearchMode:function() {
        this._saveToDatastore();
        this._state.setSearchText("")
    }, _textNodeAtOrBeforeNode:function(a) {
        return a.nodeType === Node.TEXT_NODE ? a : this._textNodeAtOrBeforeNode(this._nodeBeforeNodeOrNull(a))
    }, _textNodeAtOrBeforeRangeStartContainer:function(a) {
        return a.startContainer.nodeType === Node.TEXT_NODE ? a.startContainer : this._textNodeAtOrBeforeNode(a.startOffset === 0 ? a.startContainer : a.startContainer.childNodes[a.startOffset - 1])
    }, _updateDomToEnterSearchMode:function() {
        var a = this;
        a._runIgnoringDomModifiedEvents(function() {
            var b = window.getSelection();
            if(b && b.rangeCount > 0) {
                var c = b.getRangeAt(0), d = document.createElement("SPAN");
                d.setAttribute("id", "luna_field");
                var e = document.createTextNode("@");
                d.appendChild(e);
                c.insertNode(d);
                d = c.cloneRange();
                d.selectNodeContents(e);
                d.collapse(!1);
                b.removeAllRanges();
                b.addRange(d);
                b = a._textNodeAtOrBeforeRangeStartContainer(c);
                c = a._textContent(b);
                b.parentNode.replaceChild(document.createTextNode(c.substring(c, c.length - 1)), b)
            }
        })
    }, _findParentOrNull:function(a, b) {
        return b(a) ? a : a !== this._element && a.parentNode ? this._findParentOrNull(a.parentNode, b) : null
    }, _parentLunaFieldOrNull:function(a) {
        return this._findParentOrNull(a, function(a) {
            return a.nodeType === Node.ELEMENT_NODE && a.getAttribute("id") === "luna_field"
        })
    }, _maybeExitSearchMode:function() {
        if(this._searchInputNode() !== null) {
            var a = this._selectionInfo(), b = this._parentLunaFieldOrNull(a.anchor.container), c = this._parentLunaFieldOrNull(a.focus.container);
            (b === null || c === null || a.focus.offset === 0) && this._exitSearchMode()
        }
    }, _exitSearchMode:function() {
        this._isSearching() && (this._saveToDatastore(), this._state.setSearchText(null))
    }, _updateDomToExitSearchMode:function() {
        var a = this, b = a._searchInputNode();
        b && a._runIgnoringDomModifiedEvents(function() {
            a._addSelectionMarkersToDomIfFocused();
            var c = document.createElement("SPAN");
            $A(b.childNodes).forEach(function(a) {
                c.appendChild(a)
            });
            b.parentNode.replaceChild(c, b);
            a._restore_selection && a._restoreSelectionFromMarkers()
        })
    }, _searchInputNode:function() {
        return document.getElementById("luna_field")
    }, _textContent:function(a) {
        return a.innerText || a.textContent
    }, _moveSelectionAroundTokens:function(a) {
        var b = this;
        b._runIgnoringDomModifiedEvents(function() {
            var c = b._selectionInfo();
            if(c) {
                var d = b._parentTokenOrNull(c.focus.container);
                if(d !== null && (d.normalize(), !(c.focus.offset === 0 || c.focus.offset === b._textContent(d).length))) {
                    a === KeyMap.Keys.RIGHT || a === KeyMap.Keys.DOWN || a === KeyMap.Keys.PAGE_DOWN ? (d.parentNode.insertBefore(document.createTextNode(""), d.nextSibling), c.focus.container = d.nextSibling) : (d.parentNode.insertBefore(document.createTextNode(""), d), c.focus.container = d.previousSibling);
                    c.focus.offset = 0;
                    c.anchor = b._selectionInfo().anchor;
                    if(c.collapsed) {
                        c.anchor = c.focus
                    }
                    b._setSelection(c);
                    b._element.normalize()
                }
            }
        })
    }, _setSelection:function(a) {
        var b = window.getSelection(), c = document.createRange();
        b && (c.setStart(a.anchor.container, a.anchor.offset), c.setEnd(a.anchor.container, a.anchor.offset), b.removeAllRanges(), b.addRange(c), b.extend(a.focus.container, a.focus.offset))
    }, _selectionInfo:function() {
        var a = window.getSelection();
        if(a && a.rangeCount > 0) {
            var b = a.getRangeAt(0);
            if(b.collapsed) {
                return{anchor:{container:b.startContainer, offset:b.startOffset}, focus:{container:b.startContainer, offset:b.startOffset}, collapsed:!0}
            }else {
                var c = b.cloneRange();
                c.setStart(a.anchorNode, a.anchorOffset);
                c.setEnd(a.focusNode, a.focusOffset);
                return c.collapsed ? (a = b.cloneRange(), a.collapse(!1), {anchor:{container:a.startContainer, offset:a.startOffset}, focus:{container:b.startContainer, offset:b.startOffset}, collapsed:!1}) : (a = b.cloneRange(), a.collapse(!1), {anchor:{container:b.startContainer, offset:b.startOffset}, focus:{container:a.startContainer, offset:a.startOffset}, collapsed:!1})
            }
        }else {
            return null
        }
    }, _nodeIsInsideField:function(a) {
        var b = this;
        return b._findParentOrNull(a, function(a) {
            return a === b._element
        })
    }, _addSelectionMarkersToDomIfFocused:function() {
        if(!env.is_server) {
            var a = this;
            a._runIgnoringDomModifiedEvents(function() {
                a._removeSelectionMarkersFromDom();
                var b = a._selectionInfo();
                if(b !== null && a._nodeIsInsideField(b.anchor.container) && a._nodeIsInsideField(b.focus.container)) {
                    var c = a._createSelectionMarker(LunaText.BEGIN_SELECTION_MARKER), d = a._createSelectionMarker(LunaText.END_SELECTION_MARKER), e = document.createRange(), f = document.createRange();
                    e.setStart(b.anchor.container, b.anchor.offset);
                    e.setEnd(b.anchor.container, b.anchor.offset);
                    f.setStart(b.focus.container, b.focus.offset);
                    f.setEnd(b.focus.container, b.focus.offset);
                    e.insertNode(c);
                    f.insertNode(d)
                }
            })
        }
    }, _runIgnoringDomModifiedEvents:function(a) {
        var b = this._ignore_subtree_modified_event;
        try {
            this._ignore_subtree_modified_event = !0, a()
        }finally {
            this._ignore_subtree_modified_event = b
        }
    }});
HyperTextInputView.MultiLine = HyperTextInputView.subclass("HyperTextInputView.MultiLine", {}, {constructor:function(a) {
    var b = this;
    HyperTextInputView.MultiLine.superproto.constructor.call(b, a);
    b._element.listen("keydown", function(a) {
        return b._onKeyDown(a)
    }, !1)
}, _onKeyDown:function(a) {
    return a.keyCode === KeyMap.Keys.ENTER && !a.hasMetaOrCtrl() ? Node.JUST_DEFAULT : Node.DEFAULT_AND_BUBBLE
}});
HyperTextInputView.SingleLine = HyperTextInputView.subclass("HyperTextInputView.SingleLine", {}, {});
__FILE__ = "apps/asana/view/widgets/autogrow_hypertext_input_view.js";
AutogrowHypertextInputView = View.subclass("AutogrowHypertextInputView", {}, {data:ATTRIBUTE_REQUIRED, "class":"", element_attributes:ATTRIBUTE_REQUIRED, onTabEnter:null, domain:ATTRIBUTE_REQUIRED, _render:function() {
    var a = this, b = TEXTAREA({"class":a["class"], style:{marginTop:0, borderTop:0, paddingTop:0, height:0, minHeight:0, paddingBottom:0, borderBottom:0, marginBottom:0, paddingLeft:0, paddingRight:0}}), c = a.element_attributes.placeholder || "";
    delete a.element_attributes.placeholder;
    var d = a.createView(HyperTextInputView.MultiLine, {data:a.data, "class":a["class"], element_attributes:a.element_attributes, domain:a.domain, onTabEnter:a.onTabEnter}).render(), e = DIV({style:{width:b.dimensions.content_width_r}}, [d]), f = env.isElementIdFocusedR(a.element_attributes.id), c = DIV({"class":$rval(function() {
        return"placeholder placeholder-text" + (a._showPlaceholder(f, d) ? "" : " hidden")
    })}, [DIV({"class":"placeholder-content"}, [c])]);
    return SPAN({"class":"autogrow-textarea"}, [b, c, e])
}, _isContentEmpty:function(a, b) {
    return a.trim() === "" || b.innerText !== void 0 && b.innerText.trim() === "" || b.textContent !== void 0 && b.textContent.trim() === ""
}, _showPlaceholder:function(a, b) {
    return!$v(a) && this._isContentEmpty(this.data.peekAllowingUnknown(), b)
}});
__FILE__ = "apps/asana/view/property_sheet_view.js";
PropertySheetView = View.subclass("PropertySheetView", {State:SessionObject2.subclass("PropertySheetView.State", {property_descs:{filter_text:{type:String, default_value:""}}}, {}), focusableElementId:function(a, b) {
    return"property_sheet:" + a + "_field:" + b
}, propertyNameElementId:function(a, b) {
    return"property_sheet:" + a + "_field_name:" + b
}, hotkeyConfigs:function(a, b) {
    var c = [];
    b.forEach(function(b) {
        b.hotkey && c.push({key:b.hotkey, handler:b.handler, element_id:b.handler ? null : PropertySheetView.focusableElementId(a, PropertySheetView._sectionNameForProperty(b)), open_details_pane:b.open_details_pane || !1})
    });
    return c
}, _sectionNameForProperty:function(a) {
    return a.section_name || a.property_name
}, _generateOnNewItemHandler:function(a, b, c, d) {
    return function(e) {
        return a.createItemList({name:e, creator_du:b, is_project:c, is_public_to_workspace:d})
    }
}, RECURRENCE_FOCUSABLE_ELEMENT_ID_PREFIX:"property_sheet_view:recur:", recurrenceFocusableElementId:function(a, b) {
    return PropertySheetView.RECURRENCE_FOCUSABLE_ELEMENT_ID_PREFIX + a + "_" + b
}, isRecurrenceFocused:function(a) {
    return PropertySheetView.isRecurrenceElementId(a, env.focusedElementId())
}, isRecurrenceElementId:function(a, b) {
    return b !== null && b.startsWith(PropertySheetView.RECURRENCE_FOCUSABLE_ELEMENT_ID_PREFIX + a)
}}, {id:ATTRIBUTE_REQUIRED, selected_objects:ATTRIBUTE_REQUIRED, properties_to_show:ATTRIBUTE_REQUIRED, context_pot_or_null:SET_IN_CONSTRUCTOR, current_domain:ATTRIBUTE_REQUIRED, render_sections_on_single_lines:!1, onTokenClicked:ATTRIBUTE_REQUIRED, assigneeToTasksMultiDict:ATTRIBUTE_REQUIRED, addAssignee:ATTRIBUTE_REQUIRED, removeAssignee:ATTRIBUTE_REQUIRED, onNewUserCommentPrompt:null, addFollower:function(a, b) {
    var c = env.user().domainUserForDomain(this.current_domain);
    a.addFollower(b, c)
}, removeFollower:function(a, b) {
    a.removeFollower(b)
}, followerToTaskMultiDict:function() {
    return MultiDict.create(this.selected_objects, function(a) {
        return a.followersR()
    })
}, potToTasksMultiDict:ATTRIBUTE_REQUIRED, addPot:ATTRIBUTE_REQUIRED, removePot:ATTRIBUTE_REQUIRED, details_state:ATTRIBUTE_REQUIRED, blurSelf:ATTRIBUTE_REQUIRED, constructor:function(a) {
    var b = Crypto.hash(a.selected_objects.map(function(a) {
        return a.global_id
    }).join("."));
    a.view_name = this.__type_name + "." + b;
    PropertySheetView.superproto.constructor.call(this, a)
}, _touch:function() {
    var a = this;
    $rval(function() {
        var b = env.user().domainUserForDomain(a.current_domain), c = function(a) {
            var c = [];
            env.frp.forEachParallel(a, function(a) {
                toValueAllowingUnknown(a.emailR());
                toValueAllowingUnknown(a.user().nameR());
                b.contactForDomainUser(a);
                ExperimentalFeature.enabled("new_user_comment_prompt") && (c.push(a.user().isClaimedL()), c.push(a.user().claimedTimeL()))
            });
            env.world_store.peekXvaluesAndStateObjectScalars(c, [])
        };
        env.frp.forEachParallel([function() {
            c(a.current_domain.usersModel().limitedObjects())
        }, function() {
            a.context_pot_or_null !== null && c(a.context_pot_or_null.members())
        }, function() {
            c([b])
        }, function() {
            env.world_store.peekStateObjectProperties(a.selected_objects.filter(function(a) {
                return a instanceof Task
            }), ["has_details"])
        }])
    }).becomeWatch().peek()
}, _render:function() {
    var a = this;
    a._touch();
    var b = [], c = [], d = !1, e = [];
    env.frp.mapParallel(a.properties_to_show, function(f) {
        if(f.unknown_fold) {
            d = !0
        }else {
            if((f.section_name !== "tags" || a.user.domainUserForDomain(a.current_domain).canSeePublicData()) && !(f.property_name === "items" && a.selected_objects.any(function(a) {
                return!(a instanceof Task)
            }))) {
                if(f.property_name === "name" && a.selected_objects.size() === 1) {
                    var g = a.selected_objects.first();
                    if(g instanceof ItemList && g.isUserTaskList()) {
                        return
                    }
                }
                if(f.collapsed_properties) {
                    g = a._renderCollapsedProperties(e)
                }else {
                    if(g = a._renderProperty(f), g === null) {
                        return
                    }
                }
                f.collapsable && e.push([f, g]);
                d ? c.push(g) : b.push(g)
            }
        }
    });
    return DIV({"class":"property-sheet-view", children:concat(b, [AsanaHelpers.renderWithinLoadingBoundary("DIV", c)])})
}, _renderCollapsedProperties:function(a) {
    var b = this;
    return DeferredRvalue.create($rval(function() {
        var c = [], d = function(a) {
            c.push(a)
        };
        a.forEach(function(a) {
            var c = a[0];
            $v(a[1]) || (a = b.selected_objects.first()) && a.canHaveSubtasks() && !isUnknown(toValueAllowingUnknown(a.hasSubtasksR())) && d(TD({"class":"property-name " + c.property_name, tooltip:c.tooltip ? c.tooltip : "", tooltip_delay:500, onmousedown:function() {
                c.handler ? c.handler() : env.setFocus(b.focusableElementId(c))
            }}, [SPAN({"class":"collapsed-icon " + c.renderer_name + "-icon"}), DetailsView._renderHumanName(c, !1)]))
        });
        var e = b._renderAttachmentsUpload();
        e !== null && d(e);
        return DIV({"class":"collapsed-properties"}, [TABLE([TR(c)])])
    }), 0)
}, propertyNameElementId:function(a) {
    return PropertySheetView.propertyNameElementId(this.id, PropertySheetView._sectionNameForProperty(a))
}, focusableElementId:function(a) {
    return PropertySheetView.focusableElementId(this.id, PropertySheetView._sectionNameForProperty(a))
}, createKeyMap:function() {
    var a = this, b = [];
    a.properties_to_show.forEach(function(c) {
        c.property_name === "completed" && b.push({key:"ENTER", meta_or_ctrl:!0, handler:function() {
            a.toggleCompleted()
        }})
    });
    return b
}, toggleCompleted:function() {
    var a = this, b = !0, c = !0;
    a.selected_objects.forEach(function(a) {
        a instanceof Task ? a.getV("completed") || (c = !1) : b = !1
    });
    b && a.selected_objects.forEach(function(b) {
        b.setCompleted(!c, a.user.domainUserForDomain(b.domain()))
    })
}, _renderProperty:function(a) {
    var b = a.property_name, c = a.renderer_name, d = "_render_multi_" + c;
    if(d in this) {
        if(this.selected_objects.any(function(a) {
            return!a.hasProperty(b)
        })) {
            return null
        }
        return this[d](a)
    }
    if(this.selected_objects.size() > 1) {
        return""
    }
    d = "_render_single_" + c;
    if(d in this) {
        if(c = this.selected_objects.first(), c.hasProperty(b)) {
            var e = c.getX(b);
            return this[d](a, c, e)
        }else {
            return null
        }
    }
    ufu("No renderer", c, "found for property", b)
}, _attributesForProperty:function(a) {
    var b = this, c;
    c = "opt_is_focused" in a ? a.opt_is_focused : env.isElementIdFocusedR(b.focusableElementId(a));
    var d = $rval(function() {
        var b = "property " + PropertySheetView._sectionNameForProperty(a);
        $v(c) && (b += " focused");
        return b
    });
    return{id:b.propertyNameElementId(a), "class":d, onclick:"opt_on_click" in a ? a.opt_on_click : function() {
        $v(c) || document.getElementById(b.focusableElementId(a)).requestFocus()
    }}
}, _renderOneLineProperty:function(a, b, c) {
    return DIV(this._attributesForProperty(a), [TABLE([TR([TD({"class":"property-pair-name"}, [LABEL({"for":b, "class":"property-name", tooltip:a.tooltip ? a.tooltip : "", tooltip_delay:a.tooltip_delay ? a.tooltip_delay : 0}, [DetailsView._renderHumanName(a, !1)])]), TD({"class":"property-pair-value"}, [b]), TD({align:"right", "class":"property-pair-button"}, [c || ""])])])])
}, _renderSectionProperty:function(a, b) {
    if(this.render_sections_on_single_lines) {
        return this._renderOneLineProperty(a, b)
    }else {
        var c = a.property_name === "description" ? null : DetailsView._renderHumanName(a, !1);
        return DIV(this._attributesForProperty(a), [c ? SPAN({"class":"section-name", children:[c]}) : "", b])
    }
}, _render_single_description:function(a, b, c) {
    var b = this.render_sections_on_single_lines ? "add " + a.human_name.toLowerCase() : FRAG(["add ", DetailsView._renderHumanName(a, !0)]), d = this._selectedObject(), c = this.createView(AutogrowHypertextInputView, {view_name:"AutogrowTextareaView." + a.property_name, "class":"field-" + a.property_name + " generic-input", data:c, element_attributes:{placeholder:b, id:this.focusableElementId(a), tabindex:0}, domain:d instanceof Domain ? d : d.domain()});
    return this._renderSectionProperty(a, DIV({"class":"multiline"}, [c.render()]))
}, _render_single_domain_users_list:function(a, b, c) {
    return this._render_custom_users_list(a, b, c, function(a) {
        return $rval(function() {
            return LI([a.user().global_id, " : ", a.user().adminOnlyName(), " <", a.email(), "> ", a.active() ? "" : " (deprovisioned)"])
        })
    })
}, _render_single_users_list:function(a, b, c) {
    return this._render_custom_users_list(a, b, c, function(a) {
        return $rval(function() {
            return LI([a.global_id, " : ", a.adminOnlyName()])
        })
    })
}, _renderSetToRepeatLink:function() {
    var a = this;
    if(a.selected_objects.size() === -1) {
        return""
    }
    return DIV({"class":"recur-icon-wrapper"}, [DIV({"class":"recur-thumb", style:{display:$rval(function() {
        return PropertySheetView.isRecurrenceFocused(a.id) ? "" : "none"
    }, "PropertySheetView_isRecurrenceFocused")}}), AsanaHelpers.renderWithinHiddenLoadingBoundary("DIV", [$rval(function() {
        var b = a.selected_objects.first(), c = b.recurrenceType() === Task.RecurrenceType.NEVER ? "Set to repeat" : "Repeats " + Task.RecurrenceType.Display[b.recurrenceType()].toLowerCase();
        return DIV([b.recurrenceType() === Task.RecurrenceType.NEVER ? "" : DIV({"class":"recur-icon"}, []), A({"class":"recur-link", onmousedown:function() {
            env.setFocus(PropertySheetView.recurrenceFocusableElementId(a.id, "type_select"));
            b.recurrenceType() === Task.RecurrenceType.NEVER && (logEvent({name:"SetInitialRecurrenceOnTask", task:b, domain:b.domain()}), b.setRecurrenceType(Task.RecurrenceType.PERIODICALLY), b.setRecursDaysAfterCompletion(7), b.dueDate() || b.setDueDate(Day.today(), env.user().domainUserForDomain(a.current_domain)))
        }}, [c])])
    })])])
}, _render_multi_due_date:function(a) {
    var b = this, c = $rval(function() {
        return b._multiPropertyValue("dueDate")
    }), d = JavascriptLvalue.create(function() {
        var a = $v(c);
        return a === MULTIPLE_VALUES ? null : a
    }, function(a) {
        b.selected_objects.forEach(function(c) {
            var d = b.user.domainUserForDomain(c.domain());
            c.setDueDate(a, d)
        })
    }, "multi_due_date"), e = b.focusableElementId(a), f = b.createView(DateView, {validated_l:d, extra_input_field_attributes:{id:e}, forceInEditMode:function() {
        return PropertySheetView.isRecurrenceFocused(b.id)
    }}), g = $rval(function() {
        return f.render()
    });
    return $rval(function() {
        var d = !1;
        if(b.selected_objects.size() === 1) {
            var e = b.selected_objects.first().recurrenceTypeOrUnknown(), d = isKnown(e) && e !== Task.RecurrenceType.NEVER
        }
        if(f.inEditMode()) {
            return a.opt_is_focused = !0, b._renderOneLineProperty(a, DIV([g, b._renderSetToRepeatLink()]))
        }else {
            a.opt_is_focused = !1;
            e = $v(c);
            if(e === null && !d) {
                return""
            }
            d = e === null ? "add-button" : "edit-button";
            d += " default-button";
            e = DIV([SPAN({id:"indeterminate_date", style:{display:e === MULTIPLE_VALUES ? "inline" : "none"}}, ["---- "]), SPAN({style:{display:e === null || e === MULTIPLE_VALUES ? "none" : "inline"}}, [g]), AsanaForms.renderIconButton({"class":d, inner_span_class:"edit"}), b._renderSetToRepeatLink()]);
            return b._renderOneLineProperty(a, e)
        }
    })
}, _focusDueDate:function() {
    env.setFocus(PropertySheetView.focusableElementId(this.id, "due_date"))
}, _renderRecurrenceTypeDropdown:function(a) {
    var b = this;
    return forms.renderEnumDropdown(Task.RecurrenceType.Display, a.recurrenceTypeL(), "text", {id:PropertySheetView.recurrenceFocusableElementId(b.id, "type_select"), "class":"recur-type-select", handler:function(c, d) {
        d();
        a.setRecursDaysAfterCompletion(null);
        a.setRecursMonthlyOnDay(null);
        a.setRecursWeeklyOnDay(null);
        a.setRecursYearlyOnDay(null);
        logEvent({name:"SetRecurrenceOnTask", task:a, domain:a.domain(), recurrence_type:a.recurrenceType()});
        switch(a.recurrenceType()) {
            case Task.RecurrenceType.PERIODICALLY:
                a.setRecursDaysAfterCompletion(7);
                break;
            case Task.RecurrenceType.DAILY:
                break;
            case Task.RecurrenceType.MONTHLY:
                var e = a.dueDate() || Day.today();
                a.setRecursMonthlyOnDay(Math.min(29, e.getDate()));
                break;
            case Task.RecurrenceType.WEEKLY:
                e = a.dueDate() || Day.today();
                a.setRecursWeeklyOnDay(e.getDay());
                break;
            case Task.RecurrenceType.YEARLY:
                e = a.dueDate() || Day.today();
                e.setYear(0);
                a.setRecursYearlyOnDay(e.getTime());
                break;
            case Task.RecurrenceType.NEVER:
                b._focusDueDate();
                break;
            default:
                b._focusDueDate(), host.recordWarning("invalid recurrence type", a.recurrenceType())
        }
        return Node.DEFAULT_AND_BUBBLE
    }})
}, _renderAdditionalRecurrenceOptions:function(a) {
    switch(a.recurrenceType()) {
        case Task.RecurrenceType.PERIODICALLY:
            return FRAG([INPUT({id:PropertySheetView.recurrenceFocusableElementId(this.id, "periodically_input"), "class":"generic-input recur-periodically-input showing", data:a.recursDaysAfterCompletionL(), data_type:"integer"}), SPAN({"class":"recur-text"}, [" days after completion"])]);
        case Task.RecurrenceType.DAILY:
            return"";
        case Task.RecurrenceType.MONTHLY:
            var b = Map.create(range(1, 30).map(function(a) {
                return a < 29 ? [a, a.ordinal()] : [29, "last day"]
            }));
            return FRAG([SPAN({"class":"recur-text"}, ["on the"]), forms.renderEnumDropdown(b, a.recursMonthlyOnDayL(), "integer", {id:PropertySheetView.recurrenceFocusableElementId(this.id, "monthly_select"), "class":"recur-monthly-select"}), SPAN({"class":"recur-text"}, ["of the month"])]);
        case Task.RecurrenceType.WEEKLY:
            return b = Map.create(range(0, 7).map(function(a) {
                return[a, Date.Names.DAYS[a]]
            })), FRAG([SPAN({"class":"recur-text"}, ["on"]), forms.renderEnumDropdown(b, a.recursWeeklyOnDayL(), "integer", {id:PropertySheetView.recurrenceFocusableElementId(this.id, "weekly_select")})]);
        case Task.RecurrenceType.YEARLY:
            return a = Day.create(a.recursYearlyOnDay()).strftime("%b %#d"), FRAG([SPAN({"class":"recur-text"}, ["on " + a])]);
        default:
            return""
    }
}, _render_single_recurrence:function(a, b) {
    var c = this;
    return AsanaHelpers.renderWithinHiddenLoadingBoundary("DIV", [$rval(function() {
        if(c.selected_objects.size() !== 1) {
            return""
        }
        c.selected_objects.first();
        env.world_store.peekXvaluesAndStateObjectScalars([b.recurrenceTypeL(), b.recursDaysAfterCompletionL(), b.recursMonthlyOnDayL(), b.recursWeeklyOnDayL()], []);
        if(b.recurrenceType() === Task.RecurrenceType.NEVER) {
            return""
        }
        var d = DIV([c._renderRecurrenceTypeDropdown(b), c._renderAdditionalRecurrenceOptions(b)]);
        return DIV({"class":"recurrence-detail", style:{display:$rval(function() {
            return PropertySheetView.isRecurrenceFocused(c.id) ? "" : "none"
        }, "PropertySheetView_recurrence_display")}}, [c._renderOneLineProperty(a, d)])
    })])
}, _renderAttachmentsUpload:function() {
    if(this.selected_objects.size() === 1) {
        var a = this.selected_objects.first();
        if(a.hasProperty("attachments")) {
            return this.createView(AttachmentsUploadView, {item:a, name:"details_ui_attachments_" + a.global_id}).render()
        }
    }
    return null
}, _render_single_attachments:function(a, b) {
    return AsanaHelpers.renderWithinHiddenLoadingBoundary("DIV", [this.createView(AttachmentsView, {item:b}).render()])
}, _render_single_subtasks:function(a, b) {
    var c = this;
    return $rval(function() {
        if(!isA(b, Task)) {
            return""
        }
        var d = b.itemsL();
        if(isUnknown(toValueAllowingUnknown(b.hasSubtasksR()))) {
            return""
        }
        if(!env.is_server && !b.hasSubtasks()) {
            return""
        }
        var e = c.details_state.getV("details_grid_state"), f = c.createView(ItemListView, {allow_deleting:!0, root_grid_block_r:$rval(function() {
            var a = e.getTaskGrouper();
            return TriPartItemList.create({pot:b, task_grouper:a, group:a.SpecialGroup.NULL, visible_list_r:d, blockAbove:GridBlock.nullBlock, blockBelow:GridBlock.nullBlock, parent_block:null, only_show_main_part:!0, display_order_key_part:null})
        }), grid_state:e, dnd_helper:DragDrop.Helper.create(DragDrop.Context.create({browser:c.browser})), current_asana_list:b, context_pot_or_null:c.context_pot_or_null, entire_list_r:d, show_assignee:!0, show_ancestry:!1, compact:!0}), g = f.render();
        return DIV({"class":"property"}, [DIV({"class":"multiline", id:c.focusableElementId(a), key_map:[{key:KeyMap.Keys.M, tab:!0, handler:function() {
            TabRingView.tabIsDownL().requestSet(!1);
            var a = e.selectedItems(), b = c.user.domainUserForDomain(c.current_domain);
            Task.multiAssign(a, b, b);
            logEvent({name:"Subtask-Tab-M"})
        }}, {key:KeyMap.Keys.BACKSPACE, tab:!0, handler:function() {
            TabRingView.tabIsDownL().requestSet(!1);
            f.deleteSelectedRowsInUserAction();
            logEvent({name:"Subtask-Tab-Delete"})
        }}, {key:KeyMap.Keys.RIGHT, tab:!0, handler:function() {
            TabRingView.tabIsDownL().requestSet(!1);
            var a = e.selectedItems();
            a.size() === 1 && (env.realAppSession().detailsState().selectRelativeTask(a.firstValueOrNull()), env.setFocus(PropertySheetView.focusableElementId(DetailsView.PROPERTY_SHEET_NAME, "description")), logEvent({name:"Subtask-ZoomInToSubtaskKeyboard"}))
        }}]}, [g])])
    }, "render_single_subtasks")
}, _render_multi_assigned_to:function(a) {
    var b = this, c = b.current_domain, d = $rval(function() {
        var a = !1;
        b.selected_objects.forEach(function(b) {
            b instanceof Task || (a = !0)
        });
        return a
    }), e = env.isElementIdFocusedR(b.focusableElementId(a)), f = $rval(function() {
        return b._renderAssignToMeButton(a)
    }), g = b.assigneeToTasksMultiDict();
    return AsanaHelpers.renderWithinHiddenLoadingBoundary("DIV", [$rval(function() {
        if($v(d)) {
            return DIV()
        }
        var h = g.keys(), i = h.size() === 1 ? h.firstValueOrNull() : null, j = i === b.user.domainUserForDomain(b.current_domain), l = i ? List.create([i]) : List.create(), l = b.createView(TokenizerView, {typeahead_view:b._createUserTypeahead({property_dict:a, onSelectItem:function(a) {
            a ? b.addAssignee(a) : i && b.removeAssignee(i)
        }, invited_items_text:b.selected_objects.size() > 1 ? "These Tasks" : "This Task", onInvite:function(a) {
            var c = b.selected_objects.filter(function(a) {
                return isA(a, Task)
            });
            env.datastore_manager.enactChange(AssignToNewlyInvitedChange.create({invite:a, tasks:c, actor:b.user.domainUserForDomain(b.current_domain)}))
        }, onComment:b.onNewUserCommentPrompt, selected_tasks:b.selected_objects, on_focus_text_x:i === null ? "" : i.name(), allow_clear:!0}), placeholder:"assign to teammate", remove_text:"Unassign", selected_items_x:l, extra_element_for_token:i && !j ? b._renderScheduleStatusIcon() : "", is_multi:!1, tokenTooltip:function(a) {
            return a.name() === User.PRIVATE_USER_NAME ? c.isGlobal() ? "You can't see this user's name because you are not members of the same project" : "To see this user's name, ask a member of the workspace to add them as a member of a project you're working on." : null
        }, onRemoveToken:b.removeAssignee, getItemNameX:function(a) {
            return a.name()
        }, onTokenClicked:b.onTokenClicked}).render();
        a.opt_on_click = function() {
            $v(e) || document.getElementById(b.focusableElementId(a)).requestFocus()
        };
        if($v(e)) {
            h = l
        }else {
            var m = h.size() === 0 ? "add-button" : "edit-button";
            m += " default-button";
            h = DIV([SPAN({id:"indeterminate_assignee", style:{display:h.size() > 1 ? "inline" : "none"}}, ["---- "]), SPAN({style:{display:h.size() <= 1 ? "inline" : "none"}}, [l]), AsanaForms.renderIconButton({"class":m, inner_span_class:"edit"}), j ? b._renderScheduleStatusToggleGroup() : ""])
        }
        return b._renderOneLineProperty(a, h, f)
    })])
}, _renderAssignToMeButton:function(a) {
    return this.createView(AssignToMeButtonView, {id:this.focusableElementId(a) + "assign_to_me_button", addAssignee:this.addAssignee, selected_objects:this.selected_objects, domain:this.current_domain}).render()
}, _renderScheduleStatusIcon:function() {
    var a = this._multiPropertyValue("scheduleStatus");
    return a === void 0 || a === MULTIPLE_VALUES ? "" : ScheduleStatusViews.renderIcon(a, !0)
}, _renderScheduleStatusToggleGroup:function() {
    var a = this, b = a.user.domainUserForDomain(a.current_domain), c = a._multiPropertyValue("scheduleStatus");
    if(c === void 0) {
        return""
    }
    var d = function(d) {
        return A({"class":"status-toggle" + (d === c ? " selected" : ""), onclick:function() {
            a.selected_objects.forEach(function(a) {
                a.setCompleted(!1, b);
                a.setScheduleStatus(d)
            });
            return Node.STOP
        }}, [ScheduleStatusViews.renderIcon(d, !1), SPAN({"class":"status-text"}, [DetailsView._renderHotkeyHintedString(ScheduleStatusViews.toHotkey(d), ScheduleStatusViews.toLabel(d))])])
    };
    return DIV({"class":"status-toggle-group"}, [SPAN({tooltip:"Mark a task for Today, Upcoming, or Later to plan how soon you intend to work on it."}, [d(Task.ScheduleStatus.TODAY), d(Task.ScheduleStatus.UPCOMING), d(Task.ScheduleStatus.OK)])])
}, _render_multi_tags:function(a) {
    var b = this, c = a.section_name === "projects", d = b.potToTasksMultiDict(c), e = b.focusableElementId(a), f = env.isElementIdFocusedR(e);
    return $rval(function() {
        var g = d.keys();
        if(a.collapsable && g.size() === 0 && !$v(f)) {
            return""
        }
        var h = null;
        b.selected_objects.forEach(function(a) {
            a.hasProperty("domain") && (a = a.getV("domain"), h === null && (h = a))
        });
        if(h === null) {
            h = b.current_domain
        }
        var i = b.selected_objects.all(function(a) {
            return a.hasOwnPublicProject()
        }), j = env.realAppSession().showArchivedProjects(), l = "domain_" + h.global_id, m = b.user.domainUserForDomain(h), i = PropertySheetView._generateOnNewItemHandler(h, m, c, i), j = c ? m.projectsModel().allKnownPotsR(j) : m.tagsModel().allKnownPotsR(), o = b._state.filterTextL(), m = $rval(function() {
            return $v(o).length > 0
        }, "PropertySheetView.is_search_active"), n = SearchView.serverComputedItemSection({id:l, mergeWithLocalObjects:SearchView.mergeWithLocalFirst(j), serverSearch:function(a) {
            return b._searchClient().searchPots(h, a, SearchView.NUM_RESULTS + 1, function(a) {
                return c === a.isProject()
            }).map(StateObject.globalId)
        }, is_search_active_r:m, fully_qualified_view_name:b.fully_qualified_view_name + a.section_name, filter_text_r:o, renderFooter:function(a) {
            switch(a) {
                case SearchView.search_status.UNAVAILABLE:
                    return"Search not available.";
                case SearchView.search_status.TOO_FEW_CHARACTERS:
                    return"No enough characters to search.";
                case SearchView.search_status.RESULTS_INCOMPLETE:
                    return AsanaHelpers.renderLoadingIndicator();
                case SearchView.search_status.NO_MATCHES:
                    return"";
                case SearchView.search_status.TOO_MANY_MATCHES:
                    return"";
                case SearchView.search_status.OK:
                    return"";
                default:
                    ufu("Unknown search_status: ", a)
            }
        }, onNewItem:i, min_search_chars:1}), p = [];
        b.selected_objects.forEach(function(a) {
            p.push(a.getX("domain"))
        });
        env.world_store.peekXvaluesAndStateObjectScalars(p, []);
        g = b.createView(TokenizerView, {typeahead_view:b.createView(TypeaheadView, {id:b.id + "_" + a.section_name, renderHighlightedItem:function(a, b) {
            var c = b(a.name());
            a.getV("is_project") && a.getV("is_archived") && (c = [SPAN({"class":"archived-project-name"}, c)]);
            return c
        }, filter_text_l:o, getItemNameX:function(a) {
            return a.getX("name")
        }, candidate_item_sections:[n.section], onSelectItem:b.addPot, focusable_element_id:e, blurSelf:b.blurSelf, new_item_label:"New " + (c ? Vocab.project : "tag"), should_show_new_item_r:$rval(function() {
            return $v(n.search_done_r)
        })}), placeholder:c ? "add to project" : "add tags", remove_text:"Remove " + (c ? "Project" : "Tag"), selected_items_x:g, is_multi:!0, getLabelNodes:function(a) {
            return[a.name()]
        }, onRemoveToken:b.removePot, onTokenClicked:b.onTokenClicked, extraClassesForToken:function(a) {
            var c = d.values(a).size(), e = b.selected_objects.size();
            return(c < e ? "partial" : "") + (a === b.context_pot_or_null ? " selected" : "")
        }}).render();
        g = DIV([g, AsanaForms.renderIconButton({"class":"add-button default-button", inner_span_class:"add"})]);
        return b._renderOneLineProperty(a, g)
    })
}, _submitComment:function() {
    var a = this.selected_objects.first(), b = this.user.domainUserForDomain(this.current_domain), b = a.currentCommentDraftForDomainUserOrNull(b), c = ExperimentalFeature.enabled("email_bridge") && a instanceof EmailTask, d = function() {
        var b = null;
        c && a.storiesR().peek().forEach(function(a) {
            a instanceof EmailCommentStory && (b = a)
        });
        return b
    }();
    if(b) {
        if(c && b.emailToTaskThread()) {
            var e = this._emailsToCc(d, !0), f = env.user().name() + " <" + env.realAppSession().activeDomainUser().email() + ">", g = (new Date(d.getV("__creation_time"))).strftime("On %a, %b %d, %Y at %I:%M %p, ");
            a.addComment({creator_du:this.user.domainUserForDomain(a.domain()), outgoing:!0, subject:d.subject(), to:f, cc:e, message_id:null, from:f, forwarded_for_email:null, text:b.text(), email_text:b.text() + "\n\n\n" + g + d.from() + " wrote:\n" + EmailUtils.quotePlainText(d.emailText(), 1), in_reply_to_message_id:d.messageId(), comment_type:EmailCommentStory})
        }else {
            a.addComment({creator_du:this.user.domainUserForDomain(a.domain()), text:b.text()})
        }
        d = b.text();
        b.setText("");
        b.setEmailToTaskThread(c);
        this.blurSelf();
        b = AsanaHelpers.extractReferencedDomainUsers(d);
        b = b.filter(function(b) {
            return!a.hasFollower(b)
        });
        b.length > 0 && (UserActionContext.get().start(env.world_store.createStateObject(CommentReferencesAddedAsFollower, {creator:this.user, domain_users:b})), b.forEach(function(b) {
            a.addFollowerWithoutStory(b)
        }))
    }
}, _render_single_comments:function(a, b) {
    var c = this;
    return $rval(function() {
        var d = c.user.domainUserForDomain(c.current_domain), e = b.currentCommentDraftForDomainUserOrNull(d), f = ExperimentalFeature.enabled("email_bridge") && b instanceof EmailTask, g = function() {
            var a = null;
            f && b.storiesR().peek().forEach(function(b) {
                b instanceof EmailCommentStory && (a = b)
            });
            return a
        }, d = c.focusableElementId(a), h = c.id + "__new_comment_button", i = env.isElementIdFocusedR(h), j = env.isElementIdFocusedR(d), l = function() {
            return $v(j) || $v(i) || e && e.text().trim() !== ""
        }, d = $rval(function() {
            var a = "property composer";
            ($v(j) || $v(i)) && (a += " focused");
            l() && (a += " draft");
            return a
        }), m = e ? function() {
            var b = c._selectedObject();
            return c.createView(AutogrowHypertextInputView, {view_name:"AutogrowTextareaView.comment_draft", "class":"generic-input showing", data:e.textL(), element_attributes:{id:c.focusableElementId(a), tabindex:0}, domain:b instanceof Domain ? b : b.domain(), onTabEnter:c._submitComment.bind(c)}).render()
        }() : SPAN({id:c.focusableElementId(a), tabindex:0, onfocus:function() {
            var a = env.realAppSession().activeDomainUser();
            CommentDraft.create({parent_object:b, text:"", creator_du:a, email_to_task_thread:f})
        }});
        DIV({"class":"dummy"});
        var o = function() {
            e.setEmailToTaskThread(!e.emailToTaskThread())
        }, n = $rval(function() {
            return e !== null ? AsanaForms.renderCheckbox({tabIndex:-1, id:"property_sheet_view:comment_draft:", data:e.emailToTaskThreadL(), key_map:[{key:KeyMap.Keys.SPACE, handler:o}]}) : ""
        }), p = $rval(function() {
            var a = g();
            return f && l() && e !== null && e.emailToTaskThread() ? DIV({"class":"recipients"}, ["Send email to: ", c._emailsToCc(a, !1)]) : ""
        }), q = function() {
            return SPAN({style:{display:$rval(function() {
                return l() ? "block" : "none"
            })}}, [Flags.enable_show_word_count ? DIV({"class":"instructions", style:"float: right; margin-top: 5px;", title:"Brevity is beautiful."}, [$rval(function() {
                var a = e && e.text() ? (e.text().trim().match(/\s+/g) || []).length + 1 : 0;
                return a === 0 ? "" : a === 1 ? "1 word" : a + " words"
            })]) : "", AsanaForms.renderButton({label:"Comment", onclick:c._submitComment.bind(c), "class":"primary", id:h, tabindex:0}), SPAN({"class":"instructions"}, ["Tip: Press tab then enter to submit"]), f ? SPAN({onclick:c._submitComment.bind(c), "class":"send-email-option"}, [n, "Notify email recipients"]) : ""])
        }, t = DIV({"class":"generic-input comment-placeholder", style:{display:$rval(function() {
            return l() ? "none" : "block "
        })}}, [a.hotkey !== void 0 ? DetailsView._renderHotkeyHintedString(a.hotkey, "Comment") : "Comment"]), w = $rval(function() {
            return l() ? c.createView(PhotoView, {who:env.user(), size:PhotoView.Size.NOTIFICATION_FEED, show_initials:!1, silhouette_class:"comment-icon"}).render() : ""
        }), v = $rval(function() {
            return c.createView(FeedView, {model:b}).render()
        }), r = $rval(function() {
            var a = g();
            a !== null && env.world_store.peekXvaluesAndStateObjectScalarsWithoutDependencies([a.toL(), a.ccL(), a.fromL(), a.subjectL(), a.emailTextL(), a.messageIdL(), a.getX("__creation_time")], []);
            return DIV({"class":"new-comment-button"}, [isUnknown(b.stories()) ? "" : q()])
        });
        return DIV({"class":"activity-feed-and-composer"}, [DIV({"class":"property comments"}, [v, DIV({"class":d, onclick:function() {
            document.getElementById(c.focusableElementId(a)).requestFocus()
        }}, [p, w, DIV({"class":"new-comment-input"}, [DIV({style:{display:$rval(function() {
            return l() ? "block" : "none"
        })}}, [m]), t]), r])])])
    }, "renderSingleComments")
}, _emailsToCc:function(a, b) {
    var c = function(a, c) {
        return c.split(", ").forEach(function(c) {
            c = b ? c : EmailAddress.parse(c).email();
            a.add(c)
        })
    }, d = Set.create();
    c(d, a.to());
    c(d, a.from());
    a.cc() && c(d, a.cc());
    return d.values().join(", ")
}, _render_multi_followers:function(a) {
    var b = this, c = b.followerToTaskMultiDict(), d = function(a) {
        var a = c.values(a).size(), d = b.selected_objects.size();
        return a < d ? "partial" : ""
    }, e = $rval(function() {
        if(b.selected_objects.size() === 1) {
            var a = b.selected_objects.first();
            return a instanceof Pot && !a.isPublic() && !a.domain().hasPremiumPermissions()
        }
        return!1
    });
    return $rval(function() {
        var f = b.selected_objects.size(), g = $v(e), h = b.selected_objects.first().productTypeName(), f = f === 1 ? "This " + h : "These " + h + "s", f = b.createView(TokenizerView, {typeahead_view:b._createUserTypeahead({property_dict:a, onSelectItem:View.publicFunction(b, function(a) {
            $v(b.selected_objects).forEach(function(c) {
                b.addFollower(c, a)
            })
        }), invited_items_text:f, onInvite:function(a) {
            env.datastore_manager.enactChange(AddFollowerNewlyInvitedChange.create({invite:a, tasks:b.selected_objects.toArray(), actor:b.user.domainUserForDomain(b.current_domain)}))
        }, allow_clear:!1}), placeholder:g ? "" : "add followers", is_add_disabled_x:e, remove_text:"Remove Follower", selected_items_x:$rval(function() {
            return computed_lists.sort(c.keys(), function(a) {
                return AsanaHelpers.getShortenedName(a.name())
            })
        }), is_multi:!0, onRemoveToken:function(a) {
            b.selected_objects.forEach(function(c) {
                b.removeFollower(c, a)
            })
        }, getLabelNodes:function(a) {
            return[$rval(function() {
                return AsanaHelpers.getShortenedName(a.name())
            })]
        }, getItemNameX:function(a) {
            return a.name()
        }, onTokenClicked:b.onTokenClicked, extraClassesForToken:d}).render(), g = DIV([f, g ? "" : AsanaForms.renderIconButton({"class":"add-button default-button", inner_span_class:"add"})]);
        return b._renderOneLineProperty(a, g, b._renderFollowButton(a))
    }, "PropertySheetView._render_multi_followers")
}, _createUserTypeahead:attributedValueFunc({property_dict:ATTRIBUTE_REQUIRED, onSelectItem:ATTRIBUTE_REQUIRED, onInvite:ATTRIBUTE_REQUIRED, invited_items_text:ATTRIBUTE_REQUIRED, on_focus_text_x:"", allow_clear:ATTRIBUTE_REQUIRED, onComment:null, selected_tasks:null}, function(a) {
    return this.createView(UserTypeaheadView, {id:this.id + "_" + a.property_dict.property_name, focusable_element_id:this.focusableElementId(a.property_dict), domain:this.current_domain, blurSelf:this.blurSelf, context_pot_or_null:this.context_pot_or_null, onSelectItem:a.onSelectItem, onInvite:a.onInvite, invited_items_text:a.invited_items_text, on_focus_text_x:a.on_focus_text_x, allow_clear:a.allow_clear, onComment:a.onComment, selected_tasks:a.selected_tasks})
}), _renderFollowButton:function(a) {
    var b = this, c = b.user.domainUserForDomain(b.current_domain), d = MultiDict.create(b.selected_objects, function(a) {
        return $rval(function() {
            return a.getV("followers_du").contains(c)
        })
    });
    return $rval(function() {
        var e = d.values(!0), f = d.values(!1), g = $v(e).size(), h = $v(f).size(), i = b.selected_objects.size();
        if(i === 0) {
            return""
        }
        var j, l = g === i;
        l ? (j = "Unfollow", g = i > 1 ? "You are currently following " + g + " of the " + i + " items" : "Unfollow this task to stop receiving " + Vocab.messages_about_activity + ".") : (j = "Follow", g = i === 1 ? "Follow this task if you want to receive " + Vocab.messages_about_activity + "." : "You are currently not following " + h + " of the " + i + " items");
        return AsanaForms.renderToggleButton({label:FRAG([SPAN({"class":"button-icon button-follow"}), " " + j]), onclick:function() {
            j === "Follow" ? $v(f).forEachValue(function(a) {
                a.addFollowerWithoutStory(c)
            }) : $v(e).forEachValue(function(a) {
                a.removeFollower(c)
            });
            return Node.STOP
        }, tooltip:g, "class":"follow-button", pressed:l, id:b.focusableElementId(a) + "follow_button"})
    })
}, _render_single_boolean:function(a, b, c) {
    b = INPUT({data_type:"boolean", data:c});
    return this._renderOneLineProperty(a, b)
}, _renderSingleGeneric:function(a, b, c, d) {
    b = INPUT({id:this.focusableElementId(a), "class":"generic-input", data:c, data_type:d}, []);
    return this._renderOneLineProperty(a, b)
}, _render_single_string:function(a, b, c) {
    return this._renderSingleGeneric(a, b, c, "text")
}, _render_single_integer:function(a, b, c) {
    return this._renderSingleGeneric(a, b, c, "integer")
}, _multiPropertyValue:function(a) {
    return AsanaStateObject.multiPropertyValue(this.selected_objects, a)
}, _searchClient:Memoize.memoizeInThis("_getSearchClient", function() {
    return AsanaSearchClient.create(SearchClient.create(env.user()))
}), _selectedObject:function() {
    return this.selected_objects.first()
}});
__FILE__ = "luna/common/router.js";
defineNamespace("Api");
Router = AsanaObject.subclass("Router", {_match:function(a, b) {
    b.length > 1 && b.endsWith("/") && (b = b.substr(0, b.length - 1));
    var c = a.split("/"), d = b.split("/");
    if(c.length !== d.length) {
        return null
    }
    for(var e = {}, f = 0;f < c.length;++f) {
        var g = c[f], h = d[f];
        if(g === "") {
            if(h !== "") {
                return null
            }
        }else {
            if(g.startsWith(":")) {
                g = g.substr(1), e[g] = h
            }else {
                if(g !== h) {
                    return null
                }
            }
        }
    }
    return e
}, _pluralize:function(a, b) {
    return b ? b : a + "s"
}}, {route_class:ATTRIBUTE_REQUIRED, _routes:SET_IN_CONSTRUCTOR, constructor:function() {
    Router.superproto.constructor.call(this);
    this._routes = []
}, addRoute:attributedFunc({method:ATTRIBUTE_OPTIONAL, pattern:ATTRIBUTE_REQUIRED, target:ATTRIBUTE_REQUIRED}, function(a) {
    this._routes.push(a)
}), routes:function() {
    return this._routes.sort(function(a, b) {
        var c = compare(a.pattern, b.pattern), d = compare(a.method, b.method);
        return c !== 0 ? c : d
    })
}, route:attributedFunc({method:ATTRIBUTE_REQUIRED, request_path:ATTRIBUTE_REQUIRED}, function(a) {
    var b = a.method.toLowerCase(), c = null;
    this._routes.find(function(d) {
        if(d.method === b) {
            var e = Router._match(d.pattern, a.request_path);
            if(e !== null) {
                return c = Router.Route.create({target:d.target, params:e, method:d.method, pattern:d.pattern}), !0
            }
        }else {
            return!1
        }
    });
    return c
})});
Router.Route = AsanaObject.subclass("Router.Route", {}, {params:ATTRIBUTE_REQUIRED, method:ATTRIBUTE_REQUIRED, pattern:ATTRIBUTE_REQUIRED, target:ATTRIBUTE_REQUIRED, constructor:attributedConstructorAfterSuper(AsanaObject, function() {
})});
__FILE__ = "apps/asana/view/billing/billing_view.js";
BillingView = View.subclass("BillingView", {}, {billing_dialog:ATTRIBUTE_REQUIRED});
__FILE__ = "apps/asana/view/billing/billing_dialog_view.js";
BillingDialogView = DialogView2.subclass("BillingDialogView", {State:DialogState.subclass("BillingDialogView.State", {property_descs:{active_billing_flow:{type:String}}}, {}), _IS_SINGLETON_DIALOG:!0, showBillingFlow:function(a) {
    BillingDialogView.show({active_billing_flow:a})
}}, {dialog_name:"billing_dialog_view", _render:function() {
    var a = this, b = a._state.activeBillingFlow(), c = BillingRouter.route({method:"GET", request_path:b});
    assert(c);
    b = function() {
        return Node.JUST_DEFAULT
    };
    return DIV({"class":"fullscreen-dialog dialog-page auto-fill-height-0", key_map:[{key:KeyMap.Keys.TAB, handler:b}, {key:KeyMap.Keys.TAB, up:!0, handler:b}]}, [DIV({"class":"bg-pattern"}), DIV({"class":"formpage-header"}, [DIV({"class":"formpage-spacer"}), A({onclick:function() {
        a.hide()
    }}, [IMG({"class":"large-logo", src:"/-/static/apps/asana/view/large_logo.png"})])]), DIV({"class":"sidebars"}, [DIV({"class":"dialog-container clearfix", id:"dialog-container"}, [DIV({id:"billing_page"}, [a._loadingBoundaryDiv(function() {
        return c.target.render(a, c.params)
    }), DIV({"class":"trailer"}, [DIV({"class":"formpage-footer", onclick:function() {
        a.hide()
    }}, [A({"class":"footer-link"}, ["\u00ab Return to Asana"])])])])])])])
}, setActiveBillingFlow:View.publicMethod(function(a) {
    this._state.setActiveBillingFlow(a)
}), _loadingBoundaryDiv:function(a) {
    return AsanaHelpers.renderWithinLoadingBoundary("DIV", [valueOrUnknown(function() {
        return a()
    })])
}});
__FILE__ = "apps/asana/view/billing/billing_view_helpers.js";
BillingViewHelpers = {renderPremiumFeatureList:function() {
    return UL({"class":"feature-list"}, [LI({"class":"feature"}, [SPAN({"class":"feature-icon permissions"}), SPAN({"class":"feature-title"}, ["Project-level Permissions"]), SPAN({"class":"feature-desc clearfix"}, ["Share private projects with a small group within your workspace."])]), LI({"class":"feature"}, [SPAN({"class":"feature-icon support"}), SPAN({"class":"feature-title"}, ["Priority Support"]), SPAN({"class":"feature-desc clearfix"}, ["As a Premium Workspace, you'll get greater access to support."])]),
        LI({"class":"feature"}, [SPAN({"class":"feature-icon upgrades"}), SPAN({"class":"feature-title"}, ["Automatic Upgrades"]), SPAN({"class":"feature-desc clearfix"}, ["When Premium Features are added, you'll be upgraded for no extra fee."])]), LI({"class":"feature"}, [SPAN({"class":"feature-icon more-members"}), SPAN({"class":"feature-title"}, ["Upgrade to Add More Members at Anytime"]), SPAN({"class":"feature-desc clearfix"}, ["Grow your workspace with your team, just simply add more members."])])])
}, loadRecurlyJsResources:function(a) {
    DynamicLoader.get().load({url:"/-/static/3rdparty/recurly-js/jquery-1.7.1-asana.js", callback:function() {
        DynamicLoader.get().load({url:"/-/static/3rdparty/recurly-js/recurly.js", callback:function() {
            safeTimeout(function() {
                processHandler(function() {
                    a.requestSet(!0)
                })
            }, 0)
        }})
    }})
}, recurlySignatureProperty:function(a, b) {
    var c = serverComputedProperty("unfrozen_" + a, function() {
        return AsanaRecurly.sign(b.call(this))
    });
    return computedProperty("frozen_" + a, function() {
        var a = this, b = $rval(function() {
            return c.call(a)
        });
        b.watchScalar(noop);
        return $rval(function() {
            var f = b.peekAllowingUnknownWithoutDependencies();
            return isKnown(f) ? f : c.call(a)
        })._setAsExemptFromPeekConsistencyChecks()
    })
}, renderRecurlyJsForm:function(a, b) {
    Recurly.config({subdomain:Flags.recurly_subdomain, currency:"USD", country:"US"});
    safeTimeout(function() {
        b(a)
    }, 0);
    return DIV({id:a}, [])
}, wrappedCheckSubscriptionSuccessHandler:function(a, b, c) {
    var d = this;
    return host.wrapInExceptionHandler({"BillingSignupView.wrappedHandler":"success"}, ExceptionHandler.ReentryStrategy.DELAY, function() {
        d._checkSubscriptionSuccessHandler(a, b, c)
    })
}, _checkSubscriptionSuccessHandler:function(a, b, c) {
    processHandler(function() {
        b.requestSet(!0);
        env.datastore_manager.enactChange(EnqueueCheckSubscriptionRemoteJobChange.create({domain:a, run_immediatly:!1}))
    });
    processHandler(function() {
        env.datastore_manager.enactChange(EnqueueCheckSubscriptionRemoteJobChange.create({domain:a, run_immediatly:!0}));
        c && c()
    })
}};
__FILE__ = "apps/asana/view/billing/billing_routes.js";
BillingRoutes = {addRoutes:function(a) {
    a.addRoute({method:"get", pattern:"/billing/workspace/:domain_id/plans", target:{render:function(a, c) {
        return BillingRoutes._renderBillingView(a, BillingPlansView, {domain:BillingRoutes._pullDomain(c)})
    }}});
    a.addRoute({method:"get", pattern:"/billing/workspace/:domain_id/signup/:plan_code", target:{render:function(a, c) {
        return BillingRoutes._renderBillingView(a, BillingSignupView, {plan_code:c.plan_code, domain:BillingRoutes._pullDomain(c)})
    }}});
    a.addRoute({method:"get", pattern:"/billing/workspace/:domain_id/change_plan/:plan_code", target:{render:function(a, c) {
        return BillingRoutes._renderBillingView(a, BillingConfirmPlanChangeView, {plan_code:c.plan_code === "free" ? null : c.plan_code, domain:BillingRoutes._pullDomain(c)})
    }}});
    a.addRoute({method:"get", pattern:"/billing/workspace/:domain_id/billing_info_update", target:{render:function(a, c) {
        return BillingRoutes._renderBillingView(a, BillingUpdateAccountView, {domain:BillingRoutes._pullDomain(c)})
    }}});
    a.addRoute({method:"get", pattern:"/billing/design_sandbox/:filename", target:{render:function(a, c) {
        return a.createView(BillingDesignSandboxView, {filename:c.filename}).render()
    }}})
}, urlForBillingSignup:function(a, b) {
    return"/billing/workspace/" + a + "/signup/" + b
}, urlForBillingPlans:function(a) {
    return"/billing/workspace/" + a + "/plans"
}, urlForBillingConfirmPlanChange:function(a, b) {
    return"/billing/workspace/" + a + "/change_plan/" + (b || "free")
}, urlForBillingInfoUpdate:function(a) {
    return"/billing/workspace/" + a + "/billing_info_update"
}, urlForDesignSandbox:function(a) {
    return"/billing/design_sandbox/" + a
}, _pullDomain:function(a) {
    a = env.datastoreObject(parseInt(a.domain_id, 10));
    assertInstanceof(a, Domain);
    return a
}, _renderBillingView:function(a, b, c) {
    return a.createView(b, update({billing_dialog:a}, c)).render()
}};
BillingRouter = Router.create();
BillingRoutes.addRoutes(BillingRouter);
__FILE__ = "apps/asana/view/billing/billing_signup_view.js";
BillingSignupView = BillingView.subclass("BillingSignupView", {State:SessionObject2.subclass("BillingSignupView.State", {property_descs:{recurly_ready:{type:Boolean, default_value:!1}, successfully_purchased:{type:Boolean, default_value:!1}}}, {})}, {plan_code:ATTRIBUTE_REQUIRED, domain:ATTRIBUTE_REQUIRED, _planSignature:BillingViewHelpers.recurlySignatureProperty("plan_signature", function() {
    return{subscription:{plan_code:this.plan_code}}
}), _render:function() {
    return DIV({id:"billing_signup_page"}, [DIV({"class":"formpage-content"}, [this._state.successfullyPurchased() ? this._renderSuccess() : this._renderSubscriptionForm()])])
}, _renderSuccess:function() {
    var a = this;
    this.domain.premiumPlanName() && (env.is_server || reactiveTimeout(function() {
        processHandler(function() {
            AsanaHelpers.startGenericUserAction({message:"The " + a.domain.name() + " workspace was upgraded to premium successfully!"});
            a.billing_dialog.hide()
        })
    }));
    return DIV({"class":"provisioning-message"}, ["Upgrading your workspace...", AsanaHelpers.renderLoadingIndicator()])
}, _renderSubscriptionForm:function() {
    var a = this;
    if(env.is_server) {
        return a.domain.billingAccountCode(), a._planSignature(), a._state.successfullyPurchased(), ""
    }
    BillingViewHelpers.loadRecurlyJsResources(a._state.getX("recurly_ready"));
    return $rval(function() {
        var b = a._planSignature(), c = a.domain.billingAccountCode();
        return a._state.recurlyReady() ? FRAG([P({"class":"pre-title"}, ["Enter your payment information to upgrade ", SPAN({"class":"workspace-name"}, [a.domain.nameL()]), "."]), BillingViewHelpers.renderRecurlyJsForm("recurly-subscribe", function(d) {
            Recurly.buildSubscriptionForm(a._prepopulateBillingData({target:"#" + d, signature:b, successHandler:BillingViewHelpers.wrappedCheckSubscriptionSuccessHandler(a.domain, a._state.getX("successfully_purchased")), planCode:a.plan_code, accountCode:c, accountUsername:env.user().global_id, distinguishContactFromBillingInfo:!0, collectCompany:!0, collectPhone:!0, enableAddOns:!1, enableCoupons:!1, addressRequirement:"zip", termsOfServiceURL:"http://www.asana.com/terms", account:{firstName:"", lastName:"",
                email:env.user().email(), phone:"", companyName:""}, billingInfo:{firstName:"", lastName:"", address1:"", address2:"", city:"", zip:"", state:"", country:"", cardNumber:"", CVV:""}}))
        })]) : AsanaHelpers.renderLoadingIndicator()
    })
}, _prepopulateBillingData:function(a) {
    Flags.prepopulate_billing_data && (update(a.account, {firstName:"Joe", lastName:"User", email:"billing-test@asana.com", phone:"415 321 4321", companyName:"ABC Corp."}), update(a.billingInfo, {firstName:"Joe", lastName:"User", address1:"123 somestreet", address2:"45", city:"San Francisco", zip:"94107", state:"CA", country:"US", cardNumber:"4111-1111-1111-1111", CVV:"123"}));
    return a
}});
define("EnqueueCheckSubscriptionRemoteJobChange", Change.subclass("EnqueueCheckSubscriptionRemoteJobChange", {}, {domain:ATTRIBUTE_REQUIRED, run_immediatly:ATTRIBUTE_REQUIRED, enact:function() {
    env.is_server && (this.run_immediatly ? CheckSubscriptionRemoteJob.syncDomainSubscription(this.domain) : env.remote_job_store.addJob(CheckSubscriptionRemoteJob.create({domain_id:this.domain.global_id})))
}, taintedObjectIds:function() {
    return[this.domain.global_id]
}}));
__FILE__ = "apps/asana/view/billing/billing_plans_view.js";
BillingPlansView = BillingView.subclass("BillingPlansView", {}, {domain:ATTRIBUTE_REQUIRED, _recommended_plan:null, _current_plan:null, constructor:function(a) {
    BillingPlansView.superproto.constructor.call(this, a);
    this._current_plan = this.domain.billingPlan();
    this._recommended_plan = BillingPlanRegistry.recommendedPlan(this._current_plan)
}, _render:function() {
    return DIV({id:"plan_page"}, [DIV({"class":"formpage-content"}, [DIV({"class":"title"}, [this._current_plan.isFree() ? "UPGRADE TO A PREMIUM WORKSPACE" : "CHOOSE YOUR NEW PLAN"]), UL({"class":"feature-list"}, [LI({"class":"feature"}, [SPAN({"class":"feature-icon permissions"}), SPAN({"class":"feature-title"}, ["Project-level Permissions"]), SPAN({"class":"feature-desc clearfix"}, ["Share private projects with a small group within your workspace."])]), LI({"class":"feature"}, [SPAN({"class":"feature-icon support"}),
        SPAN({"class":"feature-title"}, ["Priority Support"]), SPAN({"class":"feature-desc clearfix"}, ["As a Premium Workspace, you'll get greater access to support."])]), LI({"class":"feature"}, [SPAN({"class":"feature-icon upgrades"}), SPAN({"class":"feature-title"}, ["Automatic Upgrades"]), SPAN({"class":"feature-desc clearfix"}, ["When Premium Features are added, you'll be upgraded for no extra fee."])]), LI({"class":"feature"}, [SPAN({"class":"feature-icon more-members"}), SPAN({"class":"feature-title"},
        ["Upgrade to Add More Members at Anytime"]), SPAN({"class":"feature-desc clearfix"}, ["Grow your workspace with your team, just simply add more members."])])])]), DIV({"class":"underneath", id:"plans"}, [DIV({"class":"workspace-state"}, [this.domain.name(), " currently has ", this.domain.numMembersCountingAgainstUserLimit(), " members"]), this._renderPlans("Standard Plan", BillingPlanRegistry.promotedFreePlans()), this._renderPlans("Plans with premium features", BillingPlanRegistry.promotedPremiumPlans()),
        DIV({"class":"plan large-plan"}, ["Do you need space for", SPAN({"class":"num"}, ["more than 100"]), "members? ", A({href:"http://www.asana.com/sales", "class":"dark-link"}, ["Contact Us"]), " for pricing."])])])
}, _renderAction:attributedFunc({plan:ATTRIBUTE_REQUIRED, recommended:!1}, function(a) {
    var b = this, c = a.plan, d = b._current_plan, e = c === d, f = "", g = null, f = a.recommended ? "primary" : e ? "current" : "dark-button", a = null;
    e ? d = "Current Plan" : d.isFree() ? (a = function() {
        b.billing_dialog.setActiveBillingFlow(BillingRoutes.urlForBillingSignup(b.domain.global_id, c.code))
    }, d = "Purchase") : (a = function() {
        b.billing_dialog.setActiveBillingFlow(BillingRoutes.urlForBillingConfirmPlanChange(b.domain.global_id, c.code))
    }, c.order > d.order ? d = "Upgrade" : (d = "Downgrade", b.domain.canDowngradeToPlan(c) || (f += " disabled", g = "Your workspaces has too many members to downgrade to this plan.", a = null)));
    assert(d);
    return DIV({"class":"action billing-" + (c.code || "free"), tooltip:g, onclick:a}, [DIV({"class":"button default_button " + f}, [SPAN({"class":"button-text"}, [d])])])
}), _renderPlans:function(a, b) {
    var c = this;
    c.domain.billingPlan();
    return FRAG([DIV({"class":"plan-header"}, [a]), UL({"class":"plan-list"}, b.map(function(a) {
        var b = c._recommended_plan === a;
        return LI({"class":"plan" + (b ? " suggested" : "")}, [DIV({"class":"price"}, [SPAN({"class":"dollars"}, [a.isFree() ? "Free" : "$" + a.monthly_price]), a.isFree() ? "" : "per month"]), DIV({"class":"wksp-size"}, ["Up to", SPAN({"class":"num"}, [a.user_limit]), "members"]), c._renderAction({plan:a, recommended:b})])
    }))])
}});
__FILE__ = "apps/asana/view/billing/billing_confirm_plan_change_view.js";
BillingConfirmPlanChangeView = BillingView.subclass("BillingConfirmPlanChangeView", {State:SessionObject2.subclass("BillingConfirmPlanChangeView.State", {property_descs:{processing_request:{type:Boolean, default_value:!1}, old_plan_code:{type:String}}}, {})}, {plan_code:ATTRIBUTE_REQUIRED, domain:ATTRIBUTE_REQUIRED, _render:function() {
    return DIV({id:"billing_change_plan_page"}, [DIV({"class":"formpage-content"}, [this._state.processingRequest() ? this._renderProcessingMessage() : this._renderConfirmMessage()])])
}, _renderProcessingMessage:function() {
    var a = this;
    this.domain.billingPlan() === a._plan() && (env.is_server || reactiveTimeout(function() {
        processHandler(function() {
            var b = BillingPlanRegistry.planByCode(a._state.oldPlanCode()), c = a.domain.billingPlan();
            AsanaHelpers.startGenericUserAction({message:"Workspace " + a.domain.name() + " " + (b.order < c.order ? "upgraded" : "downgraded") + " successfully."});
            a.billing_dialog.hide()
        })
    }));
    return DIV({"class":"provisioning-message"}, [this._isUpgrade() ? "Upgrading Workspace..." : "Downgrading Workspace...", AsanaHelpers.renderLoadingIndicator()])
}, _renderConfirmMessage:function() {
    var a = this;
    return FRAG([DIV({"class":"recurly"}, [DIV({"class":"plan " + (a._plan().code || "free")}, [DIV({"class":"name"}, [a._renderTitle()]), DIV({"class":"recurring_cost"}, a._plan().isFree() ? [DIV({"class":"cost"}, ["Free"])] : [DIV({"class":"cost"}, ["$" + a._plan().monthly_price + ".00"]), DIV({"class":"interval"}, ["per month"])])])]), DIV({"class":"content"}, [a._renderConfirmationMessage(), DIV({"class":"form-view"}, [DIV({"class":"header"}, ["Confirm Your Plan "]), TABLE([TR([TD({"class":"field-name"},
        ["Workspace"]), TD({"class":"field-value value"}, [a.domain.nameL()])]), TR([TD({"class":"field-name"}, ["Billing Info"]), TD({"class":"field-value"}, [SPAN({"class":"value"}, [a.domain.paymentCardType()]), " ending in ", SPAN({"class":"value"}, [a.domain.paymentCardLastDigits(), A({"class":"billing-action", onclick:function() {
        a.billing_dialog.setActiveBillingFlow(BillingRoutes.urlForBillingInfoUpdate(a.domain.global_id))
    }}, ["Change Billing Info"])])])])])])]), DIV({"class":"footer-buttons-left"}, [AsanaForms.renderButton({label:a._buttonLabel(), onclick:function() {
        a._state.setOldPlanCode(a.domain.billingPlan().code);
        env.datastore_manager.enactChange(EnqueueUpdateSubscriptionRemoteJobChange.create({domain:a.domain, new_plan_code:a._plan().code, run_immediatly:!0}));
        a._state.setProcessingRequest(!0)
    }, "class":"primary billing-confirm", tabindex:0}), AsanaForms.renderButton({label:"Cancel", "class":"billing-cancel", onclick:function() {
        a.billing_dialog.setActiveBillingFlow(BillingRoutes.urlForBillingPlans(a.domain.global_id))
    }})])])
}, _buttonLabel:function() {
    return this._isUpgrade() ? "Upgrade Workspace" : "Downgrade Workspace"
}, _isUpgrade:function() {
    return this._plan().order > this.domain.billingPlan().order
}, _renderConfirmationMessage:function() {
    return this._isUpgrade() ? "By upgrading, you'll be charged a prorated amount for the current billing period, and $" + this._plan().monthly_price + "/month starting on your next bill." : "Are you sure you want to downgrade this workspace to the " + this._plan().name() + "?"
}, _renderTitle:function() {
    return this._plan().name()
}, _plan:function() {
    return BillingPlanRegistry.planByCode(this.plan_code)
}});
define("EnqueueUpdateSubscriptionRemoteJobChange", Change.subclass("EnqueueUpdateSubscriptionRemoteJobChange", {}, {domain:ATTRIBUTE_REQUIRED, new_plan_code:ATTRIBUTE_REQUIRED, run_immediatly:ATTRIBUTE_REQUIRED, enact:function() {
    if(env.is_server) {
        var a = this.domain.billingOwner();
        a === null && ufu("User attempted to update a subscription in a workspace without a billing owner.", env.user());
        env.user() !== a.user() && ufu("Only the billing owner can update the domain subscription");
        this.run_immediatly ? UpdateSubscriptionRemoteJob.updateDomainSubscription(this.domain, this.new_plan_code) : env.remote_job_store.addJob(UpdateSubscriptionRemoteJob.create({domain_id:this.domain.global_id, new_plan_code:this.new_plan_code}))
    }
}, taintedObjectIds:function() {
    return[this.domain.global_id]
}}));
__FILE__ = "apps/asana/view/billing/billing_update_account_view.js";
BillingUpdateAccountView = BillingView.subclass("BillingUpdateAccountView", {State:SessionObject2.subclass("BillingUpdateAccountView.State", {property_descs:{recurly_ready:{type:Boolean, default_value:!1}, is_checking_update:{type:Boolean, default_value:!1}, update_successful:{type:Boolean, default_value:!1}}}, {})}, {domain:ATTRIBUTE_REQUIRED, _render:function() {
    return DIV({id:"billing_update_account_page"}, [DIV({"class":"formpage-content"}, [this._state.isCheckingUpdate() ? this._renderProgress() : FRAG([DIV({"class":"title"}, ["Update Billing Information"]), this._renderUpdateAccountForm()])])])
}, _renderProgress:function() {
    var a = this;
    this._state.updateSuccessful() && (env.is_server || reactiveTimeout(function() {
        processHandler(function() {
            AsanaHelpers.startGenericUserAction({message:"Billing information updated successfully"});
            a.billing_dialog.hide()
        })
    }));
    return DIV({"class":"provisioning-message"}, ["Updating billing information...", AsanaHelpers.renderLoadingIndicator()])
}, _recurlySignature:BillingViewHelpers.recurlySignatureProperty("recurly_signature", function() {
    return{account:{account_code:this.domain.billingAccountCode()}}
}), _renderUpdateAccountForm:function() {
    var a = this;
    if(env.is_server) {
        return a._recurlySignature(), a.domain.billingAccountCode(), ""
    }
    BillingViewHelpers.loadRecurlyJsResources(a._state.getX("recurly_ready"));
    return $rval(function() {
        var b = a._recurlySignature(), c = a.domain.billingAccountCode();
        return a._state.recurlyReady() ? BillingViewHelpers.renderRecurlyJsForm("recurly-update-billing", function(d) {
            Recurly.buildBillingInfoUpdateForm(a._prepopulateBillingData({target:"#" + d, signature:b, accountCode:c, addressRequirement:"zip", successHandler:BillingViewHelpers.wrappedCheckSubscriptionSuccessHandler(a.domain, a._state.getX("is_checking_update"), function() {
                env.datastore_manager.enactChange(BillingUpdateAccountCompleteChange.create({view_name:a.fully_qualified_view_name}))
            }), billingInfo:{firstName:"", lastName:"", address1:"", address2:"", city:"", zip:"", state:"", country:"", cardNumber:"", CVV:""}}))
        }) : AsanaHelpers.renderLoadingIndicator()
    })
}, _prepopulateBillingData:function(a) {
    Flags.prepopulate_billing_data && update(a.billingInfo, {firstName:"Joe", lastName:"User", address1:"123 somestreet", address2:"45", city:"San Francisco", zip:"94107", state:"CA", country:"US", cardNumber:"4111-1111-1111-1111", CVV:"123"});
    return a
}});
define("BillingUpdateAccountCompleteChange", Change.subclass("BillingUpdateAccountCompleteChange", {}, {view_name:ATTRIBUTE_REQUIRED, enact:function() {
    env.is_server && env.session_store.sessionObject2(BillingUpdateAccountView.State, this.view_name).setUpdateSuccessful(!0)
}, taintedObjectIds:function() {
    return[]
}}));
__FILE__ = "apps/asana/view/billing/billing_design_sandbox_view.js";
BillingDesignSandboxView = View.subclass("BillingDesignSandboxView", {}, {filename:ATTRIBUTE_REQUIRED, _designHtml:serverComputedProperty("html", function() {
    host.getEnvVar("CONFIG") === "sand" || ufu("Attempt to load BillingDesignSandboxView in non sand config");
    return host.file_system.read(host.getEnvVar("CODEZ") + "/apps/asana/design_sandbox/billing/" + this.filename + ".html")
}), _render:function() {
    var a = DIV();
    a.innerHTML = this._designHtml();
    return a
}});
DesignSandboxView = View.subclass("DesignSandboxView", {}, {filename_l:ATTRIBUTE_REQUIRED, _designHtml:serverComputedProperty("html", function() {
    host.getEnvVar("CONFIG") === "sand" || ufu("Attempt to load BillingDesignSandboxView in non sand config");
    return host.file_system.read(host.getEnvVar("CODEZ") + "/apps/asana/design_sandbox/" + $v(this.filename_l) + ".html")
}), _render:function() {
    var a = DIV();
    a.innerHTML = this._designHtml();
    return DIV({"class":"design-sandbox-div"}, [a])
}});
__FILE__ = "apps/asana/view/billing/premium_welcome_dialog_view.js";
PremiumWelcomeDialogView = DialogView2.subclass("PremiumWelcomeDialogView", {State:DialogState.subclass("PremiumWelcomeDialogView.State", {property_descs:{domain:{type:Domain}}}, {})}, {dialog_name:"welcome_premium_workspace_dialog_view", _render:function() {
    var a = this._state.domain().billingOwner();
    return this.createView(DialogView, {element_id:this.dialog_name, flush_body_style:!1, extra_class:"premium-welcome-dialog", title_x:this._state.domain().name() + " is now a premium workspace!", banner_x:(a.user() === env.user() ? "You" : a.name()) + " upgraded this workspace to Premium. New features include:", body_x:DIV([BillingViewHelpers.renderPremiumFeatureList()])}).render()
}});
PremiumWelcomeDialogView.debugShow = function() {
    srun(function() {
        PremiumWelcomeDialogView.show({domain:env.user().defaultDomain()})
    })
};
__FILE__ = "apps/asana/view/billing_views.js";
__FILE__ = "apps/asana/tour.js";
Tour = {STEP_AFTER_CREATING_PROJECT:"NAME_YOUR_PROJECT", STEP_AFTER_OPENING_DETAILS:"TRY_ASSIGNING", onPotCreated:function() {
    var a = env.userOrNull();
    a !== null && a.tourStep() === "LETS_CREATE_FIRST_PROJECT" && a.setTourStep(Tour.STEP_AFTER_CREATING_PROJECT)
}, start:function(a) {
    env.realAppSession().closeDetailsPane();
    a.setTourStep("LETS_CREATE_FIRST_PROJECT")
}, _openDetailsElement:function() {
    return Node.findMatching("//*[@id='center_pane__contents']//*[" + XpathUtils.hasClassExpression("grid-row-selected") + "]//*[" + XpathUtils.hasClassExpression("button") + "]")
}, stepByName:function(a) {
    var b = env.realAppSession();
    switch(a) {
        case "LETS_CREATE_FIRST_PROJECT":
            return Tour.Step.create({position:TourDialogView.TourBoxView.BOTTOM, preface:FRAG([DIV({"class":"tour-box-header"}, ["Welcome! Take a tour of Asana"])]), body:FRAG([DIV({"class":"tour-illustration arrow"}), P(["Let's start by creating your first project."])]), next:Tour.STEP_AFTER_CREATING_PROJECT, onNextFunc:function() {
                var a = b.activeDomainUser(), d = a.domain(), e = null;
                d.allowProjectsWithNullTeam() || (e = d.onlyTeam());
                return function() {
                    var f = Pot.create({name:"New " + Vocab.Project, creator_du:a, domain:d, team:e, is_project:!0});
                    d.getX("lists").requestInsertBefore(f, null);
                    b.setCurrentList(f);
                    env.setSelectionForFocusedElement(-1, -1)
                }
            }, tooltip_x:$rval(function() {
                if(env.app_interfaces.get(IDropdownStack).anyOpen()) {
                    return null
                }
                return{placement:TooltipView.RIGHT_OF, relative_to:document.getElementById("add_project_button"), contents:function() {
                    return DIV({}, [DIV({"class":"tooltip-icon"}, []), DIV({"class":"tooltip-text"}, ["Create a project"])])
                }}
            })});
        case "NAME_YOUR_PROJECT":
            return Tour.Step.create({position:TourDialogView.TourBoxView.MIDDLE, title:FRAG([DIV(["What's the most important Project you're working on,"]), DIV(["or about to start?"])]), body:DIV(["A ", STRONG(["Project"]), " is an ordered list of Tasks that you and your team will accomplish to reach your goal.", DIV({"class":"tour-illustration project"}), UL([LI(["In software, a ", STRONG(["big upcoming feature"]), " might be a Project."]), LI(["In real estate, a ", STRONG(["client"]), " might be a Project."]),
                LI(["For community groups, a ", STRONG(["program"]), " might be a Project."])])]), next:"ADD_SOME_TASKS", tooltip_x:{placement:TooltipView.RIGHT_OF, relative_to:document.getElementById("project_title"), contents:function() {
                return DIV({}, [DIV({"class":"tooltip-icon"}, []), DIV({"class":"tooltip-text"}, ["Type the name of your Project"])])
            }}});
        case "ADD_SOME_TASKS":
            return Tour.Step.create({title:"Add a few Tasks", body:FRAG([P(["Break the project down into small steps.  What are the individual actions that someone must do to accomplish this Project's goal?"]), DIV({"class":"tour-illustration task"}), P(["Each line is a Task. Just start typing, and press Enter to create the next Task. If you already have a to-do list, copy and paste it here."]), P([I(["Examples: "]), ' "Send out invitations", "Investigate error message"'])]), next:"OPEN_DETAILS", is_next_enabled_x:$rval(function() {
                return!Tour._visibleGridItems().isEmpty()
            }), tooltip_x:$rval(function() {
                if(Tour._visibleGridItems().size() > 1) {
                    return null
                }
                if(env.is_server) {
                    return null
                }
                return{placement:$v(b.detailsFullyOpen()) ? TooltipView.RIGHT_OF : TooltipView.LEFT_OF, relative_to:Node.allMatching("//*[@id='center_pane__contents']//tr")[0], contents:function() {
                    return DIV({}, [DIV({"class":"tooltip-icon"}, []), DIV({"class":"tooltip-text"}, ["Start adding Tasks"])])
                }}
            })});
        case "OPEN_DETAILS":
            if(!$v(b.deferredDetailsVisible(350))) {
                return Tour.Step.create({preface:DIV({"class":"tour-illustration details"}), title:"Add details about a Task", body:P(["In the Detail Pane, you can add notes, set a due date, assign to a teammate, and have a conversation about the Task."]), next:Tour.STEP_AFTER_OPENING_DETAILS, onNextFunc:function() {
                    return function() {
                        b.openDetailsPane()
                    }
                }, tooltip_x:$rval(function() {
                    var a = b.currentSelectionState().deferredItemsForDetailPane();
                    if(env.is_server || b.detailsVisible() || a.size() === 0 || !(a.first() instanceof Task) || b.tooltipElementId()) {
                        return null
                    }
                    return{placement:TooltipView.LEFT_OF, relative_to:Tour._openDetailsElement(), contents:function() {
                        return DIV({}, [DIV({"class":"tooltip-icon"}, []), DIV({"class":"tooltip-text"}, ["Open the Detail Pane from here, or just press Tab"])])
                    }}
                })})
            }
            ;
        case "TRY_ASSIGNING":
            return Tour.Step.create({title:"Assign a Task to yourself", body:FRAG([DIV({"class":"tour-illustration assign"}), P(['Click "assign to teammate" and type your name.  Or hold down Tab and press A as a shortcut.'])]), next:"YOUR_TASK_LIST", tooltip_x:$rval(function() {
                if(env.is_server || !b.detailsVisible() || !$v(b.deferredDetailsVisible(350))) {
                    return null
                }
                return{placement:TooltipView.LEFT_OF, relative_to:document.getElementById(PropertySheetView.propertyNameElementId(DetailsView.PROPERTY_SHEET_NAME, "assigned_to")), contents:function() {
                    return DIV({}, [DIV({"class":"tooltip-icon"}, []), DIV({"class":"tooltip-text"}, ["Assign a Task by clicking here"])])
                }}
            }), onNextFunc:function() {
                return function() {
                    b.closeDetailsPane()
                }
            }});
        case "YOUR_TASK_LIST":
            return Tour.Step.create({title:'"My Tasks" shows all Tasks assigned to you in one place', body:FRAG([DIV({"class":"tour-illustration atm"}), P(["Organize your Tasks based on when you plan to do them."]), P(["See your tasks across all projects, and create new Tasks for yourself that aren't in any project."])]), tooltip_x:$rval(function() {
                if(env.is_server) {
                    return null
                }
                if(b.currentList().isUsersATM(env.user())) {
                    return null
                }
                var a = Node.findMatching("//*[@id='navigation_dock']//*[" + XpathUtils.hasClassExpression("active-domain-atm") + "]//*[" + XpathUtils.hasClassExpression("atm-name") + "]");
                return{placement:TooltipView.RIGHT_OF, relative_to:a, contents:function() {
                    return DIV({}, [DIV({"class":"tooltip-icon"}, []), DIV({"class":"tooltip-text"}, ["See all your Tasks in this Workspace"])])
                }}
            }), next:"FINI", onNextFunc:function() {
                return function() {
                    b.closeDetailsPane()
                }
            }});
        case "SCHEDULE_STATUS":
            return Tour.Step.create({title:"To keep yourself organized, you can mark tasks for Today, Upcoming or Later.", body:DIV(["So you can stay focused on the tasks you plan to do soon, and hide tasks that aren't as important."]), next:"FINI"});
        case "FINI":
            return Tour.Step.create({title:"That's it!", body:FRAG([DIV({"class":"tour-illustration go"}), P(["You can find help and support at any time in the Help Bar below."]), P(["Be sure to explore the videos for additional tutorials."])]), next:null, tooltip_x:{placement:TooltipView.LEFT_OF, relative_to:document.getElementById("help_menu"), contents:function() {
                return DIV({}, [DIV({"class":"tooltip-icon"}, []), DIV({"class":"tooltip-text"}, ["Get more help"])])
            }}});
        default:
            return null
    }
}, Step:AsanaObject.subclass("Tour.Step", {}, {position:ATTRIBUTE_OPTIONAL, preface:"", title:"", body:"", next:null, is_next_enabled_x:!0, onNextFunc:function() {
    return noop
}, tooltip_x:null, constructor:function(a) {
    Tour.Step.superproto.constructor.call(this);
    if(a.position === void 0) {
        a.position = TourDialogView.TourBoxView.BOTTOM
    }
    updateWithAttributes(this, a)
}}), currentStep:function(a) {
    return(a = a.tourStep()) ? Tour.stepByName(a) : null
}, _visibleGridItems:function() {
    var a = env.realAppSession();
    return $v(a.gridState().filteredItemsListR(a.currentList()))
}};
__FILE__ = "apps/asana/view/tour_view.js";
TourDialogView = DialogView2.subclass("TourDialogView", {_IS_SINGLETON_DIALOG:!0, State:DialogState.subclass("TourDialogView.State", {}, {isDismissable:function() {
    return!1
}}), show:function(a) {
    Tour.start(env.user());
    return TourDialogView.superclass.show.call(this, a)
}}, {_render:function() {
    var a = this, b = Tour.currentStep(this.user);
    if(b === null) {
        return""
    }
    return FRAG([this.createView(TourDialogView.TourBoxView, {onClose:View.publicFunction(a, function() {
        a.hide()
    }), position:b.position, preface:b.preface, title:b.title, body:b.body, next:b.next, is_next_enabled_x:b.is_next_enabled_x, onNextFunc:b.onNextFunc}).render(), $rval(function() {
        var c = $v(b.tooltip_x);
        return c ? a.createView(TooltipView, update(c, {"class":"tour-tooltip", nofade:!0})).render() : ""
    })])
}});
TourDialogView.TourBoxView = View.subclass("TourBox", {MIDDLE:function(a) {
    return{left:(this.browser.width() - a.dimensions.width()) / 2, top:(this.browser.height() - a.dimensions.height()) / 2}
}, BOTTOM:function(a) {
    return{left:(this.browser.width() - a.dimensions.width()) / 2, top:this.browser.height() - a.dimensions.height() - 45}
}}, {onClose:ATTRIBUTE_REQUIRED, position:ATTRIBUTE_REQUIRED, preface:ATTRIBUTE_REQUIRED, title:ATTRIBUTE_REQUIRED, body:ATTRIBUTE_REQUIRED, next:ATTRIBUTE_REQUIRED, is_next_enabled_x:ATTRIBUTE_REQUIRED, onNextFunc:ATTRIBUTE_REQUIRED, _render:function() {
    var a = this;
    a._element = DIV({"class":"tour-box", onmousedown:function(b) {
        a._setupDrag(b)
    }}, [this._renderCloseButton(), this.preface, DIV({"class":"tour-box-title"}, [this.title]), DIV({"class":"tour-box-body"}, [this.body]), this._renderNextButton()]);
    a._element.watchProperty("style", $rval(function() {
        return a.position.call(a, a._element)
    }));
    return a._element
}, _setupDrag:function(a) {
    var b = this, c = [document.listen("mousemove", function(c) {
        b._element.setStyleAttr("left", c.pageX - a.layerX);
        b._element.setStyleAttr("top", c.pageY - a.layerY)
    }), document.listen("mouseup", function() {
        c.forEach(function(a) {
            document.unlisten(a)
        })
    })]
}, _renderCloseButton:function() {
    var a = this;
    return DIV({"class":"close", onmousedown:function() {
        env.user().setTourStep(null);
        a.onClose()
    }, tooltip:"Skip this tour", tooltip_delay:200})
}, _renderNextButton:function() {
    var a = this, b = a.next === null, c = a.onNextFunc();
    return DIV({"class":"tour-box-buttons"}, [AsanaForms.renderButton({label:b ? "Finish Tour" : "Next", "class":"primary next-button", onclick:$v(a.is_next_enabled_x) ? function() {
        logEvent({name:"TourStepAdvanceTo:" + a.next});
        c();
        env.user().setTourStep(a.next);
        if(b) {
            a.onClose()
        }
    } : null})])
}});
__FILE__ = "apps/asana/view/asana_view.js";
AsanaView = View.subclass("AsanaView", {DETAILED_PROPERTIES:null, QUICKADD_PROPERTIES:null, State:SessionObject2.subclass("AsanaView.State", {property_descs:{active_billing_flow:{type:String, default_value:null}}}, {})}, {session:ATTRIBUTE_REQUIRED, _navigation_view:SET_IN_CONSTRUCTOR, _center_pane_view_r:SET_IN_CONSTRUCTOR, _pot_to_grid_pane_view_for_caching:SET_IN_CONSTRUCTOR, _dnd_helper:SET_IN_CONSTRUCTOR, _cachePot:function(a) {
    var b = this._pot_to_grid_pane_view_for_caching.getOr(a, null);
    b !== null && (b.grid_state.touch(), a.assignee() && a.assignee().user() === env.userOrNull() && a.assignee().assignedToMeGroupBy(), this._renderSpecificGridPane(b))
}, constructor:function(a) {
    var b = this;
    AsanaView.superproto.constructor.call(this, a);
    this._dnd_helper = DragDrop.Helper.create(DragDrop.Context.create({browser:this.browser}));
    this._topbar_r = $rval(function() {
        env.world_store.peekStateObjectProperties(concat([env.user()], env.user().domains().toArray()), ["__creation_time"]);
        return b._renderTopBar()
    });
    this._bottombar_r = $rval(function() {
        return b._renderBottomBar()
    });
    this._pot_to_grid_pane_view_for_caching = Map.create();
    this._center_pane_view_r = $rval(function() {
        if(b.session.currentViewType() === AsanaSession.CURRENT_VIEW_TYPE.FEED) {
            return b._createInboxView()
        }else {
            var a = b.session.currentListOrUnknown();
            return a === null ? null : b._createGridPaneView(a)
        }
    });
    b._navigation_view = this.createView(NavigationDockView, {dnd_helper:b._dnd_helper, session:this.session, height_x:$rval(function() {
        return b.browser.height() - $v(b._topbar_r).dimensions.height()
    }), collapsable_x:$rval(function() {
        return b.session.navPaneCollapsable(b.browser)
    }), onAfterNavigateFromSearch:function(a) {
        if(!a.navigationContextForUser(env.user()).list) {
            b._suppress_focus_selection_on_next_blur = !0
        }
    }, blurSelf:method(this, "_blurSelf")})
}, _onCenterPaneTransitionEnd:function(a) {
    var b = document.getElementById("left_pane");
    a.target.offsetLeft > 50 ? b.className = b.className.replace(/ transition-over/g, "") : b.className += " transition-over"
}, _createGridPaneView:function(a) {
    var b = this, c = b.createView(GridPaneView, {allow_deleting:!0, dnd_helper:b._dnd_helper, grid_state:b.session.getV("grid_state"), current_asana_list_or_unknown:a, column_visible_l:b.session.getX("grid_visible"), left_x:$rval(function() {
        return b._gridPaneLeft()
    }), expanded_width_x:$rval(function() {
        return b._gridPaneWidth()
    }), height_x:b._getColumnHeightR(), ontransitionend:function(a) {
        return b._onCenterPaneTransitionEnd(a)
    }});
    Flags.enable_list_caching && env.is_server && isKnown(a) && b._pot_to_grid_pane_view_for_caching.put(a, c);
    return c
}, _createInboxView:function() {
    var a = this;
    return a.createView(InboxView, {model:a.session.inboxModelOrUnknown(), left_x:$rval(function() {
        return a._gridPaneLeft()
    }), expanded_width_x:$rval(function() {
        return a._notificationPaneWidth()
    }), column_visible_l:a.session.getX("grid_visible"), height_x:a._getColumnHeightR(), ontransitionend:function(b) {
        return a._onCenterPaneTransitionEnd(b)
    }})
}, _navPaneWidth:function() {
    return this._navPaneExpanded() ? AsanaSession.NAV_PANE_WIDTH : this._navPaneBaseWidth()
}, _navPaneExpanded:function() {
    return this.session.navPaneCollapsable(this.browser) && this._navigation_view.wantsToBeExpanded()
}, _navPaneBaseWidth:function() {
    return this.session.navPaneCollapsable(this.browser) ? AsanaSession.NAV_PANE_COLLAPSED_WIDTH : AsanaSession.NAV_PANE_WIDTH
}, _gridPaneLeft:function() {
    return this._navPaneWidth()
}, _gridPaneWidth:function() {
    var a = this._gridAndDetailsPaneWidth();
    return this.session.detailsVisible() ? a - this._detailsPaneWidth() : Math.max(AsanaSession.MIN_TWO_PANE_GRID_PANE_WIDTH, Math.round(this.browser.width() * (1 - AsanaSession.RIGHT_MARGIN_PERCENTAGE) - this._navPaneBaseWidth()))
}, _detailsPaneLeft:function() {
    return $v(this._center_pane_view_r) instanceof GridPaneView ? this.session.detailsVisible() ? this._gridPaneWidth() + this._navPaneBaseWidth() : Math.max(this._gridAndDetailsPaneWidth() - 2 * this._detailsPaneWidth(), 0) + AsanaSession.NAV_PANE_WIDTH : this.session.detailsVisible() ? this._notificationPaneWidth() + this._navPaneBaseWidth() : AsanaSession.NAV_PANE_WIDTH
}, _detailsPaneWidth:function() {
    var a = Math.round(this._gridAndDetailsPaneWidth() * (1 - AsanaSession.THREE_PANE_GRID_PANE_PERCENTAGE));
    return Math.min(AsanaSession.MAX_DETAILS_PANE_WIDTH, a)
}, _gridAndDetailsPaneWidth:function() {
    return Math.round(this.browser.width() * (1 - AsanaSession.RIGHT_MARGIN_PERCENTAGE) - this._navPaneBaseWidth())
}, _notificationPaneWidth:function() {
    var a = this._gridAndDetailsPaneWidth();
    return this.session.detailsVisible() ? Math.min(AsanaSession.NOTIFICATION_PANE_WIDTH, a - this._detailsPaneWidth()) : AsanaSession.NOTIFICATION_PANE_WIDTH
}, _render:function() {
    var a = this, b = a._renderThreePanes(), b = DIV(AsanaHelpers.parallelizeList([env.runningApp().debug_console.createView(this.browser).render(), a._topbar_r, b, a._bottombar_r])), b = a.createView(TabRingView, {contents:b, hotkey_configs:concat(DetailsView.hotkeyConfigs(a.detailsProperties()), [{key:KeyMap.Keys.BACKSPACE, handler:View.publicFunction(a, function() {
        var b = $v(a._center_pane_view_r);
        b instanceof GridPaneView && (b = b.itemListViewOrNull(), b !== null && b.deleteSelectedRowsInUserAction())
    })}, {key:KeyMap.Keys.Q, handler:View.publicFunction(a, function() {
        a.session.openQuickAddDialog()
    })}, {key:KeyMap.Keys.M, handler:View.publicFunction(a, function() {
        a._assignSelectedItemsToCurrentDomainUser()
    })}, {key:KeyMap.Keys.Y, handler:View.publicFunction(a, function() {
        a._setScheduleStatusOfSelectedItems(Task.ScheduleStatus.TODAY)
    })}, {key:KeyMap.Keys.U, handler:View.publicFunction(a, function() {
        a._setScheduleStatusOfSelectedItems(Task.ScheduleStatus.UPCOMING)
    })}, {key:KeyMap.Keys.L, handler:View.publicFunction(a, function() {
        a._setScheduleStatusOfSelectedItems(Task.ScheduleStatus.OK)
    })}, {key:KeyMap.Keys.SLASH, element_id:"nav_search_input"}, {key:KeyMap.Keys.ENTER, handler:function() {
        a._blurSelf()
    }}])});
    Flags.enable_list_caching && env.is_server && $rval(function() {
        $v(a._center_pane_view_r);
        env.frp.forEachParallel(a.session.getV("pots_to_cache"), function(b) {
            a._cachePot(b)
        })
    }).becomeWatch().peek();
    b = b.render();
    b = DIV({id:"Flags", "class":$rval(function() {
        return a._entireUiClass()
    })}, [DIV({"class":"bg-pattern"}), DIV({"class":"printer-warning"}, ['You can get a much better printout by selecting "Print" from the menu in the upper right corner of the task list you want to print.']), DIV({style:{opacity:a.browser.syncErrorMessage() ? 0.5 : 1}}, [b, $rval(function() {
        return a._renderDialogs()
    }), DIV([$rval(function() {
        return a._renderOutOfDateDialog()
    }), $rval(function() {
        return a._renderTooltip()
    }), $rval(function() {
        if(a.session.designSandboxFilename()) {
            return a.createView(DesignSandboxView, {filename_l:a.session.designSandboxFilenameL()}).render()
        }
        return""
    })])]), AsanaHelpers.renderLunaChrome(a.browser)]);
    Flags.stub_out_google_sso || host.profiler.timeFuncSummary("~ 4.1.1 Init Google SSO", BrowserGoogleAuth.init);
    return a.createView(TabRingView.DispatcherView, {body_x:b, key_map:a._keyMap()}).render()
}, _entireUiClass:function() {
    var a = $A(DomFlags.domFlagsClassArray(BrowserInfo.create(navigator.userAgent)));
    a.push(this.session.detailsVisible() ? " details-visible" : " details-invisible");
    this.session.navPaneCollapsable(this.browser) && a.push(this._navPaneExpanded() ? "nav-hovered" : "nav-collapsed");
    a.push("asana-desktop");
    return a.join(" ")
}, _renderThreePanes:function() {
    var a = this, b = $rval(function() {
        return a._renderNavigationPane()
    }), c = $rval(function() {
        return a._renderCurrentCenterPane()
    }), d = $rval(function() {
        return a._renderDetails()
    }), b = AsanaHelpers.parallelizeList([b, c, d]);
    return DIV({"class":"three-panes"}, b)
}, _getColumnHeightR:rvalueProperty("_getColumnHeightR", function() {
    return this.browser.height() - $v(this._bottombar_r).dimensions.height() + 12
}), _renderNavigationPane:function() {
    return this._navigation_view.render()
}, _last_tooltip_element_id:-1, _tooltip_element_r:null, _tooltipElementOrNull:function() {
    var a = this.session.tooltipElementId();
    if(this._last_tooltip_element_id !== a) {
        this._last_tooltip_element_id = a, this._tooltip_element_r = ElementDimensionsLvalue.create({name:"tooltipElementOrNull:" + a, element:null, func:function() {
            var b = document.getElementById(a);
            return!b || !b.__tooltip ? null : b
        }}).setAsSafelyPeekableByAncestor()
    }
    return this._tooltip_element_r.peek()
}, _renderTooltip:function() {
    if(env.is_server) {
        return""
    }
    var a = this._tooltipElementOrNull();
    if(!a) {
        return""
    }
    return this.createView(TooltipView, {"class":a.__tooltip_class, relative_to:a, contents:a.__tooltip, delay:a.__tooltip_delay || 0, placement:a.__tooltip_placement || TooltipView.BELOW, gravity:a.__tooltip_gravity || TooltipView.GRAV_CENTER, silhouette:a.__tooltip_silhouette || !1, nofade:a.__tooltip_nofade || !1}).render()
}, defaultFocusAndSelection:function() {
    var a = this.session.dialogStates();
    if(a.length > 0) {
        var b = a.top().view;
        if(b !== null) {
            return b.defaultFocusAndSelection()
        }
        return UnknownValue.Loading.create("Dialog view does not exist" + a.top().global_id, null)
    }
    a = $v(this._center_pane_view_r);
    return a === null ? AsanaView.superproto.defaultFocusAndSelection.call(this) : a.defaultFocusAndSelection()
}, _renderCurrentCenterPane:function() {
    var a = $v(this._center_pane_view_r);
    return a === null ? "" : a instanceof GridPaneView ? this._renderSpecificGridPane(a) : a.render()
}, _renderSpecificGridPane:computedPropertyInFirstParam("AsanaView_renderSpecificGridPane", function(a) {
    return a.render()
}), _renderInbox:function() {
}, _renderDetails:function() {
    var a = this;
    return this.createView(DetailsView, {details_state:this.session.getV("details_state"), selected_objects:this._itemsSelectedInDetailPane(), properties_to_show:a.detailsProperties(), session:this.session, column_visible_l:this.session.getX("details_visible"), left_x:$rval(function() {
        return a._detailsPaneLeft()
    }, "detailsPaneLeft"), expanded_width_x:$rval(function() {
        return a._detailsPaneWidth()
    }, "detailsPaneWidth"), height_x:this._getColumnHeightR(), blurSelf:method(this, "_blurSelf")}).render()
}, _itemsSelectedInDetailPane:function() {
    return this.session.currentSelectionState().deferredItemsForDetailPane()
}, _assignSelectedItemsToCurrentDomainUser:function() {
    var a = this.session.activeDomainUser(), b = [];
    this._itemsSelectedInDetailPane().forEach(function(a) {
        a instanceof Task && b.push(a)
    });
    Task.multiAssign(b, a, a)
}, _setScheduleStatusOfSelectedItems:function(a) {
    var b = this.session.activeDomainUser(), c = this._itemsSelectedInDetailPane();
    c.forEach(function(c) {
        c instanceof Task && c.getAssigneeOrNull() === b && (c.setCompleted(!1, b), c.setScheduleStatus(a))
    });
    this.session.getV("grid_state").selectItems(c)
}, _renderTopBar:function() {
    return this.createView(TopBarView, {session:this.session, blurSelf:method(this, "_blurSelf")}).render()
}, _renderBottomBar:function() {
    var a = this;
    if(a.session.activeDomain() === null) {
        return DIV()
    }
    return a.createView(BottomBarView, {centerPaneView:View.publicFunction(a, function() {
        return $v(a._center_pane_view_r)
    }), grid_pane_left_x:$rval(function() {
        return a._gridPaneLeft()
    })}).render()
}, _renderDialogs:function() {
    var a = this, b = this.session.dialogStates();
    return DIV(b.map(function(b, d) {
        b.touch();
        return b.renderDialog(a, d)
    }))
}, _renderOutOfDateDialog:function() {
    return this.createView(OutOfDateDialogView, {}).render()
}, _blurSelf:function() {
    var a = $v(this._center_pane_view_r);
    a instanceof GridPaneView ? this._suppress_focus_selection_on_next_blur ? env.setFocus(null) : (a = a.itemListViewOrNull(), a !== null && a.focusSelectedItems()) : env.setFocus("inbox");
    this._suppress_focus_selection_on_next_blur = !1
}, _keyMap:function() {
    var a = this, b = View.publicFunction(a, function() {
        ShortcutsView.show()
    });
    return[{meta_or_ctrl:!0, key:"P", handler:View.publicFunction(a, function() {
        var b = $v(a._center_pane_view_r);
        b instanceof GridPaneView && (b = b.itemListViewOrNull(), b !== null && b.print())
    })}, {key:KeyMap.Keys.SLASH, meta_or_ctrl:!0, handler:b}, {key:KeyMap.Keys.SLASH, shift:!0, meta_or_ctrl:!0, handler:b}, {key:KeyMap.Keys.ESC, handler:View.publicFunction(a, function() {
        var b = a.session.dialogStates();
        if(b.length > 0 && (b = b.top(), b !== null)) {
            b.isDismissable() && b.hide();
            return
        }
        a.session.closeDetailsPane();
        a._blurSelf()
    })}, {key:KeyMap.Keys.S, meta_or_ctrl:!0, handler:function() {
    }}]
}, detailsProperties:function() {
    var a = this, b = concat(AsanaView.DETAILED_PROPERTIES, [{property_name:"comments", renderer_name:"comments", human_name:"", hotkey:"C", open_details_pane:!0}]);
    b.forEach(function(b) {
        if(b.property_name === "items") {
            b.handler = View.publicFunction(a, function() {
                var b = a.session.currentSelectionState().singleDetailPaneItem();
                if(b) {
                    var c = b.itemsOrUnknown();
                    if(isKnown(c)) {
                        var f = a.user.domainUserForDomain(b.domain()), b = a.session.detailsState().detailsGridState().selectedItems().first() || c.first() || b.insertNewAfter(f, null);
                        a.session.detailsState().detailsGridState().selectItem(b)
                    }
                }
            })
        }
    });
    return b
}});
AsanaView.DETAILED_PROPERTIES = [{property_name:"description", human_name:"Notes", renderer_name:"description", hotkey:"N", tooltip:"Use notes to describe the current state of this task.", tooltip_delay:200, open_details_pane:!0}, {property_name:"items", human_name:"Subtasks", renderer_name:"subtasks", hotkey:"S", collapsable:!0, tooltip:"Subtasks are individual steps that are part of this task.", tooltip_delay:200, open_details_pane:!0}, {property_name:"assigned_to", human_name:"Assignee", renderer_name:"assigned_to",
    hotkey:"A", tooltip:"The assignee is the person currently responsible for this task.", tooltip_delay:200, open_details_pane:!0}, {property_name:"tags", human_name:Vocab.Projects, section_name:"projects", renderer_name:"tags", hotkey:Vocab.PROJECT_HOTKEY, tooltip:"A project is an ordered list of tasks.", tooltip_delay:200, open_details_pane:!0}, {property_name:"due_date", renderer_name:"due_date", hotkey:"D", collapsable:!0, tooltip:"When you set a due date, the assignee will get email reminders starting a week before the task is due.",
    tooltip_delay:200, open_details_pane:!0}, {property_name:"recurrence_type", renderer_name:"recurrence", human_name:"Repeat", hotkey:"", collapsable:!1, tooltip:"Choose how frequently this task will be due.", tooltip_delay:200, opt_on_click:noop}, {property_name:"tags", human_name:"Tags", renderer_name:"tags", hotkey:"T", collapsable:!0, section_name:"tags", tooltip:'Use tags to create filtered views of tasks across projects.  For example, Create a "Marketing" tag for tasks that need attention from the marketing team. ',
    tooltip_delay:200, open_details_pane:!0}, {collapsed_properties:!0}, {unknown_fold:!0}, {property_name:"attachments", renderer_name:"attachments", tooltip:"Attach files to this task.", tooltip_delay:200}, {property_name:"followers_du", human_name:"Followers", renderer_name:"followers", hotkey:"F", tooltip:"Followers receive emails when people comment on the task.", open_details_pane:!0}];
AsanaView.QUICKADD_PROPERTIES = concat([{property_name:"name", renderer_name:"string"}], AsanaView.DETAILED_PROPERTIES.map(function(a) {
    a.open_details_pane && (a = clonePrimitive(a), delete a.open_details_pane);
    return a
})).filter(function(a) {
        return a.property_name !== "items"
    });
__FILE__ = "apps/asana/view/column_view.js";
ColumnView = View.subclass("ColumnView", {SCROLL_TO_BOTTOM_MARGIN:100, SCROLL_TO_BOTTOM_TIMEOUT_DELAY:100}, {id:ATTRIBUTE_REQUIRED, expanded_width_x:ATTRIBUTE_REQUIRED, header_contents_x:ATTRIBUTE_REQUIRED, body_contents_x:ATTRIBUTE_REQUIRED, column_visible_l:ATTRIBUTE_REQUIRED, height_x:ATTRIBUTE_REQUIRED, left_x:null, keep_scrolled_to_bottom_r:null, ontransitionend:null, "class":"", is_navigating_x:!1, onClickBelowContent:null, onScrollToBottom:null, constructor:function(a) {
    ColumnView.superproto.constructor.call(this, a)
}, _render:function() {
    var a = this, b = a.createView(ColumnView.HeaderView, {contents_x:a.header_contents_x, column_visible_l:a.column_visible_l}).render(), c = $rval(function() {
        return $v(a.height_x) - b.dimensions.height() - b.dimensions.y()
    }, "ColumnView.column_body_height_r"), d = function() {
        if(e !== null && e.scrollHeight - (e.scrollTop + e.dimensions.height()) <= ColumnView.SCROLL_TO_BOTTOM_MARGIN) {
            a.onScrollToBottom()
        }
    }, e = DIV({id:a.id + "__contents", style:env.is_server ? {} : {height:c}, "class":"column-contents2" + a["class"], onclick:a.onClickBelowContent === null ? null : function() {
        return a.onClickBelowContent()
    }, onscroll:a.onScrollToBottom === null ? null : d}, [DIV({onclick:a.onClickBelowContent === null ? null : function() {
        return Node.JUST_DEFAULT
    }}, [$rval(function() {
        var b = a.id + "__contents";
        a.keep_scrolled_to_bottom_r !== null && (env.is_server || $rval(function() {
            if($v(a.keep_scrolled_to_bottom_r)) {
                var c = $(b);
                if(c) {
                    c.scrollTop = $v(a.body_contents_x).dimensions.height()
                }
            }
        }).becomeWatch().peek());
        a.onScrollToBottom !== null && !env.is_server && a._registerDisplayChangeCallback(d, ColumnView.SCROLL_TO_BOTTOM_TIMEOUT_DELAY);
        return a.body_contents_x
    })])]);
    return DIV({id:a.id, style:env.is_server ? {} : {left:a.left_x, width:a.expanded_width_x}, ontransitionend:a.ontransitionend}, [a._renderNavigationOverlay(), b, e])
}, _navigationOverlayVisible:function() {
    return $v(this.is_navigating_x) || !env.is_server && Flags.enable_show_loading_indicators_if_datastore_stale && AsanaHelpers.isClientDatastoreStale()
}, _renderNavigationOverlay:function() {
    var a = this;
    return DIV({"class":$rval(function() {
        return"navigating-overlay " + (a._navigationOverlayVisible() ? "visible" : "hidden")
    })}, [DIV({"class":"navigating-overlay-mask"}, [""]), DIV({"class":"navigating-overlay-box"}, [DIV({"class":"loader-dot loader-dot1"}, []), DIV({"class":"loader-dot loader-dot2"}, []), DIV({"class":"loader-dot loader-dot3"}, []), DIV({"class":"navigating-overlay-text"}, [$rval(function() {
        return a._navigationOverlayVisible() ? "Loading..." : ""
    })])])])
}});
ColumnView.HeaderView = View.subclass("ColumnView.HeaderView", {}, {contents_x:ATTRIBUTE_REQUIRED, column_visible_l:ATTRIBUTE_REQUIRED, constructor:function(a) {
    ColumnView.HeaderView.superproto.constructor.call(this, a)
}, _render:function() {
    return DIV([this.contents_x])
}});
__FILE__ = "luna/browser/s3_upload_form.js";
S3UploadForm = AsanaObject.subclass("S3UploadForm", {SUCCESS_PATH:"/-/static/luna/browser/success.html", injectedPolicyResponse:noop, injectedS3Response:function(a) {
    return a
}, _successUrl:function() {
    return URI.parse(window.location.href).getRootString() + S3UploadForm.SUCCESS_PATH
}}, {_file_input:SET_IN_CONSTRUCTOR, _attributes:SET_IN_CONSTRUCTOR, _children:SET_IN_CONSTRUCTOR, _hidden_inputs:null, _form:null, _s3_attachment:null, _asset_size:null, _asset_filename:null, _content_type:null, constructor:function(a, b, c) {
    S3UploadForm.superproto.constructor.call(this);
    this._attributes = a;
    this._children = b;
    this._file_input = c
}, render:Memoize.memoizeInThis("render", function() {
    this._hidden_inputs = ["key", "AWSAccessKeyId", "acl", "success_action_redirect", "policy", "signature", "Content-Type", "Content-Disposition"].map(function(a) {
        return INPUT({type:"hidden", name:a, value:"", tabindex:"-1"})
    });
    return this._form = FORM(update(this._attributes, {action:env.is_server ? "" : "https://" + Flags.attachments_s3_bucket_name + ".s3.amazonaws.com/", method:"post", enctype:"multipart/form-data", tabindex:-1}), concat(this._hidden_inputs, this._children))
}), submit:function(a) {
    var b = forms.getFileFromInput(this._file_input);
    this._s3_attachment_id = env.global_id_provider.reserveId();
    this._asset_filename = b.name || b.fileName;
    this._asset_size = b.size || b.fileSize || 0;
    this._content_type = b.type || "";
    this._callback = a;
    this._requestUploadPolicy()
}, _requestUploadPolicy:function() {
    var a = this, b = function(b) {
        b = JSON.parse(b);
        a._uploadAsset(b)
    }, c = function(b) {
        a._onUploadFailure("Upload policy request failed: " + b.message)
    }, d = S3UploadForm.injectedPolicyResponse();
    if(d !== void 0) {
        safeTimeout(function() {
            d instanceof LunaAjaxError ? c(d) : b(d)
        }, 0)
    }else {
        var e = env.serverCall("attachment_upload_policy", Map.create([["asset_role_id", a._s3_attachment_id], ["filename", a._asset_filename]]));
        e.addCallback(b);
        e.addErrback(c)
    }
}, _uploadAsset:function(a) {
    var b = this;
    processHandler(function() {
        b._s3_attachment = S3Attachment.create({global_id:b._s3_attachment_id, creator:env.user(), filesize:b._asset_size, s3_path:S3Attachment.absolutePath(b._s3_attachment_id, b._asset_filename)})
    });
    var c = Map.mapize({key:S3Attachment.bucketRelativePath(b._s3_attachment_id, b._asset_filename), policy:a.policy, signature:a.signature, success_action_redirect:S3UploadForm._successUrl(), "Content-Type":this._content_type, "Content-Disposition":'filename="' + encodeURI(this._asset_filename) + '"', AWSAccessKeyId:Flags.s3_aws_access_key, acl:"private"});
    b._hidden_inputs.forEach(function(a) {
        a.value = c.get(a.name)
    });
    b._submitForm()
}, _submitForm:function() {
    var a = this, b = "s3_api_requestor_" + Random.integer({}), c = document.createElement("iframe"), d = function(b) {
        b && b.startsWith(S3UploadForm._successUrl()) ? a._onUploadSuccess() : a._onUploadFailure("S3 returned failure - use browser to examine POST response")
    }, e = S3UploadForm.injectedS3Response(this._form);
    if(e !== this._form) {
        d(e)
    }else {
        update(c, {"style.width":"0px", "style.height":"0px", "style.border":"0px", src:"about:blank", name:b, id:b, onload:host.wrapInExceptionHandler("s3upload.onload", ExceptionHandler.ReentryStrategy.ALLOW, function() {
            var a = "PERMISSION DENIED";
            try {
                a = "" + c.contentWindow.location.href
            }catch(b) {
            }
            a !== "about:blank" && (document.body.removeChild(f), d(a))
        })});
        var f = document.createElement("div");
        f.appendChild(c);
        document.body.appendChild(f);
        this._form.target = b;
        this._form.submit()
    }
}, _onUploadSuccess:function() {
    var a = this;
    processHandler(function() {
        a._callback(Asset.create({name:a._asset_filename, type:Asset.assetTypeFromContentType(a._content_type), title:a._asset_filename, description:a._asset_filename, original_content:a._s3_attachment}))
    })
}, _onUploadFailure:function(a) {
    var b = this;
    log.info("Asset upload failed", this._asset_filename, a);
    processHandler(function() {
        b._callback(null)
    })
}});
__FILE__ = "apps/asana/view/attachments_view.js";
AttachmentsView = View.subclass("AttachmentsView", {}, {item:ATTRIBUTE_REQUIRED, _render:function() {
    var a = this;
    return $rval(function() {
        var b = a.item.attachments(), c = function(b) {
            return DIV({"class":"delete", onclick:function() {
                UserActionContext.get().start(env.world_store.createStateObject(RemoveFromListAction, {object:b, parent:a.item, creator:env.user()}));
                b.trash()
            }})
        };
        if(b.size() === 0) {
            return""
        }
        b = b.map(function(a) {
            var b = "icon-" + (a.iconName() || "dropbox-page-white").replace(/[\/_]/g, "-");
            return DIV({"class":"attachment"}, [DIV({"class":"attachment-icon " + b}), A({"class":"attachment-link-to-file", tabindex:-1, href:a.relativeUrl(), target:"_blank"}, [a.name()]), c(a)])
        });
        return DIV({"class":"property attachments"}, b)
    })
}});
__FILE__ = "luna/browser/third_party_iframe.js";
ThirdPartyIframe = AsanaObject.subclass("ThirdPartyIframe", {}, {src:ATTRIBUTE_REQUIRED, name:ATTRIBUTE_REQUIRED, class_name:"", onLoad:noop, onMessage:noop, _uri:SET_IN_CONSTRUCTOR, _iframe:null, _message_listener:null, _onload_listener:null, constructor:attributedConstructorAfterSuper(AsanaObject, function() {
    this._uri = URI.parse(this.src)
}), render:function() {
    var a = this;
    a._message_listener = Node.wrappedHandler({method:"ThirdPartyIframe." + a.name + ".onMessage", node:a}, function(b) {
        if(b._event) {
            b = b._event
        }
        b.origin === a._uri.origin() && a.onMessage.call(null, b.data)
    });
    window.addEventListener("message", a._message_listener);
    a._onload_listener = function() {
        window.removeEventListener("load", a._onload_listener);
        a.onLoad && a.onLoad.call(null)
    };
    window.addEventListener("load", a._onload_listener);
    a._iframe = IFRAME({src:a.src, "class":"" + a.class_name, scrolling:"no"});
    a._iframe.addEventListener("DOMNodeRemovedFromDocument", method(a, "_onRemovedFromDom"));
    return a._iframe
}, teardown:function() {
    window.removeEventListener("message", this._message_listener);
    this._message_listener = null
}, postMessage:function(a) {
    this._iframe.contentWindow.postMessage(a, "*")
}, _onRemovedFromDom:function() {
}});
__FILE__ = "apps/asana/view/dialog/dropbox_upload_dialog_view.js";
DropboxUploadDialogView = DialogView2.subclass("DropboxUploadDialogView", {DROPBOX_UI_BASE_URL:"https://www.dropbox.com", DROPBOX_UI_FILEPICKER_PATH:"/fp/filepicker", State:DialogState.subclass("DropboxUploadDialogView.State", {registry_name:"DropboxUploadDialogState", property_descs:{item:{type:StateObject}}}, {})}, {_iframe:null, hide:function() {
    if(this._iframe) {
        this._iframe.teardown(), this._iframe = null
    }
    return DropboxUploadDialogView.superproto.hide.call(this)
}, _render:function() {
    var a = this;
    if(env.is_server) {
        return""
    }
    a._iframe = ThirdPartyIframe.create({name:"DropboxUploadDialogView", src:DropboxUploadDialogView.DROPBOX_UI_BASE_URL + DropboxUploadDialogView.DROPBOX_UI_FILEPICKER_PATH, onMessage:method(a, "_onDropboxResponse"), onLoad:function() {
        a._iframe.postMessage({method:"select_files"})
    }});
    return a.createView(DialogView, {element_id:"dropbox_upload_dialog_view", key_map:[], flush_body_style:!0, hide_chrome:!0, title_x:"Attach Dropbox Files", body_x:DIV({"class":"dropbox-upload-dialog-body"}, [a._iframe.render()])}).render()
}, _onDropboxResponse:function(a) {
    if(a.method !== "filepicker_ready") {
        if(a.method !== "files_selected") {
            log.error("Dropbox response does not look like successful file selection", a), this._onUploadFailure("Problem communicating with Dropbox")
        }else {
            var b = [], a = JSON.parse(a.params), c = DropboxAttachment.create({path:null, preview_url:a.url, download_url:URI.appendQuery(a.url, {dl:1})});
            b.push(Asset.create({name:a.filename, type:Asset.assetTypeFromContentType(a.mime_type || "unknown/unknown"), icon_name:"dropbox/" + (a.icon || "page_white"), original_content:c}));
            this._onUploadSuccess(b)
        }
    }
}, _onUploadSuccess:function(a) {
    this._finish(a)
}, _onUploadFailure:function(a) {
    log.info("Asset upload failed", this._asset_filename, a);
    this._finish([])
}, _finish:function(a) {
    var b = this;
    window.removeEventListener("message", b._listener);
    a.forEach(function(a) {
        env.datastore_manager.enactChange(RegisterAssetChange.create({task:b._state.item(), asset:a}))
    });
    b.hide()
}});
__FILE__ = "apps/asana/view/attachments_upload_view.js";
AttachmentsUploadView = View.subclass("AttachmentsUploadView", {State:SessionObject2.subclass("AttachmentsUploadView.State", {property_descs:{upload_in_progress:{type:Boolean, default_value:!1}}}, {})}, {item:ATTRIBUTE_REQUIRED, name:ATTRIBUTE_REQUIRED, hidden_file_input:null, _render:function() {
    var a = this, b = ExperimentalFeature.enabled("dropbox", a.item.domain());
    return $rval(function() {
        var c = a._renderS3UploadForm();
        c.set("class", "upload-attachment-form");
        return TD({"class":"property-name attach-link"}, [a._renderSpinnerIfUploading(), b ? a._renderAttachMenu(c) : a._renderAttachLink(c)])
    })
}, _renderAttachLink:function(a) {
    var b = this;
    return SPAN({"class":"attach-link-container", style:{display:$rval(function() {
        return b._isUploadInProgress() ? "none" : "block"
    })}}, [SPAN({"class":"attach-icon"}), SPAN({"class":"attach-label"}, ["Attach a File"]), a])
}, _renderAttachMenu:function(a) {
    var b = this, c = b.name + "_placeholder", d = [{id:"add_from_computer", label:"Attach From Computer", onselect:method(b, "_handleAddFromComputer")}, {id:"add_from_dropbox", label:"Attach From Dropbox", onselect:method(b, "_handleAddFromDropbox")}];
    return SPAN({"class":"attach-menu-container", style:{display:$rval(function() {
        return b._isUploadInProgress() ? "none" : "block"
    })}}, [b.createView(DropdownMenuView, {id:"attach_menu", relative_to_element_id:c, tooltip:"Attach a file to this task.", tooltip_delay:500, include_arrow:!1, additional_class:"attach-menu", label:DIV({}, [SPAN({"class":"attach-icon"}), SPAN({"class":"attach-placeholder", id:c}), SPAN({"class":"attach-label"}, ["Attach a File"]), SPAN({"class":"arrow"})]), menu_items:d}).render(), a])
}, _handleAddFromDropbox:function() {
    DropboxUploadDialogView.show({item:this.item})
}, _handleAddFromComputer:function() {
    this.hidden_file_input.click();
    return Node.DEFAULT_AND_BUBBLE
}, _isUploadInProgress:function() {
    return this._state.getV("upload_in_progress")
}, _renderSpinnerIfUploading:function() {
    var a = this;
    return $rval(function() {
        return a._isUploadInProgress() ? IMG({id:"attachment_loading_indicator", src:"/-/static/luna/browser/images/loading.gif"}) : ""
    })
}, _renderS3UploadForm:function() {
    var a = this, b = INPUT({type:"file", name:"file", "class":"hidden-file-input", onchange:function() {
        forms.getFileFromInput(b) && (a._state.getX("upload_in_progress").requestSet(!0), d.submit(c))
    }, tabindex:"-1"});
    a.hidden_file_input = b;
    var c = function(c) {
        if(c !== null) {
            env.datastore_manager.enactChange(RegisterAssetChange.create({task:a.item, asset:c})), b.value = ""
        }
        a._state.setUploadInProgress(!1)
    }, d = S3UploadForm.create({}, [b], b);
    return d.render()
}});
__FILE__ = "luna/common/view/calendar.js";
OpenJSCalendar = {month_names:["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], weekdays:["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], month_days:[31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], opt:{}, data:[], focused:!1, wrt:function(a) {
    this.data.push(a)
}, getStyle:function(a, b) {
    if(a.currentStyle) {
        var c = b.replace(/\-(\w)/g, function(a, b) {
            return b.toUpperCase()
        }), c = a.currentStyle[b] || a.currentStyle[c]
    }else {
        window.getComputedStyle && (b = b.replace(/([A-Z])/g, "-$1").toLowerCase(), c = document.defaultView.getComputedStyle(a, null).getPropertyValue(b))
    }
    b === "opacity" && a.filter ? c = parseFloat(a.filter.match(/opacity\=([^)]*)/)[1]) / 100 : b === "width" && isNaN(c) ? c = a.clientWidth || a.offsetWidth : b === "height" && isNaN(c) && (c = a.clientHeight || a.offsetHeight);
    return c
}, getPosition:function(a) {
    for(var b = 0, c = 0;a;) {
        b += a.offsetLeft, c += a.offsetTop, a = a.offsetParent
    }
    navigator.userAgent.indexOf("Mac") !== -1 && typeof document.body.leftMargin !== "undefined" && (b += document.body.leftMargin, offsetTop += document.body.topMargin);
    return[b, c]
}, makeCalendar:function(a, b, c) {
    var a = parseInt(a, 10), b = parseInt(b, 10), c = parseInt(c, 10), d = env.clock.nowDate(), e = b + 1, f = a;
    e >= 12 && (e = 0, f++);
    var g = b - 1, h = a;
    g < 0 && (g = 11, h--);
    this.wrt("<div class='date-usage'>e.g. today, fri, 12/1/11, aug 22</div>");
    this.wrt("<table>");
    this.wrt("<tr><th><a onclick='OpenJSCalendar.makeCalendar(" + h + "," + g + ");' title='" + this.month_names[g] + " " + h + "'>&nbsp;</a></th>");
    this.wrt("<th colspan='5' class='calendar-title'><select id='" + this.opt.calendar_element_id + "_calendar_month' name='calendar-month' class='calendar-month' onChange='OpenJSCalendar.makeCalendar(" + a + ",this.value);'>");
    for(g = 0;g < this.month_names.length;g++) {
        this.wrt("<option value='" + g + "'"), g === b && this.wrt(" selected='selected'"), this.wrt(">" + this.month_names[g] + "</option>")
    }
    this.wrt("</select>");
    this.wrt("<select id='" + this.opt.calendar_element_id + "_calendar_year' name='calendar-year' class='calendar-year' onChange='OpenJSCalendar.makeCalendar(this.value, " + b + ");'>");
    h = d.getFullYear();
    for(g = h - 1;g < h + 10;g++) {
        this.wrt("<option value='" + g + "'"), g === a && this.wrt(" selected='selected'"), this.wrt(">" + g + "</option>")
    }
    this.wrt("</select></th>");
    this.wrt("<th><a onclick='OpenJSCalendar.makeCalendar(" + f + "," + e + ");' title='" + this.month_names[e] + " " + f + "'>&nbsp;</a></th></tr>");
    this.wrt("<tr class='header'>");
    for(g = 0;g < 7;g++) {
        this.wrt("<td>" + this.weekdays[g] + "</td>")
    }
    this.wrt("</tr>");
    e = Date.create(a, b, 1).getDay();
    f = 1;
    h = 0;
    this.month_days[1] = a % 4 === 0 ? 29 : 28;
    for(var i = this.month_days[b], g = 0;g <= 5;g++) {
        if(l >= i) {
            break
        }
        this.wrt("<tr>");
        for(var j = 0;j < 7;j++) {
            if(f > i ? h = 0 : j >= e && !h && (h = 1), h) {
                var l = f, m = "";
                d.getFullYear() === a && d.getMonth() === b && d.getDate() === f && (m = " today");
                c === f && (m += " selected");
                m += " " + this.weekdays[j].toLowerCase();
                this.wrt("<td class='days" + m + "'><a onclick='OpenJSCalendar.selectDate(\"" + a + '","' + b + '","' + l + "\");'>" + l + "</a></td>");
                f++
            }else {
                this.wrt("<td class='days'>&nbsp;</td>")
            }
        }
        this.wrt("</tr>")
    }
    this.wrt("</table>");
    document.getElementById(this.opt.calendar_element_id).innerHTML = this.data.join("");
    this.data = [];
    this._makeMenusKeepFocus()
}, _makeMenusKeepFocus:function() {
    var a = this, b = function() {
        a.focused = !0;
        safeTimeout(function() {
            a.focused = !1
        }, 0)
    }, c = document.getElementById(a.opt.calendar_element_id), d = function() {
        c.focus()
    }, e = document.getElementById(a.opt.calendar_element_id + "_calendar_year");
    e.addEventListener("mousedown", b);
    e.addEventListener("blur", d);
    e = document.getElementById(a.opt.calendar_element_id + "_calendar_month");
    e.addEventListener("mousedown", b);
    e.addEventListener("blur", d)
}, showCalendar:function(a) {
    var b = document.getElementById(this.opt.input), c = document.getElementById(this.opt.calendar_element_id), d = b.dimensions.height();
    c.style.left = b.dimensions.x() + "px";
    c.style.top = b.dimensions.y() + d + 2 + "px";
    a = (a = $v(a)) ? a : Day.today();
    this.makeCalendar(a.getFullYear(), a.getMonth(), a.getDate());
    document.getElementById(this.opt.calendar_element_id).style.display = "block";
    _calendar_active_instance = this
}, hideCalendar:function() {
    if(document.getElementById(this.opt.calendar_element_id)) {
        document.getElementById(this.opt.calendar_element_id).style.display = "none"
    }
}, set:function(a, b) {
    var c = this;
    if(a) {
        a.onfocus = function() {
            c.opt.input = this.id;
            c.init(a);
            c.showCalendar(b)
        }, a.onblur = function() {
            c.focused || safeTimeout(function() {
                processHandler(function() {
                    c.hideCalendar()
                })
            })
        }
    }
}, init:function() {
    var a = this;
    if(!this.opt.calendar_element_id || !document.getElementById(this.opt.calendar_element_id)) {
        var b = document.createElement("div");
        if(!this.opt.calendar_element_id) {
            this.opt.calendar_element_id = "calender_div_" + Math.round(Math.random() * 100)
        }
        b.setAttribute("id", this.opt.calendar_element_id);
        b.className = "calendar-box";
        document.body.insertBefore(b, document.body.firstChild);
        b.addEventListener("mousedown", function() {
            a.focused = !0;
            safeTimeout(function() {
                a.focused = !1
            }, 0)
        });
        b.addEventListener("blur", function() {
            a.focused ? safeTimeout(function() {
                a.focused = !1
            }, 0) : a.hideCalendar()
        });
        b.tabIndex = 0
    }
}};
__FILE__ = "luna/common/view/date_view.js";
DateView = View.subclass("DateView", {}, {validated_l:ATTRIBUTE_REQUIRED, extra_input_field_attributes:null, forceInEditMode:function() {
    return!1
}, constructor:function(a) {
    var b = this;
    DateView.superproto.constructor.call(this, a);
    if(this.extra_input_field_attributes === null) {
        this.extra_input_field_attributes = {}
    }
    a = copyAndUpdate(this.extra_input_field_attributes, {data:this.validated_l, "class":"date generic-input showing", data_type:"date"});
    this._input = INPUT(a);
    this.browser.height();
    this.browser.width();
    OpenJSCalendar.set(this._input, this.validated_l);
    OpenJSCalendar.selectDate = host.wrapInExceptionHandler("DateView.selectDate", ExceptionHandler.ReentryStrategy.DELAY, function(a, d, e) {
        OpenJSCalendar.hideCalendar();
        processHandler(function() {
            b.validated_l.requestSet(Day.fromYMD(a, d, e))
        })
    })
}, registerForDateViewCleanup:computedProperty("registerForDateViewCleanup", function() {
    return DateViewRvalue.create()
}), _render:function() {
    this.shouldCalendarBeVisible() && this.registerForDateViewCleanup();
    return this.inEditMode() ? this._renderEditSpan() : this._renderDisplaySpan()
}, _renderDisplaySpan:function() {
    var a = this, b = $rval(function() {
        var b = $v(a.validated_l);
        return b === null ? "" : b.getMostlyFutureDayDescription()
    });
    return SPAN({"class":"date-display"}, [b, this._input])
}, _renderEditSpan:function() {
    var a = this, b = $rval(function() {
        return $v(Validation.State.dom_node) === a._input ? $v(Validation.State.failure_message) : null
    });
    return SPAN({"class":$rval(function() {
        return"date-edit" + ($v(b) !== null ? " invalid" : "")
    }), tooltip:b}, [a._input])
}, shouldCalendarBeVisible:computedProperty("shouldCalendarBeVisible", function() {
    if(!env.is_server) {
        var a = document.getElementById(env.focusedElementId());
        if(a !== null && ["calendar-box", "calendar-year", "calendar-month"].contains(a.className)) {
            return!0
        }
    }
    return this._input.isFocused()
}), inEditMode:computedProperty("inEditMode", function() {
    return this.shouldCalendarBeVisible() || this.forceInEditMode()
})});
DateViewRvalue = Rvalue.subclass("DateViewRvalue", {}, {computeValue:function() {
    return null
}, onUnused:function() {
    DateViewRvalue.superproto.onUnused.call(this);
    OpenJSCalendar.hideCalendar()
}});
__FILE__ = "apps/asana/view/nothing_selected_view.js";
NothingSelectedView = View.subclass("NothingSelectedView", {}, {session:ATTRIBUTE_REQUIRED, _render:function() {
    return FRAG([this._renderHeader(), DIV({"class":"nothing-selected"}, [this.session.currentlyViewingFeed() ? this._renderViewForFeed() : this._renderViewForListView()])])
}, _renderHeader:function() {
    return DIV({"class":"details-pane-toolbar"}, [A({"class":"close-x", tooltip:"Hide details (Keyboard Shortcuts: Tab to show, Esc to hide)", tooltip_delay:200, tooltip_placement:TooltipView.LEFT_OF, onclick:function() {
        env.lunaSession().appSession().closeDetailsPane()
    }})])
}, _renderViewForFeed:function() {
    var a = this.session.inboxModelOrUnknown().inbox(), b = [DIV({"class":"nothing-selected-text"}, ["Inbox shows all the activity on tasks and projects you are following."])];
    (a.isShowingReadItems() || a.hasMoreUnreadNotificationsToLoad() || !a.isUnreadEmpty()) && b.push(DIV({"class":"nothing-selected-subtext"}, ["Select an Inbox message to view details on the task."]));
    return FRAG(b)
}, _renderViewForListView:function() {
    return DIV({"class":"nothing-selected-text"}, ["Select a task to view its details."])
}});
__FILE__ = "apps/asana/view/task_privacy_header_view.js";
TaskPrivacyHeaderView = View.subclass("TaskPrivacyHeaderView", {}, {id:"task_privacy_header", task:ATTRIBUTE_REQUIRED, view_pot:ATTRIBUTE_REQUIRED, _extraMembers:function() {
    var a = this.task.isPublicToWorkspace() ? Set.create(this.task.externalMembers()) : Set.create(this.task.otherMembers());
    this.view_pot.members().forEach(function(b) {
        a.remove(b)
    });
    return a
}, _taskHasExtraExternalMembers:function() {
    return this._extraMembers().find(function(a) {
        return a.isExternal()
    }) !== null
}, _renderWarningSpan:function() {
    var a = this._extraMembers().map(function(a) {
        return a.name()
    }), b = this.task.domain().name();
    this.task.isPublicToWorkspace() ? a.splice(0, 0, "everyone in " + b) : this.view_pot.isPrivateToCurrentUser() ? a.splice(0, 0, "you") : a.splice(0, 0, "project members");
    b = a.slice(0, 3);
    a.length > 3 ? (warning_str = "This task is visible to " + b.join(", "), a = SPAN({"class":"more-span", tooltip:a.slice(3).join(", ")}, [", and " + (a.length - 3) + " more."]), a = SPAN([warning_str, a])) : (warning_str = "This task is visible to " + grammaticalList(a, "and") + ".", a = SPAN([warning_str]));
    return a
}, _render:function() {
    var a = this;
    a.task.forcePublicToWorkspace();
    if(!a.view_pot.isProject()) {
        return""
    }
    var b = a.view_pot.isUsersATM(env.user());
    if(!b && a.view_pot.isPublic() && !a._taskHasExtraExternalMembers()) {
        return""
    }
    var c = a.task.domain().name();
    if(a.task.hasOwnPublicProject() && !a.view_pot.isPublic()) {
        if(b) {
            return""
        }
        return DIV({"class":"privacy-info"}, [DIV({"class":"open-lock-icon"}), SPAN({"class":"privacy-content"}, [a._renderWarningSpan(), " ", A({tooltip:"This task is also in a project that is public to " + c + "."}, ["Why?"])])])
    }else {
        if(a.task.hasPublicProjectOrPublicParent() && !a.view_pot.isPublic()) {
            if(b) {
                return""
            }
            return DIV({"class":"privacy-info"}, [DIV({"class":"open-lock-icon"}), SPAN({"class":"privacy-content"}, [a._renderWarningSpan(), " ", A({tooltip:"This task is subtask of a task that is public to " + c + "."}, ["Why?"])])])
        }else {
            if(a.task.forcePublicToWorkspace()) {
                return DIV({"class":"privacy-info"}, [DIV({"class":"open-lock-icon"}), SPAN({"class":"privacy-content"}, [a._renderWarningSpan(), " ", A({onclick:function() {
                    a.task.setForcePublicToWorkspace(!1)
                }}, ["Undo"])])])
            }else {
                if(!b && a._extraMembers().size() > 0) {
                    return DIV({"class":"privacy-info"}, [DIV({"class":"open-lock-icon"}), SPAN({"class":"privacy-content"}, [a._renderWarningSpan()])])
                }
            }
        }
    }
    return""
}});
__FILE__ = "apps/asana/view/webhook_error_dialog_view.js";
WebhookErrorDialogView = DialogView2.subclass("WebhookErrorDialogView", {State:DialogState.subclass("WebhookErrorDialogView.State", {registry_name:"WebhookErrorDialogView", property_descs:{webhook:{type:Webhook}}}, {})}, {dialog_name:"webhook_dialog", _render:function() {
    var a = this._state.webhook();
    return this.createView(DialogView, {element_id:this.dialog_name, flush_body_style:!1, title_x:"Webhook Error", banner_x:"The following error occurred while notifiying " + a.callbackUrl() + ":", body_x:DIV({"class":"webhook-error-details"}, [a.lastNotifyError()])}).render()
}});
__FILE__ = "apps/asana/view/webhooks_view.js";
WebhooksView = View.subclass("WebhooksView", {State:SessionObject2.subclass("WebhooksView.State", {property_descs:{callback_url:{type:String, default_value:""}}}, {})}, {model:ATTRIBUTE_REQUIRED, relative_to_element_id:ATTRIBUTE_REQUIRED, _dropdown:SET_IN_CONSTRUCTOR, constructor:function(a) {
    var b = this;
    WebhooksView.superproto.constructor.call(b, a);
    b._dropdown = b.createView(DropdownView, {align:DropdownView.RIGHT, relative_to_element_id:b.relative_to_element_id, id:b.id + "_webhooks", class_name:"webhooks-dropdown", renderContents:function() {
        return FRAG([DIV({"class":"webhook-header"}, ["Webhooks for ", b.model.nameL()]), AsanaHelpers.renderWithinLoadingBoundary("DIV", [DIV({"class":"webhook-webhooks"}, $rval(function() {
            return[A({"class":"webhook-help", href:"http://link-to-help-content", target:"blank"}, [DIV([b.model.webhooksDescription()]), A({style:"text-decoration: underline;"}, ["Learn more about Webhooks"])]), TABLE(b.model.webhooks().map(function(a) {
                return TR({"class":"webhook"}, [TD({"class":"webhook-url"}, [DIV([a.callbackUrl()]), DIV({"class":"webhook-creator"}, ["Created by ", a.creator().name()])]), TD([a.hasError() ? A({"class":"error", onclick:function() {
                    WebhookErrorDialogView.show({webhook:a});
                    b._dropdown.close()
                }}, ["View Error"]) : ""]), TD([AsanaForms.renderButton({label:"Remove", "class":"remove-button", onclick:function() {
                    a.trash()
                }})])])
            }))]
        }))]), DIV({"class":"webhook-footer"}, [INPUT({"class":"generic-input showing", data_type:"text", placeholder:"Webhook callback URL", data:b._state.callbackUrlL(), id:b.id + "_input"}), " ", $rval(function() {
            return AsanaForms.renderButton({label:"Add Webhook", onclick:Format.VALID_LINK_RE.test(b._state.callbackUrl()) ? function() {
                b.model.createWebhook({callback_url:b._state.callbackUrl()});
                b._state.setCallbackUrl("")
            } : null, id:b.id + "_add_webhook", "class":"primary", tabindex:0})
        })])])
    }, padding_x:55, has_arrow:!0})
}, _render:function() {
    this._dropdown.renderIfOpen();
    return""
}, open:function() {
    this._dropdown.open()
}});
__FILE__ = "apps/asana/view/details_view.js";
DetailsView = View.subclass("DetailsView", {focusableElementId:function(a) {
    return PropertySheetView.focusableElementId(DetailsView.PROPERTY_SHEET_NAME, a)
}, hotkeyConfigs:function(a) {
    return PropertySheetView.hotkeyConfigs(DetailsView.PROPERTY_SHEET_NAME, a)
}, PROPERTY_SHEET_NAME:"details_property_sheet", _renderHotkeyHintedString:function(a, b) {
    var c = b.toLowerCase().indexOf(a.toLowerCase());
    return SPAN([b.substring(0, c), SPAN({"class":"hotkey"}, [b.substring(c, c + 1)]), b.substring(c + 1, b.length)])
}, _renderHumanName:function(a, b) {
    var c = "human_name" in a ? a.human_name : a.property_name.titleize(), c = b ? c.toLowerCase() : c;
    return"hotkey" in a ? DetailsView._renderHotkeyHintedString(a.hotkey, c) : c
}, hypertextIsFocusedR:rvalueProperty("hypertextIsFocusedR", function() {
    return[PropertySheetView.focusableElementId(DetailsView.PROPERTY_SHEET_NAME, "comments"), PropertySheetView.focusableElementId(DetailsView.PROPERTY_SHEET_NAME, "description")].contains(env.lunaSession().focusedElementId())
})}, {details_state:ATTRIBUTE_REQUIRED, selected_objects:ATTRIBUTE_REQUIRED, properties_to_show:ATTRIBUTE_REQUIRED, session:ATTRIBUTE_REQUIRED, blurSelf:ATTRIBUTE_REQUIRED, column_visible_l:ATTRIBUTE_REQUIRED, expanded_width_x:ATTRIBUTE_REQUIRED, height_x:ATTRIBUTE_REQUIRED, left_x:null, _render:function() {
    var a = this;
    if(a.selected_objects.size() === 0) {
        return a.createView(ColumnView, {id:"right_pane", header_contents_x:a.createView(NothingSelectedView, {session:a.session}).render(), body_contents_x:"", height_x:a.height_x, left_x:a.left_x, expanded_width_x:a.expanded_width_x, column_visible_l:a.column_visible_l, is_navigating_x:$rval(function() {
            return env.isNavigating()
        })}).render()
    }
    var b = [$rval(function() {
        return a._renderAncestry()
    }, "DetailsView._renderAncestry"), a._renderTitle()], c = !1;
    a.selected_objects.forEach(function(a) {
        a instanceof Task && toValueAllowingUnknown(a.getX("domain")) === null && (c = !0)
    });
    if(c) {
        var d = DIV({"class":"deleted-task-warning"});
        d.innerHTML = a._orphanedTaskWarking();
        b.push(d)
    }else {
        if(a.selected_objects.size() > 0) {
            var e = a.session.currentListOrUnknown(), f = a.createView(PropertySheetView, {id:DetailsView.PROPERTY_SHEET_NAME, selected_objects:a.selected_objects, properties_to_show:a.properties_to_show, details_state:a.details_state, current_domain:a.session.activeDomain(), assigneeToTasksMultiDict:View.publicFunction(a, function() {
                return MultiDict.create(a.selected_objects, function(a) {
                    if(a instanceof Task) {
                        return a.getAssigneeOrNullR()
                    }
                })
            }), addAssignee:View.publicFunction(a, function(b) {
                Task.multiAssign(a.selected_objects, b, a.user.domainUserForDomain(a.session.activeDomain()))
            }), removeAssignee:View.publicFunction(a, function(b) {
                $v(a.selected_objects).forEach(function(c) {
                    c.unassignFrom(b.taskList(), a.user.domainUserForDomain(c.domain()))
                })
            }), onNewUserCommentPrompt:View.publicFunction(a, function(b) {
                $v(a.selected_objects).forEach(function(c) {
                    c.addComment({creator_du:a.user.domainUserForDomain(c.domain()), text:b})
                })
            }), potToTasksMultiDict:View.publicFunction(a, function(b) {
                return MultiDict.create($v(a.selected_objects), function(a) {
                    return $rval(function() {
                        var c = b ? a.ownProjects() : a.tags();
                        return computed_lists.sort(c, function(a) {
                            return a.name()
                        })
                    })
                })
            }), addPot:View.publicFunction(a, function(b) {
                for(var c = $v(a.selected_objects).toArray(), d = 0;d < c.length;d++) {
                    var e = d;
                    b.getV("assignee") === null && (e = c.length - 1 - d);
                    c[e].addTag(b)
                }
            }), removePot:View.publicFunction(a, function(b) {
                $v(a.selected_objects).forEach(function(a) {
                    a.removePot(b)
                })
            }), onTokenClicked:View.publicFunction(a, function(a) {
                env.realAppSession().navigateTo(a, !1)
            }), context_pot_or_null:e instanceof UnknownValue ? null : e, blurSelf:a.blurSelf});
            a.selected_objects.size() === 1 ? b.push(AsanaHelpers.renderWithinLoadingBoundary("DIV", [valueOrUnknown(function() {
                return f.render()
            })])) : b.push(f.render());
            e = function() {
                TabRingView.tabIsDownL().requestSet(!1);
                if(a.selected_objects.size() === 1) {
                    var b = a.selected_objects.first(), c = b.findParent();
                    if(c !== null) {
                        var d = env.realAppSession().detailsState();
                        d.selectRelativeTask(c);
                        d.detailsGridState().selectItem(b);
                        logEvent({name:"Subtask-ZoomOutToParentKeyboard"})
                    }
                }
            };
            e = [{key:"ENTER", handler:function(b) {
                b = b.target().tagName;
                if(b === "TEXTAREA" || b === "A") {
                    return Node.DEFAULT_AND_BUBBLE
                }else {
                    a.blurSelf()
                }
            }}, {key:"ENTER", meta_or_ctrl:!0, handler:function() {
                f.toggleCompleted()
            }}, {key:KeyMap.Keys.ESC, handler:function() {
                a.blurSelf()
            }}, {key:KeyMap.Keys.UP, tab:!0, handler:e}, {key:KeyMap.Keys.LEFT, tab:!0, handler:e}];
            e.pushAll(f.createKeyMap())
        }
    }
    d = PropertySheetView.focusableElementId(DetailsView.PROPERTY_SHEET_NAME, "comments");
    $rval(function() {
        env.user().profilePhotoUrlInbox()
    }, "DetailsView.profilePhotoUrlInbox").becomeWatch().peekAllowingUnknown();
    return a.createView(ColumnView, {id:"right_pane", header_contents_x:FRAG([a._renderHeader(e)]), body_contents_x:DIV({"class":"details-pane-body", key_map:e}, b), height_x:a.height_x, left_x:a.left_x, expanded_width_x:a.expanded_width_x, column_visible_l:a.column_visible_l, is_navigating_x:$rval(function() {
        return env.isNavigating()
    }), keep_scrolled_to_bottom_r:env.isElementIdFocusedR(d)}).render()
}, _orphanedTaskWarking:function() {
    return'This task is no longer available. This is either because the Task is no longer in any of your Lists or because we created new copies of the Task during our recent security improvements because it was associated with both Personal and Work lists which is no longer supported. <br/><br/>Please contact <a href="mailto:support@asana.com">support@asana.com</a> if you believe you are seeing this in error or are having trouble finding your data.'
}, _renderPrivacyHeader:function() {
    var a = this.session.currentListOrUnknown();
    if(isUnknown(a) || a === null) {
        return""
    }
    if(this.session.currentViewType() === AsanaSession.CURRENT_VIEW_TYPE.FEED) {
        return""
    }
    if(this.selected_objects.size() !== 1) {
        return""
    }
    var b = this.selected_objects.first();
    if(!(b instanceof Task)) {
        return""
    }
    return this.createView(TaskPrivacyHeaderView, {view_pot:a, task:b}).render()
}, _renderTitle:function() {
    var a;
    this.selected_objects.size() === 1 ? (a = this.selected_objects.first(), a = a instanceof Pot ? a.nameX() : a instanceof User ? a.name() : a.nameL()) : a = this.selected_objects.size() + " tasks";
    return DIV({"class":"details-pane-title"}, [this.createView(HeaderNameView, {data_x:a, element_attributes:{placeholder:"(unnamed task)", tabindex:-1, key_map:[{key:"ENTER", handler:this.blurSelf}]}}).render()])
}, _renderHeader:function(a) {
    var b = this;
    return $rval(function() {
        var c = !0, d = !1;
        b.selected_objects.forEach(function(a) {
            a instanceof Task ? a.isCompleted() || (d = !0) : c = !1
        });
        var e = function(a) {
            return function() {
                b.selected_objects.forEach(function(c) {
                    a !== c.isCompleted() && c.setCompleted(a, b.user.domainUserForDomain(c.domain()))
                })
            }
        };
        return DIV({id:"details_pane_header", "class":"details-pane-header", key_map:a}, [DIV({"class":"details-pane-toolbar"}, [A({"class":"close-x", tooltip:"Hide details (Keyboard Shortcuts: Tab to show, Esc to hide)", tooltip_delay:200, tooltip_placement:TooltipView.LEFT_OF, onclick:function() {
            logEvent({name:"CloseDetailsPane-Click"});
            env.lunaSession().appSession().closeDetailsPane()
        }}), b.selected_objects.size() > 0 && c ? AsanaForms.renderButton({"class":"complete-button " + (d ? "mark-complete" : "mark-incomplete"), tooltip:d ? "Click to mark this task complete" : "Click to mark this task incomplete", tooltip_delay:750, label:d ? DIV([SPAN({"class":"button-icon"}), SPAN({"class":"complete-text"}, ["Mark Complete"])]) : DIV([SPAN({"class":"button-icon"}), SPAN({"class":"default-text complete-text"}, ["Completed"]), SPAN({"class":"hover-text complete-text"}, ["Mark Incomplete"])]),
            onclick:e(d)}) : "", " ", b.selected_objects.size() > 0 && c ? AsanaHelpers.renderWithinHiddenLoadingBoundary("DIV", [$rval(function() {
            var a = "", c = b.session.currentListOrUnknown();
            if(isKnown(c) && c !== null && (!c.isProject() || c.isUsersATM(env.user()))) {
                a = b._renderPrivacyToggle()
            }
            return FRAG([a, b._renderActionMenu()])
        })]) : ""]), AsanaHelpers.renderWithinHiddenLoadingBoundary("DIV", [$rval(function() {
            return b._renderPrivacyHeader()
        })])])
    })
}, _renderAncestorRow:function(a) {
    var b = A({onclick:function() {
        logEvent({name:"Subtask-ZoomOutToParentClick"});
        env.realAppSession().detailsState().selectRelativeTask(a)
    }, "class":"ancestor-link"}, [a.name() === "" ? "(unnamed task)" : a.name()]), c = SPAN({"class":"ancestor-pots"}, AsanaHelpers.renderPots(a.ownProjects())), d = function() {
        return SPAN(["Parent's notes and comments (", KeyMap.KeyNameFuncs.TAB(), KeyMap.KeyNameFuncs.UP(), ")"])
    }, b = SPAN({"class":"link-container", style:{maxWidth:this._makeAncestorLinkWidthRvalue(c)}, tooltip:d}, [b]), d = SPAN({"class":"ancestor-arrow", tooltip:d}, []);
    return DIV({"class":"ancestor"}, [c, b, d])
}, _renderPrivateAncestorRow:function() {
    return DIV({"class":"ancestor"}, [SPAN({"class":"private-ancestor"}, [SPAN({"class":"link-container", tooltip:"You do not have access to the parent of this task.", tooltip_delay:200}, ["Private Task"]), SPAN({"class":"ancestor-arrow private"}, [])])])
}, _makeAncestorLinkWidthRvalue:function(a) {
    var b = this;
    return $rval(function() {
        return $v(b.expanded_width_x) - a.dimensions.width() - 65 + "px"
    })
}, _renderAncestry:function() {
    var a = this;
    if(a.selected_objects.size() !== 1) {
        return""
    }
    var b = a.selected_objects.first();
    if(!(b instanceof Task)) {
        return""
    }
    for(var c = [], d = function(b) {
        return $rval(function() {
            return a._renderAncestorRow(b)
        })
    }, e = b.findParent();e !== null;b = e, e = b.findParent()) {
        c.unshift(d(e))
    }
    b.hasParentOrUnknown() === !0 && c.unshift(a._renderPrivateAncestorRow());
    return c.length ? DIV({"class":"ancestry"}, c) : ""
}, _renderPrivacyToggle:function() {
    var a = this, b = !1, c = !0, d = !0, e = !1;
    a.selected_objects.forEach(function(a) {
        a.hasPublicProjectOrPublicParent() ? d = !1 : (b = !0, a.projects().forEach(function(b) {
            a.domain().hasPremiumPermissions() && b.memberCount() > 1 && (e = !0)
        }), a.forcePublicToWorkspace() ? d = !1 : c = !1)
    });
    var f = a.selected_objects.first().domain().name(), g = a.selected_objects.first().domain().isGlobal();
    if(!b || g) {
        return""
    }
    f = [DIV({id:"make_task_public", tooltip:!c ? "Make public to " + f : "Visible to everyone in " + f + ".", tooltip_delay:200, "class":"button toggle-button " + (c ? " selected" : " unselected"), onmousedown:function() {
        a.selected_objects.forEach(function(a) {
            a.setForcePublicToWorkspace(!0)
        })
    }}, [SPAN({"class":"button-icon make-public-icon"})]), DIV({id:"make_task_private", tooltip:!d ? "Make private to assignee, followers, and " + (e ? "members of its projects." : " you") : "Only visible to its assignee, followers, and " + (e ? "members of its projects." : " you."), tooltip_delay:200, "class":"button toggle-button " + (d ? " selected" : " unselected"), onmousedown:function() {
        a.selected_objects.forEach(function(a) {
            a.setForcePublicToWorkspace(!1)
        })
    }}, [SPAN({"class":"button-icon make-private-icon"})])];
    return SPAN({"class":"toggle-group", id:"task_privacy_toggle"}, f)
}, _renderActionMenu:function() {
    var a = this, b = a.selected_objects.size() === 1 ? a.selected_objects.first() : null, c = [];
    b && c.push({id:"add_subtask", label:"Add Subtask", onselect:View.publicFunction(a, function() {
        var c = a.details_state.detailsGridState(), d = c.selectedItems(), d = d.size() === 1 ? d.first() : null;
        b.items().contains(d) || (d = null);
        d = b.insertNewAfter(a.user.domainUserForDomain(b.domain()), d);
        c.selectItem(d)
    })});
    var d = a.details_state.detailsGridState().selectedItems().size();
    c.push({id:"delete_items", label:b ? "Delete Task" : "Delete Tasks", onselect:View.publicFunction(a, function() {
        AsanaHelpers.deleteItems(a.selected_objects)
    }), shortcut_nodes:d === 0 ? [KeyMap.KeyNameFuncs.TAB(), KeyMap.KeyNameFuncs.BACKSPACE()] : []});
    d > 0 && c.push({id:"delete_selected_subtasks", label:d === 1 ? "Delete Selected Subtask" : "Delete Selected Subtasks", onselect:View.publicFunction(a, function() {
        var b = a.details_state.detailsGridState().selectedItems();
        AsanaHelpers.deleteItems(b)
    }), shortcut_nodes:[KeyMap.KeyNameFuncs.TAB(), KeyMap.KeyNameFuncs.BACKSPACE()]});
    var e = !1, f = !1;
    a.selected_objects.forEach(function(a) {
        if(!a.hasPublicProject() && (f = !0, !a.forcePublicToWorkspace())) {
            throw e = !0, IIterable.STOP;
        }
    });
    var d = a.selected_objects.first().domain().name(), g = a.selected_objects.first().domain().isGlobal();
    !g && f && c.push({id:"change_task_privacy", label:e ? "Make Public to " + d : "Make Private to Project Members", onselect:View.publicFunction(a, function() {
        a.selected_objects.forEach(function(a) {
            a.setForcePublicToWorkspace(e)
        })
    })});
    if(b) {
        var h = b.isBar();
        c.push({id:"make_priority_heading", label:h ? "Un-Make Priority Heading" : "Make Priority Heading", onselect:View.publicFunction(a, function() {
            b.setIsBar(!h);
            a.blurSelf()
        })})
    }
    if(Flags.enable_webhooks_ui && b) {
        a._webhooks_view = a.createView(WebhooksView, {model:a.selected_objects.first(), relative_to_element_id:"details_action_menu"}), a._webhooks_view.render(), c.push({id:"manage_webhooks", label:"Manage Webhooks", onselect:View.publicFunction(a, function() {
            a._webhooks_view.open()
        })})
    }
    return c.isEmpty() ? "" : a.createView(DropdownMenuView, {id:"details_action_menu", tooltip:"Task Actions", tooltip_delay:500, include_arrow:!1, label:DIV({"class":"button default-button"}, [SPAN({"class":"button-icon button-arrow"})]), menu_items:c}).render()
}});
__FILE__ = "apps/asana/view/draggable_list_view.js";
DraggableListView = View.subclass("DraggableListView", {}, {list_r:ATTRIBUTE_REQUIRED, renderItem:ATTRIBUTE_REQUIRED, renderItemLabel:ATTRIBUTE_REQUIRED, name:ATTRIBUTE_REQUIRED, dnd_helper:null, drag_drop_region:ATTRIBUTE_REQUIRED, constructor:function(a) {
    if(a.view_name === void 0) {
        a.view_name = this.__type_name + "." + a.name
    }
    DraggableListView.superproto.constructor.call(this, a);
    this.dnd_helper = this.dnd_helper || DragDrop.Helper.create(DragDrop.Context.create({browser:this.browser}))
}, _render:function() {
    var a = this, b = computed_lists.mapInRvalues(a.list_r, function(b) {
        return a.dnd_helper.dropTargetNode("DIV", {children:[a.dnd_helper.handleNode("DIV", {"class":a.drag_drop_region.reorderable ? "drag_hand" : "drag_target", children:[a.renderItem(b, a.list_r)]}, {draggedData:function() {
            return a.drag_drop_region.dragDropData([b])
        }, renderDragIndicator:function(b) {
            return DIV({"class":"dragged_object"}, [a.renderItemLabel(b.objects[0])])
        }})]}, {drop_data:a.drag_drop_region.dragDropData([b])})
    }).setName("DraggableListView.renderedListItems");
    return a.dnd_helper.regionNode("DIV", {children:b}, a.drag_drop_region.regionNodeOptions())
}});
__FILE__ = "apps/asana/view/quick_add_action_add.js";
QuickAddActionAdd = UserAction.subclass("QuickAddActionAdd", {property_descs:{task:{type:StateObject}}}, {formatString:function() {
    return"Added %{task}"
}, placeholderMap:function() {
    return Map.create([["task", this.getV("task")]])
}});
__FILE__ = "apps/asana/view/quick_add_view.js";
QuickAddView = DialogView2.subclass("QuickAddView", {_PROPERTY_SHEET_NAME:"quick_add_property_sheet", State:DialogState.subclass("QuickAddView.State", {property_descs:{task:{type:Task}, assignees:{type:List}, pots:{type:List}, followers:{type:List}}}, {assigneesR:function() {
    return ConcatRvalue.create(this.assigneesL(), this.task().getAssigneesR())
}, cancel:function() {
    this.getV("task").trash();
    this._close()
}, complete:function(a) {
    var b = this.getV("task");
    logEvent({name:"TaskCreation-QuickAdd", task:b, domain:b.domain()});
    var c = env.world_store.createStateObject(QuickAddActionAdd, {creator:env.user(), task:b});
    UserActionContext.get().start(c);
    var c = $v(this.assigneesR()).firstValueOrNull(), d = env.user().domainUserForDomain(a), a = this.getV("pots");
    c === null && a.size() === 0 ? b.assignToWithoutStory(d.taskList()) : (c !== null && b.assignTo(c.getV("task_list"), d), a.forEachValue(function(a) {
        b.addTag(a)
    }));
    this.followers().forEachValue(function(a) {
        b.addFollower(a, d)
    });
    this.followersL().containsObject(d) || b.removeFollower(d);
    this._close()
}, _close:function() {
    this.hide()
}}), show:attributedValueFunc({domain:ATTRIBUTE_REQUIRED, task_name:"", pots:[]}, function(a) {
    return DialogView2.show.call(this, {task:AsanaHelpers.createItem({type:"Task", creator:env.user().domainUserForDomain(a.domain), name:a.task_name, domain:a.domain}), assignees:[], pots:a.pots, followers:[env.user().domainUserForDomain(a.domain)]})
}), focusableElementId:function(a) {
    return PropertySheetView.focusableElementId(QuickAddView._PROPERTY_SHEET_NAME, a)
}}, {details_state:SET_IN_CONSTRUCTOR, constructor:function(a) {
    QuickAddView.superproto.constructor.call(this, a);
    this.details_state = env.realAppSession().detailsState()
}, _render:function() {
    var a = this, b = a._state.getV("task"), c = b.domain();
    env.world_store.peekXvaluesAndStateObjectScalars([b.getX("schedule_status"), b.getX("completed"), b.getX("recurrence_type"), b.getX("force_public_to_workspace")], []);
    var d = List.create([b]), b = a.createView(PropertySheetView, {id:QuickAddView._PROPERTY_SHEET_NAME, selected_objects:d, properties_to_show:AsanaView.QUICKADD_PROPERTIES, context_pot_or_null:null, current_domain:c, render_sections_on_single_lines:!0, onTokenClicked:noop, details_state:a.details_state, assigneeToTasksMultiDict:function() {
        return MultiDict.create(a._state.assigneesR(), function(a) {
            return $rval(function() {
                return a
            })
        })
    }, addAssignee:function(b) {
        var c = a._state.assigneesL();
        c.requestClear();
        c.requestInsertBefore(b, null)
    }, removeAssignee:function(b) {
        a._state.getX("assignees").requestRemove(b)
    }, addFollower:function(b, c) {
        a._state.followersL().requestInsertBefore(c, null)
    }, removeFollower:function(b, c) {
        a._state.followersL().requestInsertBefore(c, null)
    }, followerToTaskMultiDict:function() {
        return MultiDict.create(d, function() {
            return a._state.followersL()
        })
    }, potToTasksMultiDict:function(b) {
        return MultiDict.create(d, function() {
            return $rval(function() {
                var c = a._state.getV("pots").filter(function(a) {
                    return a.getV("is_project") === b
                });
                return computed_lists.sort(c, function(a) {
                    return a.name()
                })
            })
        })
    }, addPot:function(b) {
        a._state.getX("pots").requestInsertBefore(b, null)
    }, removePot:function(b) {
        a._state.getX("pots").requestRemove(b)
    }, blurSelf:function() {
        TabRingView.focusNextInCurrentTabRing()
    }}), e = [{key:"ENTER", handler:View.publicFunction(a, function(b) {
        b = b.target().tagName;
        return b === "TEXTAREA" || b === "A" ? Node.DEFAULT_AND_BUBBLE : (a._state.complete(c), Node.STOP)
    })}, {key:"ESC", handler:View.publicFunction(a, function() {
        a._state.cancel();
        return Node.STOP
    })}];
    e.pushAll(b.createKeyMap());
    return a.createView(DialogView, {element_id:"quick_add_dialog", key_map:e, extra_class:"hotkey-element", flush_body_style:!0, title_x:$rval(function() {
        return"Add a new task to the " + c.name() + " workspace"
    }, "QuickAddView.title_x"), body_x:DIV({"class":"quickadd-body"}, [b.render()]), footer_x:DIV({"class":"buttons", children:[SPAN({"class":"button-spacer"}), AsanaForms.renderButton({label:"Ok", onclick:function() {
        a._state.complete(c)
    }, id:"quickadd_ok", "class":"primary", tabindex:0}), AsanaForms.renderButton({label:"Cancel", onclick:function() {
        a._state.cancel()
    }, id:"quickadd_cancel", tabindex:0})]}), hotkey_configs:concat(PropertySheetView.hotkeyConfigs(QuickAddView._PROPERTY_SHEET_NAME, AsanaView.QUICKADD_PROPERTIES), [{key:"ENTER", handler:function() {
        a._state.complete(c)
    }}, {key:"ESC", handler:function() {
        a._state.cancel()
    }}])}).render()
}, defaultFocusAndSelection:function() {
    return{focused_element_id:QuickAddView.focusableElementId("name")}
}});
__FILE__ = "apps/asana/view/dialog/welcome_dialog_view.js";
WelcomeDialogView = DialogView2.subclass("WelcomeDialogView", {CLASS_MAIN:"welcome_dialog_view", ELEMENT_ID_WATCH_MOVIE:"watch_movie", ELEMENT_ID_CLOSE_DIALOG:"close_welcome_dialog", _IS_SINGLETON_DIALOG:!0, State:DialogState.subclass("WelcomeDialogView.State", {}, {isDismissable:function() {
    return!1
}}), showTour:function() {
    this.show({dialog_state_manager:env.realAppSession(), force_show_tour:!0})
}, show:attributedFunc({dialog_state_manager:void 0, all_contacts:void 0, my_contacts:void 0, force_show_tour:!1}, function(a) {
    var b = a.all_contacts !== void 0 && a.my_contacts !== void 0 && (!a.all_contacts.isEmpty() || !a.my_contacts.isEmpty()), c = {};
    c[ContactImporterDialogView.TABS.TOP] = a.my_contacts;
    c[ContactImporterDialogView.TABS.ALL] = a.all_contacts;
    var d = a.force_show_tour || env.user().shouldShowNewWorkspaceTour(), b = WelcomeDialogView.OnCloseRunnable.create({contacts_json:JSON.stringify(c), show_contact_importer:b, show_tour:d, show_add_photo_dialog:!0, show_nux_tooltip:!d});
    WelcomeDialogView.superclass.show.call(this, {onclose_runnable:b, dialog_state_manager:a.dialog_state_manager})
})}, {_render:function() {
    var a = this;
    $rval(function() {
        a._touch()
    }).becomeWatch().peek();
    var b = $rval(function() {
        var b = c.dimensions;
        return{position:"fixed", left:(a.browser.width() - b.width()) / 2, top:Math.min(150, (a.browser.height() - b.height()) / 2)}
    }), c = DIV({"class":WelcomeDialogView.CLASS_MAIN}, [DIV({"class":"text-column"}, [H1(["Do Great Things."]), DIV({"class":"primary-text"}, ["Asana is the single place to quickly capture, organize, track, and communicate everything you and your team are working on."]), DIV({"class":"secondary-text"}, ["Fast, lightweight, and easy to use, Asana will help your team stay connected, move faster, and get more done."])]), DIV({"class":"video-column"}, [H2(["Learn How in 2 Minutes."]), A({id:WelcomeDialogView.ELEMENT_ID_WATCH_MOVIE,
        "class":"video-poster", onclick:function() {
            logEvent({name:"IntroVideo-clicked"});
            window.openAsync("/app/help_videos/?intro", "help_videos", "width=1024,height=613,status=0,toolbar=0,menubar=0")
        }}, [DIV({"class":"video-play"})]), H5(["Don't Have Headphones? ", AsanaHelpers.renderExternalLink("Read the Text Version", "http://help.asana.com/customer/portal/articles/68743-intro-to-asana")]), DIV({"class":"tos"}, [DIV({"class":"tos-notification"}, ["By clicking this button you agree to the ", AsanaHelpers.renderExternalLink("Terms of Service", "http://asana.com/terms-of-service"), "."]), AsanaForms.renderButton({"class":"accept-button", id:WelcomeDialogView.ELEMENT_ID_CLOSE_DIALOG, label:DIV({"class":"accept-text"},
        ["Get to Work \u00bb"]), onclick:function() {
        a._state.hide()
    }})])])]);
    return FRAG([DIV({id:"welcome_dialog_background"}), DIV({id:"welcome_dialog_container", style:b}, [c])])
}, _touch:function() {
    env.user().mergedIntoUser()
}});
WelcomeDialogView.OnCloseRunnable = Runnable.subclass("WelcomeDialogView.OnCloseRunnable", {property_descs:{contacts_json:{type:String, default_value:null}, show_contact_importer:{type:Boolean, default_value:!1}, show_tour:{type:Boolean, default_value:!1}, show_add_photo_dialog:{type:Boolean, default_value:!1}, show_nux_tooltip:{type:Boolean, default_value:!0}}, create:attributedValueFunc({contacts_json:null, show_contact_importer:!1, show_add_photo_dialog:!1, show_tour:!1, show_nux_tooltip:!0},
    function(a) {
        return env.session_store.createStateObject(WelcomeDialogView.OnCloseRunnable, a)
    })}, {run:function() {
    var a = env.user(), b = env.realAppSession().activeDomain(), c = a.domainUserForDomain(b);
    a.showWelcomeDialog() && (a.setShowWelcomeDialog(!1), a.acceptTos());
    var a = a.showManageWorkspaceDialogL(), d = $v(a);
    this.showAddPhotoDialog() ? UpdatePhotoDialogView.show({is_add_picture_promo:!0, who:env.user(), source:PhotoUploadView.Source.NUX, onclose_runnable:WelcomeDialogView.OnCloseRunnable.create({contacts_json:this.contactsJson(), show_contact_importer:this.showContactImporter(), show_tour:this.showTour(), show_nux_tooltip:this.showNuxTooltip()})}) : d && !c.isGuest() && !b.activated() ? (logEvent({name:"NuxWorkflow-ShowCreateWorkspace"}), a.requestSet(!1), CreateWorkspaceDialogView.show({domain:b,
        onclose_runnable:WelcomeDialogView.OnCloseRunnable.create({contacts_json:this.contactsJson(), show_contact_importer:this.showContactImporter(), show_tour:this.showTour(), show_nux_tooltip:this.showNuxTooltip()})}), env.setSelectionForFocusedElement(-1, -1)) : this.showTour() ? TourDialogView.show({onclose_runnable:WelcomeDialogView.OnCloseRunnable.create({contacts_json:this.contactsJson(), show_contact_importer:this.showContactImporter(), show_tour:!1, show_nux_tooltip:this.showNuxTooltip()})}) :
        this.showContactImporter() ? ContactImporterDialogView.show({imported_contacts_json:this.contactsJson(), on_complete:WelcomeDialogView.OnContactsImported.create({}), onclose_runnable:WelcomeDialogView.OnCloseRunnable.create({show_contact_importer:!1, show_nux_tooltip:this.showNuxTooltip()}), select_all:!1, invite_inline:!0}) : this.showNuxTooltip() && NuxTooltipView.show()
}, peekDependencies:function() {
    env.world_store.peekXvaluesAndStateObjectScalarsWithoutDependencies([env.user().showManageWorkspaceDialogL(), env.realAppSession().activeDomain().activatedL(), env.user().showWelcomeDialogL()], [])
}});
WelcomeDialogView.OnContactsImported = Runnable.subclass("WelcomeDialogView.OnContactsImported", {create:attributedValueFunc({}, function() {
    return env.session_store.createStateObject(WelcomeDialogView.OnContactsImported, {})
})}, {run:function(a, b) {
    a.isEmpty() || (env.datastore_manager.enactChange(AsanaInvite.BatchChange.create({email_addresses:a.map(function(a) {
        return EmailAddress.create(a.email(), a.name() !== "" ? a.name() : a.email())
    }), invite_ui_source:Registration.InviteUiSource.NUX, invite_ui_type:InviteToBetaDialogState.UiType.CLOUD_SPONGE, inviter_nps:null, invite_message:b, is_custom_invite_message:b !== ContactImporterDialogState.INVITE_MESSAGE})), UserActionContext.get().start(env.world_store.createStateObject(InviteToAsanaAction, {creator:env.user(), num_invites:a.size()})))
}});
__FILE__ = "apps/asana/view/dialog/add_to_address_book_action.js";
AddToAddressBookAction = UserAction.subclass("AddToAddressBookAction", {property_descs:{num_contacts:{type:Integer}}}, {formatString:function() {
    return"You've added " + pluralize("contact", this.numContacts()) + " to your address book"
}, placeholderMap:function() {
    return Map.create([])
}});
__FILE__ = "apps/asana/view/dialog/import_address_book_dialog_view.js";
ImportAddressBookDialogView = DialogView2.subclass("ImportAddressBookDialogView", {State:DialogState.subclass("ImportAddressBookDialogView.State", {property_descs:{logged_in_google_email:{type:String, default_value:null}, google_auth_new_user_in_progress:{type:Boolean, default_value:!1}, google_auth_logged_in_user_in_progress:{type:Boolean, default_value:!1}, import_contacts_new_user_in_progress:{type:Boolean, default_value:!1}, import_contacts_logged_in_user_in_progress:{type:Boolean, default_value:!1},
    import_contacts_immediately:{type:Boolean, default_value:!1}}}, {}), show:attributedFunc({asana_session:void 0, onclose_runnable:null}, function(a) {
    var b;
    b = a.asana_session !== void 0 ? a.asana_session : env.realAppSession();
    logEvent({name:"PersonalProjectCI-ImportAddressBookDisplayed"});
    var c = !1;
    b = b.loggedInGoogleEmail();
    b !== null && b.endsWith("@gmail.com") && (logEvent({name:"PersonalProjectCI-SSOToLoggedInAccountImmediately"}), c = !0);
    return ImportAddressBookDialogView.superclass.show.call(this, {onclose_runnable:a.onclose_runnable, logged_in_google_email:b, import_contacts_immediately:c})
}), DIALOG_ID:"import_address_book_dialog"}, {_render:function() {
    var a = this, b = a._state.loggedInGoogleEmail(), c = AsanaForms.renderButton({label:"Import Your Personal Contacts from Gmail", "class":"primary import-button", onclick:function() {
        a._importFromNewAccount()
    }});
    a._state.importContactsImmediately() ? (b = DIV({"class":"loading-indicator-blue"}, [DIV(["Importing..."])]), env.is_server || a._importImmideately()) : b = DIV([DIV([a._state.importContactsNewUserInProgress() ? DIV({"class":"loading-indicator-blue"}, [DIV(["Importing..."])]) : c, b === null ? "" : DIV({"class":"comment"}, ["You are connected with " + b + " ", a._state.importContactsLoggedInUserInProgress() ? DIV({"class":"inline-loading-indicator"}, ["Importing..."]) : A({onclick:function() {
        a._importFromLoggedInAccount()
    }}, ["Import from this account?"])])])]);
    return a.createView(DialogView, {element_id:ImportAddressBookDialogView.DIALOG_ID, title_x:ContactImporterDialogView.titleElementForSaveContactsFlow(), body_x:DIV([b, DIV({"class":"people-image"})])}).render()
}, _importImmideately:function() {
    var a = this;
    BrowserGoogleAuth.start(function(b) {
        a._onGoogleAuthComplete(b)
    }, !1, a._state.loggedInGoogleEmail())
}, _importFromLoggedInAccount:function() {
    var a = this;
    a._state.googleAuthLoggedInUserInProgress() || (a._state.setGoogleAuthLoggedInUserInProgress(!0), a._state.setImportContactsLoggedInUserInProgress(!0), logEvent({name:"PersonalProjectCI-SSOToLoggedInAccount"}), BrowserGoogleAuth.start(function(b) {
        a._onGoogleAuthComplete(b);
        host.wrapInExceptionHandler("importAddressBook.logedInAccountComplete", ExceptionHandler.ReentryStrategy.ALLOW, function() {
            a._state.setGoogleAuthLoggedInUserInProgress(!1)
        })
    }, !1, a._state.loggedInGoogleEmail()))
}, _importFromNewAccount:function() {
    var a = this;
    a._state.googleAuthNewUserInProgress() || (a._state.setGoogleAuthNewUserInProgress(!0), a._state.setImportContactsNewUserInProgress(!0), logEvent({name:"PersonalProjectCI-SSOToNewAccount"}), BrowserGoogleAuth.start(function(b) {
        a._onGoogleAuthComplete(b);
        host.wrapInExceptionHandler("importAddressBook.logedInAccountComplete", ExceptionHandler.ReentryStrategy.ALLOW, function() {
            a._state.setGoogleAuthNewUserInProgress(!1)
        })
    }, !0))
}, _onGoogleAuthComplete:function(a) {
    var b = this;
    a !== null && a.access_token !== null ? ContactImporterDialogView.getContactsForGoogleUser(a.access_token, function(a) {
        b._onContactsRequestComplete(a)
    }) : processHandler(function() {
        b._state.setImportContactsNewUserInProgress(!1);
        b._state.setImportContactsLoggedInUserInProgress(!1)
    })
}, _onContactsRequestComplete:function(a) {
    var b = this;
    processHandler(function() {
        var c = ImportAddressBookDialogView.OnContactsLoaded.create({contacts_json:a, onclose_runnable:b._state.oncloseRunnable()});
        b._state.setOncloseRunnable(c);
        BrowserGoogleAuth.reset();
        b._state.setImportContactsNewUserInProgress(!1);
        b._state.setImportContactsLoggedInUserInProgress(!1);
        b._state.hide()
    })
}, hide:function() {
    BrowserGoogleAuth.reset();
    return ImportAddressBookDialogView.superproto.hide.call(this)
}});
ImportAddressBookDialogView.OnContactsLoaded = Runnable.subclass("ImportAddressBookDialogView.OnContactsLoaded", {property_descs:{contacts_json:{type:String}, onclose_runnable:{type:Runnable}}, create:attributedValueFunc({contacts_json:ATTRIBUTE_REQUIRED, onclose_runnable:ATTRIBUTE_REQUIRED}, function(a) {
    return env.session_store.createStateObject(ImportAddressBookDialogView.OnContactsLoaded, a)
})}, {run:function() {
    if(this.contactsJson() !== "") {
        var a = null;
        try {
            a = JSON.parse(this.contactsJson())
        }catch(b) {
            host.recordWarning("Got exception parsing contacts", b)
        }
        a !== null && (logEvent({name:"PersonalProjectCI-ImportContactsDisplayed", num_contacts:a[ContactImporterDialogView.TABS.ALL].size(), num_top_contacts:a[ContactImporterDialogView.TABS.TOP].size()}), ContactImporterDialogView.show({imported_contacts_json:this.contactsJson(), on_complete:ImportAddressBookDialogView.OnContactsImported.create({}), select_all:!1, save_contacts:!0, onclose_runnable:this.oncloseRunnable()}))
    }
}});
ImportAddressBookDialogView.OnContactsImported = Runnable.subclass("ImportAddressBookDialogView.OnContactsImported", {create:attributedValueFunc({}, function() {
    return env.session_store.createStateObject(ImportAddressBookDialogView.OnContactsImported, {})
})}, {run:function(a, b, c) {
    a.size() !== 0 && (env.datastore_manager.enactChange(AddContactsChange.create({addresses:a, send_invites:c})), logEvent({name:"PersonalProjectCI-ContactsAdded", num_imported:a.size(), invite_sent:c}))
}});
AddContactsChange = define("AddContactsChange", Change.subclass("AddContactsChange", {}, {addresses:ATTRIBUTE_REQUIRED, send_invites:ATTRIBUTE_REQUIRED, enact:function() {
    if(env.is_server) {
        var a = RemoteJobStatus.create({});
        env.remote_job_store.addJob(AddContactsRemoteJob.create({addresses:this.addresses, send_invites:this.send_invites, user_id:env.user().global_id, job_status_id:a.global_id}), env.clock.now());
        var b = env.session_store.sessionObject2(RemoteJobState, RemoteJobState.SINGLETON_OBJECT_ID);
        b.setRemoteJobStatus(a);
        b.setInProgressText("Importing " + this.addresses.length + " contacts");
        b.setCompletionText("Finished importing " + this.addresses.length + " contacts.")
    }
}, taintedObjectIds:function() {
    return[]
}}));
__FILE__ = "apps/asana/view/feed_view.js";
FeedView = View.subclass("FeedView", {State:SessionObject2.subclass("FeedView.State", {registry_name:"FeedState", property_descs:{show_earlier_feed_stories:{type:Boolean, default_value:!1}}}, {})}, {model:ATTRIBUTE_REQUIRED, _render:function() {
    var a = this, b = [], c = !0, d = env.frp.mapParallel(a._getStories(), this._makeStoryView, this), e = a._state.showEarlierFeedStories(), f = 0;
    d.forEachReverse(function(a) {
        var d = a.isComment();
        if(e || f < 3) {
            if(d) {
                b.unshift(a.render())
            }else {
                c && b.unshift(DIV({"class":"small-feed-story-group"}));
                var i = b[0];
                i.insertBefore(a.render(), i.firstChild)
            }
            c = a.isComment()
        }
        f += d ? 1 : 0
    });
    d = e || f < 3 ? SPAN({"class":"section-name click-target", tooltip:"The Activity Feed shows the history of this task.", tooltip_delay:500, onclick:function() {
        a._state.setShowEarlierFeedStories(!1)
    }}, ["Activity Feed"]) : A({"class":"section-name", onclick:function() {
        a._state.setShowEarlierFeedStories(!0)
    }}, [f === 3 ? "View earlier activity" : "View all " + f + " comments", SPAN({"class":"arrow"})]);
    return DIV([d, DIV({"class":"feed"}, b)])
}, _getStories:function() {
    return concat([this.model], $v(this.model.feedStoriesR()).peekValuesArray())
}, _makeStoryView:function(a) {
    return this.createView(FeedView.StoryView, {item:this.model, model:a})
}});
FeedView.StoryView = View.subclass("FeedView.StoryView", {State:SessionObject2.subclass("FeedView.StoryView.State", {property_descs:{show_more:{type:Boolean, default_value:!1}}}, {})}, {item:ATTRIBUTE_REQUIRED, model:ATTRIBUTE_REQUIRED, _html:SET_IN_CONSTRUCTOR, _creator:SET_IN_CONSTRUCTOR, _date:SET_IN_CONSTRUCTOR, _is_truncated:SET_IN_CONSTRUCTOR, _photo_view:SET_IN_CONSTRUCTOR, constructor:function(a) {
    FeedView.StoryView.superproto.constructor.call(this, a);
    a = this._storyHtml();
    this._html = a.html;
    this._is_truncated = a.is_truncated;
    this._creator = this.model.creator();
    this._date = new Date(this.model.getV("__creation_time"));
    this._photo_view = this.isComment() && this._creator !== null ? this.createView(PhotoView, {who:this._creator.user(), size:PhotoView.Size.NOTIFICATION_FEED, show_initials:!1, silhouette_class:"comment-icon"}) : null
}, _storyHtml:function() {
    if(this.model instanceof Story) {
        var a = this.model.text()
    }else {
        this.model instanceof AsanaStateObject ? (a = env.type_registry.typeIdMap().nameForId(this.item.getV("__type_id")).toLowerCase(), a === "itemlist" && (a = this.item.getV("is_project") ? "project" : "tag"), a = "Created " + a) : ufu("unknown story type")
    }
    this.isComment() || (a = a[0].toLowerCase() + a.substring(1) + ".");
    var b = this._state.showMore() ? a : a.match(/[\s\S]{0,400}[\S]*/)[0];
    return{html:AsanaHelpers.stylizedHtmlFromPlainText(b, !0), is_truncated:a !== b}
}, isComment:function() {
    return this.model instanceof Comment
}, _render:function() {
    var a = this;
    return DIV({"class":a.isComment() ? "big-feed-story feed-story-comment" : "feed-story"}, [a._photo_view !== null ? a._photo_view.render() : DIV({"class":"comment-icon"}), DIV({"class":"comment-content"}, [a._renderDelete(), SPAN({"class":"feed-story-creator"}, [a.model instanceof EmailCommentStory && !a.model.outgoing() ? a.model.from() : AsanaHelpers.renderObjectLink({object:a._creator})]), SPAN({"class":"comment-text" + (a._is_truncated ? " truncated" : ""), onclick:function() {
        a._state.setShowMore(!0);
        return Node.DEFAULT_AND_BUBBLE
    }}, [SPAN({innerHTML:" " + a._html}), a._renderMoreLink()]), DIV({"class":"feed-story-timestamp"}, [a.isComment() ? a._date.describeRelativeToToday() : a._date.renderShortRelativeToToday()])])])
}, _renderMoreLink:function() {
    return this._is_truncated ? FRAG(["... ", A({"class":"show-more"}, ["See More"])]) : ""
}, _renderDelete:function() {
    var a = this;
    return a._canDelete() ? DIV({"class":"delete click-target", tabindex:-1, tooltip:"Click to remove comment", onclick:function() {
        UserActionContext.get().start(env.world_store.createStateObject(RemoveFromListAction, {object:a.model, parent:a.item, creator:env.user()}));
        a.model.trash()
    }}) : ""
}, _canDelete:function() {
    return this.model instanceof Story && this.model.canBeTrashedBy(env.user())
}});
__FILE__ = "apps/asana.js";
AsanaInit = {createAsanaData:function(a, b) {
    var c = b || "asana.com", d = User.create({name:"Sashimi Rosenstein", email:"eng+sashimi@" + c, facebook_id:User.MONSTER_FB_ID, password:"password", show_welcome_dialog:!1, creation_source:User.CreationSource.SIGNUP});
    d.setLocalTimezone("America/Los_Angeles");
    d.setCountryCode("US");
    d.claim();
    ApiSettings.create({user:d});
    var e = User.create({admin:!0, name:"Sushi Rosenstein", email:"eng+sushi@" + c, password:"password", creation_source:User.CreationSource.DOMAIN_INVITE});
    e.claim();
    ApiSettings.create({user:e});
    var f = User.create({name:"Radio Cat", email:"eng+radiocat@" + c, password:"password", creation_source:User.CreationSource.OOTCOW});
    f.claim();
    f.globalDomainUser().addContact(d.globalDomainUser());
    var g = User.create({name:"Error Notification Robot", email:"noreply+errornotification@" + c, password:"password", creation_source:User.CreationSource.GRANDFATHERED});
    g.claim();
    var h = range(1, a ? 50 : 0).map(function(a) {
        a = User.create({name:"Cat #" + a, email:"eng+cat" + a + "@" + c, password:"password", creation_source:User.CreationSource.TESTING});
        a.claim();
        return a
    }), i = d.globalDomainUser();
    h.forEach(function(a) {
        i.addContact(a.globalDomainUser());
        i.contactForDomainUser(a.globalDomainUser()).setInteractionCount(10)
    });
    var j = Domain.create({name:"Asana", creator:d, is_work_domain:!0, is_for:"BUSINESS"});
    a && j.setSizeCap(100);
    var l = j.addFullMember(d), m = Team.create({creator_du:l, domain:j, name:"Asana"});
    m.addTeamMember({domain_user:l, limited_access:!1});
    concat([e, g], h).forEach(function(a) {
        a = j.addFullMember(a);
        m.addTeamMember({domain_user:a, limited_access:!1})
    });
    g = j.addGuest(f);
    m.addTeamMember({domain_user:g, limited_access:!0});
    d.makeDomainDefault(j);
    g = Domain.create({name:"DamnTheRadio", creator:d, is_for:"SCHOOL"});
    g.addFullMember(e);
    g.addFullMember(f);
    f = Domain.create({name:"Asana Admin", creator:d, is_for:"CLUB_TEAM"});
    f.addFullMember(e);
    f.addFullMember(d);
    var e = e.domainUserForDomain(j), o = function(a, b) {
        return AsanaTesting.easyCreateTasks({prefix:"Task ", num:a, store:!1, attributes:updateWithDefaults(b || {}, {completed:0, creator_du:l, domain:j, assigned_to:null})})
    }, n = function(a, b, c) {
        return j.createItemList({creator_du:l, name:a, perma_name:c || null, items:b, team:m, followers_du:[]})
    };
    o(10, {domain:d.defaultDomain(), creator_du:d.defaultDomainUser(), assigned_to:d.defaultDomainUser()});
    o(1, {creator_du:l, domain:j, assigned_to:l});
    f = AsanaTesting.createTask({name:"Assigned Task", domain:j, creator_du:l, assigned_to:l});
    AsanaTesting.createTask({name:"Test script tag: <\/script><\/script>", domain:j, assigned_to:l, creator_du:l});
    g = AsanaTesting.createTask({name:"Failed webhook task", domain:j, assigned_to:l, creator_du:l});
    g.createWebhook({callback_url:"http://localhost/badurl", creator:d});
    g.webhooks().firstValueOrNull().setLastNotifyError("Error: bad url\nnew line 1\nnew line 2\nreallylonglinethatshouldprewrapbecauseofcssstylesettingsandIamgoingtokeeptypeingsoIcanmakeitreallylongagainandagainandagainandagain");
    n("Bugs", []);
    n("A pot with a long name one two three four five six seven eight nine ten eleven twelve thirteen fourteen", []);
    n("fancy_tasks", [AsanaTesting.createTask({name:"Followed task", completed:0, domain:j, creator_du:l})], "test_fancy_tasks");
    concat([10, 20, 40, 50, 60], a ? [500] : []).forEach(function(a) {
        var b = "test_etherlist_" + a;
        n(b, o(a), b)
    });
    a && range(1, 51).forEach(function(a) {
        a = "task list " + a;
        n(a, o(1), a)
    });
    n("more tasks", o(20), "more_tasks");
    j.createItemList({creator_du:l, name:"Red tag", is_project:!1, items:[f]});
    a && range(1, 51).forEach(function(a) {
        return j.createItemList({creator_du:l, name:"Tag " + a, is_project:!1, items:[], followers_du:[]})
    });
    j.createItemList({creator_du:e, name:"Sushi private list", is_project:!1, is_public_to_workspace:!1, items:o(10)})
}};
AppRegistry.get().registerApp("asana", function() {
    return LunaApp.create({config:{title:"Asana"}, resources:AsanaHelpers.asanaResources, console_type:DebugConsole, init_function:function() {
        return processHandler(function() {
            SearchService.create("cloud_search").clear();
            SearchService.create("memory_search").clear();
            Domain.resetGlobalDomain();
            AsanaInit.createAsanaData(Flags.cleandata_use_big_world)
        })
    }, newSession:function(a, b, c, d, e, f, g) {
        var h = c[1] !== "" || a.openInThreePane(), i, b = null;
        g && g.containsKey("navigation_dock_domain") ? (g = g.get("navigation_dock_domain").value, g === "null" ? b = null : (g = parseInt(g, 10), isNaN(g) || (g = env.world_store.objectOrUnknown(g), g instanceof Domain && (b = g)))) : b = env.user().defaultDomain();
        b !== null && (c = FragmentChange.parseFragment(c.join("/")), c.is_valid && (c = env.world_store.objectOrUnknown(c.list_id), isKnown(c) && (b = c.domain())));
        env.session_store.sessionObject2(NavigationDockView.State, "AsanaView/NavigationDockView").setDomain(b);
        var j;
        j = b ? a.taskList(b) : a.defaultTaskList();
        host.profiler.timeFuncSummary("0.2.1.0 AsanaSession.create", function() {
            i = AsanaSession.create({current_list:j, details_visible:h, logged_in_google_email:f})
        });
        !Format.EMAIL_RE.test(a.email()) || a.needsToSetPassword() ? AccountDialogView.show({user:a, selected_tab:a.needsToSetPassword() ? AccountDialogTabs.PASSWORD : AccountDialogTabs.EMAIL_NOTIFICATIONS, dialog_state_manager:i, onclose_runnable:env.user().showWelcomeDialog() ? ShowWelcomeDialogViewRunnable.create({asana_session:i, all_contacts:d, my_contacts:e}) : null}) : env.user().showWelcomeDialog() ? WelcomeDialogView.show({dialog_state_manager:i, all_contacts:d, my_contacts:e}) : (a = a.firstNewlyPremiumDomainOrNull(),
            a !== null && PremiumWelcomeDialogView.show({dialog_state_manager:i, domain:a}));
        return i
    }, onClientInit:function(a) {
        processHandler(function() {
            var b = a.width(), c = a.height();
            logEvent({name:"BrowserPageLoad", browser_width:b, browser_height:c, layout_is_narrow:b < AsanaSession.MIN_THREE_PANE_WIDTH_WITHOUT_OVERLAY})
        })
    }, newTestWorld:function(a) {
        AsanaTesting.createEmptyWorld(a)
    }, ui_function:function(a, b) {
        var c = AsanaView.create({_ui_context:ApplicationUIContext.create({user:env.user(), browser:a}), session:b});
        b.view = c;
        return c.render()
    }, renderTitle:function(a) {
        var b = env.getFlag("CLUSTER"), c = b === "prod" ? "" : b + ": ";
        return $rval(function() {
            if(a.currentViewType() === AsanaSession.CURRENT_VIEW_TYPE.LIST) {
                var b = a.currentListL().peekAllowingUnknown();
                return b === null || isUnknown(b) ? "Asana" : (b = a.getV("current_list").name(), c + b + " - Asana")
            }else {
                return b = a.inboxModelOrUnknown(), isUnknown(b) ? "Asana" : (b = b.domain().name(), c + b + " " + INBOX_NAME + " - Asana")
            }
        })
    }, renderFragment:function(a) {
        var b = a.detailsState().selectedRelativeOrNull(), c = a.inboxModelOrUnknown();
        if(isKnown(c) && c !== null) {
            return a = env.session_store.sessionObject2(InboxView.State, "AsanaView/InboxView." + c.global_id).selectedNotifications().lastValueOrNull(), b = a !== null ? b || a.story().parentObject() : null, AsanaHelpers.renderInboxPath(c, b, a)
        }
        c = a.currentList();
        if(c === null) {
            return""
        }
        b = b || a.gridState().mostRecentlySelectedItemOrNull();
        return AsanaHelpers.renderTaskPath(c, b)
    }, onFragmentChange:function(a, b) {
        env.is_server || env.startNavigating(!0);
        env.datastore_manager.enactChange(FragmentChange.create({fragment:b}))
    }, onWorkflowStep:function(a, b, c, d) {
        AsanaHelpers.onWorkflowStep(a, b, c, d)
    }, addInfoToLogEvent:function(a) {
        var b = env.realAppSession();
        if(b.activeDomain() !== null) {
            var c = b.activeDomain();
            a.current_domain = c;
            Experiment.experiments_by_subject_type.get(Experiment.SubjectType.CurrentDomain).forEach(function(b) {
                a.experiment_flags[b.name] = b.variant(c)
            })
        }
        if(a.details_visible === void 0) {
            a.details_visible = b.detailsVisible()
        }
        var d = b.currentViewType();
        if(a.current_view_type === void 0) {
            a.current_view_type = d
        }
        if(a.overview_mode_domain === void 0) {
            var e = env.session_store.sessionObject2(NavigationDockView.State, "AsanaView/NavigationDockView").domain();
            a.overview_mode_domain = e
        }
        if(a.grid_grouping === void 0 && d === AsanaSession.CURRENT_VIEW_TYPE.LIST) {
            a.grid_grouping = b.gridState().groupBy()
        }
    }, appForApi:function() {
        return AsanaApi.Application.create()
    }})
});
ShowWelcomeDialogViewRunnable = Runnable.subclass("ShowWelcomeDialogViewRunnable", {create:attributedValueFunc({asana_session:void 0, all_contacts:void 0, my_contacts:void 0}, function() {
    return env.session_store.createStateObject(ShowWelcomeDialogViewRunnable, {})
})}, {run:function() {
    WelcomeDialogView.show({dialog_state_manager:this.asana_session, all_contacts:this.all_contacts, my_contacts:this.my_contacts})
}});
__FILE__ = "luna/browser/browser_type_registry.js";
BrowserTypeRegistry = TypeRegistry.subclass("BrowserTypeRegistry", {}, {constructor:function(a) {
    BrowserTypeRegistry.superproto.constructor.call(this);
    this._type_id_map = a ? Deserializer.deserialize(a) : TypeIdMap.create()
}, typeIdMap:function() {
    return this._type_id_map
}, _putTypeIdMap:function() {
    ufu("Creating types on client not supported")
}, propertyIdMap:function() {
    return IdMap.create()
}, _putPropertyIdMap:function() {
    ufu("Creating properties on client not supported")
}});
__FILE__ = "luna/browser/client_datastore.js";
ClientDatastore = Datastore.subclass("ClientDatastore", {}, {_modified_object_id_to_unconfirmed_actions:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    ClientDatastore.superproto.constructor.call(this, a, b);
    this._modified_object_id_to_unconfirmed_actions = MultiMap.create()
}, addUnconfirmedModifiedObjectId:function(a, b) {
    this._modified_object_id_to_unconfirmed_actions.add(a, b)
}, removeUnconfirmedModifiedObjectId:function(a, b) {
    this._modified_object_id_to_unconfirmed_actions.remove(a, b)
}, unconfirmedModifiedObjectIds:function() {
    return this._modified_object_id_to_unconfirmed_actions.keys()
}, receiveDownstreamSyncInfo:function(a, b, c) {
    var d = this, e = a.new_datastore_key_values, f, g;
    a.is_full_data ? (f = Map.create(), e.forEach(function(a, b) {
        var c = d.readValue(a);
        isKnown(b) && c === b || f.put(a, b)
    }), g = Set.create(), d.forEachCachedValue(function(a) {
        e.containsKey(a) || g.add(a)
    })) : (f = e, g = Set.create(a.lvalues_to_remove), c.forEach(function(a, b) {
        a.datastore() === d && !f.containsKey(a) && !g.contains(a) && (isUnknown(b) ? g.add(a) : f.put(a, b))
    }));
    d._removePendingValues(b, f);
    d._removePendingValues(b, g);
    var h = [], i = [];
    f.keys().forEach(function(a) {
        d._datastore_cache_in_memory.isValueCached(a) ? h.push(a) : i.push(a)
    });
    env.datastore_manager.addRecentlyChangedLvalues(h);
    env.datastore_manager.addRecentlyReceivedLvalues(i);
    d._receiveDataFromServer(f, g)
}, datastoreValueMap:function() {
    return this._datastore_cache_in_memory.datastoreValueMap()
}, _removePendingValues:function(a, b) {
    a.forEach(function(a) {
        b.remove(a)
    })
}, _receiveDataFromServer:function(a, b) {
    this.writeValues(a);
    this.removeValues(b)
}, downstreamSyncInfo:function(a) {
    return DatastoreDownstreamSyncInfo.create({is_full_data:a, new_datastore_key_values:this._datastore_cache_in_memory.datastoreValueMap(), lvalues_to_remove:[]})
}, _cacheValues:function() {
    ufu("ClientDatastore does not support bringing in new values to caches")
}, readValue:function(a) {
    var b = this._datastore_cache_in_memory.readValue(a);
    this._trackAddress(a);
    return b
}, lockForUpdate:noop, readValues:function(a) {
    var b = this;
    return Map.create(a.map(function(a) {
        return[a, b.readValue(a)]
    }))
}, objectsWithoutAC:function(a) {
    var b = this;
    return a.map(function(a) {
        return b.objectWithoutAC(a)
    })
}, runInBatches:function(a) {
    return a()
}, isBatching:function() {
    return!1
}, runQuery:function(a) {
    var b = this;
    if(Flags.enable_fast_query_result_sharing) {
        host.profiler.timeFuncDetailed("ClientDatastore.runQuery", function() {
            var c = env.query_manager.serverQueryResultsOrNull(a.hash()) || ImmutableSet.empty_set, e = Set.create(c);
            b.unconfirmedModifiedObjectIds().forEach(function(b) {
                a.objectSatisfies(b) ? e.add(b) : e.remove(b)
            });
            a.considerInitialResults(e.values())
        })
    }else {
        var c = this._datastore_cache_in_memory.getQueriesResults(Set.create([a]));
        a.considerInitialResults(c.get(a))
    }
}, peekXvaluesAndStateObjectScalars:function(a, b) {
    Flags.diagnostics_check_handler_lvalues && (a.forEach(function(a) {
        toValueAllowingUnknown(a)
    }), b.forEach(function(a) {
        var b = $v(a);
        isKnown(b) && b.getProperties().forEach(function(a) {
            a.type !== List && toValueAllowingUnknown(b.getXvalue(a.key_name))
        })
    }))
}, peekXvaluesAndStateObjectScalarsWithoutDependencies:function(a, b) {
    if(Flags.diagnostics_check_handler_lvalues) {
        var c = this, d = $rval(function() {
            c.peekXvaluesAndStateObjectScalars(a, b)
        }, "peekXvaluesASOSWD");
        d.becomeWatch();
        $v(d)
    }
}, peekStateObjectProperties:function(a, b) {
    Flags.diagnostics_check_handler_lvalues && this._peekStateObjectProperties(a, b)
}, assertDoesNotBlockOnDatastore:function(a) {
    a()
}, assertNoSecondaryCacheReads:function(a) {
    a()
}, suppressNoSecondaryCacheReadAssertions:function(a) {
    return a()
}});
__FILE__ = "luna/browser/sync_socket.js";
SyncSocket = AsanaObject.subclass("SyncSocket", {}, {_delegate:SET_IN_CONSTRUCTOR, constructor:function(a) {
    SyncSocket.superproto.constructor.call(this);
    this._delegate = a
}, connect:ABSTRACT, enqueue:ABSTRACT});
MockSyncSocket = SyncSocket.subclass("MockSyncSocket", {}, {connect:function() {
}, enqueue:function() {
}});
__FILE__ = "luna/common/datastore/server_computed_rvalue_manager.js";
ServerComputedRvalueManager = AsanaObject.subclass("ServerComputedRvalueManager", {_Rvalue:Rvalue.subclass("ServerComputedRvalueManager._Rvalue", {}, {manager:SET_IN_CONSTRUCTOR, func:SET_IN_CONSTRUCTOR, thisp:SET_IN_CONSTRUCTOR, server_value:void 0, constructor:function(a, b, c, d) {
    ServerComputedRvalueManager._Rvalue.superproto.constructor.call(this);
    this.manager = a;
    this.func = c;
    this.thisp = d;
    this.setName(b);
    this.setNeededOnClientPolicy(Rvalue_NeededOnClientPolicy.NEVER)
}, maybeRemoveSelf:function() {
    this.server_value === void 0 && !this.isCached() && this.manager._rvalue_name_to_rvalue.remove(this._name)
}, computeValue:function() {
    return env.is_server ? (this.manager._changed_rvalues.add(this), this.func.call(this.thisp)) : this.server_value === void 0 ? UnknownValue.Loading.create(this, !1) : this.server_value
}, onUnused:function() {
    ServerComputedRvalueManager._Rvalue.superproto.onUnused.call(this);
    env.is_server ? this.manager._changed_rvalues.add(this) : this.maybeRemoveSelf()
}})}, {_rvalue_name_to_rvalue:SET_IN_CONSTRUCTOR, _changed_rvalues:SET_IN_CONSTRUCTOR, constructor:function() {
    ServerComputedRvalueManager.superproto.constructor.call(this);
    this._rvalue_name_to_rvalue = Map.create();
    this._changed_rvalues = Set.create()
}, rvalue:function(a, b, c) {
    var d = this._rvalue_name_to_rvalue.getOr(a, null);
    d === null && (d = ServerComputedRvalueManager._Rvalue.create(this, a, b, c), this._rvalue_name_to_rvalue.put(a, d), d.setAsSafelyPeekableByAncestor());
    return d
}, downstreamSyncInfo:function(a) {
    var b = this;
    if(a) {
        var c = Map.create();
        b._rvalue_name_to_rvalue.forEach(function(a, b) {
            env.is_server ? b.isCached() && c.put(b._name, b.getCachedValue()) : c.put(b._name, b.server_value)
        });
        a = ServerComputedRvalueDownstreamSyncInfo.create({is_full_data:!0, new_rvalue_name_to_value:c, rvalue_names_to_remove:[]})
    }else {
        var c = Map.create(), d = [];
        b._changed_rvalues.forEach(function(a) {
            a.isCached() ? c.put(a._name, a.getCachedValue()) : d.push(a._name)
        });
        a = ServerComputedRvalueDownstreamSyncInfo.create({is_full_data:!1, new_rvalue_name_to_value:c, rvalue_names_to_remove:d})
    }
    b._changed_rvalues.forEach(function(a) {
        b._changed_rvalues.remove(a);
        a.maybeRemoveSelf()
    });
    return a
}, receiveDownstreamSyncInfo:function(a) {
    var b = this;
    (a.is_full_data ? b._rvalue_name_to_rvalue.keys() : a.rvalue_names_to_remove).forEach(function(a) {
        a = b._rvalue_name_to_rvalue.getOr(a, null);
        if(a !== null) {
            a.server_value = void 0, a.maybeRemoveSelf(), env.frp.addDirtyRvalueIfUsed(a)
        }
    });
    a.new_rvalue_name_to_value.forEach(function(a, d) {
        var e = b.rvalue(a, null);
        e.server_value = d;
        env.frp.addDirtyRvalueIfUsed(e)
    })
}, size:function() {
    return this._rvalue_name_to_rvalue.size()
}});
__FILE__ = "luna/common/datastore/datastore_manager.js";
defineNamespace("Datastore.Manager");
FlagSystem.defineInt({name:"crash_after_n_failed_syncs", help:"N, where N is the number of the consecutive failed sync to crash on", default_value:2, send_to_client:!0});
Datastore.Manager.Base = AsanaObject.subclass("Datastore.Manager.Base", {STOP_HANDLER:makeUniqueValue("Datastore.Manager.Base.STOP_HANDLER")}, {server_computed_rvalue_manager:SET_IN_CONSTRUCTOR, _all_changes:null, _new_object_ids:null, _object_to_changed_l_values:null, _recently_changed_l_values:null, _recently_locally_changed_l_values:null, _recently_received_l_values:null, _active_indexes:null, constructor:function() {
    Datastore.Manager.Base.superproto.constructor.call(this);
    this.server_computed_rvalue_manager = ServerComputedRvalueManager.create();
    this._active_indexes = Set.create()
}, runHandlerAndPropagate:function(a) {
    var b = this;
    host.isDead() && ufu("Attempted to run a process handler when the host was already dead. This is most likely because an exception occurred but some other action triggered the process handler.");
    env.frp._process_handler_depth > 0 && host.recordWarningOnce("recursive call to processHandler");
    env.frp._process_handler_depth++;
    var c;
    host.profiler.timeFuncDetailed("processHandler", function() {
        var d;
        c = b.runHandler(function() {
            d = b.currentActionOrNull();
            return a()
        });
        env.frp.propagate([]);
        b.afterHandlerPropagation(d)
    });
    env.frp._process_handler_depth--;
    Signal.signal(env.frp, "processHandler_stop");
    return c
}, runHandler:function(a) {
    var b = this;
    try {
        b.beforeHandler()
    }catch(c) {
        if(c === Datastore.Manager.Base.STOP_HANDLER) {
            return
        }
        throw c;
    }
    b._all_changes !== null && ufu("Can't nest mutation contexts");
    b._all_changes = [];
    b._new_object_ids = Set.create();
    b._object_to_changed_l_values = MultiMap.create();
    var d, e;
    env.session_store.runInTransaction(function() {
        env.world_store.runInTransaction(function() {
            d = a.apply(b, $A(arguments).slice(1));
            UserActionContext.get().isStarted() && UserActionContext.get().end();
            b._updateStateObjectModificationTimes();
            e = b._object_to_changed_l_values;
            b._object_to_changed_l_values.forEach(function(a, b) {
                a.onBeforeCommit(b)
            })
        })
    });
    b._all_changes = null;
    b._new_object_ids = null;
    b._object_to_changed_l_values = null;
    b._active_indexes.forEach(function(a) {
        a.afterHandler()
    });
    b._active_indexes.clear();
    b.afterHandler();
    e.forEach(function(a, b) {
        a.onAfterCommit(b)
    });
    return d
}, runUntimelyFunc:function(a) {
    a()
}, enactChange:function(a) {
    this.isRunningHandler() || ufu("Requesting changes outside runHandler");
    this.beforeEnactingChange(a);
    this._all_changes.push(a);
    this._new_object_ids.addAll(a.getNewObjectIds());
    var b = [], c = StateObject.PropertyChangeResponse.accept(), d = null, e = null, f = null;
    if(a instanceof DatastoreScalarSetValueChange) {
        var g = a.mutatedAddress();
        g.isImplOf(IDatastoreAddress) && !g.isList() && g.property_name !== StateObject.PropertyName.TYPE_ID && !g.isSessionObject2() && (d = env.datastoreObjectWithoutAC(g.object_id), e = d.datastoreLvalueForAddress(g), f = a.mutatedValue(), d.onBeforeChangeProperty(e, f), c = d.validatePropertyChange(e, f), this._object_to_changed_l_values.add(d, e), b.push(e))
    }
    this.addRecentlyChangedLvalues(b);
    this.addRecentlyLocallyChangedLvalues(b);
    c.accepted ? c.new_value !== void 0 && (a instanceof DatastoreScalarSetValueChange ? (log.info("Change amended to new value, reason: " + c.reason), a.amendMutatedValue(c.new_value)) : ufu("Change rejected by object (wants to amend but change is not amendable), reason: " + c.reason)) : ufu("Change rejected by object, reason: " + c.reason);
    EvaluationContext.getTopRvalue() !== null && ufu("enacting while computing");
    a.enact(!1);
    if(e !== null) {
        d.onAfterChangeProperty(e, f)
    }
    this.afterEnactingChange(a)
}, addRecentlyChangedLvalues:function(a) {
    this._recently_changed_l_values && this._recently_changed_l_values.addAll(a)
}, addRecentlyLocallyChangedLvalues:function(a) {
    this._recently_locally_changed_l_values && this._recently_locally_changed_l_values.addAll(a)
}, addRecentlyReceivedLvalues:function(a) {
    this._recently_received_l_values && this._recently_received_l_values.addAll(a)
}, isRunningHandler:function() {
    return this._all_changes !== null
}, nonreactiveIsStateObjectNew:function(a) {
    return this.isRunningHandler() ? this._new_object_ids.contains(a) : !1
}, registerUnsetValues:function() {
}, _updateStateObjectModificationTimes:function() {
    if(!Flags.preserve_modification_times) {
        var a = env.clock.now();
        this._getModifiedButNotCreatedObjects().forEach(function(b) {
            b.hasProperty(StateObject.PropertyName.MODIFIED_AT) && b.getXvalue(StateObject.PropertyName.MODIFIED_AT).requestSet(a)
        })
    }
}, _getModifiedButNotCreatedObjects:function() {
    var a = this, b = Set.create();
    a._all_changes.forEach(function(a) {
        a.isImplOf(IMutatingChange) && (a = a.mutatedAddress(), a instanceof DatastoreLvalue && !a.isSessionObject2() && b.add(a.object_id))
    });
    var c = [];
    b.forEach(function(b) {
        a.nonreactiveIsStateObjectNew(b) || (b = env.datastoreObjectWithoutAC(b), c.push(b))
    });
    return c
}, currentActionOrNull:function() {
    return null
}, successSyncResponse:function(a) {
    return SuccessSyncResponse.create({status:RpcApi.Status.OK, world_sync_info:env.world_store.downstreamSyncInfo(a), session_sync_info:env.session_store.downstreamSyncInfo(a), scrv_sync_info:this.server_computed_rvalue_manager.downstreamSyncInfo(a), query_manager_sync_info:env.query_manager.downstreamSyncInfo(a)})
}, initialData:function() {
    var a = this.successSyncResponse(!0);
    return'server_globals.put("getInitialDatastoreData", function() {return ' + serializeToEvalable(a) + ";\n});\n"
}, beforeEnactingChange:function() {
}, afterEnactingChange:function() {
}, beforeHandler:function() {
}, afterHandler:function() {
}, afterHandlerPropagation:function() {
}});
processHandler = function(a) {
    return env.datastore_manager.runHandlerAndPropagate(a)
};
__FILE__ = "luna/common/version_info.js";
VersionInfo = define("VersionInfo", AsanaObject.subclass("VersionInfo", [ISerializable], {Headers:{RELEASE_REVISION:"X-Asana-Release-Revision"}, _current_version:null, configureAndLogOnClient:function() {
    VersionInfo._setCurrentVersion(server_globals.get("current_version"));
    VersionInfo.currentVersion().log()
}, currentVersion:function() {
    return VersionInfo._current_version
}, _setCurrentVersion:function(a) {
    VersionInfo._current_version = a
}}, {build_time_ms:ATTRIBUTE_REQUIRED, build_date_str:ATTRIBUTE_REQUIRED, commit_id:ATTRIBUTE_REQUIRED, commit_date_str:ATTRIBUTE_REQUIRED, release_revision:ATTRIBUTE_REQUIRED, session_version:ATTRIBUTE_REQUIRED, constructor:function(a) {
    VersionInfo.superproto.constructor.call(this);
    updateWithAttributes(this, a);
    this._setConstructionAttributes(a)
}, log:function() {
    log.info("Release revision " + this.release_revision)
}}));
__FILE__ = "luna/common/rpc_api.js";
RpcApi = {Status:{OK:"ok", MISSING_SESSION_STORE_ERROR:"missing_session_store_error", KILL_SESSION:"kill_session"}, MESSAGE_SECTION_DELIMITER:'<<<profiler"report>>>'};
SyncRequestMessage = define("SyncRequestMessage", AsanaObject.subclass("SyncRequestMessage", [ISerializable], {}, {actions:ATTRIBUTE_REQUIRED, sync_count:ATTRIBUTE_REQUIRED, session_dsl_values:ATTRIBUTE_REQUIRED, constructor:function(a) {
    SyncRequestMessage.superproto.constructor.call(this);
    updateWithAttributes(this, a);
    this._setConstructionAttributes(a)
}}));
DownstreamSyncInfo = define("DownstreamSyncInfo", AsanaObject.subclass("DownstreamSyncInfo", [ISerializable], {}, {is_full_data:ATTRIBUTE_REQUIRED, constructor:function(a) {
    DownstreamSyncInfo.superproto.constructor.call(this);
    updateWithAttributes(this, a);
    this._setConstructionAttributes(a)
}}));
DatastoreDownstreamSyncInfo = define("DatastoreDownstreamSyncInfo", DownstreamSyncInfo.subclass("DatastoreDownstreamSyncInfo", {}, {new_datastore_key_values:SET_IN_CONSTRUCTOR, lvalues_to_remove:null, constructor:function(a) {
    DatastoreDownstreamSyncInfo.superproto.constructor.call(this, a)
}}));
ServerComputedRvalueDownstreamSyncInfo = define("ServerComputedRvalueDownstreamSyncInfo", DownstreamSyncInfo.subclass("ServerComputedRvalueDownstreamSyncInfo", {}, {new_rvalue_name_to_value:ATTRIBUTE_REQUIRED, rvalue_names_to_remove:null, constructor:function(a) {
    ServerComputedRvalueDownstreamSyncInfo.superproto.constructor.call(this, a)
}}));
QueryManagerDownstreamSyncInfo = define("QueryManagerDownstreamSyncInfo", DownstreamSyncInfo.subclass("QueryManagerDownstreamSyncInfo", {}, {new_query_hashes:SET_IN_CONSTRUCTOR, queries_to_remove:null, constructor:function(a) {
    QueryManagerDownstreamSyncInfo.superproto.constructor.call(this, a)
}}));
NewQueryManagerDownstreamSyncInfo = define("NewQueryManagerDownstreamSyncInfo", DownstreamSyncInfo.subclass("NewQueryManagerDownstreamSyncInfo", {}, {new_query_results:null, queries_to_update:null, queries_to_remove:null}));
DatastoreManagerClientDownstreamSyncInfo = define("DatastoreManagerClientDownstreamSyncInfo", DownstreamSyncInfo.subclass("DatastoreManagerClientDownstreamSyncInfo", {}, {next_action_serial_number:ATTRIBUTE_REQUIRED, constructor:function(a) {
    DatastoreManagerClientDownstreamSyncInfo.superproto.constructor.call(this, a)
}}));
SyncResponse = define("SyncResponse", AsanaObject.subclass("SyncResponse", [ISerializable], {}, {status:ATTRIBUTE_REQUIRED, constructor:function(a) {
    SyncResponse.superproto.constructor.call(this);
    updateWithAttributes(this, a);
    this._setConstructionAttributes(a)
}}));
ErrorSyncResponse = define("ErrorSyncResponse", SyncResponse.subclass("ErrorSyncResponse", {}, {last_action_enacted_or_null:ATTRIBUTE_REQUIRED, debug_info:ATTRIBUTE_REQUIRED}));
SuccessSyncResponse = define("SuccessSyncResponse", SyncResponse.subclass("SuccessSyncResponse", {}, {world_sync_info:ATTRIBUTE_REQUIRED, session_sync_info:ATTRIBUTE_REQUIRED, query_manager_sync_info:ATTRIBUTE_REQUIRED, scrv_sync_info:ATTRIBUTE_REQUIRED, datastore_manager_client_sync_info:null, setDatastoreManagerClientSyncInfo:function(a) {
    this.datastore_manager_client_sync_info = a;
    this[ISerializable.CONSTRUCTION_ATTRIBUTES].datastore_manager_client_sync_info = a
}}));
ReloadReason = {INVALID_AUTH:"invalid-auth", RELEASE_REVISION_NOT_FOUND:"Release-Revision not found."};
__FILE__ = "luna/browser/datastore/datastore_manager_client.js";
defineNamespace("Datastore.Manager");
Datastore.Manager.Client = Datastore.Manager.Base.subclass("Datastore.Manager.Client", {DISCONNECTED_ERROR_MESSAGE:"Trying to connect...", SYNC_POLICY_MANUAL:"SYNC_POLICY_MANUAL", SYNC_POLICY_ON_CHANGE:"SYNC_POLICY_ON_CHANGE", SYNC_POLICY_POLL:"SYNC_POLICY_POLL", _MIN_SYNC_POLL_DELAY_MS:5 * Date.MILLISECONDS_PER_SECOND, DEFAULT_PAUSED_SYNC_DEADLINE_MS:500, _DEFAULT_SYNC_DEADLINE_MS:70 * Date.MILLISECONDS_PER_SECOND, _DEFAULT_RECONNECT_DEADLINE_MS:20 * Date.MILLISECONDS_PER_SECOND, _CLIENT_IDLE_FOR_SOFT_VERSION_ERROR_MS:10 *
    Date.MILLISECONDS_PER_MINUTE, _POLL_PERIOD_MS:Date.MILLISECONDS_PER_SECOND, _OVERLOAD_POLL_DELAY_MIN_MS:60 * Date.MILLISECONDS_PER_SECOND, _OVERLOAD_POLL_DELAY_RANGE_MS:20 * Date.MILLISECONDS_PER_SECOND, _NUM_FAILURES_TO_CONSIDER_OVERLOAD_SEVERE:4, _OVERLOAD_SEVERE_POLL_DELAY_RANGE_MS:10 * Date.MILLISECONDS_PER_MINUTE, _STATE_UP_TO_DATE:0, _STATE_SEND_REQUIRED:1, _STATE_SEND_IN_PROGRESS:2}, {changes_are_pending_lvalue:SET_IN_CONSTRUCTOR, error_message_lvalue:SET_IN_CONSTRUCTOR, last_successful_sync_time_lvalue:SET_IN_CONSTRUCTOR,
    next_sync_time_lvalue:SET_IN_CONSTRUCTOR, _sync_socket:SET_IN_CONSTRUCTOR, _sync_deadline_ms:SET_IN_CONSTRUCTOR, _temporarily_paused:SET_IN_CONSTRUCTOR, _reconnect_deadline_ms:SET_IN_CONSTRUCTOR, _history:SET_IN_CONSTRUCTOR, _sent_count:0, _confirmed_count:0, _successful_sync_count:0, _sync_timeout_id:null, _sync_timeout_ms:void 0, _sync_deadline_timeout_id:null, _is_sync_outstanding:!1, _is_in_onSocketMessage:!1, _is_stopped:!1, _sync_policy:null, _hard_reload_after_ms:null, _soft_version_error:!1,
    _reloading:!1, _transport_error_timeout_id:null, _consecutive_sync_errors:0, profiler_reports:SET_IN_CONSTRUCTOR, _baseline_counters:null, _current_action:null, _current_action_requestChange_depth:0, _current_changes_are_timely:!0, _unconfirmed_object_ids:SET_IN_CONSTRUCTOR, next_action_serial_number:0, _include_session_store:null, _num_consecutive_failed_syncs_with_changes:0, _poll_interval:null, _sync_observers:SET_IN_CONSTRUCTOR, _is_server_overloaded:!1, _sync_log:SET_IN_CONSTRUCTOR, _sync_log_sink:SET_IN_CONSTRUCTOR,
    constructor:function(a, b) {
        Datastore.Manager.Client.superproto.constructor.call(this);
        window.onbeforeunload = function() {
            if(!Flags.disable_onbeforeunload && env.datastore_manager.hasPendingWorldStoreChanges() && env.datastore_manager._hard_reload_after_ms === null) {
                return"Not all of your changes have been saved to the server yet.  Are you sure you wanna leave?"
            }
        };
        this._sync_socket = b.create(this);
        this._sync_observers = Set.create();
        this._history = [];
        this._sync_deadline_ms = Datastore.Manager.Client._DEFAULT_SYNC_DEADLINE_MS;
        this._temporarily_paused = !1;
        this._reconnect_deadline_ms = Datastore.Manager.Client._DEFAULT_RECONNECT_DEADLINE_MS;
        this.changes_are_pending_lvalue = LocalLvalue.create(!1).setName("env.datastore_manager.changes_are_pending_lvalue");
        this.error_message_lvalue = LocalLvalue.create(null).setName("env.datastore_manager.error_message_lvalue");
        this.last_successful_sync_time_lvalue = LocalLvalue.create(null).setName("env.datastore_manager.last_successful_sync_time_lvalue");
        this.next_sync_time_lvalue = LocalLvalue.create(null).setName("env.datastore_manager.next_sync_time_lvalue");
        this.out_of_date_dialog_visible_x = LocalLvalue.create(!1).setName("env.datastore_manager.out_of_data_dialog_visible_x");
        this._setSyncPolicy(a);
        this.profiler_reports = CircularQueue.create(10);
        this._unconfirmed_object_ids = Set.create();
        this._sync_log = Logger.create();
        this._sync_log_sink = StringLogSink.create(20);
        this._sync_log.addSink(this._sync_log_sink)
    }, start:function() {
        var a = this, b = env.pollDebugValues();
        this._sync_observers.forEach(function(a) {
            a.receiveInitialClientCounters(b)
        });
        this._sync_socket.connect();
        this._baseline_counters = env.counters.clone();
        this._start_time = env.clock.now();
        this._onStateChanged();
        a._recently_changed_l_values = Set.create();
        a._recently_locally_changed_l_values = Set.create();
        a._recently_received_l_values = Set.create();
        Signal.connect(env.frp, "propagate_all_stop", function() {
            a._recently_changed_l_values = Set.create();
            a._recently_locally_changed_l_values = Set.create();
            a._recently_received_l_values = Set.create()
        })
    }, initAndSetEnvSession:function(a, b) {
        this.handleSuccessSyncResponse(b);
        var c = env.world_store.objectWithoutAC(a), d = c.getV("last_action_enacted");
        env.setLunaSession(c);
        this.next_action_serial_number = Math.max(d + 1, this.next_action_serial_number)
    }, stop:function() {
        this._is_stopped = !0;
        this.setSyncPolicy(Datastore.Manager.Client.SYNC_POLICY_MANUAL)
    }, currentActionOrNull:function() {
        return this._current_action
    }, addSyncObserver:function(a) {
        this._sync_observers.add(a)
    }, removeSyncObserver:function(a) {
        this._sync_observers.remove(a)
    }, _setSyncPolicy:function(a) {
        var b = this;
        a !== Datastore.Manager.Client.SYNC_POLICY_POLL && env.sync_watchdog && env.sync_watchdog.setEnabled(!1);
        b._sync_policy = a;
        if(a === Datastore.Manager.Client.SYNC_POLICY_POLL) {
            b._poll_interval = safeInterval(function() {
                b._poll()
            }, Datastore.Manager.Client._POLL_PERIOD_MS)
        }else {
            if(b._poll_interval !== null) {
                clearInterval(this._poll_interval), this._poll_interval = null
            }
        }
    }, setSyncPolicy:function(a) {
        this._setSyncPolicy(a);
        this._onStateChanged()
    }, setSyncDeadlineMilliseconds:function(a) {
        this._sync_deadline_ms = a
    }, setReconnectDeadlineMilliseconds:function(a) {
        this._reconnect_deadline_ms = a
    }, sync:function() {
        this._sync(!0)
    }, pretendSyncStarted:function() {
        this._sync(!1)
    }, _sync:function(a) {
        var b = this;
        b._sync_log.debug("sync", a);
        b._is_in_onSocketMessage && ufu("sync() called in onSocketMessage");
        if(b._hard_reload_after_ms === null) {
            b._is_sync_outstanding && ufu("There is already a sync outstanding");
            host.profiler.timeFuncDetailed("Datastore.Manager.Client.sync", function() {
                RvalueProfiler.maybeEnable();
                if(b._sync_timeout_id !== null) {
                    safeClearTimeout(b._sync_timeout_id), b._sync_timeout_id = null
                }
                b.next_sync_time_lvalue.requestSet(env.clock.now());
                b._temporarily_paused = !1;
                b._clearDeadlineTimeout();
                if(b._sync_deadline_ms > 0 && a) {
                    b._sync_deadline_timeout_id = safeTimeout(b._onResponseTimeout.bind(b), b._sync_deadline_ms)
                }
                b._sent_count !== b._confirmed_count && (log.info("sync recent log", b._sync_log_sink.readLines()), ufu("The sent syncs count does not equal the confirmed count", b._sent_count, b._confirmed_count))
            });
            if(a) {
                b._sync_socket.enqueue(b._createSyncMessage(this._include_session_store))
            }else {
                b.onSocketMessageSent()
            }
            b._is_sync_outstanding = !0;
            b._sent_count = b._history.length;
            b._onStateChanged()
        }
    }, createSyncRequest:function() {
        return this._sync_socket.createRequestInfo(this._createSyncMessage(!0))
    }, syncIfSafe:function() {
        !this._is_sync_outstanding && !this._hasSyncDelayingError() && this.sync()
    }, requestSyncWhileServerOverloaded:function() {
        var a = this;
        this.next_sync_time_lvalue.requestSet(env.clock.now());
        safeTimeout(function() {
            a.isSyncOutstanding() || a.sync()
        }, 0)
    }, injectSyncResponse:function(a) {
        var b = function(b) {
            return a.headers && b in a.headers ? a.headers[b] : null
        };
        if(a.status_code !== 200) {
            this.onSocketClosed(new LunaAjaxError(a.status_message, a.status_code, a.headers ? {req:{getResponseHeader:b}} : {}))
        }else {
            this.onSocketMessage({responseText:a.body, getResponseHeader:b})
        }
    }, temporarilyPauseSyncing:function() {
        this._temporarily_paused = !0;
        this._onStateChanged()
    }, unpauseSyncing:function() {
        this._temporarily_paused && !this.allTimelyActionsSynced() ? (this._temporarily_paused = !1, this._onStateChanged()) : this._temporarily_paused = !1
    }, handleSuccessSyncResponse:function(a, b) {
        var c = this, d = Map.create();
        c._history.slice(c._confirmed_count, c._sent_count).forEach(function(a) {
            a.addTime("confirmed", b);
            env.perf_event_logger.addStageData(a.serial_number, "client_final_propagation", {start_time_ms:b, start_counters:env.counters.toRawObject()});
            c._confirmAction(a);
            a.previous_datastore_value_map.forEach(function(a, b) {
                d.containsKey(a) || d.put(a, b)
            })
        });
        c._confirmed_count = c._sent_count;
        var e = c._pendingDslvalues();
        env.world_store.receiveDownstreamSyncInfo(a.world_sync_info, e, d);
        env.world_store.clearAllUnusedValues();
        env.session_store.receiveDownstreamSyncInfo(a.session_sync_info, e, d);
        env.session_store.clearAllUnusedValues();
        c.server_computed_rvalue_manager.receiveDownstreamSyncInfo(a.scrv_sync_info);
        env.query_manager.receiveDownstreamSyncInfo(a.query_manager_sync_info);
        if(a.datastore_manager_client_sync_info !== null) {
            c.next_action_serial_number = a.datastore_manager_client_sync_info.next_action_serial_number
        }
    }, onSocketMessage:function(a) {
        var b = this;
        b._is_server_overloaded = !1;
        var c = a.responseText;
        env.isInTest() || host.profiler.reset();
        b._is_in_onSocketMessage = !0;
        var d = env.clock.now(), e = env.clock.now();
        b._clearDeadlineTimeout();
        var f = c.split(RpcApi.MESSAGE_SECTION_DELIMITER), g = f[0];
        log.info("** Finished syncing (received " + g.length + " bytes)");
        var h = Deserializer.deserialize(g), i = b._confirmed_count, a = a.getResponseHeader("X-Asana-Preferred-Release-Revision"), a = a !== null && a !== VersionInfo.currentVersion().release_revision;
        if(a !== b._soft_version_error) {
            log.info("Soft version error detected"), b._soft_version_error = a, Signal.signal(b, "on_soft_version_error_detected")
        }
        var j = h.status;
        try {
            if(j === RpcApi.Status.OK) {
                this._sync_observers.forEach(function(a) {
                    a.onSyncResponseBegin()
                }), this._num_consecutive_failed_syncs_with_changes = 0, b._onSuccess(h, d), this._sync_observers.forEach(function(a) {
                    a.onSyncResponseEnd()
                })
            }else {
                var l = h.last_action_enacted_or_null;
                if(l !== null && l !== LunaSession.LAST_ACTION_ENACTED_INITIAL) {
                    var m = b._historyIndexForActionSerialNumber(l) + 1;
                    b._confirmed_count = Math.max(m, b._confirmed_count);
                    log.info("Server confirmed count", m, "server last action enacted", l, "old client had confirmed count", i, "new client confirmed count", b._confirmed_count)
                }
                b._onFailure(j);
                log.debug(prettyProof("Server error:\n" + h.debug_info))
            }
            env.frp.propagate([])
        }catch(o) {
            throw log.error("Exception while handling sync response", h), o;
        }
        f.length === 2 ? profileWastedTimeCheaply(function() {
            j === RpcApi.Status.OK && env.frp.warnAboutUnknowns();
            b._is_in_onSocketMessage = !1;
            var a = host.profiler.rawReportAndReset();
            if(j === RpcApi.Status.OK) {
                var d = Deserializer.deserialize(f[1]), g = d.get("counters_diff"), l = g.get("dispatcher.total_wall_time_usec") / 1E3;
                if(Flags.diagnostics_profile_syncs) {
                    var m = Profiler.formatRawReport(a), o = null;
                    RvalueProfiler.active_profiler && (o = RvalueProfiler.active_profiler.prettyReport(), m += "\n\n\n" + o);
                    (d = d.getOr("serialized_server_profile_report", null)) ? (d = JSON.parse(d), d = Profiler.formatRawReport(d)) : d = "";
                    b.profiler_reports.push({client_report:a, client_rvalue_report:o, server_report_string:d, server_total_time:l});
                    log.info(prettyProof("server: " + d + "\n\nclient: " + m))
                }
                var r = env.counters.diff(b._baseline_counters).values();
                b._baseline_counters = env.counters.clone();
                r.put("sync.process_response_wall_time_ms", env.clock.now() - e);
                r.update(env.pollDebugValues());
                b._sync_observers.forEach(function(a) {
                    a.receiveInfoAboutSync(g, r)
                });
                var x = env.clock.now();
                b._history.slice(i, b._confirmed_count).forEach(function(a) {
                    a.addTime("propagated", x);
                    env.perf_event_logger.addStageData(a.serial_number, "client_final_propagation", {end_time_ms:x, end_counters:env.counters.toRawObject()});
                    a.server_counters = g;
                    if(a.name !== null) {
                        var b = "Action-" + a.name, d = FastMap.create(), e = 0;
                        a.times.forEach(function(b) {
                            var c = b[0], b = b[1];
                            c === "send sync message" ? (e === 0 && (d.put("first sync sent", b), env.perf_event_logger.addStageData(a.serial_number, "client_waiting_to_sync", {end_time_ms:b, end_counters:env.counters.toRawObject()}), env.perf_event_logger.addStageData(a.serial_number, "client_waiting_to_resync", {start_time_ms:b, start_counters:env.counters.toRawObject()})), d.put("last sync sent", b), env.perf_event_logger.addStageData(a.serial_number, "client_waiting_to_resync", {end_time_ms:b, end_counters:env.counters.toRawObject()}),
                                e += 1) : d.put(c, b)
                        });
                        env.perf_event_logger.addContext(a.serial_number, {action_name:b, test_info:a.test_info, session_id:env.lunaSession().global_id, serial_number:a.serial_number, already_syncing_when_enacted:a.already_syncing_when_enacted ? 1 : 0, had_sync_delaying_error_when_enacted:a.had_sync_delaying_error_when_enacted ? 1 : 0, sync_timeout_when_enacted:a.sync_timeout_when_enacted, history_state_when_enacted:a.history_state_when_enacted, response_length:c.length, response_had_full_data:h.world_sync_info.is_full_data});
                        processHandler(function() {
                            logEvent({name:b});
                            env.perf_event_logger.sendToServer(a.serial_number)
                        });
                        log.info(b, "total", d.get("propagated") - d.get("created"), "enacting", d.get("finished enacting") - d.get("created"), "initial propagation", d.get("propagated locally") - d.get("finished enacting"), "waiting to sync", d.get("first sync sent") - d.get("finished enacting"), "waiting to resync", d.get("last sync sent") - d.get("first sync sent"), "server total", l, "network", d.get("confirmed") - d.get("last sync sent") - l, "final propagation", d.get("propagated") - d.get("confirmed"))
                    }
                })
            }
        }) : b._is_in_onSocketMessage = !1
    }, onSocketClosed:function(a) {
        this._is_server_overloaded = !1;
        var b = a.xhr_error.req === void 0 ? null : a.xhr_error.req.getResponseHeader("X-Asana-Client-Must-Reload");
        if(b !== null) {
            log.info("Received X-Asana-Client-Must-Reload.", b), this.allTimelyActionsSynced() ? b === ReloadReason.INVALID_AUTH ? this.reloadNowAbandoningSession() : this._scheduleHardReload() : (env.appName() === "asana_mobile" ? this.reloadNowAbandoningSession() : this.out_of_date_dialog_visible_x.requestSet(!0), env.datastore_manager.setSyncPolicy(Datastore.Manager.Client.SYNC_POLICY_MANUAL), this.error_message_lvalue.requestSet(null))
        }else {
            if(this._sent_count !== this._confirmed_count && a.is_server_crash) {
                this._num_consecutive_failed_syncs_with_changes++, this._num_consecutive_failed_syncs_with_changes >= Flags.crash_after_n_failed_syncs ? ufu("Server crashed while syncing a change", "session id = ", env.lunaSession().global_id) : (log.info("Server crashed while syncing a change - Retrying"), this._onFailure("transport_error", null))
            }else {
                if(a.is_server_overloaded) {
                    this._is_server_overloaded = !0
                }
                this._onFailure("transport_error", null)
            }
        }
    }, onSocketMessageSent:function() {
    }, _createSyncMessage:function(a) {
        var b = this._unsentActions(), c = env.clock.now();
        b.forEach(function(a) {
            a.addTime("send sync message", c)
        });
        a && this._sent_count !== this._confirmed_count && ufu("Sent count does not match confirmed count", "sent_count", this._sent_count, "confirmed_count", this._confirmed_count);
        return SyncRequestMessage.create({actions:b, sync_count:this._successful_sync_count, session_dsl_values:a ? this._sessionStoreContentsAfterLastConfirmedAction() : null})
    }, _sessionStoreContentsAfterLastConfirmedAction:function() {
        for(var a = env.session_store.datastoreValueMap(), b = function(b, c) {
            b.datastore() === env.session_store && (isKnown(c) ? a.put(b, c) : a.remove(b))
        }, c = this._history.length - 1;c >= this._confirmed_count;c--) {
            this._history[c].previous_datastore_value_map.forEach(b)
        }
        return a
    }, _historyIndexForActionSerialNumber:function(a) {
        for(var b = this._history.length - 1;b >= 0;b--) {
            if(this._history[b].serial_number === a) {
                return b
            }
        }
        return-1
    }, _onSuccess:function(a, b) {
        this._successful_sync_count++;
        this.last_successful_sync_time_lvalue.requestSet(b);
        this._is_sync_outstanding = !1;
        this._clearTransportErrorTimeout();
        this._consecutive_sync_errors = 0;
        this._include_session_store = !1;
        this._sync_log.debug("on success, handling sync response", this._sent_count, this._confirmed_count);
        this.handleSuccessSyncResponse(a, b);
        this._sync_log.debug("on success, after handling sync response", this._sent_count);
        this._onStateChanged();
        Signal.signal(this, "finished_syncing");
        this.error_message_lvalue.requestSet(null);
        env.sync_watchdog.onSynced()
    }, _onFailure:function(a) {
        var b = this;
        this._include_session_store = this._is_sync_outstanding = !1;
        this._sync_log.debug("on failure, connecting", a);
        this._sync_socket.connect();
        this._consecutive_sync_errors++;
        this._sync_log.debug("on failure, after connecting", this._consecutive_sync_errors, this._sent_count, this._confirmed_count);
        this._sent_count = this._confirmed_count;
        if(a === "transport_error") {
            if(this._clearDeadlineTimeout(), this._transport_error_timeout_id === null) {
                log.debug("Sync: transport error.  Will tell user in " + b._reconnect_deadline_ms + "ms."), this._transport_error_timeout_id = safeTimeout(function() {
                    b.error_message_lvalue.requestSet(Datastore.Manager.Client.DISCONNECTED_ERROR_MESSAGE);
                    env.frp.propagate([])
                }, b._reconnect_deadline_ms)
            }
        }else {
            this._clearTransportErrorTimeout(), a === RpcApi.Status.MISSING_SESSION_STORE_ERROR ? (this._include_session_store = !0, this._consecutive_sync_errors = 0) : a === RpcApi.Status.KILL_SESSION ? ufu("Instructed by server to kill session. Goodbye cruel world!") : b.error_message_lvalue.requestSet("Unknown failure")
        }
        this._onStateChanged()
    }, _scheduleHardReload:function() {
        var a = env.lunaSessionState().timeSinceLastDomAction(), b = Date.MILLISECONDS_PER_HOUR, c = 2 * Date.MILLISECONDS_PER_MINUTE, d = 10 * Date.MILLISECONDS_PER_MINUTE, a = a > b ? c + Math.floor(Math.random() * d) : c * a / b;
        this._hard_reload_after_ms = env.clock.now() + a
    }, reloadNowAbandoningSession:function() {
        env.runningApp().browser().isIosWrapper() && AsanaMobileWrapperLib.capabilities().new_app ? window.location.href = "asanacmd://localhost./#:clearCacheAndLoad" : window.location = window.location
    }, reloadNowPreservingSession:function() {
        if(env.runningApp().browser().isIosWrapper() && AsanaMobileWrapperLib.capabilities().new_app) {
            this.reloadNowAbandoningSession()
        }else {
            if(this._reloading) {
                log.info("asked to reload now but ignoring because we are already reloading")
            }else {
                this._reloading = !0;
                log.info("reloading now");
                this.stop();
                this.error_message_lvalue.requestSet("Updating to new version");
                this._onStateChanged();
                var a = VersionInfo.currentVersion(), b = {};
                b[VersionInfo.Headers.RELEASE_REVISION] = a.release_revision;
                update(b, {session_id:server_globals.get("session_id"), session_dsl_values:Serializer.serialize(env.session_store.datastoreValueMap()), session_version:env.lunaSession().lunaSessionState().version(), session_reload_count:env.lunaSession().reloadCount() + 1});
                if(host.profiler.isEnabled()) {
                    b.profiler = "1"
                }
                forms.postToUrl(window.location.href, b)
            }
        }
    }, runUntimelyFunc:function(a) {
        var b = this._current_changes_are_timely;
        this._current_changes_are_timely = !1;
        try {
            a()
        }finally {
            this._current_changes_are_timely = b
        }
    }, successSyncResponse:function(a) {
        var b = Datastore.Manager.Client.superproto.successSyncResponse.call(this, a);
        b.setDatastoreManagerClientSyncInfo(DatastoreManagerClientDownstreamSyncInfo.create({is_full_data:a, next_action_serial_number:this.next_action_serial_number}));
        return b
    }, beforeEnactingChange:function(a) {
        var b = this;
        b._current_action_requestChange_depth++;
        b._current_action_requestChange_depth === 1 && b._current_action.changes.push(a);
        b._current_action.all_changes.push(a);
        if(a.isImplOf(IMutatingChange)) {
            var c = a.mutatedAddress();
            if(!b._current_action.previous_datastore_value_map.containsKey(c)) {
                var d = c.datastore();
                Flags.enable_fast_query_result_sharing && !Datastore.isSessionObject2Id(c.object_id) && d.addUnconfirmedModifiedObjectId(c.object_id, b._current_action);
                b._current_action.previous_datastore_value_map.put(c, d.readValue(c))
            }
        }
        a.getNewObjectIds().forEach(function(a) {
            b._unconfirmed_object_ids.add(a)
        });
        if(b._current_changes_are_timely) {
            b._current_action.timely = !0
        }
        if(a.required_on_server) {
            b._current_action.required_on_server = !0
        }
    }, afterEnactingChange:function() {
        this._current_action_requestChange_depth--
    }, reloadNowIfPending:function() {
        if(this._hard_reload_after_ms !== null) {
            return this.reloadNowPreservingSession(), !0
        }
        return!1
    }, currentActionHasChanges:function() {
        return this._current_action.changes.length > 0
    }, beforeHandler:function() {
        this._current_action = Action.create();
        this._current_action.addTime("created", env.clock.now())
    }, afterHandler:function() {
        if(this.currentActionHasChanges()) {
            var a = this._current_action, b = this._lastUnsentActionOrNull(), c = !1;
            !Flags.enable_action_coalescing || b === null || !(c = a.coalesceInto(b)) ? (a.serial_number = this.next_action_serial_number++, a.already_syncing_when_enacted = this._is_sync_outstanding, a.had_sync_delaying_error_when_enacted = this._hasSyncDelayingError(), this._enqueueAction(a), a.sync_timeout_when_enacted = this._sync_timeout_id === null ? "undefined" : this._sync_timeout_ms, a.history_state_when_enacted = this._historyState(), this._current_action.addTime("finished enacting", env.clock.now()),
                env.perf_event_logger.addStageData(this._current_action.serial_number, "client_enacting", {start_time_ms:this._current_action.start_time_ms, start_counters:this._current_action.start_counters, end_time_ms:env.clock.now(), end_counters:env.counters.toRawObject()}), env.perf_event_logger.addStageData(this._current_action.serial_number, "client_initial_propagation", {start_time_ms:env.clock.now(), start_counters:env.counters.toRawObject()}), env.perf_event_logger.addStageData(this._current_action.serial_number,
                "client_waiting_to_sync", {start_time_ms:env.clock.now(), start_counters:env.counters.toRawObject()})) : c && this._onStateChanged()
        }
        this._current_action = null;
        !Flags.diagnostics_sync_only_after_propagation && this._sync_timeout_id !== null && this._sync_timeout_ms === 0 && this.sync()
    }, afterHandlerPropagation:function(a) {
        a && (a.addTime("propagated locally", env.clock.now()), env.perf_event_logger.addStageData(a.serial_number, "client_initial_propagation", {end_time_ms:env.clock.now(), end_counters:env.counters.toRawObject()}))
    }, registerUnsetValues:function(a) {
        var b = this._current_action.previous_datastore_value_map;
        a.forEach(function(a, d) {
            b.containsKey(a) || b.put(a, d)
        })
    }, _enqueueAction:function(a) {
        this._history.push(a);
        this._onStateChanged()
    }, _confirmAction:function(a) {
        var b = this;
        a.all_changes.forEach(function(c) {
            if(Flags.enable_fast_query_result_sharing && c.isImplOf(IMutatingChange)) {
                var d = c.mutatedAddress();
                Datastore.isSessionObject2Id(d.object_id) || d.datastore().removeUnconfirmedModifiedObjectId(d.object_id, a)
            }
            c.getNewObjectIds().forEach(function(a) {
                b._unconfirmed_object_ids.checkedRemove(a)
            })
        })
    }, isObjectIdUnconfirmed:function(a) {
        return this._unconfirmed_object_ids.contains(a)
    }, setCurrentHandlerName:function(a) {
        this._current_action.name = a
    }, actionMarker:function() {
        return this._history.length
    }, actionsSinceMarker:function(a) {
        return this._history.slice(a)
    }, allTimelyActionsSynced:function() {
        return this._historyState() === Datastore.Manager.Client._STATE_UP_TO_DATE
    }, allRequiredActionsSynced:function() {
        for(var a = this._confirmed_count;a < this._history.length;a++) {
            if(this._history[a].required_on_server) {
                return!1
            }
        }
        return!0
    }, isSyncOutstanding:function() {
        return this._is_sync_outstanding
    }, _pendingDslvalues:function() {
        var a = Set.create();
        this._unsentActions().forEach(function(b) {
            b.previous_datastore_value_map.forEach(function(b) {
                a.add(b)
            })
        });
        return a
    }, _historyState:function() {
        if(this._confirmed_count < this._sent_count) {
            return Datastore.Manager.Client._STATE_SEND_IN_PROGRESS
        }else {
            if(this._confirmed_count < this._history.length) {
                for(var a = this._confirmed_count;a < this._history.length;a++) {
                    if(this._history[a].timely) {
                        return Datastore.Manager.Client._STATE_SEND_REQUIRED
                    }
                }
            }
            return Datastore.Manager.Client._STATE_UP_TO_DATE
        }
    }, hasPendingWorldStoreChanges:function() {
        var a = !1;
        this._pendingDslvalues().forEach(function(b) {
            b.datastore() === env.world_store && (a = !0)
        });
        return a
    }, successfulSyncCount:function() {
        return this._successful_sync_count
    }, consecutiveSyncErrors:function() {
        return this._consecutive_sync_errors
    }, _onResponseTimeout:function() {
        this._sync_deadline_timeout_id = null;
        log.debug("Sync: response timed out after " + this._sync_deadline_ms + "ms.");
        this._onFailure("transport_error", null)
    }, _clearDeadlineTimeout:function() {
        if(this._sync_deadline_timeout_id !== null) {
            safeClearTimeout(this._sync_deadline_timeout_id), this._sync_deadline_timeout_id = null
        }
    }, _clearTransportErrorTimeout:function() {
        if(this._transport_error_timeout_id !== null) {
            safeClearTimeout(this._transport_error_timeout_id), this._transport_error_timeout_id = null
        }
    }, _unsentActions:function() {
        return this._history.slice(this._sent_count)
    }, _lastUnsentActionOrNull:function() {
        return this._history.length > this._sent_count ? this._history.last() : null
    }, _hasSyncDelayingError:function() {
        return this.error_message_lvalue.peek() !== null || this._consecutive_sync_errors > 1
    }, _onStateChanged:function() {
        var a = !1, b = !1;
        if(!this._is_sync_outstanding) {
            if(this._historyState() === Datastore.Manager.Client._STATE_SEND_REQUIRED && (this._sync_policy === Datastore.Manager.Client.SYNC_POLICY_ON_CHANGE || this._sync_policy === Datastore.Manager.Client.SYNC_POLICY_POLL)) {
                a = !0, b = !this._hasSyncDelayingError() || this._include_session_store
            }else {
                if(this._sync_policy === Datastore.Manager.Client.SYNC_POLICY_POLL) {
                    a = !0, b = this._include_session_store
                }
            }
        }
        var c = this._sync_timeout_id !== null;
        if(a !== c || b) {
            if(c && this._sync_timeout_id !== null) {
                safeClearTimeout(this._sync_timeout_id), this._sync_timeout_id = null
            }
            a && (a = b ? this._temporarily_paused ? Datastore.Manager.Client.DEFAULT_PAUSED_SYNC_DEADLINE_MS : 0 : this._syncDelay(), this.next_sync_time_lvalue.requestSet(env.clock.now() + a), this._scheduleDeferredSync(a))
        }
    }, _poll:function() {
        var a = env.clock.now();
        Csrf.computeSignatureAndSadlyRunEventHandlers();
        if(this._soft_version_error) {
            var b = env.lunaSessionState().timeSinceLastDomAction(), c = this.allTimelyActionsSynced(), d = Datastore.Manager.Client._CLIENT_IDLE_FOR_SOFT_VERSION_ERROR_MS;
            a % 5 === 0 && log.debug("soft version error", "idle time", b + "/" + d, "fully synced", c);
            var e = Flags.soft_version_error_reload_window_minutes * Date.MILLISECONDS_PER_MINUTE / Datastore.Manager.Client._POLL_PERIOD_MS;
            if(b > d && c && Random.integer({max:e}) === 0 && !env.runningApp().browser().isIosWrapper()) {
                log.info("reloading because of a soft version error");
                this.reloadNowPreservingSession();
                return
            }
        }
        this._hard_reload_after_ms !== null && this._hard_reload_after_ms <= a && this.reloadNowPreservingSession()
    }, _syncDelay:function() {
        var a = env.lunaSessionState().timeSinceLastDomAction(), b = Date.MILLISECONDS_PER_HOUR, c = 40 * Date.MILLISECONDS_PER_MINUTE, d = 1 * Date.MILLISECONDS_PER_HOUR, e = Datastore.Manager.Client._MIN_SYNC_POLL_DELAY_MS, f = Datastore.Manager.Client._MIN_SYNC_POLL_DELAY_MS + 20 * Date.MILLISECONDS_PER_SECOND, g = this._serverSeverelyOverloaded();
        this._consecutive_sync_errors > 0 && !this._is_server_overloaded ? a = e : a > b ? a = d : a > c ? a = g ? d : interpolate(a, c, b, f, d) : this._is_server_overloaded ? (a = Datastore.Manager.Client._OVERLOAD_POLL_DELAY_MIN_MS + (g ? Datastore.Manager.Client._OVERLOAD_SEVERE_POLL_DELAY_RANGE_MS : Datastore.Manager.Client._OVERLOAD_POLL_DELAY_RANGE_MS) * Math.random(), a = parseInt(a, 10), log.info("delaying sync due to 502/503/504, delay:", a)) : a = interpolate(a, 0, c, e, f);
        return a
    }, _serverSeverelyOverloaded:function() {
        return this._is_server_overloaded && this._consecutive_sync_errors >= Datastore.Manager.Client._NUM_FAILURES_TO_CONSIDER_OVERLOAD_SEVERE
    }, _scheduleDeferredSync:function(a) {
        var b = this;
        this._sync_timeout_id = safeTimeout(function() {
            b.sync()
        }, a);
        this._sync_timeout_ms = a
    }});
stopSync = host.wrapInExceptionHandler("stopSync", ExceptionHandler.ReentryStrategy.DELAY, function() {
    env.datastore_manager.setSyncPolicy(Datastore.Manager.Client.SYNC_POLICY_MANUAL)
});
__FILE__ = "luna/browser/sync_watchdog.js";
SyncWatchdog = AsanaObject.subclass("SyncWatchdog", {INTERVAL_MS:65E3}, {_interval_id:null, _synced_since_last_check:!1, constructor:function() {
    SyncWatchdog.superproto.constructor.call(this);
    this._synced_since_last_check = !0
}, setEnabled:function(a) {
    var a = !1, b = this;
    if(!!this._interval_id !== a) {
        a ? this._interval_id = safeInterval(function() {
            b.check()
        }, SyncWatchdog.INTERVAL_MS) : clearInterval(this._interval_id)
    }
}, check:function() {
    var a = !!document.getElementById("error_message_box");
    log.debug("SyncWatchdog.check", "synced since last check", this._synced_since_last_check, "red_box_showing", a);
    !this._synced_since_last_check && !a && this._notifyOfError();
    this._synced_since_last_check = !1
}, onSynced:function() {
    log.info("SyncWatchdog.onSynced");
    this._synced_since_last_check = !0
}, _notifyOfError:function() {
    alertAsync("We don't seem to be communicating with the server. Asana is looking into this but in the meantime please reload the page.");
    host.notifyUserAboutError();
    clearInterval(this._interval_id)
}});
__FILE__ = "luna/browser/server_call_sync_socket.js";
ServerCallSyncSocket = SyncSocket.subclass("ServerCallSyncSocket", {}, {_socket_is_open:!1, _unsent_messages:SET_IN_CONSTRUCTOR, _rpc_deferred:null, _in_flush:!1, constructor:function(a) {
    ServerCallSyncSocket.superproto.constructor.call(this, a);
    this._unsent_messages = []
}, connect:function() {
    var a = this;
    if(a._rpc_deferred !== null) {
        host.runOutsideExceptionHandler(function() {
            a._rpc_deferred.cancel()
        }), a._rpc_deferred = null
    }
    a._unsent_messages = [];
    a._socket_is_open = !0
}, enqueue:function(a) {
    this._unsent_messages.push(a);
    this._flush()
}, createRequestInfo:function(a) {
    a = Serializer.serialize(a);
    return env.createRequestInfo("socket", "text/plain", a)
}, _flush:function() {
    this._in_flush && ufu("already flushing");
    this._in_flush = !0;
    try {
        if(this._socket_is_open && this._rpc_deferred === null && this._unsent_messages.length > 0) {
            var a = this.createRequestInfo(this._unsent_messages[0]);
            this._rpc_deferred = env.postRequestInfo(a);
            this._delegate.onSocketMessageSent();
            this._unsent_messages = this._unsent_messages.slice(1);
            this._rpc_deferred.addCallback(this._onRequestSucceeded.bind(this));
            this._rpc_deferred.addErrback(this._onRequestFailed.bind(this))
        }
    }finally {
        this._in_flush = !1
    }
}, _onRequestSucceeded:function(a) {
    this._rpc_deferred = null;
    this._runDelegateCallback("onSocketMessage", [a])
}, _onRequestFailed:function(a) {
    this._rpc_deferred = null;
    this._socket_is_open = !1;
    this._runDelegateCallback("onSocketClosed", [a])
}, _runDelegateCallback:function(a, b) {
    var c = this;
    c._in_flush || env.frp.propagating() ? safeTimeout(function() {
        c._delegate[a].apply(c._delegate, b)
    }, 0) : c._delegate[a].apply(c._delegate, b)
}});
__FILE__ = "luna/common/action.js";
define("Action", AsanaObject.subclass("Action", [ISerializable], {create:function() {
    var a = Action._create();
    a.serialized_changes = null;
    a.tainted_and_not_new_world_object_ids = null;
    a.tracked_addresses_to_cache = null;
    a.serialized_changes = null;
    a.changes = [];
    a.all_changes = [];
    a.previous_datastore_value_map = Map.create();
    a.times = [];
    a.start_time_ms = env.clock.now();
    a.start_counters = env.counters.toRawObject();
    a.test_info = Action.action_test_info;
    return a
}, createForTesting:function(a, b, c) {
    var d = Action._create();
    d.changes = a;
    d.all_changes = a;
    d.serial_number = b;
    d.serialized_changes = [];
    d.tainted_and_not_new_world_object_ids = Set.create(c || []);
    d.tracked_addresses_to_cache = [];
    return d
}, action_test_info:null}, {serial_number:SET_IN_CONSTRUCTOR, name:null, test_info:null, changes:SET_IN_CONSTRUCTOR, all_changes:SET_IN_CONSTRUCTOR, previous_datastore_value_map:SET_IN_CONSTRUCTOR, timely:!1, required_on_server:!1, start_time_ms:SET_IN_CONSTRUCTOR, start_counters:SET_IN_CONSTRUCTOR, times:SET_IN_CONSTRUCTOR, server_counters:null, already_syncing_when_enacted:void 0, had_sync_delaying_error_when_enacted:void 0, sync_timeout_when_enacted:void 0, serialized_changes:SET_IN_CONSTRUCTOR,
    tainted_and_not_new_world_object_ids:SET_IN_CONSTRUCTOR, tracked_addresses_to_cache:SET_IN_CONSTRUCTOR, toRawJS:function(a) {
        var b = function(a) {
            return a.filter(function(a) {
                return env.datastoreForObjectId(a) === env.world_store
            })
        }, c = Set.create(), d = Set.create();
        this.changes.forEach(function(a) {
            c.addAll(b(a.taintedObjectIds()));
            d.addAll(b(a.getNewObjectIds()))
        });
        var e = ImmutableSet.onlyInLeft(c, d), f = [];
        this.changes.forEach(function(a) {
            if(a.isImplOf(IMutatingChange) && (a = a.mutatedAddress(), a.isImplOf(IDatastoreAddress) && a.datastore() === env.world_store && !a.isList() && a.property_name !== StateObject.PropertyName.TYPE_ID)) {
                var b = env.world_store.objectOrUnknownWithoutAC(a.object_id);
                isKnown(b) && b.getProperty(a.property_name).track_initial_value && f.push(a)
            }
        });
        return[this.changes.map(function(a) {
            return Serializer.serialize(a)
        }), this.serial_number, a.freeze(e), this.name, this.test_info, a.freeze(f)]
    }, fromRawJS:function(a, b) {
        this.constructor();
        this.changes = null;
        this.serial_number = a[1];
        this.previous_datastore_value_map = this.all_changes = null;
        this.serialized_changes = a[0];
        this.name = a[3];
        this.test_info = a[4];
        this.tainted_and_not_new_world_object_ids = b.thaw(a[2]);
        this.tracked_addresses_to_cache = a[5] !== void 0 ? b.thaw(a[5]) : []
    }, allChanges:function() {
        return this.all_changes
    }, coalesceInto:function(a) {
        if(!a.timely && this.timely) {
            return vlogEnabled("action-coalescing") && vlog("action-coalescing", "Not coalescing. Into action is not timely but from action is."), !1
        }
        if(!a._allChangesAreDatastoreScalarLvalueChanges() || !this._allChangesAreDatastoreScalarLvalueChanges()) {
            return!1
        }
        var b = a._datastoreScalarLvalueChangesByAddress(), c = this._datastoreScalarLvalueChangesByAddress();
        if(b.size() !== c.size()) {
            return vlogEnabled("action-coalescing") && vlog("action-coalescing", "Not coalescing. Actions change different numbers of properties."), !1
        }
        if(!b.keys().all(function(a) {
            return c.containsKey(a)
        })) {
            return vlogEnabled("action-coalescing") && vlog("action-coalescing", "Not coalescing. Actions change different sets of properties."), !1
        }
        log.info("Coalescing current action into unsent action #" + a.serial_number);
        c.forEach(function(a, c) {
            var f = b.get(a).last(), g = c.last();
            f[ISerializable.CONSTRUCTION_ATTRIBUTES].new_value = f.new_value = g.new_value
        });
        return!0
    }, forEachChange:function(a) {
        this.changes === null ? this.serialized_changes.forEach(function(b) {
            b = Deserializer.deserialize(b);
            a(b)
        }) : this.changes.forEach(a)
    }, addTime:function(a, b) {
        this.times.push([a, b])
    }, _datastoreScalarLvalueChangesByAddress:function() {
        return this.changes.group(function(a) {
            return a.address
        })
    }, _allChangesAreDatastoreScalarLvalueChanges:function() {
        return this.changes.all(function(a) {
            return a.__type_name === "DatastoreScalarSetValueChange"
        })
    }}));
__FILE__ = "luna/common/browser_info.js";
BrowserInfo = AsanaObject.subclass("BrowserInfo", {_MOBILE_RE:/(iphone|ipod|ipad|blackberry|android|palm|windows\s+ce|TestAsanaMobilePageLoad)/i, _BROWSER_RECORDS:[{search_string:"Chrome", name:"Chrome"}, {search_string:"OmniWeb", version_search_string:"OmniWeb/", name:"OmniWeb"}, {search_string:"AsanaApp", name:"AsanaApp", version_search_string:"AsanaApp"}, {search_string:"AsanaAndroidApp", name:"AsanaAndroidApp", version_search_string:"AsanaAndroidApp"}, {search_string:"Apple", name:"Safari", version_search_string:"Version"},
    {search_string:"Firefox", name:"Firefox"}, {search_string:"Netscape", name:"Netscape"}, {search_string:"MSIE", name:"Explorer"}, {search_string:"Gecko", name:"Mozilla", version_search_string:"rv"}, {search_string:"Mozilla", name:"Netscape", version_search_string:"Mozilla"}, {search_string:"Android", name:"Android"}], isIphone:function(a) {
    return/iphone/gi.test(a)
}, isIosWrapper:function(a) {
    return BrowserInfo.iosWrapperVersionOrNull(a) !== null
}, iosWrapperVersionOrNull:function(a) {
    return(a = /\(AsanaApp (\d+\.\d[^)]*)\)/.exec(a)) ? parseFloat(a[1]) : null
}, androidVersionOrNull:function(a) {
    return(a = /Android (\d+\.\d+)/.exec(a)) ? parseFloat(a[1]) : null
}, androidWrapperVersionOrNull:function(a) {
    return(a = /\(AsanaAndroidApp (\d+\.\d[^)]*)\)/.exec(a)) ? parseFloat(a[1]) : null
}}, {_user_agent:SET_IN_CONSTRUCTOR, _matching_record:SET_IN_CONSTRUCTOR, constructor:function(a) {
    BrowserInfo.superproto.constructor.call(this);
    this._user_agent = a || "";
    this._matching_record = null;
    for(a = 0;a < BrowserInfo._BROWSER_RECORDS.length;a++) {
        var b = BrowserInfo._BROWSER_RECORDS[a];
        if(this._user_agent.contains(b.search_string)) {
            this._matching_record = b;
            break
        }
    }
}, userAgent:function() {
    return this._user_agent
}, name:function() {
    return this._matching_record === null ? "An unknown browser" : this._matching_record.name
}, version:function() {
    if(this._matching_record !== null) {
        var a = this._matching_record.version_search_string || this._matching_record.search_string, b = this._user_agent.indexOf(a);
        if(b !== -1) {
            return parseFloat(this._user_agent.substring(b + a.length + 1))
        }
    }
    return"an unknown version"
}, isMobile:function() {
    return BrowserInfo._MOBILE_RE.test(this._user_agent)
}, isChromeFrame:function() {
    return this._user_agent.contains("chromeframe")
}, isWebKit:function() {
    return this._user_agent.contains("WebKit")
}, isFluidApp:function() {
    return this._user_agent.contains("FluidApp")
}, isIosSafari:function() {
    return/iphone|ipad/gi.test(this._user_agent) && this.name() === "Safari"
}, isIosWrapper:function() {
    return BrowserInfo.isIosWrapper(this._user_agent)
}, iosWrapperVersionOrNull:function() {
    return BrowserInfo.iosWrapperVersionOrNull(this._user_agent)
}, androidWrapperVersionOrNull:function() {
    return BrowserInfo.androidWrapperVersionOrNull(this._user_agent)
}, isAndroid:function() {
    return this._user_agent.contains("Android")
}, nameAndVersion:function() {
    return this.name() + " " + this.version()
}, isSupported:function(a) {
    var b = this.name(), c = this.version();
    return(b === "Firefox" && c >= 6 || b === "Chrome" && c >= 11 || b === "Safari" || b === "AsanaApp" || b === "AsanaAndroidApp") && (a || !this.isMobile()) || this.isChromeFrame()
}});
__FILE__ = "luna/common/counters.js";
Counters = AsanaObject.subclass("Counters", {}, {_values:SET_IN_CONSTRUCTOR, constructor:function(a) {
    Counters.superproto.constructor.call(this);
    this._values = a ? a : Map.create()
}, clone:function() {
    return Counters.create(this._values.clone())
}, increment:function(a, b) {
    var c = this;
    profileWastedTimeCheaply(function() {
        c._values.incrementCount(a, b)
    })
}, runAndUpdateCountersWithTime:function(a, b) {
    var c = this, d = env.clock.now(), e = b(), f = env.clock.now() - d;
    a.forEach(function(a) {
        c.increment("ms." + a, f)
    });
    return e
}, get:function(a) {
    return this._values.getCount(a)
}, values:function() {
    return this._values.clone()
}, toRawObject:function() {
    return this._values.toRawObject()
}, diff:function(a) {
    return Counters.create(this._values.mapValues(function(b, c) {
        return b - a._values.getCount(c)
    }))
}, withoutZeroes:function() {
    return Counters.create(this._values.filterEntries(function(a, b) {
        return b !== 0
    }))
}, getPrettyInfo:function() {
    return[this.__type_name, [this._values.stringMapPrettyPrintable()]]
}});
__FILE__ = "luna/common/config.js";
LunaConfig = AsanaObject.subclass("LunaConfig", {}, {constructor:function(a, b) {
    LunaConfig.superproto.constructor.call(this);
    this.CLUSTER = a;
    update(this, b)
}, CLUSTER:SET_IN_CONSTRUCTOR, PRETTY_JS_CODEGEN:SET_IN_CONSTRUCTOR, APPLICATION_DOMAIN:SET_IN_CONSTRUCTOR, SEND_SERVER_ERRORS_IN_HTTP_RESPONSE:SET_IN_CONSTRUCTOR, ENABLED_FEATURES:SET_IN_CONSTRUCTOR, flags:SET_IN_CONSTRUCTOR, secrets:SET_IN_CONSTRUCTOR});
__FILE__ = "luna/common/frp/frp_tracer.js";
FrpTracer = AsanaObject.subclass("FrpTracer", {}, {rvalue_name_to_trace_for:null, view_type_name_to_trace_for:null, _trace_depth:-1, shouldTrace:function(a) {
    var b = this;
    if(b.rvalue_name_to_trace_for !== null || b.view_type_name_to_trace_for !== null) {
        var c = Set.create(), d = !1, e = function(a) {
            !d && !c.contains(a) && (c.add(a), a._name !== null && a._name === b.rvalue_name_to_trace_for ? d = !0 : a.handler_data__view !== void 0 && a.handler_data__view.__type_name === b.view_type_name_to_trace_for ? d = !0 : (a._getState().dependents.forEach(e), a._parent !== null && e(a._parent)))
        }, f = EvaluationContext.getEvaluationStack();
        f.forEach(e);
        e(a);
        if(d) {
            return c = Set.create(), d = !1, f.forEach(e), e(a), !0
        }
        return d
    }else {
        return Flags.diagnostics_trace_computation
    }
}, startRvalue:function() {
    this._trace_depth++
}, stopRvalue:function() {
    this._trace_depth--
}, trace:function() {
    var a = $A(arguments);
    this._trace(a.shift(), this._trace_depth, a)
}, _trace:function(a, b, c) {
    log.debug.apply(log, concat([" .".repeat(this._trace_depth), JobQueue.currentJob().name, prettyHint(a, 0)], c))
}});
__FILE__ = "luna/common/id_provider.js";
IdProvider = AsanaObject.subclass("IdProvider", {}, {reserveIdRanges:ABSTRACT, reserveId:function() {
    return this.reserveIdRanges(1)[0].start
}});
CachingIdProvider = IdProvider.subclass("CachingIdProvider", {}, {_first_cached_block:null, _last_cached_block:null, _total_cached_length:0, _onIdsRequested:SET_IN_CONSTRUCTOR, constructor:function(a) {
    CachingIdProvider.superproto.constructor.call(this);
    this._onIdsRequested = a
}, clear:function() {
    this._total_cached_length = 0;
    this._last_cached_block = this._first_cached_block = null
}, numIdsCached:function() {
    return this._total_cached_length
}, addIdRange:function(a, b) {
    var c = {start:a, length:b, next:null};
    this._last_cached_block !== null ? this._last_cached_block.next = c : this._first_cached_block = c;
    this._last_cached_block = c;
    this._total_cached_length += b
}, reserveIdRanges:function(a) {
    this._onIdsRequested(this, a, this._total_cached_length);
    a > this._total_cached_length && ufu("Not enough IDs to satisfy reservation. Have: " + this._total_cached_length + ", need: " + a);
    for(var b = [];a > 0 && this._first_cached_block !== null;) {
        if(a < this._first_cached_block.length) {
            b.push(IDRange.create({start:this._first_cached_block.start, length:a})), this._total_cached_length -= a, this._first_cached_block.start += a, this._first_cached_block.length -= a, a = 0
        }else {
            if(b.push(IDRange.create({start:this._first_cached_block.start, length:this._first_cached_block.length})), a -= this._first_cached_block.length, this._total_cached_length -= this._first_cached_block.length, this._first_cached_block = this._first_cached_block.next, this._first_cached_block === null) {
                this._last_cached_block = null
            }
        }
    }
    return b
}, cachedIdRanges:function() {
    for(var a = [], b = this._first_cached_block;b !== null;b = b.next) {
        a.push(IDRange.create({start:b.start, length:b.length}))
    }
    return a
}});
define("IDRange", AsanaObject.subclass("IDRange", [ISerializable], {}, {start:ATTRIBUTE_REQUIRED, length:ATTRIBUTE_REQUIRED, constructor:function(a) {
    IDRange.superproto.constructor.call(this);
    updateWithAttributes(this, a);
    this._setConstructionAttributes(a)
}}));
MockIdProvider = IdProvider.subclass("MockIdProvider", {}, {_next_global_id:1, constructor:function(a) {
    MockIdProvider.superproto.constructor.call(this);
    if(a !== void 0) {
        this._next_global_id = a
    }
}, reserveIdRanges:function(a) {
    var b = IDRange.create({start:this._next_global_id, length:a});
    this._next_global_id += a;
    return[b]
}, ensureIdsCached:noop});
__FILE__ = "luna/common/env.js";
LunaEnv = AsanaObject.subclass("LunaEnv", {_first_env:null}, {is_server:ABSTRACT, Config:SET_IN_CONSTRUCTOR, getFlag:function(a) {
    if(a in LunaConfig.prototype) {
        return env.Config.hasOwnProperty(a) || ufu("The config file did not define a value for " + a + ".  If on client, make sure you updated CLIENT_CONFIG_KEYS."), env.Config[a]
    }else {
        throw"No such environment flag: " + a + ".";
    }
}, setCookie:ABSTRACT, serverCall:ABSTRACT, app_interfaces:SET_IN_CONSTRUCTOR, _running_app:null, _app_name_override:null, _client_app:null, db:null, world_store:SET_IN_CONSTRUCTOR, session_store:SET_IN_CONSTRUCTOR, query_manager:SET_IN_CONSTRUCTOR, query_backpropagation_manager:SET_IN_CONSTRUCTOR, datastore_address_observer:SET_IN_CONSTRUCTOR, datastoreForObjectId:function(a) {
    return typeof a === "string" ? env.session_store : env.world_store
}, datastoreObjectWithoutAC:function(a) {
    return this.datastoreForObjectId(a).objectWithoutAC(a)
}, datastoreObject:function(a) {
    return this.datastoreForObjectId(a).object(a)
}, datastoreObjectNoPeekWithoutAC:function(a) {
    return this.datastoreForObjectId(a).objectNoPeekWithoutAC(a)
}, type_registry:SET_IN_CONSTRUCTOR, clock:SET_IN_CONSTRUCTOR, global_id_provider:SET_IN_CONSTRUCTOR, frp:SET_IN_CONSTRUCTOR, frp_tracer:SET_IN_CONSTRUCTOR, event_logger:SET_IN_CONSTRUCTOR, defer_deferred_rvalues:SET_IN_CONSTRUCTOR, counters:SET_IN_CONSTRUCTOR, focused_selection_start:null, focused_selection_end:null, enable_default_selection:!1, _luna_session:null, _luna_session_state:null, _buffered_focused_element_id:null, _session_user:null, _name:SET_IN_CONSTRUCTOR, name:function() {
    return this._name
}, setName:function(a) {
    this._name = a
}, resetFrpAndDatastore:function(a) {
    env.frp.tearDownAllRvalues();
    env.world_store.removeAllUnusedValues();
    env.session_store.removeAllUnusedValues();
    a || (a = concat(env.world_store.getAllUsedAddresses().values(), env.session_store.getAllUsedAddresses().values()), a.size() > 0 && (log.info("Leaked rvalues (up to 20)", prettyHint(a.slice(0, 20), 2)), log.info("Dependency chain for the first leaked rvalue", prettyHint(a[0].getRandomDependencyChain(), 1)), assertEquals(0, a.size(), "Leaked rvalues: ")), assertEquals(0, Rvalue.cached_state_count, "Leaked rvalue state after env.resetFrpAndDatastore()", "Cached rvalues", Flags.diagnostics_do_expensive_error_checking ?
        Rvalue.cached_rvalue_to_count.keys().map(function(a) {
            return{in_use:a._isUsed(), cached:a.isCached(), name:a.getIdentifier(), is_watch:a instanceof Watch, is_live_root_watch:a._is_live_root_watch, "dependency chain":a.getRandomDependencyChain()}
        }) : "(Turn on diagnostics_do_expensive_error_checking)"))
}, setLunaSession:function(a) {
    this._session_user = a !== null ? a.getV("user") : null;
    this._notifySession(this._luna_session, !1);
    this._luna_session = a;
    a !== null && a.lunaSessionStateExists() && this.reloadLunaSessionState()
}, reloadLunaSessionState:function() {
    this._luna_session_state = this._luna_session.lunaSessionState();
    this._notifySession(this._luna_session, !0);
    this._buffered_focused_element_id !== null && this._luna_session.setFocus(this._buffered_focused_element_id)
}, lunaSession:function() {
    return this._luna_session
}, realAppSession:function() {
    var a = this.lunaSession().appSession();
    return a.hasProperty("real_session") ? a.getV("real_session") : a
}, lunaSessionStateOrNull:function() {
    return this._luna_session_state
}, lunaSessionState:function() {
    assertNotEquals(null, this._luna_session_state, "The luna session state was unexpectedly null.");
    return this._luna_session_state
}, _notifySession:function(a, b) {
    if(a && a.lunaSessionStateExists() && a.appSession()) {
        if(b) {
            a.appSession().onAddedToEnvironment()
        }else {
            a.appSession().onRemovedFromEnvironment()
        }
    }
}, registerAppInterfaces:function(a, b) {
    var c = this;
    a.forEach(function(a) {
        c.app_interfaces.put(a, b)
    })
}, unregisterAppInterfaces:function(a) {
    var b = this;
    a.forEach(function(a) {
        b.app_interfaces.remove(a)
    })
}, user:function() {
    return this.userOrNull()
}, userOrNull:function() {
    return this._session_user
}, numPageLoads:function() {
    return this.lunaSession().lunaSessionState().getV("num_page_loads")
}, isMobile:function() {
    return this._running_app !== null && this._running_app.isMobile()
}, isNavigating:function() {
    return this.lunaSessionState().isNavigating()
}, startNavigating:function() {
    this.lunaSessionState().setIsNavigating(!0)
}, stopNavigating:function() {
    this.lunaSessionState().setIsNavigating(!1)
}, runAsUser:function(a, b) {
    var c = this;
    assertEquals(null, c._session_user, "runAsUser is prohibited when there is already a user because it generally will not do what you expect.");
    assert(env.is_server || env.isInTest() && !env.isInUiTest(), "runAsUser should not be used on the client (except in unit tests).");
    env.is_server && env.resetFrpAndDatastore();
    var d = FlagSystem.createFlagData(FlagSystem.default_flag_data), d = runWithReplacedGlobals(function() {
        applyUserFlags(a);
        return c.unsafeRunAsUserWithoutResetingFrpAndDatastore(a, b)
    }, FlagSystem.replacementGlobalsToReplaceFlagData(d));
    env.resetFrpAndDatastore();
    return d
}, unsafeRunAsUserWithoutResetingFrpAndDatastore:function(a, b) {
    var c = this._session_user;
    this._session_user = a;
    try {
        var d = b.call(null)
    }finally {
        this._session_user = c
    }
    return d
}, lastUndoableUserActionOrNull:function() {
    return this.lunaSession().lunaSessionState().lastUndoableAction()
}, scheduleUndoWindowTimeout:function() {
    var a = this.lastUndoableUserActionOrNull();
    !env.is_server && a !== null && !this.isInUiTest() && safeTimeout(function() {
        processHandler(function() {
            env.lastUndoableUserActionOrNull() === a && UserActionContext.get().requestClearUndo()
        })
    }, 2E4)
}, setLastUndoableUserAction:function(a) {
    this.lunaSession().lunaSessionState().setLastUndoableAction(a);
    this.scheduleUndoWindowTimeout()
}, isInUiTest:function() {
    return this._running_app && this._running_app.session().appSession().hasProperty("real_session")
}, isInTest:function() {
    return globals.IN_TEST || this.isInUiTest()
}, isInUnitTest:function() {
    return globals.IN_TEST
}, setFocus:function(a) {
    this._luna_session_state === null ? this._buffered_focused_element_id = a : this.lunaSession().setFocus(a)
}, setFocusToDefault:function() {
    this.lunaSession().setFocusToDefault();
    this.enable_default_selection = !0
}, setSelectionForFocusedElement:function(a, b) {
    this.focused_selection_start = a;
    this.focused_selection_end = b;
    this.enable_default_selection = !1
}, hasSelectionForFocusedElementBeenSet:function() {
    return this.focused_selection_start !== null || this.focused_selection_end !== null
}, isElementIdFocusedR:function(a) {
    return FastEqualsRvalue.create(a, this.lunaSession().focusedElementIdR())
}, focusedElementId:function() {
    return this.lunaSession().focusedElementId()
}, pollDebugValues:function() {
    var a = Map.create();
    a.put("datastore.world.num_used_lvalues", this.world_store.getAllUsedAddresses().size());
    a.put("datastore.session.num_used_lvalues", this.session_store.getAllUsedAddresses().size());
    return a
}, runningApp:function() {
    return this._running_app
}, setRunningApp:function(a) {
    this._running_app = a
}, clearRunningApp:function() {
    this._running_app = null
}, runWithAppName:function(a, b) {
    var c = this._app_name_override;
    this._app_name_override = a;
    try {
        return b()
    }finally {
        this._app_name_override = c
    }
}, appName:function() {
    return this._running_app ? this._running_app.name() : this._app_name_override
}, runWithClientApp:function(a, b) {
    var c = this._client_app;
    this._client_app = a;
    try {
        return b()
    }finally {
        this._client_app = c
    }
}, clientAppOrNull:function() {
    return this._client_app
}, constructor:function() {
    LunaEnv.superproto.constructor.call(this);
    memberOr(globals, "env") ? this.memo_env = this : (LunaEnv._first_env = this, Signal.setDomSignalWrapper(function(a) {
        return host.wrapInExceptionHandler("Signal.domSignalWrapper", ExceptionHandler.ReentryStrategy.DROP, a)
    }));
    this.frp_tracer = FrpTracer.create();
    this._name = "Env" + localID(this);
    this.app_interfaces = Map.create()
}});
$o = $O = function(a) {
    return env.datastoreObject(a)
};
__FILE__ = "luna/common/csrf.js";
Csrf = {_ticket:null, Headers:{TICKET:"X-Asana-Ticket"}, Params:{TICKET:"_xticket"}, _readCookie:function(a, b) {
    for(var c = b + "=", d = a.split(";"), e = 0;e < d.length;e++) {
        for(var f = d[e];f.charAt(0) === " ";) {
            f = f.substring(1, f.length)
        }
        if(f.indexOf(c) === 0) {
            return f.substring(c.length, f.length)
        }
    }
    return null
}, ticketFromCookieOrNull:function(a) {
    return this._readCookie(a, "ticket")
}, computeSignatureAndSadlyRunEventHandlers:function() {
    host.runOutsideExceptionHandler(function() {
        Csrf._ticket = Csrf.ticketFromCookieOrNull(document.cookie)
    })
}, ticketOnClient:function() {
    return Csrf._ticket
}, signHttpHeaders:function(a) {
    a[Csrf.Headers.TICKET] = Csrf._ticket
}, validateHttpHeaders:function(a, b) {
    var c = a.getOr("Cookie", null);
    if(c === null) {
        ufu("CSRF attempt? No cookie in headers", a, b)
    }else {
        var d = a.getOr(Csrf.Headers.TICKET, null);
        d === null ? ufu("CSRF attempt? No ticket in headers or a bizarre Firefox issue", a, b) : this._validateCookie(c, d, b)
    }
}, validateQueryParam:function(a, b, c) {
    var d = a.getOr("Cookie", null);
    d === null ? ufu("CSRF attempt? No cookie in headers", a, c) : (a = b.getOr(Csrf.Params.TICKET, null), a === null ? ufu("CSRF attempt? No ticket in parameters", b, c) : this._validateCookie(d, a, c))
}, _validateCookie:function(a, b, c) {
    var d = Csrf.ticketFromCookieOrNull(a);
    d === null ? ufu("CSRF attempt? No ticket in cookie in headers", a, c) : d !== b && ufu("CSRF attempt? Cookie and ticket don't match", a, b, c)
}};
__FILE__ = "luna/common/perf_event_logger.js";
PerfEventLogger = AsanaObject.subclass("PerfEventLogger", {VERSION:5, APPLICATION_LOADING_ACTION_ID:"application_loading", API_ACTION_ID:"api"}, {_events:SET_IN_CONSTRUCTOR, constructor:function() {
    PerfEventLogger.superproto.constructor.call(this);
    this._events = Map.create()
}, _instanceId:Memoize.memoizeInThis("instanceId", function() {
    var a = host.file_system.findFile("/var/asana-config/instance_config/instance_id");
    if(a.exists()) {
        return a.read()
    }
    return"unknown"
}), _getOrCreatePerfEvent:function(a) {
    var b = this._events.getOr(a, null);
    b === null && (b = {event_id:a, stages:{}, context:{}, version:PerfEventLogger.VERSION}, this._events.put(a, b));
    return b
}, sendToServer:function(a) {
    if(this._logPerfEvents()) {
        var b = this;
        env.datastore_manager.runUntimelyFunc(function() {
            var c = b._events.get(a);
            b.addClientContext(a);
            for(var d in c.stages) {
                if(void 0 === c.stages[d].start_time_ms) {
                    c.stages[d].start_time_ms = 0, c.time_missing = !0
                }
                if(void 0 === c.stages[d].end_time_ms) {
                    c.stages[d].end_time_ms = 0, c.time_missing = !0
                }
            }
            env.datastore_manager.enactChange(LogPerfEventChange.create({serialized_event:serializeEvent(c)}));
            b._events.remove(a)
        })
    }
}, addStageData:function(a, b, c) {
    if(this._logPerfEvents()) {
        var a = this._getOrCreatePerfEvent(a), d = a.stages[b] || {};
        a.stages[b] = d;
        update(d, c)
    }
}, _disable_logging:!1, _logPerfEvents:function() {
    return!this._disable_logging && (!env.is_server || ClusterConfig.data().diagnostics().logPerfEvents())
}, addContext:function(a, b) {
    var c = this._getOrCreatePerfEvent(a);
    update(c.context, b)
}, addClientContext:function(a) {
    this.addContext(a, {user_agent:navigator.userAgent, https:window.location.protocol.startsWith("https")})
}, addServerAppContext:function(a) {
    if(this._logPerfEvents()) {
        var b = this._getOrCreatePerfEvent(a).context;
        env.world_store.assertDoesNotBlockOnDatastore(function() {
            var a = env.lunaSession().appSession(), d = a.gridState();
            b.domain = a.activeDomain().global_id;
            var e = a.currentListOrUnknown(), a = a.inboxModelOrUnknown();
            if(isKnown(e) && e !== null) {
                if(b.pot = e.global_id, a = knownReturnValueOrDefault(function() {
                    return $v(d.filteredItemsListR(e)).size()
                }, null), a !== null) {
                    b.visible_pot_length = a
                }
            }else {
                if(isKnown(a) && a !== null) {
                    b.feed = a
                }
            }
            b.num_stories = 0;
            if(d !== null && (a = d.selectedItemsOrUnknown(), isKnown(a) && a.size() === 1 && (a = a.valueAtIndex(0), a instanceof AsanaStateObject && (a = a.storiesR().peekAllowingUnknown(), isKnown(a))))) {
                b.num_stories = a.size()
            }
        })
    }
}, addServerContext:function(a) {
    if(this._logPerfEvents()) {
        var b = this, c = this._getOrCreatePerfEvent(a).context;
        env.world_store.assertDoesNotBlockOnDatastore(function() {
            var a = env.lunaSession();
            a !== null && a.lunaSessionStateExists() && update(c, {session_id:a.global_id, num_page_loads:env.numPageLoads(), domains:env.user().domains().map(function(a) {
                return a.global_id
            }), host:host.hostname()});
            c.instance_id = b._instanceId();
            c.release_revision = VersionInfo.currentVersion().release_revision;
            EventLogger._addContext(c)
        })
    }
}, logToScribe:function(a) {
    if(this._logPerfEvents() && this._logPerfEvents()) {
        var b = this._getOrCreatePerfEvent(a), c;
        for(c in b.stages) {
            var d = b.stages[c];
            d.duration_ms = d.end_time_ms - d.start_time_ms;
            d.counters_diff = {};
            for(var e in d.end_counters) {
                d.counters_diff[e] = d.end_counters[e] - d.end_counters[e]
            }
        }
        env.event_logger.scribeClient().log("perf_event", JSON.stringify(b));
        env.perf_event_logger._events.remove(a)
    }
}});
LogPerfEventChange = define("LogPerfEventChange", Change.subclass("LogPerfEventChange", {}, {required_on_server:!1, serialized_event:ATTRIBUTE_REQUIRED, enact:function() {
    var a = this;
    profileWastedTime("LogPerfEventChange.enact", function() {
        if(env.is_server) {
            var b = JSON.parse(a.serialized_event);
            if(env.perf_event_logger._events.containsKey(b.event_id)) {
                var c = env.perf_event_logger._events.get(b.event_id);
                update(b.context, c.context);
                update(b.stages, c.stages);
                env.perf_event_logger.logToScribe(b.event_id)
            }
        }
    })
}, taintedObjectIds:function() {
    return[]
}}));
__FILE__ = "luna/common/datastore/datastore_address_observer.js";
DatastoreAddressObserver = AsanaObject.subclass("DatastoreAddressObserver", [IDatastoreObserver], {}, {_address_to_observers:SET_IN_CONSTRUCTOR, _dslvalues:SET_IN_CONSTRUCTOR, constructor:function() {
    DatastoreAddressObserver.superproto.constructor.call(this);
    this._address_to_observers = MultiMap.create();
    this._dslvalues = Set.create()
}, subscribeToAddress:function(a, b) {
    this._address_to_observers.add(a, b)
}, unsubscribeFromAddress:function(a, b) {
    this._address_to_observers.remove(a, b)
}, onDatastoreValueChanged:function(a, b, c) {
    var d = a._state_objects.find(b.object_id);
    if(d !== null && d.getProperty(b.property_name) !== null) {
        d.datastoreLvalueForAddress(b).onDatastoreValueChanged(a, b, c)
    }
    this._address_to_observers.containsKey(b) && this._address_to_observers.get(b).forEach(function(d) {
        d.onDatastoreValueChanged(a, b, c)
    })
}, onDatastoreValueCached:function(a, b, c) {
    this._address_to_observers.containsKey(b) && this._address_to_observers.get(b).forEach(function(d) {
        d.onDatastoreValueCached(a, b, c)
    })
}, onDatastoreValueUncached:function(a, b) {
    var c = a._state_objects.find(b.object_id);
    if(c !== null && c.getProperty(b.property_name) !== null) {
        c.datastoreLvalueForAddress(b).onDatastoreValueUncached(a, b)
    }
    this._address_to_observers.containsKey(b) && this._address_to_observers.get(b).forEach(function(c) {
        c.onDatastoreValueUncached(a, b)
    })
}, onDatastoreValueInvalidated:noop});
__FILE__ = "luna/common/datastore/query_backpropagation_manager.js";
QueryBackpropagationManager = AsanaObject.subclass("QueryBackpropagationObserver", [IDatastoreObserver], {}, {_interesting_type_ids:null, _object_id_to_type_id:SET_IN_CONSTRUCTOR, _object_id_to_referencing_properties:SET_IN_CONSTRUCTOR, constructor:function() {
    QueryBackpropagationManager.superproto.constructor.call(this);
    this._object_id_to_type_id = Map.create([]);
    this._object_id_to_referencing_properties = MultiMap.create([])
}, updateTypes:function(a) {
    var b = this;
    this._interesting_type_ids = Set.create([]);
    a.getSubtypes(StateObject).forEach(function(a) {
        var d = a.backpropagationEdges(!1);
        d.length > 0 && (b._interesting_type_ids.add(env.type_registry.getTypeId(a)), d.forEach(function(a) {
            b._interesting_type_ids.add(a[0])
        }))
    })
}, onDatastoreValueCached:function(a, b, c) {
    this._processChangedValue(b, c, null)
}, onDatastoreValueUncached:function(a, b, c) {
    StateObject.isSuperclassOf(b.value_type) && (c !== -1 || c !== null && c !== -1) && this._object_id_to_referencing_properties.remove(c, b)
}, onDatastoreValueChanged:function(a, b, c, d) {
    this._processChangedValue(b, c, d)
}, onDatastoreValueInvalidated:function() {
}, backpropagationEdgesForObject:function(a) {
    a = this._object_id_to_type_id.getOr(a, null);
    if(a === null) {
        return[]
    }
    return env.type_registry.getTypeFromId(a).backpropagationEdges(!0)
}, forEachReferencingAddress:function(a, b) {
    var c = this, d = this._object_id_to_referencing_properties.get(a);
    if(!d.isEmpty()) {
        var e = c._object_id_to_type_id.getOr(a, null), f = env.type_registry.getTypeFromId(e).backpropagationEdges(!1);
        d.forEach(function(a) {
            var d = c._object_id_to_type_id.getOr(a.object_id, null);
            d !== null && f.any(function(b) {
                var c = b[1];
                return b[0] === d && c === a.property_name
            }) && b(a)
        })
    }
}, _isInterestingType:function(a) {
    this._interesting_type_ids === null && this.updateTypes(env.type_registry);
    return this._interesting_type_ids.contains(a)
}, _processChangedValue:function(a, b, c) {
    if(a.property_name === "__type_id" && this._isInterestingType(b)) {
        this._object_id_to_type_id.put(a.object_id, b)
    }else {
        if(StateObject.isSuperclassOf(a.value_type) && (b !== -1 || c !== null && c !== -1) && a.value_type.backpropagationEdges().length > 0) {
            c !== null && c !== -1 && this._object_id_to_referencing_properties.remove(c, a), b !== -1 && this._object_id_to_referencing_properties.add(b, a)
        }
    }
}});
__FILE__ = "luna/common/datastore/query_manager.js";
QueryManager = AsanaObject.subclass("QueryManager", [IDatastoreObserver], {topicForListFilter:function(a, b) {
    return["LF", a, b].join("|")
}, topicForListPropertyFilter:function(a, b) {
    return["LPF", a, b].join("|")
}, topicForStateObjectProperty:function(a, b) {
    return["SOP", a, b].join("|")
}}, {_query_hash_to_query_results:SET_IN_CONSTRUCTOR, _topic_to_query_results:SET_IN_CONSTRUCTOR, _object_id_to_propagating_topics:SET_IN_CONSTRUCTOR, _external_topics_generator:SET_IN_CONSTRUCTOR, _backpropagation_manager:SET_IN_CONSTRUCTOR, _confirmed_query_hashes:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    QueryManager.superproto.constructor.call(this);
    this._external_topics_generator = a;
    this._backpropagation_manager = b;
    this._query_hash_to_query_results = MultiMap.create();
    this._topic_to_query_results = MultiMap.create();
    this._object_id_to_propagating_topics = MultiMap.create();
    this._confirmed_query_hashes = Set.create()
}, registerQueryResults:function(a) {
    var b = this;
    host.profiler.timeFuncDetailed("QueryManager.registerQueryResults", function() {
        var c = a.generateSubscriptionTopics();
        c.forEach(function(c) {
            b._topic_to_query_results.add(c, a)
        });
        Flags.diagnostics_verbose_query_manager && (console.groupCollapsed(a._query + " subscribed to " + c.length + " topics "), c.forEach(function(a) {
            log.info(a)
        }), console.groupEnd())
    })
}, unregisterQueryResults:function(a) {
    var b = this;
    host.profiler.timeFuncDetailed("QueryManager.unregisterQueryResults", function() {
        var c = a.hash();
        c !== null && b._query_hash_to_query_results.remove(c, a);
        a.generateSubscriptionTopics().forEach(function(c) {
            b._topic_to_query_results.remove(c, a)
        })
    })
}, updateQueryResultsHash:function(a, b) {
    b !== null && this._query_hash_to_query_results.remove(b, a);
    this._query_hash_to_query_results.add(a.hash(), a)
}, activeHashes:function() {
    var a = Set.create([]);
    this._query_hash_to_query_results.forEach(function(b, c) {
        c.forEach(function(c) {
            c.isNeededOnClient() && a.add(b)
        })
    });
    return a
}, downstreamSyncInfo:function(a) {
    var b = this, c = env.is_server ? b.activeHashes() : b._confirmed_query_hashes, d, e;
    a ? (d = c, e = []) : (d = [], e = [], b._confirmed_query_hashes.forEach(function(a) {
        c.contains(a) || e.push(a)
    }), c.forEach(function(a) {
        b._confirmed_query_hashes.contains(a) || d.push(a)
    }));
    DIAGNOSTICS_DUMP_QUERIES_CONFIRMED_TO_CLIENT && log.debug("confirmed queries", c);
    b._confirmed_query_hashes = c.clone();
    return QueryManagerDownstreamSyncInfo.create({is_full_data:a, new_query_hashes:d, queries_to_remove:e})
}, receiveDownstreamSyncInfo:function(a) {
    var b = a.new_query_hashes;
    if(a.is_full_data) {
        a = b
    }else {
        var c = this._confirmed_query_hashes, d = Set.create(a.queries_to_remove), a = Set.create(c.filter(function(a) {
            return!d.contains(a)
        })).addAll(b)
    }
    this._confirmQueries(a)
}, _confirmQueries:function(a) {
    var b = this;
    a.forEach(function(a) {
        if(!b._confirmed_query_hashes.contains(a)) {
            b.onQueryConfirmed(a)
        }
    });
    b._confirmed_query_hashes = Set.create(a)
}, onDatastoreValueCached:function() {
}, onDatastoreValueUncached:function(a, b, c) {
    if(!env.is_server || a === env.session_store) {
        this.onDatastoreValueChanged(a, b, UnknownValue.Loading.create(null, null), c)
    }
}, onDatastoreValueChanged:function(a, b, c, d) {
    this._considerChangedScalarValue(b, c, d, [])
}, onDatastoreValueInvalidated:function(a, b, c, d) {
    this._considerChangedScalarValue(b, UnknownValue.Loading.create(null, null), d, c)
}, _considerChangedScalarValue:function(a, b, c, d) {
    if(a.object_id !== IDatastoreAddress.OBJECT_ID_KV_STORE) {
        var e = this;
        a.isRank() ? (d = QueryManager.topicForListFilter(a.object_id, a.property_name), c = QueryManager.topicForListPropertyFilter(a.property_name, a.element_id), isUnknown(b) || b === List.RANK_NOT_IN_LIST ? (e._object_id_to_propagating_topics.remove(a.element_id, d), e._object_id_to_propagating_topics.remove(a.object_id, c)) : (e._object_id_to_propagating_topics.add(a.element_id, d), e._object_id_to_propagating_topics.add(a.object_id, c)), this._notifyQueries(d, a, a.element_id), this._notifyQueries(c,
            a, a.object_id)) : a.property_name !== StateObject.PropertyName.MODIFIED_AT && (StateObject.isSuperclassOf(a.value_type) && (isKnown(c) && c !== -1 && (c = QueryManager.topicForStateObjectProperty(c, a.property_name), this._notifyQueries(c, a, a.object_id), this._object_id_to_propagating_topics.remove(a.object_id, c)), isKnown(b) && b !== -1 && (c = QueryManager.topicForStateObjectProperty(b, a.property_name), this._object_id_to_propagating_topics.add(a.object_id, c))), d.length === 0 && this._external_topics_generator !==
            null && env.world_store === env.datastoreForObjectId(a.object_id) && (d = this._external_topics_generator.subscriptionTopicsForObject(a.object_id)), d.forEach(function(b) {
            e._notifyQueries(b, a, a.object_id)
        }), this._object_id_to_propagating_topics.get(a.object_id).forEach(function(b) {
            e._notifyQueries(b, a, a.object_id)
        }), this._backpropagate(a.datastore(), a.object_id, d.length === 0))
    }
}, _backpropagate:function(a, b, c) {
    if(Flags.enable_backpropagation) {
        var d = this;
        this._backpropagation_manager.forEachReferencingAddress(b, function(a) {
            d._object_id_to_propagating_topics.get(a.object_id).forEach(function(b) {
                d._notifyQueries(b, a, a.object_id)
            })
        });
        if(c && this._external_topics_generator !== null && env.world_store === env.datastoreForObjectId(b) && (a = this._external_topics_generator.backpropagate([b]), a.length > 0)) {
            var e = this._external_topics_generator.subscriptionTopicsForObjects(a.map(function(a) {
                return a.object_id
            }));
            a.forEach(function(a) {
                d._notifyQueries(e.get(a.object_id), a, a.object_id)
            })
        }
    }
}, _notifyQueries:function(a, b, c) {
    var d = this._topic_to_query_results.get(a);
    d.size() > 0 && d.forEach(function(a) {
        a.considerChangedObjectId(c)
    });
    Flags.diagnostics_verbose_query_manager && !d.isEmpty() && (console.groupCollapsed(d.size() + " queries subscribed to topic '" + a + "' needed to reconsider object " + c + " for change to property '" + b.property_name + "'"), d.forEach(function(a) {
        log.info(a.hash())
    }), console.groupEnd())
}, onQueryConfirmed:function(a) {
    this._query_hash_to_query_results.get(a).forEach(function(a) {
        a.onNewlyConfirmed()
    })
}, hasCompleteQueryResults:function(a) {
    if(env.is_server || this._confirmed_query_hashes.contains(a.hash())) {
        return!0
    }
    return a.getReferencedObjectIds().values().find(function(a) {
        return env.datastore_manager.isObjectIdUnconfirmed(a) || Datastore.isSessionObject2Id(a)
    }, null, null) !== null
}});
__FILE__ = "luna/common/datastore/new_query_manager.js";
NewQueryManager = AsanaObject.subclass("NewQueryManager", [IDatastoreObserver], {topicForListFilter:function(a, b) {
    return["LF", a, b].join("|")
}, topicForListPropertyFilter:function(a, b) {
    return["LPF", a, b].join("|")
}, topicForStateObjectProperty:function(a, b) {
    return["SOP", a, b].join("|")
}}, {_query_hash_to_query_results:SET_IN_CONSTRUCTOR, _topic_to_query_results:SET_IN_CONSTRUCTOR, _object_id_to_propagating_topics:SET_IN_CONSTRUCTOR, _external_topics_generator:SET_IN_CONSTRUCTOR, _backpropagation_manager:SET_IN_CONSTRUCTOR, _confirmed_query_hashes:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    NewQueryManager.superproto.constructor.call(this);
    this._external_topics_generator = a;
    this._backpropagation_manager = b;
    this._query_hash_to_query_results = MultiMap.create();
    this._topic_to_query_results = MultiMap.create();
    this._object_id_to_propagating_topics = MultiMap.create();
    this._confirmed_query_hashes = Set.create()
}, registerQueryResults:function(a) {
    var b = this;
    host.profiler.timeFuncDetailed("NewQueryManager.registerQueryResults", function() {
        var c = a.generateSubscriptionTopics();
        c.forEach(function(c) {
            b._topic_to_query_results.add(c, a)
        });
        Flags.diagnostics_verbose_query_manager && (console.groupCollapsed(a._query + " subscribed to " + c.length + " topics "), c.forEach(function(a) {
            log.info(a)
        }), console.groupEnd())
    })
}, unregisterQueryResults:function(a) {
    var b = this;
    host.profiler.timeFuncDetailed("NewQueryManager.unregisterQueryResults", function() {
        var c = a.hash();
        c !== null && b._query_hash_to_query_results.remove(c, a);
        a.generateSubscriptionTopics().forEach(function(c) {
            b._topic_to_query_results.remove(c, a)
        })
    })
}, updateQueryResultsHash:function(a, b) {
    b !== null && this._query_hash_to_query_results.remove(b, a);
    this._query_hash_to_query_results.add(a.hash(), a)
}, activeHashes:function() {
    var a = Set.create([]);
    this._query_hash_to_query_results.forEach(function(b, c) {
        c.forEach(function(c) {
            c.isNeededOnClient() && a.add(b)
        })
    });
    return a
}, downstreamSyncInfo:ABSTRACT, onDatastoreValueCached:function() {
}, onDatastoreValueUncached:function(a, b, c) {
    if(!env.is_server || a === env.session_store) {
        this.onDatastoreValueChanged(a, b, UnknownValue.Loading.create(null, null), c)
    }
}, onDatastoreValueChanged:function(a, b, c, d) {
    this._considerChangedScalarValue(b, c, d, [])
}, onDatastoreValueInvalidated:function(a, b, c, d) {
    this._considerChangedScalarValue(b, UnknownValue.Loading.create(null, null), d, c)
}, _considerChangedScalarValue:function(a, b, c, d) {
    if(a.object_id !== IDatastoreAddress.OBJECT_ID_KV_STORE) {
        var e = this;
        a.isRank() ? (d = NewQueryManager.topicForListFilter(a.object_id, a.property_name), c = NewQueryManager.topicForListPropertyFilter(a.property_name, a.element_id), isUnknown(b) || b === List.RANK_NOT_IN_LIST ? (e._object_id_to_propagating_topics.remove(a.element_id, d), e._object_id_to_propagating_topics.remove(a.object_id, c)) : (e._object_id_to_propagating_topics.add(a.element_id, d), e._object_id_to_propagating_topics.add(a.object_id, c)), this._notifyQueries(d, a, a.element_id), this._notifyQueries(c,
            a, a.object_id)) : a.property_name !== StateObject.PropertyName.MODIFIED_AT && (StateObject.isSuperclassOf(a.value_type) && (isKnown(c) && c !== -1 && (c = NewQueryManager.topicForStateObjectProperty(c, a.property_name), this._notifyQueries(c, a, a.object_id), this._object_id_to_propagating_topics.remove(a.object_id, c)), isKnown(b) && b !== -1 && (c = NewQueryManager.topicForStateObjectProperty(b, a.property_name), this._object_id_to_propagating_topics.add(a.object_id, c))), d.length === 0 &&
            this._external_topics_generator !== null && env.world_store === env.datastoreForObjectId(a.object_id) && (d = this._external_topics_generator.subscriptionTopicsForObject(a.object_id)), d.forEach(function(b) {
            e._notifyQueries(b, a, a.object_id)
        }), this._object_id_to_propagating_topics.get(a.object_id).forEach(function(b) {
            e._notifyQueries(b, a, a.object_id)
        }), this._backpropagate(a.datastore(), a.object_id, d.length === 0))
    }
}, _backpropagate:function(a, b, c) {
    if(Flags.enable_backpropagation) {
        var d = this;
        this._backpropagation_manager.forEachReferencingAddress(b, function(a) {
            d._object_id_to_propagating_topics.get(a.object_id).forEach(function(b) {
                d._notifyQueries(b, a, a.object_id)
            })
        });
        if(c && this._external_topics_generator !== null && env.world_store === env.datastoreForObjectId(b) && (a = this._external_topics_generator.backpropagate([b]), a.length > 0)) {
            var e = this._external_topics_generator.subscriptionTopicsForObjects(a.map(function(a) {
                return a.object_id
            }));
            a.forEach(function(a) {
                d._notifyQueries(e.get(a.object_id), a, a.object_id)
            })
        }
    }
}, _notifyQueries:function(a, b, c) {
    var d = this._topic_to_query_results.get(a);
    d.size() > 0 && d.forEach(function(a) {
        a.considerChangedObjectId(c)
    });
    Flags.diagnostics_verbose_query_manager && !d.isEmpty() && (console.groupCollapsed(d.size() + " queries subscribed to topic '" + a + "' needed to reconsider object " + c + " for change to property '" + b.property_name + "'"), d.forEach(function(a) {
        log.info(a.hash())
    }), console.groupEnd())
}, hasCompleteQueryResults:ABSTRACT});
__FILE__ = "luna/browser/datastore/client_query_manager.js";
ClientQueryManager = NewQueryManager.subclass("ClientQueryManager", {}, {_server_query_results:SET_IN_CONSTRUCTOR, constructor:function(a, b) {
    ClientQueryManager.superproto.constructor.call(this, a, b);
    this._server_query_results = MultiMap.create()
}, hasCompleteQueryResults:function(a) {
    return this._server_query_results.containsKey(a.hash()) ? !0 : a.getReferencedObjectIds().values().find(function(a) {
        return env.datastore_manager.isObjectIdUnconfirmed(a) || Datastore.isSessionObject2Id(a)
    }, null, null) !== null
}, downstreamSyncInfo:function() {
    return NewQueryManagerDownstreamSyncInfo.create({is_full_data:!0, new_query_results:this._server_query_results.map(function(a, b) {
        return[a, b.values()]
    }), queries_to_update:[], queries_to_remove:[]})
}, receiveDownstreamSyncInfo:function(a) {
    if(a.is_full_data) {
        this._server_query_results = Map.create()
    }
    this._receiveNewQueryResults(a.new_query_results);
    this._receiveQueriesToUpdate(a.queries_to_update);
    this._receiveQueriesToRemove(a.queries_to_remove)
}, serverQueryResultsOrNull:function(a) {
    return this._server_query_results.getOr(a, null)
}, _receiveNewQueryResults:function(a) {
    var b = this;
    a.forEach(function(a) {
        var d = a[0], a = Set.create(a[1]);
        b._confirmQueryResults(d);
        b._server_query_results.put(d, a)
    })
}, _receiveQueriesToUpdate:function(a) {
    var b = this;
    a.forEach(function(a) {
        var d = a[1], e = a[2], f = b._server_query_results.get(a[0]);
        f.addAll(e);
        d.forEach(function(a) {
            f.remove(a)
        })
    })
}, _receiveQueriesToRemove:function(a) {
    var b = this;
    a.forEach(function(a) {
        b._server_query_results.remove(a)
    })
}, _confirmQueryResults:function(a) {
    this._query_hash_to_query_results.get(a).forEach(function(a) {
        a.onNewlyConfirmed()
    })
}});
__FILE__ = "luna/browser/client_env.js";
ClientGlobalIdProvider = CachingIdProvider.subclass("ClientGlobalIdProvider", {}, {constructor:function(a) {
    ClientGlobalIdProvider.superproto.constructor.call(this, noop);
    var b = this;
    a.forEach(function(a) {
        b.addIdRange(a.start, a.length)
    })
}});
LunaAjaxError = function(a, b, c) {
    this.is_server_overloaded = this.is_server_crash = !1;
    this.xhr_error = c;
    if(b !== null) {
        if(this.message = a + " (" + b + ")", b === 500) {
            this.is_server_crash = !0
        }else {
            if(b === 502 || b === 503 || b === 504) {
                this.is_server_overloaded = !0
            }
        }
    }else {
        this.message = a
    }
};
LunaAjaxError.prototype = Error();
IncompleteResponseXhrError = function() {
};
IncompleteResponseXhrError.prototype = Error();
ClientEnv = LunaEnv.subclass("ClientEnv", {createAndInstall:function(a) {
    globals.env = this.create(a)
}, _serverPostRequest:function(a) {
    var b = update({}, a.opts), c = b.query_map;
    delete b.query_map;
    b.queryString = [c.keys(), c.values()];
    var d = MochiKit.Async.doXHR(a.url, b), e = function(a) {
        return a !== null ? host.wrapInExceptionHandler("ClientEnv.postRequest", ExceptionHandler.ReentryStrategy.DEFER_CHAINED, a) : null
    }, f = d.addCallbacks;
    d.addCallbacks = function(a, b) {
        return f.call(d, e(a), e(b))
    };
    d.addCallback(function(a) {
        return a.getAllResponseHeaders() === "" || a.responseText.length < a.getResponseHeader("X-Asana-Content-String-Length") ? new IncompleteResponseXhrError : (a.getResponseHeader("X-Asana-Content-String-Length") === null && host.recordWarningOnce("Missing expected header 'X-Asana-Content-String-Length'"), a)
    });
    d.addErrback(function(a) {
        return a instanceof MochiKit.Async.XMLHttpRequestError ? new LunaAjaxError(a.message, a.number, a) : a instanceof MochiKit.Async.BrowserComplianceError ? new LunaAjaxError("Your browser does not support AJAX", null, a) : a instanceof MochiKit.Async.CancelledError ? new LunaAjaxError("Server not responding", null, a) : a instanceof IncompleteResponseXhrError ? new LunaAjaxError("Received incomplete response. May not have reached server.", null, a) : (log.error("Unknown AJAX error", a), new LunaAjaxError("Unknown error",
            null, a))
    });
    return d
}}, {is_server:!1, type_registry:SET_IN_CONSTRUCTOR, clock:SET_IN_CONSTRUCTOR, Config:SET_IN_CONSTRUCTOR, sync_watchdog:SET_IN_CONSTRUCTOR, frp:SET_IN_CONSTRUCTOR, _server_post_count:0, constructor:function(a) {
    ClientEnv.superproto.constructor.call(this);
    this.counters = Counters.create();
    this.clock = a.clock || SystemClock.create();
    this.frp = FRP.create(this.clock);
    this.type_registry = a.type_registry;
    this.query_backpropagation_manager = QueryBackpropagationManager.create(this.type_registry);
    this.query_manager = Flags.enable_fast_query_result_sharing ? ClientQueryManager.create(null, this.query_backpropagation_manager) : QueryManager.create(null, this.query_backpropagation_manager);
    this.world_store = ClientDatastore.create([DatastoreCacheMemory.create(Flags.enable_fast_query_result_sharing ? !1 : !0)], "world_store");
    Flags.enable_backpropagation && this.world_store.addObserver(this.query_backpropagation_manager);
    this.world_store.addObserver(this.query_manager);
    this.session_store = ClientDatastore.create([DatastoreCacheMemory.create(Flags.enable_fast_query_result_sharing ? !1 : !0)], "session_store");
    Flags.enable_backpropagation && this.session_store.addObserver(this.query_backpropagation_manager);
    this.session_store.addObserver(this.query_manager);
    this.datastore_address_observer = DatastoreAddressObserver.create();
    this.world_store.addObserver(this.datastore_address_observer);
    this.session_store.addObserver(this.datastore_address_observer);
    this.global_id_provider = a.global_id_provider;
    this.Config = LunaConfig.create(a.config.CLUSTER, a.config);
    this.event_logger = EventLogger.create(!1);
    this.perf_event_logger = PerfEventLogger.create();
    this.datastore_manager = a.datastore_manager === void 0 ? Datastore.Manager.Client.create(Datastore.Manager.Client.SYNC_POLICY_POLL, ServerCallSyncSocket) : a.datastore_manager;
    this.sync_watchdog = SyncWatchdog.create();
    this.defer_deferred_rvalues = !0
}, setCookie:attributedFunc({name:ATTRIBUTE_REQUIRED, value:ATTRIBUTE_REQUIRED, max_age:14 * Date.SECONDS_PER_DAY, secure:!0, path:"/", domain:null}, function(a) {
    if(a.domain === null) {
        a.domain = window.location.hostname
    }
    a = Cookie.create(a).serialize();
    document.cookie = a
}), postRequest:function(a, b, c) {
    return this.postRequestInfo(this.createRequestInfo(a, b, c))
}, postRequestInfo:function(a) {
    return ClientEnv._serverPostRequest(a)
}, serverCall:function(a, b) {
    var c = this.postRequest(a, "application/x-www-form-urlencoded", URI.buildQueryString(b));
    c.addCallback(function(a) {
        return a.responseText
    });
    return c
}, createRequestInfo:function(a, b, c) {
    var d = host.getCurrentUri(), e = d.scheme, f = d.getHostPort(), a = URI.create({scheme:e, hostname:f, path:concat(d.getAppPath(), ["-", a])}), d = VersionInfo.currentVersion(), b = {"Content-Type":b};
    b[VersionInfo.Headers.RELEASE_REVISION] = d.release_revision;
    Csrf.signHttpHeaders(b);
    d = this._getServerRequestQueryParams();
    this._server_post_count++;
    d.put("count", this._server_post_count);
    c = {method:"POST", headers:b, query_map:d, sendContent:c, withCredentials:!0};
    return{url:a.stringify(), opts:c}
}, _getServerRequestQueryParams:function() {
    var a = Map.create([["session_id", server_globals.get("session_id")]]), b = server_globals.getOr("luna_app_name", null);
    b !== null && a.put("app_param", app_load_globals.app_param_dict[b]);
    host.profiler.isEnabled() && a.put("profiler", "1");
    ClientServerProfiler.getTestRunId() !== null && a.put("perf_test_run_id", ClientServerProfiler.getTestRunId());
    return a
}});
__FILE__ = "luna/browser/mouse_tracker.js";
var MouseTracker = AsanaObject.subclass("MouseTracker", {}, {constructor:function() {
    MouseTracker.superproto.constructor.call(this);
    this._x_lvalue = LocalLvalue.create(0);
    this._y_lvalue = LocalLvalue.create(0);
    this._request_is_pending = !1;
    this._pending_request = void 0;
    this._update = bind(this._update, this)
}, requestUpdate:function(a) {
    this._pending_request = a;
    if(!this._request_is_pending) {
        this._request_is_pending = !0, safeTimeout(this._update, 0)
    }
}, _update:function() {
    var a = this;
    processHandler(function() {
        a._pending_request !== null && (a._x_lvalue.requestSet(a._pending_request.x), a._y_lvalue.requestSet(a._pending_request.y));
        a._request_is_pending = !1
    })
}});
__FILE__ = "luna/browser/key_combo_listener.js";
KeyComboListener = AsanaObject.subclass("KeyComboListener", {_current_combo_step:0, _current_combo_start_time:0, _combo_keys:null, _combo_max_time_ms:3E3, install:function() {
    var a = this;
    a._combo_keys = [KeyMap.Keys.UP, KeyMap.Keys.LEFT, KeyMap.Keys.DOWN, KeyMap.Keys.RIGHT, KeyMap.Keys.ENTER];
    window.addEventListener("keydown", function(b) {
        var c = b.keyCode;
        safeTimeout(function() {
            a._onKeyDown(c)
        }, 0)
    }, !0)
}, _onKeyDown:function(a) {
    if(a === this._combo_keys[this._current_combo_step]) {
        if(this._current_combo_step++, this._current_combo_step === this._combo_keys.length) {
            this._current_combo_step = 0, this._onCombo()
        }else {
            if(a = env.clock.now(), this._current_combo_step === 1) {
                this._current_combo_start_time = a
            }else {
                if(a > this._current_combo_start_time + this._combo_max_time_ms) {
                    this._current_combo_step = 0
                }
            }
        }
    }else {
        if(a !== KeyMap.Keys.LEFT_COMMAND && a !== KeyMap.Keys.RIGHT_COMMAND && a !== KeyMap.Keys.CTRL) {
            this._current_combo_step = 0
        }
    }
}, _onCombo:function() {
    log.info("Combo entered.")
}}, {});
__FILE__ = "luna/common/cookie.js";
Cookie = AsanaObject.subclass("Cookie", {parseCookieString:function(a) {
    for(var a = a.split("; "), b = Map.create(), c = 0;c < a.length;c++) {
        var d = a[c], e = d.indexOf("="), f = d.substring(0, e), d = d.substring(e + 1);
        b.containsKey(f) || b.put(f, Cookie.create({name:f, value:unescape(d)}))
    }
    return b
}}, {name:null, value:null, comment:null, domain:null, max_age:-1, path:"/", secure:!1, http_only:!1, version:0, constructor:function(a) {
    Cookie.superproto.constructor.call(this);
    update(this, a)
}, expiresString:function() {
    return this.max_age === 0 ? Date.create(0).toUTCString() : env.clock.nowDate().add(this.max_age, Date.Units.SECONDS).toUTCString()
}, serialize:function() {
    var a = this;
    a.expires = a.max_age !== -1 ? a.expiresString() : null;
    var b = ["domain", "path", "expires"].map(function(b) {
        return a[b] !== null ? b + "=" + a[b] : null
    }), b = filter(null, concat([this.value !== null ? this.name + "=" + this.value : null], b)).join("; ");
    this.secure && (b += "; secure");
    a.http_only && (b += "; HttpOnly");
    return b
}});
__FILE__ = "luna/common/running_app.js";
RunningApp = AsanaObject.subclass("RunningApp", {}, {_luna_app:SET_IN_CONSTRUCTOR, _ui_xvalue:SET_IN_CONSTRUCTOR, ui_node_tree:null, debug_console:null, _root_watch:null, _session:SET_IN_CONSTRUCTOR, _is_initialized:!1, _ui_function_params:SET_IN_CONSTRUCTOR, _browser:SET_IN_CONSTRUCTOR, isInitialized:function() {
    return this._initialized
}, init:function(a, b, c, d, e) {
    this._is_initialized = !0;
    var f = this;
    this._luna_app = a;
    var g = b.appSession();
    this._session = b;
    this._ui_function_params = [c, g];
    this._browser = c;
    this._ui_xvalue = $rval(function() {
        b.peekValuesForClient();
        b.user();
        return a.ui_function.apply(a, f._ui_function_params)
    });
    this._app_root_rvalue = $rval(function() {
        return!0
    });
    c = a.console_type;
    if(c !== null) {
        this.debug_console = c.create(b), this.debug_console.receiveInitialServerCounters(d ? Map.create() : server_globals.getOr("counters", Map.create()))
    }
    c = function() {
        env.world_store.runInBatches(function() {
            f._root_watch = f._app_root_rvalue.watchScalarRoot(function() {
                $v(b !== null ? b.typeIdLvalue() : null);
                f.ui_node_tree = UINodeTree.create(f._ui_xvalue, d, b);
                f.ui_node_tree.buildUi();
                e()
            });
            f._root_watch.setName("RunningApp root watch")
        }, "0.3.0.0.0 - run in batches")
    };
    env.is_server ? c() : host.profiler.timeFuncSummary("~ 4.1 building UI", c);
    f.ui_node_tree.onPageLoaded();
    this._ui_xvalue._parent = this._root_watch;
    env.frp.warnAboutUnknowns()
}, session:function() {
    return this._session
}, name:function() {
    return AppRegistry.get().appName(this._luna_app)
}, isMobile:function() {
    return this._luna_app.config.is_mobile || !1
}, lunaApp:function() {
    return this._luna_app
}, teardown:function() {
    this.ui_node_tree.teardown();
    this.ui_node_tree = null;
    this._root_watch.unwatch();
    this._luna_app = this._root_watch = null
}, getUiXvalue:function() {
    return this._ui_xvalue
}, browser:function() {
    return this._browser
}});
__FILE__ = "apps/dashboard/dashboard_model.js";
Exception = AsanaStateObject.subclass("Exception", {property_descs:{message:{type:String}, log_snippet:{type:String}, stack_trace:{type:String}}}, {_computeIsVisibleBy:function(a) {
    return a.hasAdminReadPrivilege()
}});
ExceptionReport = AsanaStateObject.subclass("ExceptionReport", {property_descs:{exception:{type:Exception}}}, {_computeIsVisibleBy:function(a) {
    return a.hasAdminReadPrivilege()
}});
ProfilerEvent = AsanaStateObject.subclass("ProfilerEvent", {property_descs:{name:{type:String}, calls:{type:Integer}, total_time_usec:{type:Float}, average_time_usec:{type:Float}, total_excl_time_usec:{type:Float}, max_excl_time_usec:{type:Float}}}, {_computeIsVisibleBy:function(a) {
    return a.hasAdminReadPrivilege()
}});
ProfilerReport = AsanaStateObject.subclass("ProfilerReport", {property_descs:{name:{type:String}, total_time_usec:{type:Float}, total_wall_time_usec:{type:Float}, events:{type:List}}}, {_computeIsVisibleBy:function(a) {
    return a.hasAdminReadPrivilege()
}});
define("PerfEventSummary", AsanaObject.subclass("PerfEventSummary", [ISerializable], {}, {_PROPERTIES_TO_SERIALIZE:SET_IN_CONSTRUCTOR, name:SET_IN_CONSTRUCTOR, num_events:0, server_counters:null, constructor:function(a, b) {
    var c = this;
    PerfEventSummary.superproto.constructor.call(this);
    c._PROPERTIES_TO_SERIALIZE = ["name", "num_events"];
    c.name = a;
    b && b.forEach(function(a) {
        c.addEvent(a)
    })
}, copyValuesFromCounters:function() {
    var a = this;
    a.server_counters !== null && a.server_counters.forEach(function(b, c) {
        a[b] = c
    })
}, addEvent:ATTRIBUTE_REQUIRED, fromRawJS:function(a, b) {
    this.constructor(a.name);
    if(a.server_counters !== void 0) {
        a.server_counters = b.thaw(a.server_counters)
    }
    update(this, a);
    this.copyValuesFromCounters()
}, toRawJS:function(a) {
    var b = this, c = {};
    b._PROPERTIES_TO_SERIALIZE.forEach(function(a) {
        c[a] = b[a]
    });
    c.server_counters = a.freeze(b.server_counters);
    return c
}}));
define("PageloadSummary", PerfEventSummary.subclass("PageloadSummary", {}, {server_time:0, client_time:0, constructor:function(a, b) {
    PageloadSummary.superproto.constructor.call(this, a, b);
    this._PROPERTIES_TO_SERIALIZE.push.apply(this._PROPERTIES_TO_SERIALIZE, ["server_time", "client_time"])
}, addEvent:function(a) {
    var b = this;
    b.num_events++;
    b.server_time += a.server_time;
    b.client_time += a.client_time;
    if(b.server_counters === null) {
        b.server_counters = Map.create()
    }
    a.server_counters.forEach(function(a, d) {
        b.server_counters.incrementCount(a, d)
    });
    b.copyValuesFromCounters()
}}));
define("ActionSummary", PerfEventSummary.subclass("ActionSummary", [ISerializable], {}, {total_time:0, enacting_time:0, initial_propagation_time:0, waiting_to_sync_time:0, waiting_to_resync_time:0, server_total_time:0, network_total_time:0, final_propagation_time:0, times_synced:0, constructor:function(a, b) {
    ActionSummary.superproto.constructor.call(this, a, b);
    this._PROPERTIES_TO_SERIALIZE.push.apply(this._PROPERTIES_TO_SERIALIZE, ["total_time", "enacting_time", "initial_propagation_time", "waiting_to_sync_time", "waiting_to_resync_time", "server_total_time", "network_total_time", "final_propagation_time", "times_synced"])
}, addEvent:function(a) {
    var b = this, c = a.server_counters.get("dispatcher.total_wall_time_usec") / 1E3, d = FastMap.create();
    b.times_synced = 0;
    a.times.forEach(function(a) {
        var c = a[0], a = a[1];
        c === "send sync message" ? (b.times_synced === 0 && d.put("first sync sent", a), d.put("last sync sent", a), b.times_synced += 1) : d.put(c, a)
    });
    b.total_time += d.get("propagated") - d.get("created");
    b.enacting_time += d.get("finished enacting") - d.get("created");
    b.initial_propagation_time += d.get("propagated locally") - d.get("finished enacting");
    b.waiting_to_sync_time += d.get("first sync sent") - d.get("finished enacting");
    b.waiting_to_resync_time += d.get("last sync sent") - d.get("first sync sent");
    b.server_total_time += c;
    b.network_total_time += d.get("confirmed") - d.get("last sync sent") - c;
    b.final_propagation_time += d.get("propagated") - d.get("confirmed");
    b.num_events += 1;
    if(b.server_counters === null) {
        b.server_counters = Map.create()
    }
    a.server_counters.forEach(function(a, c) {
        b.server_counters.incrementCount(a, c)
    });
    b.copyValuesFromCounters()
}}));
FileCoverageReport = AsanaStateObject.subclass("FileCoverageReport", {property_descs:{filename:{type:String}, coverage_lines_json:{type:String}, source_lines_json:{type:String}}}, {_computeIsVisibleBy:function(a) {
    return a.hasAdminReadPrivilege()
}});
TestRun = AsanaStateObject.subclass("TestRun", {property_descs:{id:{type:String}, cluster:{type:String, indexed:!0}, status:{type:String}, failed_phase:{type:String}, exception:{type:Exception}, commit_id:{type:String}, commit_date_str:{type:String}, build_time_ms:{type:Timestamp}, build_date_str:{type:String}, release_revision:{type:String}, session_version:{type:Integer}, serialized_perf_event_summaries:{type:String, default_value:'{"S":"C","C":"Array","D":[]}'}, file_coverage_reports:{type:List}}},
    {succeeded:function() {
        return this.getV("status") === "OK"
    }, statusText:function() {
        var a = toValueAllowingUnknown(this.getX("failed_phase")), b = this.getV("status");
        return isKnown(a) && a !== null ? b + " (" + a + ")" : b
    }, _computeIsVisibleBy:function(a) {
        return a.hasAdminReadPrivilege()
    }});
DashboardSession = AppSession.subclass("DashboardSession", {property_descs:{selected_tab:{type:String}, expanded_test_run:{type:TestRun}}, create:attributedValueFunc(copyAndUpdate(AppSession.create.attribute_spec, {selected_tab:"", expanded_test_run:null}), function(a) {
    return env.session_store.createStateObject(DashboardSession, a)
})}, {_computeIsVisibleBy:function(a) {
    return a.hasAdminReadPrivilege()
}});
CoverageSession = AppSession.subclass("CoverageSession", {property_descs:{test_run_id:{type:String}}, create:attributedValueFunc(copyAndUpdate(AppSession.create.attribute_spec, {test_run_id:ATTRIBUTE_REQUIRED}), function(a) {
    return env.session_store.createStateObject(CoverageSession, a)
})}, {_computeIsVisibleBy:function(a) {
    return a.hasAdminReadPrivilege()
}});
TestRunJso = AsanaStateObject.subclass("TestRunJso", {property_descs:{name:{type:String}, contents:{type:String}}}, {_computeIsVisibleBy:function(a) {
    return a.hasAdminReadPrivilege()
}});
FetchTestRunJsoSession = AppSession.subclass("FetchTestRunJsoSession", {property_descs:{jso_name:{type:String}}}, {_computeIsVisibleBy:function(a) {
    return a.hasAdminReadPrivilege()
}});
__FILE__ = "luna/common/jsluna.js";
$L = function(a) {
    return a.getLvalue()
};
__FILE__ = "luna/browser/fragments.js";
Fragments = {createWatcher:function() {
    return Flags.enable_html5state && window.history.pushState ? Fragments._Html5Watcher.create() : Fragments._Html4Watcher.create()
}};
Fragments.AbstractWatcher = AsanaObject.subclass("Fragments.AbstractWatcher", {}, {_last_fragment:void 0, install:function(a, b, c) {
    var d = this;
    this._onUpdate = function(b) {
        if(b !== d._last_fragment) {
            d._last_fragment = b, processHandler(function() {
                c(a, b)
            })
        }
    };
    this._watchBrowser();
    b.watchScalar(function(a) {
        if(a !== d._last_fragment && (d._last_fragment !== void 0 || env.numPageLoads() > 1) && isKnown(a)) {
            d._setInBrowser(a), d._last_fragment = a
        }
    })
}, uninstall:ABSTRACT, _watchBrowser:ABSTRACT, _setInBrowser:ABSTRACT, _onUpdate:null, _pollHtml4Hash:function() {
    this._onUpdate(location.hash.substring(1))
}, _pollHtml4HashDuringPageLoad:function() {
    safeTimeout(method(this, "_pollHtml4Hash"), 0)
}});
Fragments._Html4Watcher = Fragments.AbstractWatcher.subclass("Fragments._Html4Watcher", {}, {_poll_interval:null, _watchBrowser:function() {
    this._pollHtml4HashDuringPageLoad();
    this._poll_interval = safeInterval(method(this, "_pollHtml4Hash"), 200)
}, uninstall:function() {
    clearInterval(this._poll_interval)
}, _setInBrowser:function(a) {
    window.location.hash = a
}});
Fragments._Html5Watcher = Fragments.AbstractWatcher.subclass("Fragments._Html5Watcher", {}, {_watchBrowser:function() {
    var a = this;
    location.hash.startsWith("#/0/") ? this._pollHtml4HashDuringPageLoad() : this._last_fragment = window.location.pathname;
    window.onpopstate = host.wrapInExceptionHandler("onpopstate", ExceptionHandler.ReentryStrategy.DELAY, function() {
        a._onUpdate(window.location.pathname)
    })
}, uninstall:function() {
    window.onpopstate = null
}, _setInBrowser:function(a) {
    window.history.pushState(null, null, a)
}});
__FILE__ = "luna/common/browser.js";
Browser = AsanaObject.subclass("Browser", {}, {_width_r:SET_IN_CONSTRUCTOR, _height_r:SET_IN_CONSTRUCTOR, _sync_error_message_r:SET_IN_CONSTRUCTOR, _next_sync_time_r:SET_IN_CONSTRUCTOR, _mouse_x_r:SET_IN_CONSTRUCTOR, _mouse_y_r:SET_IN_CONSTRUCTOR, _user_agent:SET_IN_CONSTRUCTOR, width:function() {
    return toValue(this._width_r)
}, height:function() {
    return toValue(this._height_r)
}, syncErrorMessage:function() {
    return toValue(this._sync_error_message_r)
}, nextSyncTime:function() {
    return toValue(this._next_sync_time_r)
}, mouseX:function() {
    return toValue(this._mouse_x_r)
}, mouseY:function() {
    return toValue(this._mouse_y_r)
}, userAgent:function() {
    return this._user_agent
}, isIos:Memoize.memoizeInThis("isIos", function() {
    return Flags.enable_mobile_force_native_ios || /iphone|ipad/gi.test(this._user_agent)
}), isIosWrapper:function() {
    return this.iosWrapperVersionOrNull() !== null
}, iosWrapperVersionOrNull:Memoize.memoizeInThis("iosWrapperVersionOrNull", function() {
    if(Flags.enable_mobile_force_native_ios) {
        return AsanaMobileWrapperLib.LATEST_WRAPPER_VERSION
    }
    return BrowserInfo.iosWrapperVersionOrNull(this._user_agent)
}), isAndroidWrapper:function() {
    return this.androidWrapperVersionOrNull() !== null
}, androidWrapperVersionOrNull:Memoize.memoizeInThis("androidWrapperVersionOrNull", function() {
    return BrowserInfo.androidWrapperVersionOrNull(this._user_agent)
}), isMobile:Memoize.memoizeInThis("isMobile", function() {
    return BrowserInfo.create(this._user_agent).isMobile()
}), isMobileNativeApp:function() {
    return this.isIosWrapper() || this.isAndroidWrapper()
}, constructor:attributedFunc({width_r:ATTRIBUTE_REQUIRED, height_r:ATTRIBUTE_REQUIRED, sync_error_message_r:ATTRIBUTE_REQUIRED, next_sync_time_r:ATTRIBUTE_REQUIRED, mouse_x_r:ATTRIBUTE_REQUIRED, mouse_y_r:ATTRIBUTE_REQUIRED, user_agent:ATTRIBUTE_REQUIRED}, function(a) {
    Browser.superproto.constructor.call(this);
    this._width_r = a.width_r;
    this._height_r = a.height_r;
    this._sync_error_message_r = a.sync_error_message_r;
    this._next_sync_time_r = a.next_sync_time_r;
    this._mouse_x_r = a.mouse_x_r;
    this._mouse_y_r = a.mouse_y_r;
    this._user_agent = a.user_agent
})});
__FILE__ = "luna/browser/client_app_runner.js";
ClientAppRunner = AsanaObject.subclass("ClientAppRunner", {instance:null, onPageLoad:function() {
    env.sync_watchdog.setEnabled(!0);
    Flags.diagnostics_only_poll_on_change && env.datastore_manager.setSyncPolicy(Datastore.Manager.Client.SYNC_POLICY_ON_CHANGE);
    var a = !1;
    globals.wrapper_globals !== void 0 && globals.wrapper_globals.suppress_syncs && (env.datastore_manager.setSyncPolicy(Datastore.Manager.Client.SYNC_POLICY_MANUAL), a = !0);
    server_globals.containsKey("getInitialDatastoreData") && host.profiler.timeFuncSummary("~ 4.0 populating datastores", function() {
        var a = server_globals.get("getInitialDatastoreData")(), b = server_globals.get("session_id");
        env.datastore_manager.initAndSetEnvSession(b, a)
    });
    ClientAppRunner.instance = ClientAppRunner.create(server_globals);
    var b = env.runningApp().debug_console;
    b !== null && env.datastore_manager.addSyncObserver(b);
    env.datastore_manager.start();
    a && env.datastore_manager.pretendSyncStarted();
    ElementDimensionsLvalue.recomputeAll();
    window.addEventListener("focus", function() {
        safeTimeout(function() {
            env.datastore_manager.reloadNowIfPending()
        }, 0)
    }, !1)
}}, {_running_app:SET_IN_CONSTRUCTOR, _fragment_watcher:SET_IN_CONSTRUCTOR, constructor:function(a) {
    ClientAppRunner.superproto.constructor.call(this);
    var b = this, c = a.get("session_id");
    log.info("Constructing ClientAppRunner");
    log.info("session_id = " + c);
    log.info("session_object unknown? " + isUnknown(env.world_store._objectOrUnknown(parseInt(c, 10))));
    var d = env.world_store.objectWithoutAC(parseInt(c, 10)), a = a.get("luna_app_name"), e = AppRegistry.get().createApp(a);
    this._running_app = RunningApp.create();
    env.setRunningApp(this._running_app);
    this._running_app.init(e, d, this._createBrowser(), !1, function() {
        var a = e.renderFragment, c = d.appSession();
        if(a) {
            b._fragment_watcher = Fragments.createWatcher(), b._fragment_watcher.install(c, $rval(function() {
                return a(c)
            }), e.onFragmentChange)
        }
        var h = e.renderTitle;
        if(h) {
            b._title_watcher = ClientAppRunner.TitleWatcher.create(), b._title_watcher.install($rval(function() {
                return h(c)
            }))
        }
    });
    e.onClientInit(this._running_app.browser(), d.appSession());
    Signal.signal(ClientAppRunner, "app_created")
}, _createBrowser:function() {
    var a = LocalLvalue.create(0, "browser width"), b = LocalLvalue.create(0, "browser height"), c = function() {
        var c = MochiKit.Style.getViewportDimensions();
        c.w && c.h && (a.requestSet(c.w), b.requestSet(c.h))
    };
    window.onresize = function() {
        host.wrapInExceptionHandler("window.onresize", ExceptionHandler.ReentryStrategy.DROP, function() {
            processHandler(c)
        })()
    };
    var d = MouseTracker.create();
    Flags.diagnostics_disable_mouse_tracking || Signal.connect(document, "onmousemove", function(a) {
        d.requestUpdate(a.mouse().page)
    });
    processHandler(function() {
        c()
    });
    return Browser.create({width_r:a, height_r:b, sync_error_message_r:env.datastore_manager.error_message_lvalue, next_sync_time_r:env.datastore_manager.next_sync_time_lvalue, mouse_x_r:d._x_lvalue, mouse_y_r:d._y_lvalue, user_agent:navigator.userAgent})
}, teardown:function() {
    if(this._fragment_watcher) {
        this._fragment_watcher.uninstall(), this._fragment_watcher = null
    }
    this._running_app.teardown()
}});
ClientAppRunner.TitleWatcher = AsanaObject.subclass("ClientAppRunner.TitleWatcher", {}, {install:function(a) {
    Rvalue.watchScalar(a, function(a) {
        document.title = a
    })
}, uninstall:function() {
}});
__FILE__ = "luna/common/offset_clock.js";
OffsetClock = Clock.subclass("OffsetClock", {}, {constructor:function(a) {
    OffsetClock.superproto.constructor.call(this);
    this._base_clock = a;
    this._offset_usec = 0
}, setOffsetMilliseconds:function(a) {
    this._offset_usec = a * 1E3
}, maybeCalibrateToNow:function(a, b) {
    var c = b || 0, d = a - this._base_clock.now();
    Math.abs(d) > c ? (log.debug("Calibrating clock to " + d + "ms"), this.setOffsetMilliseconds(d)) : log.debug("Not calibrating clock, offset of " + d + "ms is within tolerance of " + c + "ms")
}, nowInMicroseconds:function() {
    return this._base_clock.nowInMicroseconds() + this._offset_usec
}});
__FILE__ = "luna/browser/client_init.js";
Error.stackTraceLimit = 1E3;
Node.asana_modifications_visible = !0;
function luna_onload() {
    globals.server_globals.getOr("getInitialDatastoreData", null) === null && ufu("getInitialDatastoreData is undefined. The server probably crashed while handling initial_data");
    page_load_globals.times.onload_started = (new Date).getTime();
    Csrf.computeSignatureAndSadlyRunEventHandlers();
    if(Node.asana_modifications_visible) {
        VersionInfo.configureAndLogOnClient();
        ClientEnv.createAndInstall({config:globals.config, type_registry:BrowserTypeRegistry.create(server_globals.get("serialized_type_id_map")), global_id_provider:ClientGlobalIdProvider.create(server_globals.get("client_id_ranges")), clock:OffsetClock.create(SystemClock.create())});
        if(server_globals.containsKey("server_now")) {
            var a = env.clock.now() - page_load_globals.start_millis;
            env.clock.maybeCalibrateToNow(server_globals.get("server_now") + a, 2E4)
        }
        RvalueProfiler.maybeEnable();
        var b = server_globals.getOr("is_ui_test", !1), a = function() {
            host.profiler.stopSummary("~ 3 misc page work");
            host.profiler.timeFuncSummary("~ 4 creating page", function() {
                b && (env.datastore_manager.setSyncPolicy(Datastore.Manager.Client.SYNC_POLICY_ON_CHANGE), env.datastore_manager.setSyncDeadlineMilliseconds(0), ClientServerProfiler.configureFromServerGlobals());
                ClientAppRunner.onPageLoad();
                Flags.v8cgi_debugging_enabled && env.datastore_manager.setSyncDeadlineMilliseconds(0)
            })
        };
        b && Flags.use_webdriver ? UiTestingWebDriver.slave().runDeferringTimeouts(a) : a();
        page_load_globals.times.font_load_completed && host.profiler.inject("~ -1 loading font", !0, (page_load_globals.times.font_load_completed - page_load_globals.times.scripts_started) * 1E3);
        host.profiler.stopSummary(page_load_globals.perf_test_prefix + "page_load.1_client");
        if(env.isMobile()) {
            window.scrollTo(0, 1)
        }else {
            if(document.body !== null) {
                document.body.scrollTop = 0
            }
            safeInterval(function() {
                document.body.scrollTop = 0
            }, 1E3)
        }
        b || (env.frp.chronometer.schedulePollingInterval(), env.scheduleUndoWindowTimeout());
        if(b) {
            var a = page_load_globals.start_millis - server_globals.get("perf_test_start_millis"), c = env.clock.now() - page_load_globals.start_millis;
            ClientServerProfiler.pageload_accumulator.add(page_load_globals.perf_test_prefix + "page_load", {server_time:a, client_time:c, server_counters:server_globals.getOr("counters", null)});
            host.profiler.inject(page_load_globals.perf_test_prefix + "page_load.0_server", !0, a * 1E3);
            UiTestingWebDriver.slave().setReady();
            env.perf_event_logger.addContext(PerfEventLogger.APPLICATION_LOADING_ACTION_ID, {perf_test_run_id:ClientServerProfiler.getTestRunId()});
            env.perf_event_logger.addStageData(PerfEventLogger.APPLICATION_LOADING_ACTION_ID, "perf_test_on_load", {start_time_ms:page_load_globals.start_millis, end_time_ms:env.clock.now(), start_counters:{}, end_counters:env.counters.toRawObject()});
            processHandler(function() {
                env.perf_event_logger.sendToServer(PerfEventLogger.APPLICATION_LOADING_ACTION_ID)
            })
        }else {
            var d = host.profiler.rawReportAndReset();
            Flags.diagnostics_profile_syncs && (log.info("Server reports"), log.info(""), log.info("Login & Setup Page Load"), log.info(prettyProof(Profiler.formatRawReport(server_globals.get("server_profile_report")))), env.numPageLoads() === 1 && (server_globals.containsKey("prepare_initial_data_server_profile_report") && (log.info("Initial Data Prefetch"), log.info(prettyProof(Profiler.formatRawReport(server_globals.get("prepare_initial_data_server_profile_report"))))), server_globals.containsKey("initial_data_server_profile_report") &&
                (log.info("Initial Data Page Load"), log.info(prettyProof(Profiler.formatRawReport(server_globals.get("initial_data_server_profile_report")))))));
            log.info("Client report");
            log.info(prettyProof(Profiler.formatRawReport(d)));
            RvalueProfiler.active_profiler && log.info(prettyProof(RvalueProfiler.active_profiler.prettyReport()));
            page_load_globals.times.onload_completed = (new Date).getTime();
            profileWastedTime("ApplicationLoaded event", function() {
                processHandler(function() {
                    var a = windowPerformanceTiming();
                    if(page_load_globals.times.font_load_completed) {
                        a.fontLoadStart = page_load_globals.times.scripts_started, a.fontLoadStop = page_load_globals.times.font_load_completed
                    }
                    var b = {name:"ApplicationLoaded", num_page_loads:env.numPageLoads(), timing:a, client_times:page_load_globals.times, server_counters:Map.toRawObject(server_globals.getOr("counters", null)), client_profile_report:d}, c = server_globals.getOr("times", null);
                    if(c !== null) {
                        b.server_times = c
                    }
                    if(globals.wrapper_globals !== void 0) {
                        b.wrapper_load_type = globals.wrapper_globals.load_type || "unknown";
                        var h = globals.wrapper_globals.timing || {};
                        h.finished_loading = SystemClock.create().now();
                        b.wrapper_timing = h;
                        logEvent({name:"Mobile-" + b.wrapper_load_type + "Start"});
                        env.perf_event_logger.addContext(PerfEventLogger.APPLICATION_LOADING_ACTION_ID, {wrapper_timing:h, wrapper_load_type:globals.wrapper_globals.load_type || "unknown"})
                    }
                    logEvent({name:"ApplicationLoaded"});
                    var i = a.requestStart, j = i, b = function(a, b) {
                        log.info("    " + a + ": " + (b - i) + " (+" + (b - j) + ")");
                        j = b
                    };
                    log.info("Timing:");
                    log.info("    Prolog (unload/dns/connection): " + (i - a.navigationStart));
                    b("Page response started", a.responseStart);
                    b("Page response finished", a.responseEnd);
                    env.perf_event_logger.addStageData(PerfEventLogger.APPLICATION_LOADING_ACTION_ID, "connecting", {start_time_ms:i, end_time_ms:a.responseEnd, start_counters:{}, end_counters:{}});
                    b("Scripts started", page_load_globals.times.scripts_started);
                    b("Fonts loaded", page_load_globals.times.font_load_completed);
                    env.perf_event_logger.addStageData(PerfEventLogger.APPLICATION_LOADING_ACTION_ID, "loading_font", {start_time_ms:a.responseEnd, end_time_ms:page_load_globals.times.font_load_completed, start_counters:{}, end_counters:{}});
                    b("Bundle execution started", page_load_globals.times.code_load_started);
                    b("Bundle execution completed", page_load_globals.times.code_load_completed);
                    env.perf_event_logger.addStageData(PerfEventLogger.APPLICATION_LOADING_ACTION_ID, "parsing_code_bundle", {start_time_ms:page_load_globals.times.code_load_started, end_time_ms:page_load_globals.times.code_load_completed, start_counters:{}, end_counters:{}});
                    b("Server globals created", page_load_globals.times.server_globals_completed);
                    env.perf_event_logger.addStageData(PerfEventLogger.APPLICATION_LOADING_ACTION_ID, "parsing_server_globals", {start_time_ms:page_load_globals.times.code_load_completed, end_time_ms:page_load_globals.times.server_globals_completed, start_counters:{}, end_counters:{}});
                    b("Initial data execution started", page_load_globals.times.initial_data_started);
                    b("Initial data execution completed", page_load_globals.times.initial_data_completed);
                    env.perf_event_logger.addStageData(PerfEventLogger.APPLICATION_LOADING_ACTION_ID, "parsing_initial_data", {start_time_ms:page_load_globals.times.initial_data_started, end_time_ms:page_load_globals.times.initial_data_completed, start_counters:{}, end_counters:{}});
                    b("Onload started", page_load_globals.times.onload_started);
                    b("Onload completed", page_load_globals.times.onload_completed);
                    env.perf_event_logger.addStageData(PerfEventLogger.APPLICATION_LOADING_ACTION_ID, "on_load", {start_time_ms:page_load_globals.times.onload_started, end_time_ms:page_load_globals.times.onload_completed, profiler_report:d, start_counters:{}, end_counters:env.counters.toRawObject()});
                    env.perf_event_logger.sendToServer(PerfEventLogger.APPLICATION_LOADING_ACTION_ID);
                    if(c) {
                        log.info("Server times:"), i = j = c.page_started, b("Page started", c.page_started), b("Page completed", c.page_completed), b("Loading initial data started", c.loading_initial_data_started), b("Loading initial data completed", c.loading_initial_data_completed), b("Serving initial data started", c.serving_initial_data_started), b("Serving initial data completed", c.serving_initial_data_completed)
                    }
                })
            })
        }
    }
}
var loadClient = host.wrapInExceptionHandler("client_init.onLoad", ExceptionHandler.ReentryStrategy.DELAY, luna_onload);
window.onload = loadClient;

